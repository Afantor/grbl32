
F13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  080098dc  080098dc  000198dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009f2c  08009f2c  00019f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009f30  08009f30  00019f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08009f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000034f0  20000078  08009fa8  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20003568  08009fa8  00023568  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00031a85  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000077b6  00000000  00000000  00051b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000aeff  00000000  00000000  000592d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f58  00000000  00000000  000641d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001958  00000000  00000000  00065130  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d544  00000000  00000000  00066a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005737  00000000  00000000  00073fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00079703  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003418  00000000  00000000  00079780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080098c4 	.word	0x080098c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080098c4 	.word	0x080098c4

08000150 <__aeabi_llsr>:
 8000150:	40d0      	lsrs	r0, r2
 8000152:	1c0b      	adds	r3, r1, #0
 8000154:	40d1      	lsrs	r1, r2
 8000156:	469c      	mov	ip, r3
 8000158:	3a20      	subs	r2, #32
 800015a:	40d3      	lsrs	r3, r2
 800015c:	4318      	orrs	r0, r3
 800015e:	4252      	negs	r2, r2
 8000160:	4663      	mov	r3, ip
 8000162:	4093      	lsls	r3, r2
 8000164:	4318      	orrs	r0, r3
 8000166:	4770      	bx	lr

08000168 <__aeabi_drsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800016c:	e002      	b.n	8000174 <__adddf3>
 800016e:	bf00      	nop

08000170 <__aeabi_dsub>:
 8000170:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000174 <__adddf3>:
 8000174:	b530      	push	{r4, r5, lr}
 8000176:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800017a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017e:	ea94 0f05 	teq	r4, r5
 8000182:	bf08      	it	eq
 8000184:	ea90 0f02 	teqeq	r0, r2
 8000188:	bf1f      	itttt	ne
 800018a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000192:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000196:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800019a:	f000 80e2 	beq.w	8000362 <__adddf3+0x1ee>
 800019e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a6:	bfb8      	it	lt
 80001a8:	426d      	neglt	r5, r5
 80001aa:	dd0c      	ble.n	80001c6 <__adddf3+0x52>
 80001ac:	442c      	add	r4, r5
 80001ae:	ea80 0202 	eor.w	r2, r0, r2
 80001b2:	ea81 0303 	eor.w	r3, r1, r3
 80001b6:	ea82 0000 	eor.w	r0, r2, r0
 80001ba:	ea83 0101 	eor.w	r1, r3, r1
 80001be:	ea80 0202 	eor.w	r2, r0, r2
 80001c2:	ea81 0303 	eor.w	r3, r1, r3
 80001c6:	2d36      	cmp	r5, #54	; 0x36
 80001c8:	bf88      	it	hi
 80001ca:	bd30      	pophi	{r4, r5, pc}
 80001cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001dc:	d002      	beq.n	80001e4 <__adddf3+0x70>
 80001de:	4240      	negs	r0, r0
 80001e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x84>
 80001f2:	4252      	negs	r2, r2
 80001f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f8:	ea94 0f05 	teq	r4, r5
 80001fc:	f000 80a7 	beq.w	800034e <__adddf3+0x1da>
 8000200:	f1a4 0401 	sub.w	r4, r4, #1
 8000204:	f1d5 0e20 	rsbs	lr, r5, #32
 8000208:	db0d      	blt.n	8000226 <__adddf3+0xb2>
 800020a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020e:	fa22 f205 	lsr.w	r2, r2, r5
 8000212:	1880      	adds	r0, r0, r2
 8000214:	f141 0100 	adc.w	r1, r1, #0
 8000218:	fa03 f20e 	lsl.w	r2, r3, lr
 800021c:	1880      	adds	r0, r0, r2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	4159      	adcs	r1, r3
 8000224:	e00e      	b.n	8000244 <__adddf3+0xd0>
 8000226:	f1a5 0520 	sub.w	r5, r5, #32
 800022a:	f10e 0e20 	add.w	lr, lr, #32
 800022e:	2a01      	cmp	r2, #1
 8000230:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000234:	bf28      	it	cs
 8000236:	f04c 0c02 	orrcs.w	ip, ip, #2
 800023a:	fa43 f305 	asr.w	r3, r3, r5
 800023e:	18c0      	adds	r0, r0, r3
 8000240:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000244:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000248:	d507      	bpl.n	800025a <__adddf3+0xe6>
 800024a:	f04f 0e00 	mov.w	lr, #0
 800024e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000252:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000256:	eb6e 0101 	sbc.w	r1, lr, r1
 800025a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025e:	d31b      	bcc.n	8000298 <__adddf3+0x124>
 8000260:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000264:	d30c      	bcc.n	8000280 <__adddf3+0x10c>
 8000266:	0849      	lsrs	r1, r1, #1
 8000268:	ea5f 0030 	movs.w	r0, r0, rrx
 800026c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000270:	f104 0401 	add.w	r4, r4, #1
 8000274:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000278:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800027c:	f080 809a 	bcs.w	80003b4 <__adddf3+0x240>
 8000280:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	ea41 0105 	orr.w	r1, r1, r5
 8000296:	bd30      	pop	{r4, r5, pc}
 8000298:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800029c:	4140      	adcs	r0, r0
 800029e:	eb41 0101 	adc.w	r1, r1, r1
 80002a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002a6:	f1a4 0401 	sub.w	r4, r4, #1
 80002aa:	d1e9      	bne.n	8000280 <__adddf3+0x10c>
 80002ac:	f091 0f00 	teq	r1, #0
 80002b0:	bf04      	itt	eq
 80002b2:	4601      	moveq	r1, r0
 80002b4:	2000      	moveq	r0, #0
 80002b6:	fab1 f381 	clz	r3, r1
 80002ba:	bf08      	it	eq
 80002bc:	3320      	addeq	r3, #32
 80002be:	f1a3 030b 	sub.w	r3, r3, #11
 80002c2:	f1b3 0220 	subs.w	r2, r3, #32
 80002c6:	da0c      	bge.n	80002e2 <__adddf3+0x16e>
 80002c8:	320c      	adds	r2, #12
 80002ca:	dd08      	ble.n	80002de <__adddf3+0x16a>
 80002cc:	f102 0c14 	add.w	ip, r2, #20
 80002d0:	f1c2 020c 	rsb	r2, r2, #12
 80002d4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d8:	fa21 f102 	lsr.w	r1, r1, r2
 80002dc:	e00c      	b.n	80002f8 <__adddf3+0x184>
 80002de:	f102 0214 	add.w	r2, r2, #20
 80002e2:	bfd8      	it	le
 80002e4:	f1c2 0c20 	rsble	ip, r2, #32
 80002e8:	fa01 f102 	lsl.w	r1, r1, r2
 80002ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f0:	bfdc      	itt	le
 80002f2:	ea41 010c 	orrle.w	r1, r1, ip
 80002f6:	4090      	lslle	r0, r2
 80002f8:	1ae4      	subs	r4, r4, r3
 80002fa:	bfa2      	ittt	ge
 80002fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000300:	4329      	orrge	r1, r5
 8000302:	bd30      	popge	{r4, r5, pc}
 8000304:	ea6f 0404 	mvn.w	r4, r4
 8000308:	3c1f      	subs	r4, #31
 800030a:	da1c      	bge.n	8000346 <__adddf3+0x1d2>
 800030c:	340c      	adds	r4, #12
 800030e:	dc0e      	bgt.n	800032e <__adddf3+0x1ba>
 8000310:	f104 0414 	add.w	r4, r4, #20
 8000314:	f1c4 0220 	rsb	r2, r4, #32
 8000318:	fa20 f004 	lsr.w	r0, r0, r4
 800031c:	fa01 f302 	lsl.w	r3, r1, r2
 8000320:	ea40 0003 	orr.w	r0, r0, r3
 8000324:	fa21 f304 	lsr.w	r3, r1, r4
 8000328:	ea45 0103 	orr.w	r1, r5, r3
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	f1c4 040c 	rsb	r4, r4, #12
 8000332:	f1c4 0220 	rsb	r2, r4, #32
 8000336:	fa20 f002 	lsr.w	r0, r0, r2
 800033a:	fa01 f304 	lsl.w	r3, r1, r4
 800033e:	ea40 0003 	orr.w	r0, r0, r3
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	fa21 f004 	lsr.w	r0, r1, r4
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f094 0f00 	teq	r4, #0
 8000352:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000356:	bf06      	itte	eq
 8000358:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800035c:	3401      	addeq	r4, #1
 800035e:	3d01      	subne	r5, #1
 8000360:	e74e      	b.n	8000200 <__adddf3+0x8c>
 8000362:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000366:	bf18      	it	ne
 8000368:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800036c:	d029      	beq.n	80003c2 <__adddf3+0x24e>
 800036e:	ea94 0f05 	teq	r4, r5
 8000372:	bf08      	it	eq
 8000374:	ea90 0f02 	teqeq	r0, r2
 8000378:	d005      	beq.n	8000386 <__adddf3+0x212>
 800037a:	ea54 0c00 	orrs.w	ip, r4, r0
 800037e:	bf04      	itt	eq
 8000380:	4619      	moveq	r1, r3
 8000382:	4610      	moveq	r0, r2
 8000384:	bd30      	pop	{r4, r5, pc}
 8000386:	ea91 0f03 	teq	r1, r3
 800038a:	bf1e      	ittt	ne
 800038c:	2100      	movne	r1, #0
 800038e:	2000      	movne	r0, #0
 8000390:	bd30      	popne	{r4, r5, pc}
 8000392:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000396:	d105      	bne.n	80003a4 <__adddf3+0x230>
 8000398:	0040      	lsls	r0, r0, #1
 800039a:	4149      	adcs	r1, r1
 800039c:	bf28      	it	cs
 800039e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003a2:	bd30      	pop	{r4, r5, pc}
 80003a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a8:	bf3c      	itt	cc
 80003aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ae:	bd30      	popcc	{r4, r5, pc}
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003bc:	f04f 0000 	mov.w	r0, #0
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf1a      	itte	ne
 80003c8:	4619      	movne	r1, r3
 80003ca:	4610      	movne	r0, r2
 80003cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d0:	bf1c      	itt	ne
 80003d2:	460b      	movne	r3, r1
 80003d4:	4602      	movne	r2, r0
 80003d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003da:	bf06      	itte	eq
 80003dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e0:	ea91 0f03 	teqeq	r1, r3
 80003e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	bf00      	nop

080003ec <__aeabi_ui2d>:
 80003ec:	f090 0f00 	teq	r0, #0
 80003f0:	bf04      	itt	eq
 80003f2:	2100      	moveq	r1, #0
 80003f4:	4770      	bxeq	lr
 80003f6:	b530      	push	{r4, r5, lr}
 80003f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000400:	f04f 0500 	mov.w	r5, #0
 8000404:	f04f 0100 	mov.w	r1, #0
 8000408:	e750      	b.n	80002ac <__adddf3+0x138>
 800040a:	bf00      	nop

0800040c <__aeabi_i2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000424:	bf48      	it	mi
 8000426:	4240      	negmi	r0, r0
 8000428:	f04f 0100 	mov.w	r1, #0
 800042c:	e73e      	b.n	80002ac <__adddf3+0x138>
 800042e:	bf00      	nop

08000430 <__aeabi_f2d>:
 8000430:	0042      	lsls	r2, r0, #1
 8000432:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000436:	ea4f 0131 	mov.w	r1, r1, rrx
 800043a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043e:	bf1f      	itttt	ne
 8000440:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000444:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000448:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800044c:	4770      	bxne	lr
 800044e:	f092 0f00 	teq	r2, #0
 8000452:	bf14      	ite	ne
 8000454:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e720      	b.n	80002ac <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aedc 	beq.w	800025a <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6c1      	b.n	800025a <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_InitTick+0x3c>)
{
 80011cc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ce:	7818      	ldrb	r0, [r3, #0]
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_InitTick+0x40>)
 80011da:	6810      	ldr	r0, [r2, #0]
 80011dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80011e0:	f000 f89e 	bl	8001320 <HAL_SYSTICK_Config>
 80011e4:	4604      	mov	r4, r0
 80011e6:	b958      	cbnz	r0, 8001200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e8:	2d0f      	cmp	r5, #15
 80011ea:	d809      	bhi.n	8001200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	4602      	mov	r2, r0
 80011ee:	4629      	mov	r1, r5
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f854 	bl	80012a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <HAL_InitTick+0x44>)
 80011fa:	4620      	mov	r0, r4
 80011fc:	601d      	str	r5, [r3, #0]
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001200:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001202:	bd38      	pop	{r3, r4, r5, pc}
 8001204:	20000000 	.word	0x20000000
 8001208:	20000008 	.word	0x20000008
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x20>)
{
 8001212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001216:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121e:	f000 f82d 	bl	800127c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ffd0 	bl	80011c8 <HAL_InitTick>
  HAL_MspInit();
 8001228:	f001 f974 	bl	8002514 <HAL_MspInit>
}
 800122c:	2000      	movs	r0, #0
 800122e:	bd08      	pop	{r3, pc}
 8001230:	40022000 	.word	0x40022000

08001234 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001234:	4a03      	ldr	r2, [pc, #12]	; (8001244 <HAL_IncTick+0x10>)
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_IncTick+0x14>)
 8001238:	6811      	ldr	r1, [r2, #0]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	440b      	add	r3, r1
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20002db0 	.word	0x20002db0
 8001248:	20000000 	.word	0x20000000

0800124c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800124c:	4b01      	ldr	r3, [pc, #4]	; (8001254 <HAL_GetTick+0x8>)
 800124e:	6818      	ldr	r0, [r3, #0]
}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20002db0 	.word	0x20002db0

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff fff6 	bl	800124c <HAL_GetTick>
 8001260:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001264:	bf1e      	ittt	ne
 8001266:	4b04      	ldrne	r3, [pc, #16]	; (8001278 <HAL_Delay+0x20>)
 8001268:	781b      	ldrbne	r3, [r3, #0]
 800126a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126c:	f7ff ffee 	bl	800124c <HAL_GetTick>
 8001270:	1b40      	subs	r0, r0, r5
 8001272:	4284      	cmp	r4, r0
 8001274:	d8fa      	bhi.n	800126c <HAL_Delay+0x14>
  {
  }
}
 8001276:	bd38      	pop	{r3, r4, r5, pc}
 8001278:	20000000 	.word	0x20000000

0800127c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800127e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001282:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800128a:	041b      	lsls	r3, r3, #16
 800128c:	0c1b      	lsrs	r3, r3, #16
 800128e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001296:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001298:	60d3      	str	r3, [r2, #12]
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b530      	push	{r4, r5, lr}
 80012a4:	68dc      	ldr	r4, [r3, #12]
 80012a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	2b04      	cmp	r3, #4
 80012b2:	bf28      	it	cs
 80012b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012bc:	bf98      	it	ls
 80012be:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	fa05 f303 	lsl.w	r3, r5, r3
 80012c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c8:	bf88      	it	hi
 80012ca:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4019      	ands	r1, r3
 80012ce:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	fa05 f404 	lsl.w	r4, r5, r4
 80012d4:	3c01      	subs	r4, #1
 80012d6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80012d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012da:	ea42 0201 	orr.w	r2, r2, r1
 80012de:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	bfaf      	iteee	ge
 80012e4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	4b06      	ldrlt	r3, [pc, #24]	; (8001304 <HAL_NVIC_SetPriority+0x64>)
 80012ea:	f000 000f 	andlt.w	r0, r0, #15
 80012ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	bfa5      	ittet	ge
 80012f2:	b2d2      	uxtbge	r2, r2
 80012f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80012fe:	bd30      	pop	{r4, r5, pc}
 8001300:	e000ed00 	.word	0xe000ed00
 8001304:	e000ed14 	.word	0xe000ed14

08001308 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001308:	2301      	movs	r3, #1
 800130a:	0942      	lsrs	r2, r0, #5
 800130c:	f000 001f 	and.w	r0, r0, #31
 8001310:	fa03 f000 	lsl.w	r0, r3, r0
 8001314:	4b01      	ldr	r3, [pc, #4]	; (800131c <HAL_NVIC_EnableIRQ+0x14>)
 8001316:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100

08001320 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	3801      	subs	r0, #1
 8001322:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001326:	d20a      	bcs.n	800133e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800134c:	2201      	movs	r2, #1
 800134e:	0943      	lsrs	r3, r0, #5
 8001350:	f000 001f 	and.w	r0, r0, #31
 8001354:	fa02 f000 	lsl.w	r0, r2, r0
 8001358:	4a02      	ldr	r2, [pc, #8]	; (8001364 <HAL_NVIC_ClearPendingIRQ+0x18>)
 800135a:	3360      	adds	r3, #96	; 0x60
 800135c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001368:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <FLASH_SetErrorCode+0x48>)
 800136a:	68d3      	ldr	r3, [r2, #12]
 800136c:	f013 0310 	ands.w	r3, r3, #16
 8001370:	d005      	beq.n	800137e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001372:	4910      	ldr	r1, [pc, #64]	; (80013b4 <FLASH_SetErrorCode+0x4c>)
 8001374:	69cb      	ldr	r3, [r1, #28]
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800137c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800137e:	68d2      	ldr	r2, [r2, #12]
 8001380:	0750      	lsls	r0, r2, #29
 8001382:	d506      	bpl.n	8001392 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001384:	490b      	ldr	r1, [pc, #44]	; (80013b4 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001386:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800138a:	69ca      	ldr	r2, [r1, #28]
 800138c:	f042 0201 	orr.w	r2, r2, #1
 8001390:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <FLASH_SetErrorCode+0x48>)
 8001394:	69d1      	ldr	r1, [r2, #28]
 8001396:	07c9      	lsls	r1, r1, #31
 8001398:	d508      	bpl.n	80013ac <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <FLASH_SetErrorCode+0x4c>)
 800139c:	69c1      	ldr	r1, [r0, #28]
 800139e:	f041 0104 	orr.w	r1, r1, #4
 80013a2:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80013a4:	69d1      	ldr	r1, [r2, #28]
 80013a6:	f021 0101 	bic.w	r1, r1, #1
 80013aa:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80013ac:	60d3      	str	r3, [r2, #12]
 80013ae:	4770      	bx	lr
 80013b0:	40022000 	.word	0x40022000
 80013b4:	20002db8 	.word	0x20002db8

080013b8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_FLASH_Unlock+0x1c>)
 80013ba:	6918      	ldr	r0, [r3, #16]
 80013bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80013c0:	d007      	beq.n	80013d2 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <HAL_FLASH_Unlock+0x20>)
 80013c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80013c6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80013ca:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013cc:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80013ce:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 80013d2:	4770      	bx	lr
 80013d4:	40022000 	.word	0x40022000
 80013d8:	45670123 	.word	0x45670123

080013dc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_FLASH_Lock+0x10>)
}
 80013de:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80013e0:	6913      	ldr	r3, [r2, #16]
 80013e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e6:	6113      	str	r3, [r2, #16]
}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40022000 	.word	0x40022000

080013f0 <FLASH_WaitForLastOperation>:
{
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f2:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff ff2a 	bl	800124c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013f8:	4c11      	ldr	r4, [pc, #68]	; (8001440 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 80013fa:	4607      	mov	r7, r0
 80013fc:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013fe:	68e3      	ldr	r3, [r4, #12]
 8001400:	07d8      	lsls	r0, r3, #31
 8001402:	d412      	bmi.n	800142a <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001404:	68e3      	ldr	r3, [r4, #12]
 8001406:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001408:	bf44      	itt	mi
 800140a:	2320      	movmi	r3, #32
 800140c:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800140e:	68eb      	ldr	r3, [r5, #12]
 8001410:	06da      	lsls	r2, r3, #27
 8001412:	d406      	bmi.n	8001422 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001414:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001416:	07db      	lsls	r3, r3, #31
 8001418:	d403      	bmi.n	8001422 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800141a:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800141c:	f010 0004 	ands.w	r0, r0, #4
 8001420:	d002      	beq.n	8001428 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8001422:	f7ff ffa1 	bl	8001368 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001426:	2001      	movs	r0, #1
}
 8001428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800142a:	1c73      	adds	r3, r6, #1
 800142c:	d0e7      	beq.n	80013fe <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800142e:	b90e      	cbnz	r6, 8001434 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8001430:	2003      	movs	r0, #3
 8001432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001434:	f7ff ff0a 	bl	800124c <HAL_GetTick>
 8001438:	1bc0      	subs	r0, r0, r7
 800143a:	4286      	cmp	r6, r0
 800143c:	d2df      	bcs.n	80013fe <FLASH_WaitForLastOperation+0xe>
 800143e:	e7f7      	b.n	8001430 <FLASH_WaitForLastOperation+0x40>
 8001440:	40022000 	.word	0x40022000

08001444 <HAL_FLASH_Program>:
{
 8001444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8001448:	4c1f      	ldr	r4, [pc, #124]	; (80014c8 <HAL_FLASH_Program+0x84>)
{
 800144a:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 800144c:	7e23      	ldrb	r3, [r4, #24]
{
 800144e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8001450:	2b01      	cmp	r3, #1
{
 8001452:	460f      	mov	r7, r1
 8001454:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8001456:	d033      	beq.n	80014c0 <HAL_FLASH_Program+0x7c>
 8001458:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800145a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800145e:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001460:	f7ff ffc6 	bl	80013f0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001464:	bb40      	cbnz	r0, 80014b8 <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001466:	2d01      	cmp	r5, #1
 8001468:	d003      	beq.n	8001472 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 800146a:	2d02      	cmp	r5, #2
 800146c:	bf0c      	ite	eq
 800146e:	2502      	moveq	r5, #2
 8001470:	2504      	movne	r5, #4
 8001472:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001474:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001476:	f8df b054 	ldr.w	fp, [pc, #84]	; 80014cc <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800147a:	0132      	lsls	r2, r6, #4
 800147c:	4640      	mov	r0, r8
 800147e:	4649      	mov	r1, r9
 8001480:	f7fe fe66 	bl	8000150 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001484:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001488:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800148c:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 8001496:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800149a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800149e:	f7ff ffa7 	bl	80013f0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80014a2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 80014ae:	b918      	cbnz	r0, 80014b8 <HAL_FLASH_Program+0x74>
 80014b0:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 80014b2:	b2f3      	uxtb	r3, r6
 80014b4:	429d      	cmp	r5, r3
 80014b6:	d8e0      	bhi.n	800147a <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 80014b8:	2300      	movs	r3, #0
 80014ba:	7623      	strb	r3, [r4, #24]
  return status;
 80014bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80014c0:	2002      	movs	r0, #2
}
 80014c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014c6:	bf00      	nop
 80014c8:	20002db8 	.word	0x20002db8
 80014cc:	40022000 	.word	0x40022000

080014d0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014d0:	2200      	movs	r2, #0
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <FLASH_PageErase+0x1c>)
 80014d4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <FLASH_PageErase+0x20>)
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	f042 0202 	orr.w	r2, r2, #2
 80014de:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80014e0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	4770      	bx	lr
 80014ec:	20002db8 	.word	0x20002db8
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80014f8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	4616      	mov	r6, r2
 80014fc:	4b65      	ldr	r3, [pc, #404]	; (8001694 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014fe:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80016a4 <HAL_GPIO_Init+0x1b0>
 8001502:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80016a8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001506:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800150c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001510:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001514:	45a0      	cmp	r8, r4
 8001516:	d17f      	bne.n	8001618 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001518:	684d      	ldr	r5, [r1, #4]
 800151a:	2d12      	cmp	r5, #18
 800151c:	f000 80af 	beq.w	800167e <HAL_GPIO_Init+0x18a>
 8001520:	f200 8088 	bhi.w	8001634 <HAL_GPIO_Init+0x140>
 8001524:	2d02      	cmp	r5, #2
 8001526:	f000 80a7 	beq.w	8001678 <HAL_GPIO_Init+0x184>
 800152a:	d87c      	bhi.n	8001626 <HAL_GPIO_Init+0x132>
 800152c:	2d00      	cmp	r5, #0
 800152e:	f000 808e 	beq.w	800164e <HAL_GPIO_Init+0x15a>
 8001532:	2d01      	cmp	r5, #1
 8001534:	f000 809e 	beq.w	8001674 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001538:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800153c:	2cff      	cmp	r4, #255	; 0xff
 800153e:	bf93      	iteet	ls
 8001540:	4682      	movls	sl, r0
 8001542:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001546:	3d08      	subhi	r5, #8
 8001548:	f8d0 b000 	ldrls.w	fp, [r0]
 800154c:	bf92      	itee	ls
 800154e:	00b5      	lslls	r5, r6, #2
 8001550:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001554:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001556:	fa09 f805 	lsl.w	r8, r9, r5
 800155a:	ea2b 0808 	bic.w	r8, fp, r8
 800155e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001562:	bf88      	it	hi
 8001564:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001568:	ea48 0505 	orr.w	r5, r8, r5
 800156c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001570:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001574:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001578:	d04e      	beq.n	8001618 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800157a:	4d47      	ldr	r5, [pc, #284]	; (8001698 <HAL_GPIO_Init+0x1a4>)
 800157c:	4f46      	ldr	r7, [pc, #280]	; (8001698 <HAL_GPIO_Init+0x1a4>)
 800157e:	69ad      	ldr	r5, [r5, #24]
 8001580:	f026 0803 	bic.w	r8, r6, #3
 8001584:	f045 0501 	orr.w	r5, r5, #1
 8001588:	61bd      	str	r5, [r7, #24]
 800158a:	69bd      	ldr	r5, [r7, #24]
 800158c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001590:	f005 0501 	and.w	r5, r5, #1
 8001594:	9501      	str	r5, [sp, #4]
 8001596:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800159a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800159e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80015a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80015a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80015a8:	fa09 f90b 	lsl.w	r9, r9, fp
 80015ac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015b0:	4d3a      	ldr	r5, [pc, #232]	; (800169c <HAL_GPIO_Init+0x1a8>)
 80015b2:	42a8      	cmp	r0, r5
 80015b4:	d068      	beq.n	8001688 <HAL_GPIO_Init+0x194>
 80015b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015ba:	42a8      	cmp	r0, r5
 80015bc:	d066      	beq.n	800168c <HAL_GPIO_Init+0x198>
 80015be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015c2:	42a8      	cmp	r0, r5
 80015c4:	d064      	beq.n	8001690 <HAL_GPIO_Init+0x19c>
 80015c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015ca:	42a8      	cmp	r0, r5
 80015cc:	bf0c      	ite	eq
 80015ce:	2503      	moveq	r5, #3
 80015d0:	2504      	movne	r5, #4
 80015d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80015d6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80015da:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015de:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015e4:	bf14      	ite	ne
 80015e6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015e8:	43a5      	biceq	r5, r4
 80015ea:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015ec:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80015f2:	bf14      	ite	ne
 80015f4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f6:	43a5      	biceq	r5, r4
 80015f8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015fa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015fc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001600:	bf14      	ite	ne
 8001602:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001604:	43a5      	biceq	r5, r4
 8001606:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001608:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800160a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800160e:	bf14      	ite	ne
 8001610:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001612:	ea25 0404 	biceq.w	r4, r5, r4
 8001616:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001618:	3601      	adds	r6, #1
 800161a:	2e10      	cmp	r6, #16
 800161c:	f47f af73 	bne.w	8001506 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001620:	b003      	add	sp, #12
 8001622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001626:	2d03      	cmp	r5, #3
 8001628:	d022      	beq.n	8001670 <HAL_GPIO_Init+0x17c>
 800162a:	2d11      	cmp	r5, #17
 800162c:	d184      	bne.n	8001538 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800162e:	68ca      	ldr	r2, [r1, #12]
 8001630:	3204      	adds	r2, #4
          break;
 8001632:	e781      	b.n	8001538 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001634:	4f1a      	ldr	r7, [pc, #104]	; (80016a0 <HAL_GPIO_Init+0x1ac>)
 8001636:	42bd      	cmp	r5, r7
 8001638:	d009      	beq.n	800164e <HAL_GPIO_Init+0x15a>
 800163a:	d812      	bhi.n	8001662 <HAL_GPIO_Init+0x16e>
 800163c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80016ac <HAL_GPIO_Init+0x1b8>
 8001640:	454d      	cmp	r5, r9
 8001642:	d004      	beq.n	800164e <HAL_GPIO_Init+0x15a>
 8001644:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001648:	454d      	cmp	r5, r9
 800164a:	f47f af75 	bne.w	8001538 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800164e:	688a      	ldr	r2, [r1, #8]
 8001650:	b1c2      	cbz	r2, 8001684 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001652:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001654:	bf0c      	ite	eq
 8001656:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800165a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800165e:	2208      	movs	r2, #8
 8001660:	e76a      	b.n	8001538 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001662:	4575      	cmp	r5, lr
 8001664:	d0f3      	beq.n	800164e <HAL_GPIO_Init+0x15a>
 8001666:	4565      	cmp	r5, ip
 8001668:	d0f1      	beq.n	800164e <HAL_GPIO_Init+0x15a>
 800166a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80016b0 <HAL_GPIO_Init+0x1bc>
 800166e:	e7eb      	b.n	8001648 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001670:	2200      	movs	r2, #0
 8001672:	e761      	b.n	8001538 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001674:	68ca      	ldr	r2, [r1, #12]
          break;
 8001676:	e75f      	b.n	8001538 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001678:	68ca      	ldr	r2, [r1, #12]
 800167a:	3208      	adds	r2, #8
          break;
 800167c:	e75c      	b.n	8001538 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800167e:	68ca      	ldr	r2, [r1, #12]
 8001680:	320c      	adds	r2, #12
          break;
 8001682:	e759      	b.n	8001538 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001684:	2204      	movs	r2, #4
 8001686:	e757      	b.n	8001538 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001688:	2500      	movs	r5, #0
 800168a:	e7a2      	b.n	80015d2 <HAL_GPIO_Init+0xde>
 800168c:	2501      	movs	r5, #1
 800168e:	e7a0      	b.n	80015d2 <HAL_GPIO_Init+0xde>
 8001690:	2502      	movs	r5, #2
 8001692:	e79e      	b.n	80015d2 <HAL_GPIO_Init+0xde>
 8001694:	40010400 	.word	0x40010400
 8001698:	40021000 	.word	0x40021000
 800169c:	40010800 	.word	0x40010800
 80016a0:	10210000 	.word	0x10210000
 80016a4:	10310000 	.word	0x10310000
 80016a8:	10320000 	.word	0x10320000
 80016ac:	10110000 	.word	0x10110000
 80016b0:	10220000 	.word	0x10220000

080016b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b4:	b10a      	cbz	r2, 80016ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016b6:	6101      	str	r1, [r0, #16]
 80016b8:	4770      	bx	lr
 80016ba:	0409      	lsls	r1, r1, #16
 80016bc:	e7fb      	b.n	80016b6 <HAL_GPIO_WritePin+0x2>

080016be <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016be:	4770      	bx	lr

080016c0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80016c0:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80016c4:	6959      	ldr	r1, [r3, #20]
 80016c6:	4201      	tst	r1, r0
 80016c8:	d002      	beq.n	80016d0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ca:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016cc:	f7ff fff7 	bl	80016be <HAL_GPIO_EXTI_Callback>
 80016d0:	bd08      	pop	{r3, pc}
 80016d2:	bf00      	nop
 80016d4:	40010400 	.word	0x40010400

080016d8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016d8:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80016da:	4604      	mov	r4, r0
 80016dc:	b908      	cbnz	r0, 80016e2 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80016de:	2001      	movs	r0, #1
 80016e0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80016e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016ea:	b91b      	cbnz	r3, 80016f4 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016f0:	f000 fe00 	bl	80022f4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016f4:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016f6:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80016f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001704:	f000 fae2 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001708:	6863      	ldr	r3, [r4, #4]
 800170a:	4a2f      	ldr	r2, [pc, #188]	; (80017c8 <HAL_I2C_Init+0xf0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d830      	bhi.n	8001772 <HAL_I2C_Init+0x9a>
 8001710:	4a2e      	ldr	r2, [pc, #184]	; (80017cc <HAL_I2C_Init+0xf4>)
 8001712:	4290      	cmp	r0, r2
 8001714:	d9e3      	bls.n	80016de <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001716:	4a2e      	ldr	r2, [pc, #184]	; (80017d0 <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001718:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800171a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800171e:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001720:	3201      	adds	r2, #1
 8001722:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001724:	4a28      	ldr	r2, [pc, #160]	; (80017c8 <HAL_I2C_Init+0xf0>)
 8001726:	3801      	subs	r0, #1
 8001728:	4293      	cmp	r3, r2
 800172a:	d832      	bhi.n	8001792 <HAL_I2C_Init+0xba>
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001732:	1c43      	adds	r3, r0, #1
 8001734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001738:	2b04      	cmp	r3, #4
 800173a:	bf38      	it	cc
 800173c:	2304      	movcc	r3, #4
 800173e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001740:	6a22      	ldr	r2, [r4, #32]
 8001742:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001744:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800174a:	68e2      	ldr	r2, [r4, #12]
 800174c:	6923      	ldr	r3, [r4, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001752:	69a2      	ldr	r2, [r4, #24]
 8001754:	6963      	ldr	r3, [r4, #20]
 8001756:	4313      	orrs	r3, r2
 8001758:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800175a:	680b      	ldr	r3, [r1, #0]
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001762:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001764:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001766:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800176a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800176c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001770:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001772:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <HAL_I2C_Init+0xfc>)
 8001774:	4290      	cmp	r0, r2
 8001776:	d9b2      	bls.n	80016de <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001778:	4d15      	ldr	r5, [pc, #84]	; (80017d0 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800177a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800177e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001782:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001784:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001786:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001788:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800178c:	fbb2 f2f5 	udiv	r2, r2, r5
 8001790:	e7c6      	b.n	8001720 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001792:	68a2      	ldr	r2, [r4, #8]
 8001794:	b952      	cbnz	r2, 80017ac <HAL_I2C_Init+0xd4>
 8001796:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800179a:	fbb0 f0f3 	udiv	r0, r0, r3
 800179e:	1c43      	adds	r3, r0, #1
 80017a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a4:	b16b      	cbz	r3, 80017c2 <HAL_I2C_Init+0xea>
 80017a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017aa:	e7c8      	b.n	800173e <HAL_I2C_Init+0x66>
 80017ac:	2219      	movs	r2, #25
 80017ae:	4353      	muls	r3, r2
 80017b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80017b4:	1c43      	adds	r3, r0, #1
 80017b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ba:	b113      	cbz	r3, 80017c2 <HAL_I2C_Init+0xea>
 80017bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017c0:	e7bd      	b.n	800173e <HAL_I2C_Init+0x66>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e7bb      	b.n	800173e <HAL_I2C_Init+0x66>
 80017c6:	bf00      	nop
 80017c8:	000186a0 	.word	0x000186a0
 80017cc:	001e847f 	.word	0x001e847f
 80017d0:	000f4240 	.word	0x000f4240
 80017d4:	003d08ff 	.word	0x003d08ff

080017d8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d8:	6803      	ldr	r3, [r0, #0]
{
 80017da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	07db      	lsls	r3, r3, #31
{
 80017e0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e2:	d410      	bmi.n	8001806 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	079f      	lsls	r7, r3, #30
 80017e8:	d45e      	bmi.n	80018a8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ea:	682b      	ldr	r3, [r5, #0]
 80017ec:	0719      	lsls	r1, r3, #28
 80017ee:	f100 8095 	bmi.w	800191c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f2:	682b      	ldr	r3, [r5, #0]
 80017f4:	075a      	lsls	r2, r3, #29
 80017f6:	f100 80bf 	bmi.w	8001978 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fa:	69ea      	ldr	r2, [r5, #28]
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	f040 812d 	bne.w	8001a5c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001802:	2000      	movs	r0, #0
 8001804:	e014      	b.n	8001830 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001806:	4c90      	ldr	r4, [pc, #576]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001808:	6863      	ldr	r3, [r4, #4]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b04      	cmp	r3, #4
 8001810:	d007      	beq.n	8001822 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001812:	6863      	ldr	r3, [r4, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b08      	cmp	r3, #8
 800181a:	d10c      	bne.n	8001836 <HAL_RCC_OscConfig+0x5e>
 800181c:	6863      	ldr	r3, [r4, #4]
 800181e:	03de      	lsls	r6, r3, #15
 8001820:	d509      	bpl.n	8001836 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	039c      	lsls	r4, r3, #14
 8001826:	d5dd      	bpl.n	80017e4 <HAL_RCC_OscConfig+0xc>
 8001828:	686b      	ldr	r3, [r5, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1da      	bne.n	80017e4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800182e:	2001      	movs	r0, #1
}
 8001830:	b002      	add	sp, #8
 8001832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001836:	686b      	ldr	r3, [r5, #4]
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	d110      	bne.n	8001860 <HAL_RCC_OscConfig+0x88>
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001844:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001846:	f7ff fd01 	bl	800124c <HAL_GetTick>
 800184a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	0398      	lsls	r0, r3, #14
 8001850:	d4c8      	bmi.n	80017e4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001852:	f7ff fcfb 	bl	800124c <HAL_GetTick>
 8001856:	1b80      	subs	r0, r0, r6
 8001858:	2864      	cmp	r0, #100	; 0x64
 800185a:	d9f7      	bls.n	800184c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800185c:	2003      	movs	r0, #3
 800185e:	e7e7      	b.n	8001830 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001860:	b99b      	cbnz	r3, 800188a <HAL_RCC_OscConfig+0xb2>
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001868:	6023      	str	r3, [r4, #0]
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001872:	f7ff fceb 	bl	800124c <HAL_GetTick>
 8001876:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	0399      	lsls	r1, r3, #14
 800187c:	d5b2      	bpl.n	80017e4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187e:	f7ff fce5 	bl	800124c <HAL_GetTick>
 8001882:	1b80      	subs	r0, r0, r6
 8001884:	2864      	cmp	r0, #100	; 0x64
 8001886:	d9f7      	bls.n	8001878 <HAL_RCC_OscConfig+0xa0>
 8001888:	e7e8      	b.n	800185c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	d103      	bne.n	800189a <HAL_RCC_OscConfig+0xc2>
 8001892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001896:	6023      	str	r3, [r4, #0]
 8001898:	e7d1      	b.n	800183e <HAL_RCC_OscConfig+0x66>
 800189a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189e:	6023      	str	r3, [r4, #0]
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a6:	e7cd      	b.n	8001844 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018a8:	4c67      	ldr	r4, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80018aa:	6863      	ldr	r3, [r4, #4]
 80018ac:	f013 0f0c 	tst.w	r3, #12
 80018b0:	d007      	beq.n	80018c2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018b2:	6863      	ldr	r3, [r4, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d110      	bne.n	80018de <HAL_RCC_OscConfig+0x106>
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	03da      	lsls	r2, r3, #15
 80018c0:	d40d      	bmi.n	80018de <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	079b      	lsls	r3, r3, #30
 80018c6:	d502      	bpl.n	80018ce <HAL_RCC_OscConfig+0xf6>
 80018c8:	692b      	ldr	r3, [r5, #16]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d1af      	bne.n	800182e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	696a      	ldr	r2, [r5, #20]
 80018d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018da:	6023      	str	r3, [r4, #0]
 80018dc:	e785      	b.n	80017ea <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018de:	692a      	ldr	r2, [r5, #16]
 80018e0:	4b5a      	ldr	r3, [pc, #360]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80018e2:	b16a      	cbz	r2, 8001900 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018e8:	f7ff fcb0 	bl	800124c <HAL_GetTick>
 80018ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	079f      	lsls	r7, r3, #30
 80018f2:	d4ec      	bmi.n	80018ce <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fcaa 	bl	800124c <HAL_GetTick>
 80018f8:	1b80      	subs	r0, r0, r6
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9f7      	bls.n	80018ee <HAL_RCC_OscConfig+0x116>
 80018fe:	e7ad      	b.n	800185c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001900:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001902:	f7ff fca3 	bl	800124c <HAL_GetTick>
 8001906:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	0798      	lsls	r0, r3, #30
 800190c:	f57f af6d 	bpl.w	80017ea <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001910:	f7ff fc9c 	bl	800124c <HAL_GetTick>
 8001914:	1b80      	subs	r0, r0, r6
 8001916:	2802      	cmp	r0, #2
 8001918:	d9f6      	bls.n	8001908 <HAL_RCC_OscConfig+0x130>
 800191a:	e79f      	b.n	800185c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800191c:	69aa      	ldr	r2, [r5, #24]
 800191e:	4c4a      	ldr	r4, [pc, #296]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001920:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <HAL_RCC_OscConfig+0x278>)
 8001922:	b1da      	cbz	r2, 800195c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001928:	f7ff fc90 	bl	800124c <HAL_GetTick>
 800192c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001930:	079b      	lsls	r3, r3, #30
 8001932:	d50d      	bpl.n	8001950 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001934:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001938:	4b46      	ldr	r3, [pc, #280]	; (8001a54 <HAL_RCC_OscConfig+0x27c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001940:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001942:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001944:	9b01      	ldr	r3, [sp, #4]
 8001946:	1e5a      	subs	r2, r3, #1
 8001948:	9201      	str	r2, [sp, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f9      	bne.n	8001942 <HAL_RCC_OscConfig+0x16a>
 800194e:	e750      	b.n	80017f2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001950:	f7ff fc7c 	bl	800124c <HAL_GetTick>
 8001954:	1b80      	subs	r0, r0, r6
 8001956:	2802      	cmp	r0, #2
 8001958:	d9e9      	bls.n	800192e <HAL_RCC_OscConfig+0x156>
 800195a:	e77f      	b.n	800185c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800195c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800195e:	f7ff fc75 	bl	800124c <HAL_GetTick>
 8001962:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001966:	079f      	lsls	r7, r3, #30
 8001968:	f57f af43 	bpl.w	80017f2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff fc6e 	bl	800124c <HAL_GetTick>
 8001970:	1b80      	subs	r0, r0, r6
 8001972:	2802      	cmp	r0, #2
 8001974:	d9f6      	bls.n	8001964 <HAL_RCC_OscConfig+0x18c>
 8001976:	e771      	b.n	800185c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001978:	4c33      	ldr	r4, [pc, #204]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800197a:	69e3      	ldr	r3, [r4, #28]
 800197c:	00d8      	lsls	r0, r3, #3
 800197e:	d424      	bmi.n	80019ca <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001980:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	69e3      	ldr	r3, [r4, #28]
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	61e3      	str	r3, [r4, #28]
 800198a:	69e3      	ldr	r3, [r4, #28]
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	4e30      	ldr	r6, [pc, #192]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001996:	6833      	ldr	r3, [r6, #0]
 8001998:	05d9      	lsls	r1, r3, #23
 800199a:	d518      	bpl.n	80019ce <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	68eb      	ldr	r3, [r5, #12]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d126      	bne.n	80019f0 <HAL_RCC_OscConfig+0x218>
 80019a2:	6a23      	ldr	r3, [r4, #32]
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019aa:	f7ff fc4f 	bl	800124c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019b2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	6a23      	ldr	r3, [r4, #32]
 80019b6:	079b      	lsls	r3, r3, #30
 80019b8:	d53f      	bpl.n	8001a3a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	f43f af1d 	beq.w	80017fa <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c0:	69e3      	ldr	r3, [r4, #28]
 80019c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c6:	61e3      	str	r3, [r4, #28]
 80019c8:	e717      	b.n	80017fa <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80019ca:	2700      	movs	r7, #0
 80019cc:	e7e2      	b.n	8001994 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ce:	6833      	ldr	r3, [r6, #0]
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80019d6:	f7ff fc39 	bl	800124c <HAL_GetTick>
 80019da:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	6833      	ldr	r3, [r6, #0]
 80019de:	05da      	lsls	r2, r3, #23
 80019e0:	d4dc      	bmi.n	800199c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e2:	f7ff fc33 	bl	800124c <HAL_GetTick>
 80019e6:	eba0 0008 	sub.w	r0, r0, r8
 80019ea:	2864      	cmp	r0, #100	; 0x64
 80019ec:	d9f6      	bls.n	80019dc <HAL_RCC_OscConfig+0x204>
 80019ee:	e735      	b.n	800185c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	b9ab      	cbnz	r3, 8001a1e <HAL_RCC_OscConfig+0x246>
 80019f2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6223      	str	r3, [r4, #32]
 80019fe:	6a23      	ldr	r3, [r4, #32]
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a06:	f7ff fc21 	bl	800124c <HAL_GetTick>
 8001a0a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	6a23      	ldr	r3, [r4, #32]
 8001a0e:	0798      	lsls	r0, r3, #30
 8001a10:	d5d3      	bpl.n	80019ba <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff fc1b 	bl	800124c <HAL_GetTick>
 8001a16:	1b80      	subs	r0, r0, r6
 8001a18:	4540      	cmp	r0, r8
 8001a1a:	d9f7      	bls.n	8001a0c <HAL_RCC_OscConfig+0x234>
 8001a1c:	e71e      	b.n	800185c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	6a23      	ldr	r3, [r4, #32]
 8001a22:	d103      	bne.n	8001a2c <HAL_RCC_OscConfig+0x254>
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6223      	str	r3, [r4, #32]
 8001a2a:	e7ba      	b.n	80019a2 <HAL_RCC_OscConfig+0x1ca>
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6223      	str	r3, [r4, #32]
 8001a32:	6a23      	ldr	r3, [r4, #32]
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	e7b6      	b.n	80019a8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff fc07 	bl	800124c <HAL_GetTick>
 8001a3e:	eba0 0008 	sub.w	r0, r0, r8
 8001a42:	42b0      	cmp	r0, r6
 8001a44:	d9b6      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1dc>
 8001a46:	e709      	b.n	800185c <HAL_RCC_OscConfig+0x84>
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	42420000 	.word	0x42420000
 8001a50:	42420480 	.word	0x42420480
 8001a54:	20000008 	.word	0x20000008
 8001a58:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	4c22      	ldr	r4, [pc, #136]	; (8001ae8 <HAL_RCC_OscConfig+0x310>)
 8001a5e:	6863      	ldr	r3, [r4, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	f43f aee2 	beq.w	800182e <HAL_RCC_OscConfig+0x56>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	4e1f      	ldr	r6, [pc, #124]	; (8001aec <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001a70:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a72:	d12b      	bne.n	8001acc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001a74:	f7ff fbea 	bl	800124c <HAL_GetTick>
 8001a78:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	0199      	lsls	r1, r3, #6
 8001a7e:	d41f      	bmi.n	8001ac0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a80:	6a2b      	ldr	r3, [r5, #32]
 8001a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a86:	d105      	bne.n	8001a94 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a88:	6862      	ldr	r2, [r4, #4]
 8001a8a:	68a9      	ldr	r1, [r5, #8]
 8001a8c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001a90:	430a      	orrs	r2, r1
 8001a92:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a94:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001a96:	6862      	ldr	r2, [r4, #4]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fbd1 	bl	800124c <HAL_GetTick>
 8001aaa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	019a      	lsls	r2, r3, #6
 8001ab0:	f53f aea7 	bmi.w	8001802 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff fbca 	bl	800124c <HAL_GetTick>
 8001ab8:	1b40      	subs	r0, r0, r5
 8001aba:	2802      	cmp	r0, #2
 8001abc:	d9f6      	bls.n	8001aac <HAL_RCC_OscConfig+0x2d4>
 8001abe:	e6cd      	b.n	800185c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff fbc4 	bl	800124c <HAL_GetTick>
 8001ac4:	1bc0      	subs	r0, r0, r7
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d9d7      	bls.n	8001a7a <HAL_RCC_OscConfig+0x2a2>
 8001aca:	e6c7      	b.n	800185c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001acc:	f7ff fbbe 	bl	800124c <HAL_GetTick>
 8001ad0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	019b      	lsls	r3, r3, #6
 8001ad6:	f57f ae94 	bpl.w	8001802 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff fbb7 	bl	800124c <HAL_GetTick>
 8001ade:	1b40      	subs	r0, r0, r5
 8001ae0:	2802      	cmp	r0, #2
 8001ae2:	d9f6      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x2fa>
 8001ae4:	e6ba      	b.n	800185c <HAL_RCC_OscConfig+0x84>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	42420060 	.word	0x42420060

08001af0 <HAL_RCC_GetSysClockFreq>:
{
 8001af0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001af4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001af6:	ac02      	add	r4, sp, #8
 8001af8:	f103 0510 	add.w	r5, r3, #16
 8001afc:	4622      	mov	r2, r4
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	3308      	adds	r3, #8
 8001b04:	c203      	stmia	r2!, {r0, r1}
 8001b06:	42ab      	cmp	r3, r5
 8001b08:	4614      	mov	r4, r2
 8001b0a:	d1f7      	bne.n	8001afc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001b12:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001b14:	4911      	ldr	r1, [pc, #68]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b16:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001b1a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b1c:	f003 020c 	and.w	r2, r3, #12
 8001b20:	2a08      	cmp	r2, #8
 8001b22:	d117      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b24:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001b28:	a806      	add	r0, sp, #24
 8001b2a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b2c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b2e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b32:	d50c      	bpl.n	8001b4e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b34:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b36:	480a      	ldr	r0, [pc, #40]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b38:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b3c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b3e:	aa06      	add	r2, sp, #24
 8001b40:	4413      	add	r3, r2
 8001b42:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b46:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001b4a:	b007      	add	sp, #28
 8001b4c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x74>)
 8001b50:	4350      	muls	r0, r2
 8001b52:	e7fa      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001b56:	e7f8      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x5a>
 8001b58:	080098dc 	.word	0x080098dc
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	007a1200 	.word	0x007a1200
 8001b64:	003d0900 	.word	0x003d0900

08001b68 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b68:	4a54      	ldr	r2, [pc, #336]	; (8001cbc <HAL_RCC_ClockConfig+0x154>)
{
 8001b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b6e:	6813      	ldr	r3, [r2, #0]
{
 8001b70:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	428b      	cmp	r3, r1
{
 8001b78:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b7a:	d32a      	bcc.n	8001bd2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	6829      	ldr	r1, [r5, #0]
 8001b7e:	078c      	lsls	r4, r1, #30
 8001b80:	d434      	bmi.n	8001bec <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b82:	07ca      	lsls	r2, r1, #31
 8001b84:	d447      	bmi.n	8001c16 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b86:	4a4d      	ldr	r2, [pc, #308]	; (8001cbc <HAL_RCC_ClockConfig+0x154>)
 8001b88:	6813      	ldr	r3, [r2, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	429e      	cmp	r6, r3
 8001b90:	f0c0 8082 	bcc.w	8001c98 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	682a      	ldr	r2, [r5, #0]
 8001b96:	4c4a      	ldr	r4, [pc, #296]	; (8001cc0 <HAL_RCC_ClockConfig+0x158>)
 8001b98:	f012 0f04 	tst.w	r2, #4
 8001b9c:	f040 8087 	bne.w	8001cae <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	0713      	lsls	r3, r2, #28
 8001ba2:	d506      	bpl.n	8001bb2 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ba4:	6863      	ldr	r3, [r4, #4]
 8001ba6:	692a      	ldr	r2, [r5, #16]
 8001ba8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001bac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bb0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bb2:	f7ff ff9d 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001bb6:	6863      	ldr	r3, [r4, #4]
 8001bb8:	4a42      	ldr	r2, [pc, #264]	; (8001cc4 <HAL_RCC_ClockConfig+0x15c>)
 8001bba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	40d8      	lsrs	r0, r3
 8001bc2:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <HAL_RCC_ClockConfig+0x160>)
 8001bc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff fafe 	bl	80011c8 <HAL_InitTick>
  return HAL_OK;
 8001bcc:	2000      	movs	r0, #0
}
 8001bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	6813      	ldr	r3, [r2, #0]
 8001bd4:	f023 0307 	bic.w	r3, r3, #7
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bdc:	6813      	ldr	r3, [r2, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	4299      	cmp	r1, r3
 8001be4:	d0ca      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001be6:	2001      	movs	r0, #1
 8001be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bec:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bee:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf2:	bf1e      	ittt	ne
 8001bf4:	685a      	ldrne	r2, [r3, #4]
 8001bf6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001bfa:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bfe:	bf42      	ittt	mi
 8001c00:	685a      	ldrmi	r2, [r3, #4]
 8001c02:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001c06:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	68a8      	ldr	r0, [r5, #8]
 8001c0c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c10:	4302      	orrs	r2, r0
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	e7b5      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c16:	686a      	ldr	r2, [r5, #4]
 8001c18:	4c29      	ldr	r4, [pc, #164]	; (8001cc0 <HAL_RCC_ClockConfig+0x158>)
 8001c1a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1e:	d11c      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	d0df      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c26:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2c:	f023 0303 	bic.w	r3, r3, #3
 8001c30:	4313      	orrs	r3, r2
 8001c32:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001c34:	f7ff fb0a 	bl	800124c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c38:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001c3a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d114      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c40:	6863      	ldr	r3, [r4, #4]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d09d      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4a:	f7ff faff 	bl	800124c <HAL_GetTick>
 8001c4e:	1bc0      	subs	r0, r0, r7
 8001c50:	4540      	cmp	r0, r8
 8001c52:	d9f5      	bls.n	8001c40 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001c54:	2003      	movs	r0, #3
 8001c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5a:	2a02      	cmp	r2, #2
 8001c5c:	d102      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c62:	e7df      	b.n	8001c24 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	f013 0f02 	tst.w	r3, #2
 8001c68:	e7dc      	b.n	8001c24 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d10f      	bne.n	8001c8e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c6e:	6863      	ldr	r3, [r4, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d086      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7ff fae8 	bl	800124c <HAL_GetTick>
 8001c7c:	1bc0      	subs	r0, r0, r7
 8001c7e:	4540      	cmp	r0, r8
 8001c80:	d9f5      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x106>
 8001c82:	e7e7      	b.n	8001c54 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c84:	f7ff fae2 	bl	800124c <HAL_GetTick>
 8001c88:	1bc0      	subs	r0, r0, r7
 8001c8a:	4540      	cmp	r0, r8
 8001c8c:	d8e2      	bhi.n	8001c54 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c8e:	6863      	ldr	r3, [r4, #4]
 8001c90:	f013 0f0c 	tst.w	r3, #12
 8001c94:	d1f6      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x11c>
 8001c96:	e776      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f023 0307 	bic.w	r3, r3, #7
 8001c9e:	4333      	orrs	r3, r6
 8001ca0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ca2:	6813      	ldr	r3, [r2, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	429e      	cmp	r6, r3
 8001caa:	d19c      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x7e>
 8001cac:	e772      	b.n	8001b94 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cae:	6863      	ldr	r3, [r4, #4]
 8001cb0:	68e9      	ldr	r1, [r5, #12]
 8001cb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	6063      	str	r3, [r4, #4]
 8001cba:	e771      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x38>
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	080098ec 	.word	0x080098ec
 8001cc8:	20000008 	.word	0x20000008

08001ccc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001cda:	6810      	ldr	r0, [r2, #0]
}    
 8001cdc:	40d8      	lsrs	r0, r3
 8001cde:	4770      	bx	lr
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	080098fc 	.word	0x080098fc
 8001ce8:	20000008 	.word	0x20000008

08001cec <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001cf0:	680d      	ldr	r5, [r1, #0]
 8001cf2:	f3c5 250f 	ubfx	r5, r5, #8, #16
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	fa95 f2a5 	rbit	r2, r5
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001cfa:	f04f 090f 	mov.w	r9, #15
  pinpos = POSITION_VAL(pinmask);
 8001cfe:	fab2 f282 	clz	r2, r2
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001d02:	f04f 0803 	mov.w	r8, #3
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001d06:	f04f 0c04 	mov.w	ip, #4
    if ((pinmask & (1U << pinpos)) != 0U)
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
      {
        currentpin = (0x00000101U << pinpos);
 8001d0a:	f240 1e01 	movw	lr, #257	; 0x101
  while ((pinmask  >> pinpos) != 0U)
 8001d0e:	fa35 f302 	lsrs.w	r3, r5, r2
 8001d12:	d102      	bne.n	8001d1a <LL_GPIO_Init+0x2e>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 8001d14:	2001      	movs	r0, #1
 8001d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1U << pinpos)) != 0U)
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	422b      	tst	r3, r5
 8001d20:	d063      	beq.n	8001dea <LL_GPIO_Init+0xfe>
      if (pinpos < GPIO_PIN_MASK_POS)
 8001d22:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8001d24:	bf83      	ittte	hi
 8001d26:	f04f 1401 	movhi.w	r4, #65537	; 0x10001
 8001d2a:	f1a2 0308 	subhi.w	r3, r2, #8
 8001d2e:	fa04 f303 	lslhi.w	r3, r4, r3
        currentpin = (0x00000101U << pinpos);
 8001d32:	fa0e f302 	lslls.w	r3, lr, r2
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8001d36:	bf88      	it	hi
 8001d38:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001d3c:	0e1e      	lsrs	r6, r3, #24
 8001d3e:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001d42:	faba fa8a 	clz	sl, sl
 8001d46:	fa93 fba3 	rbit	fp, r3
 8001d4a:	fabb fb8b 	clz	fp, fp
 8001d4e:	5984      	ldr	r4, [r0, r6]
 8001d50:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001d54:	fa09 fa0a 	lsl.w	sl, r9, sl
 8001d58:	ea24 0a0a 	bic.w	sl, r4, sl
 8001d5c:	684c      	ldr	r4, [r1, #4]
 8001d5e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001d62:	fa04 fb0b 	lsl.w	fp, r4, fp
 8001d66:	ea4a 040b 	orr.w	r4, sl, fp
 8001d6a:	5184      	str	r4, [r0, r6]
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001d6c:	68c4      	ldr	r4, [r0, #12]
 8001d6e:	ea4f 2a13 	mov.w	sl, r3, lsr #8
 8001d72:	fa9a fbaa 	rbit	fp, sl
 8001d76:	fabb fb8b 	clz	fp, fp
 8001d7a:	ea24 0a0a 	bic.w	sl, r4, sl
 8001d7e:	690c      	ldr	r4, [r1, #16]
 8001d80:	fa04 f40b 	lsl.w	r4, r4, fp
 8001d84:	ea4a 0404 	orr.w	r4, sl, r4
 8001d88:	60c4      	str	r4, [r0, #12]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d8a:	684c      	ldr	r4, [r1, #4]
 8001d8c:	f024 0408 	bic.w	r4, r4, #8
 8001d90:	2c01      	cmp	r4, #1
 8001d92:	d12a      	bne.n	8001dea <LL_GPIO_Init+0xfe>
 8001d94:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001d98:	faba fa8a 	clz	sl, sl
 8001d9c:	fa93 f4a3 	rbit	r4, r3
 8001da0:	fab4 f484 	clz	r4, r4
 8001da4:	5987      	ldr	r7, [r0, r6]
 8001da6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8001daa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001dae:	688c      	ldr	r4, [r1, #8]
 8001db0:	fa08 fa0a 	lsl.w	sl, r8, sl
 8001db4:	ea27 0a0a 	bic.w	sl, r7, sl
 8001db8:	fa04 f40b 	lsl.w	r4, r4, fp
 8001dbc:	ea4a 0404 	orr.w	r4, sl, r4
 8001dc0:	5184      	str	r4, [r0, r6]
 8001dc2:	fa93 fba3 	rbit	fp, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001dc6:	fabb fb8b 	clz	fp, fp
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	68cf      	ldr	r7, [r1, #12]
 8001dd4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001dd8:	fa0c fb0b 	lsl.w	fp, ip, fp
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	ea24 040b 	bic.w	r4, r4, fp
 8001de2:	fa07 f303 	lsl.w	r3, r7, r3
 8001de6:	431c      	orrs	r4, r3
 8001de8:	5184      	str	r4, [r0, r6]
    pinpos++;
 8001dea:	3201      	adds	r2, #1
 8001dec:	e78f      	b.n	8001d0e <LL_GPIO_Init+0x22>
	...

08001df0 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001df2:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <RCC_GetHCLKClockFreq+0x14>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dfa:	5cd3      	ldrb	r3, [r2, r3]
}
 8001dfc:	40d8      	lsrs	r0, r3
 8001dfe:	4770      	bx	lr
 8001e00:	40021000 	.word	0x40021000
 8001e04:	080098ec 	.word	0x080098ec

08001e08 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001e0a:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <RCC_GetPCLK1ClockFreq+0x14>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e14:	40d8      	lsrs	r0, r3
 8001e16:	4770      	bx	lr
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	080098fc 	.word	0x080098fc

08001e20 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <RCC_GetPCLK2ClockFreq+0x14>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e2c:	40d8      	lsrs	r0, r3
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000
 8001e34:	080098fc 	.word	0x080098fc

08001e38 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8001e40:	b162      	cbz	r2, 8001e5c <RCC_PLL_GetFreqDomain_SYS+0x24>
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001e42:	6858      	ldr	r0, [r3, #4]
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8001e46:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001e4a:	3001      	adds	r0, #1
 8001e4c:	fbb2 f0f0 	udiv	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001e50:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001e52:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8001e56:	3302      	adds	r3, #2
}
 8001e58:	4358      	muls	r0, r3
 8001e5a:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8001e5e:	e7f7      	b.n	8001e50 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8001e60:	40021000 	.word	0x40021000
 8001e64:	007a1200 	.word	0x007a1200
 8001e68:	003d0900 	.word	0x003d0900

08001e6c <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <RCC_GetSystemClockFreq+0x14>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d101      	bne.n	8001e7c <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001e78:	f7ff bfde 	b.w	8001e38 <RCC_PLL_GetFreqDomain_SYS>
}
 8001e7c:	4801      	ldr	r0, [pc, #4]	; (8001e84 <RCC_GetSystemClockFreq+0x18>)
 8001e7e:	4770      	bx	lr
 8001e80:	40021000 	.word	0x40021000
 8001e84:	007a1200 	.word	0x007a1200

08001e88 <LL_RCC_GetSystemClocksFreq>:
{
 8001e88:	b508      	push	{r3, lr}
 8001e8a:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001e8c:	f7ff ffee 	bl	8001e6c <RCC_GetSystemClockFreq>
 8001e90:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001e92:	f7ff ffad 	bl	8001df0 <RCC_GetHCLKClockFreq>
 8001e96:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001e98:	f7ff ffb6 	bl	8001e08 <RCC_GetPCLK1ClockFreq>
 8001e9c:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001e9e:	6848      	ldr	r0, [r1, #4]
 8001ea0:	f7ff ffbe 	bl	8001e20 <RCC_GetPCLK2ClockFreq>
 8001ea4:	60c8      	str	r0, [r1, #12]
 8001ea6:	bd08      	pop	{r3, pc}

08001ea8 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea8:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <LL_TIM_Init+0x6c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001eaa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eac:	4290      	cmp	r0, r2
 8001eae:	d00a      	beq.n	8001ec6 <LL_TIM_Init+0x1e>
 8001eb0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001eb4:	d007      	beq.n	8001ec6 <LL_TIM_Init+0x1e>
 8001eb6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001eba:	4290      	cmp	r0, r2
 8001ebc:	d003      	beq.n	8001ec6 <LL_TIM_Init+0x1e>
 8001ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ec2:	4290      	cmp	r0, r2
 8001ec4:	d115      	bne.n	8001ef2 <LL_TIM_Init+0x4a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001ec6:	684a      	ldr	r2, [r1, #4]
 8001ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ecc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ece:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <LL_TIM_Init+0x6c>)
 8001ed0:	4290      	cmp	r0, r2
 8001ed2:	d00a      	beq.n	8001eea <LL_TIM_Init+0x42>
 8001ed4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ed8:	d007      	beq.n	8001eea <LL_TIM_Init+0x42>
 8001eda:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ede:	4290      	cmp	r0, r2
 8001ee0:	d003      	beq.n	8001eea <LL_TIM_Init+0x42>
 8001ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ee6:	4290      	cmp	r0, r2
 8001ee8:	d103      	bne.n	8001ef2 <LL_TIM_Init+0x4a>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001eea:	68ca      	ldr	r2, [r1, #12]
 8001eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef0:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001ef2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001ef4:	688b      	ldr	r3, [r1, #8]
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 8001ef6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001ef8:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001efa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <LL_TIM_Init+0x6c>)
 8001efe:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001f00:	bf04      	itt	eq
 8001f02:	7c0b      	ldrbeq	r3, [r1, #16]
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001f04:	6303      	streq	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001f06:	6943      	ldr	r3, [r0, #20]
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8001f0e:	2001      	movs	r0, #1
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40012c00 	.word	0x40012c00

08001f18 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8001f18:	2910      	cmp	r1, #16
{
 8001f1a:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8001f1c:	d05f      	beq.n	8001fde <LL_TIM_OC_Init+0xc6>
 8001f1e:	d803      	bhi.n	8001f28 <LL_TIM_OC_Init+0x10>
 8001f20:	2901      	cmp	r1, #1
 8001f22:	d02c      	beq.n	8001f7e <LL_TIM_OC_Init+0x66>
  ErrorStatus result = ERROR;
 8001f24:	2000      	movs	r0, #0
    default:
      break;
  }

  return result;
}
 8001f26:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 8001f28:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001f2c:	f000 8089 	beq.w	8002042 <LL_TIM_OC_Init+0x12a>
 8001f30:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001f34:	d1f6      	bne.n	8001f24 <LL_TIM_OC_Init+0xc>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001f36:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001f38:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f3e:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f40:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001f42:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001f44:	69c1      	ldr	r1, [r0, #28]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001f46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001f4a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8001f4e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001f52:	6915      	ldr	r5, [r2, #16]
 8001f54:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001f58:	6855      	ldr	r5, [r2, #4]
 8001f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f5e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f62:	4d50      	ldr	r5, [pc, #320]	; (80020a4 <LL_TIM_OC_Init+0x18c>)
 8001f64:	42a8      	cmp	r0, r5
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001f66:	bf04      	itt	eq
 8001f68:	6995      	ldreq	r5, [r2, #24]
 8001f6a:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001f6e:	68d2      	ldr	r2, [r2, #12]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001f70:	bf08      	it	eq
 8001f72:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f76:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001f78:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001f7a:	6402      	str	r2, [r0, #64]	; 0x40
 8001f7c:	e02c      	b.n	8001fd8 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001f7e:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001f80:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f88:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f8a:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f8c:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001f8e:	f023 0302 	bic.w	r3, r3, #2
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001f92:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8001f96:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001f98:	6915      	ldr	r5, [r2, #16]
 8001f9a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001f9c:	6855      	ldr	r5, [r2, #4]
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fa4:	4d3f      	ldr	r5, [pc, #252]	; (80020a4 <LL_TIM_OC_Init+0x18c>)
 8001fa6:	42a8      	cmp	r0, r5
 8001fa8:	d112      	bne.n	8001fd0 <LL_TIM_OC_Init+0xb8>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001faa:	6955      	ldr	r5, [r2, #20]
 8001fac:	f023 0308 	bic.w	r3, r3, #8
 8001fb0:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001fb4:	6895      	ldr	r5, [r2, #8]
 8001fb6:	f023 0304 	bic.w	r3, r3, #4
 8001fba:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001fbe:	6995      	ldr	r5, [r2, #24]
 8001fc0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001fc4:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001fc6:	69d5      	ldr	r5, [r2, #28]
 8001fc8:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8001fcc:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001fd0:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001fd2:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001fd4:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001fd6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001fd8:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001fda:	2001      	movs	r0, #1
      break;
 8001fdc:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001fde:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001fe0:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001fe2:	f023 0310 	bic.w	r3, r3, #16
 8001fe6:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001fe8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001fea:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001fec:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001fee:	f023 0320 	bic.w	r3, r3, #32
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001ff2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8001ff6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001ffa:	6915      	ldr	r5, [r2, #16]
 8001ffc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002000:	6855      	ldr	r5, [r2, #4]
 8002002:	f023 0310 	bic.w	r3, r3, #16
 8002006:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800200a:	4d26      	ldr	r5, [pc, #152]	; (80020a4 <LL_TIM_OC_Init+0x18c>)
 800200c:	42a8      	cmp	r0, r5
 800200e:	d113      	bne.n	8002038 <LL_TIM_OC_Init+0x120>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002010:	6955      	ldr	r5, [r2, #20]
 8002012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002016:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800201a:	6895      	ldr	r5, [r2, #8]
 800201c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002020:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002024:	6995      	ldr	r5, [r2, #24]
 8002026:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800202a:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800202e:	69d5      	ldr	r5, [r2, #28]
 8002030:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002034:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002038:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800203a:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800203c:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800203e:	6382      	str	r2, [r0, #56]	; 0x38
 8002040:	e7ca      	b.n	8001fd8 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002042:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002044:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800204a:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800204c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800204e:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002050:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002052:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002056:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800205a:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800205c:	6915      	ldr	r5, [r2, #16]
 800205e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002062:	6855      	ldr	r5, [r2, #4]
 8002064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002068:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800206c:	4d0d      	ldr	r5, [pc, #52]	; (80020a4 <LL_TIM_OC_Init+0x18c>)
 800206e:	42a8      	cmp	r0, r5
 8002070:	d113      	bne.n	800209a <LL_TIM_OC_Init+0x182>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002072:	6955      	ldr	r5, [r2, #20]
 8002074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002078:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800207c:	6895      	ldr	r5, [r2, #8]
 800207e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002082:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002086:	6995      	ldr	r5, [r2, #24]
 8002088:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800208c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002090:	69d5      	ldr	r5, [r2, #28]
 8002092:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002096:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800209a:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800209c:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800209e:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80020a0:	63c2      	str	r2, [r0, #60]	; 0x3c
 80020a2:	e799      	b.n	8001fd8 <LL_TIM_OC_Init+0xc0>
 80020a4:	40012c00 	.word	0x40012c00

080020a8 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80020a8:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80020aa:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80020ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80020ae:	684a      	ldr	r2, [r1, #4]
 80020b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80020b6:	680a      	ldr	r2, [r1, #0]
 80020b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80020be:	89ca      	ldrh	r2, [r1, #14]
 80020c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80020c6:	690a      	ldr	r2, [r1, #16]
 80020c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80020ce:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80020d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020d4:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80020d6:	6443      	str	r3, [r0, #68]	; 0x44
}
 80020d8:	2001      	movs	r0, #1
 80020da:	4770      	bx	lr

080020dc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80020dc:	b530      	push	{r4, r5, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80020de:	68c3      	ldr	r3, [r0, #12]
 80020e0:	b085      	sub	sp, #20
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80020e2:	049b      	lsls	r3, r3, #18
{
 80020e4:	4604      	mov	r4, r0
 80020e6:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80020e8:	d502      	bpl.n	80020f0 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 80020ea:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80020ec:	b005      	add	sp, #20
 80020ee:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 80020f0:	684b      	ldr	r3, [r1, #4]
 80020f2:	68c9      	ldr	r1, [r1, #12]
 80020f4:	68c2      	ldr	r2, [r0, #12]
 80020f6:	430b      	orrs	r3, r1
 80020f8:	6929      	ldr	r1, [r5, #16]
 80020fa:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80020fe:	430b      	orrs	r3, r1
 8002100:	f022 020c 	bic.w	r2, r2, #12
 8002104:	4313      	orrs	r3, r2
 8002106:	60c3      	str	r3, [r0, #12]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002108:	6903      	ldr	r3, [r0, #16]
 800210a:	68aa      	ldr	r2, [r5, #8]
 800210c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002110:	4313      	orrs	r3, r2
 8002112:	6103      	str	r3, [r0, #16]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002114:	6943      	ldr	r3, [r0, #20]
 8002116:	696a      	ldr	r2, [r5, #20]
 8002118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800211c:	4313      	orrs	r3, r2
 800211e:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002120:	4668      	mov	r0, sp
 8002122:	f7ff feb1 	bl	8001e88 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <LL_USART_Init+0x98>)
 8002128:	429c      	cmp	r4, r3
 800212a:	d119      	bne.n	8002160 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 800212c:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800212e:	2900      	cmp	r1, #0
 8002130:	d0db      	beq.n	80020ea <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8002132:	682a      	ldr	r2, [r5, #0]
 8002134:	2a00      	cmp	r2, #0
 8002136:	d0d8      	beq.n	80020ea <LL_USART_Init+0xe>
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002138:	2319      	movs	r3, #25
 800213a:	434b      	muls	r3, r1
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002142:	2264      	movs	r2, #100	; 0x64
 8002144:	fbb3 f1f2 	udiv	r1, r3, r2
 8002148:	fb02 3311 	mls	r3, r2, r1, r3
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	3332      	adds	r3, #50	; 0x32
 8002150:	fbb3 f3f2 	udiv	r3, r3, r2
 8002154:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002158:	b29b      	uxth	r3, r3
 800215a:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 800215c:	2001      	movs	r0, #1
 800215e:	e7c5      	b.n	80020ec <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <LL_USART_Init+0x9c>)
 8002162:	429c      	cmp	r4, r3
 8002164:	d101      	bne.n	800216a <LL_USART_Init+0x8e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002166:	9902      	ldr	r1, [sp, #8]
 8002168:	e7e1      	b.n	800212e <LL_USART_Init+0x52>
    else if (USARTx == USART3)
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <LL_USART_Init+0xa0>)
 800216c:	429c      	cmp	r4, r3
 800216e:	d1bc      	bne.n	80020ea <LL_USART_Init+0xe>
 8002170:	e7f9      	b.n	8002166 <LL_USART_Init+0x8a>
 8002172:	bf00      	nop
 8002174:	40013800 	.word	0x40013800
 8002178:	40004400 	.word	0x40004400
 800217c:	40004800 	.word	0x40004800

08002180 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	2210      	movs	r2, #16
{
 8002182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002186:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	eb0d 0002 	add.w	r0, sp, r2
 800218c:	2100      	movs	r1, #0
 800218e:	f005 fc32 	bl	80079f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002192:	4b43      	ldr	r3, [pc, #268]	; (80022a0 <MX_GPIO_Init+0x120>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COOL_FLOOD_Pin|COOL_MIST_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8002194:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80022ac <MX_GPIO_Init+0x12c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002198:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_X_Pin|STEP_Y_Pin|STEP_Z_Pin|DIR_X_Pin 
 800219a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80022b0 <MX_GPIO_Init+0x130>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219e:	f042 0210 	orr.w	r2, r2, #16
 80021a2:	619a      	str	r2, [r3, #24]
 80021a4:	699a      	ldr	r2, [r3, #24]
                          |DIR_Y_Pin|DIR_Z_Pin|AUX_1_Pin|AUX_2_Pin 
                          |SPIN_DIR_Pin|SPIN_EN_Pin|AUX_3_Pin|AUX_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_OE_GPIO_Port, I2C_OE_Pin, GPIO_PIN_RESET);
 80021a6:	4f3f      	ldr	r7, [pc, #252]	; (80022a4 <MX_GPIO_Init+0x124>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a8:	f002 0210 	and.w	r2, r2, #16
 80021ac:	9200      	str	r2, [sp, #0]
 80021ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, COOL_FLOOD_Pin|COOL_MIST_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80021b2:	4648      	mov	r0, r9
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b4:	f042 0220 	orr.w	r2, r2, #32
 80021b8:	619a      	str	r2, [r3, #24]
 80021ba:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, COOL_FLOOD_Pin|COOL_MIST_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80021bc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c0:	f002 0220 	and.w	r2, r2, #32
 80021c4:	9201      	str	r2, [sp, #4]
 80021c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = COOL_FLOOD_Pin|COOL_MIST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	f042 0204 	orr.w	r2, r2, #4
 80021d0:	619a      	str	r2, [r3, #24]
 80021d2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d4:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	f002 0204 	and.w	r2, r2, #4
 80021da:	9202      	str	r2, [sp, #8]
 80021dc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021e0:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	f042 0208 	orr.w	r2, r2, #8
 80021e8:	619a      	str	r2, [r3, #24]
 80021ea:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, COOL_FLOOD_Pin|COOL_MIST_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80021ec:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	9303      	str	r3, [sp, #12]
 80021f4:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, COOL_FLOOD_Pin|COOL_MIST_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80021f6:	f7ff fa5d 	bl	80016b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, STEP_X_Pin|STEP_Y_Pin|STEP_Z_Pin|DIR_X_Pin 
 80021fa:	4640      	mov	r0, r8
 80021fc:	2200      	movs	r2, #0
 80021fe:	f641 61ff 	movw	r1, #7935	; 0x1eff
 8002202:	f7ff fa57 	bl	80016b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C_OE_GPIO_Port, I2C_OE_Pin, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	4638      	mov	r0, r7
 800220a:	2120      	movs	r1, #32
 800220c:	f7ff fa52 	bl	80016b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = COOL_FLOOD_Pin|COOL_MIST_Pin;
 8002210:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEP_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = STEP_ENABLE_Pin;
 8002216:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	a904      	add	r1, sp, #16
 800221c:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = COOL_FLOOD_Pin|COOL_MIST_Pin;
 800221e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002222:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002226:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002228:	f7ff f964 	bl	80014f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(STEP_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800222c:	a904      	add	r1, sp, #16
 800222e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = STEP_ENABLE_Pin;
 8002230:	f8cd b010 	str.w	fp, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002234:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002238:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(STEP_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800223a:	f7ff f95b 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_X_Pin|STEP_Y_Pin|STEP_Z_Pin|DIR_X_Pin 
 800223e:	f641 63ff 	movw	r3, #7935	; 0x1eff
                          |DIR_Y_Pin|DIR_Z_Pin|AUX_1_Pin|AUX_2_Pin 
                          |SPIN_DIR_Pin|SPIN_EN_Pin|AUX_3_Pin|AUX_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	a904      	add	r1, sp, #16
 8002244:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = STEP_X_Pin|STEP_Y_Pin|STEP_Z_Pin|DIR_X_Pin 
 8002246:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002248:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800224c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	f7ff f951 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CON_CYCLE_START_Pin|CON_FEED_HOLD_Pin|LIM_X_Pin|LIM_Y_Pin 
 8002252:	f641 431b 	movw	r3, #7195	; 0x1c1b
 8002256:	9304      	str	r3, [sp, #16]
                          |LIM_Z_Pin|CON_RESET_Pin|CON_SAFETY_DOOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <MX_GPIO_Init+0x128>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	a904      	add	r1, sp, #16
 800225c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800225e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002260:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f7ff f947 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PROBE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(PROBE_GPIO_Port, &GPIO_InitStruct);
 8002266:	a904      	add	r1, sp, #16
 8002268:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = PROBE_Pin;
 800226a:	f8cd b010 	str.w	fp, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002270:	f8cd a018 	str.w	sl, [sp, #24]
  HAL_GPIO_Init(PROBE_GPIO_Port, &GPIO_InitStruct);
 8002274:	f7ff f93e 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C_OE_Pin;
 8002278:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(I2C_OE_GPIO_Port, &GPIO_InitStruct);
 800227a:	a904      	add	r1, sp, #16
 800227c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = I2C_OE_Pin;
 800227e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002280:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002284:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(I2C_OE_GPIO_Port, &GPIO_InitStruct);
 8002286:	f7ff f935 	bl	80014f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800228a:	4622      	mov	r2, r4
 800228c:	4621      	mov	r1, r4
 800228e:	2028      	movs	r0, #40	; 0x28
 8002290:	f7ff f806 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002294:	2028      	movs	r0, #40	; 0x28
 8002296:	f7ff f837 	bl	8001308 <HAL_NVIC_EnableIRQ>

}
 800229a:	b009      	add	sp, #36	; 0x24
 800229c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010c00 	.word	0x40010c00
 80022a8:	10210000 	.word	0x10210000
 80022ac:	40011000 	.word	0x40011000
 80022b0:	40010800 	.word	0x40010800

080022b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022b4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80022b6:	480c      	ldr	r0, [pc, #48]	; (80022e8 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_I2C1_Init+0x38>)
 80022ba:	f8df e034 	ldr.w	lr, [pc, #52]	; 80022f0 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 80022c2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022c6:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022c8:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022ca:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022cc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022ce:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022d0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022d4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022d6:	f7ff f9ff 	bl	80016d8 <HAL_I2C_Init>
 80022da:	b118      	cbz	r0, 80022e4 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80022dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80022e0:	f000 b916 	b.w	8002510 <Error_Handler>
 80022e4:	bd08      	pop	{r3, pc}
 80022e6:	bf00      	nop
 80022e8:	20002dd8 	.word	0x20002dd8
 80022ec:	40005400 	.word	0x40005400
 80022f0:	000186a0 	.word	0x000186a0

080022f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022f4:	b510      	push	{r4, lr}
 80022f6:	4604      	mov	r4, r0
 80022f8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fa:	2210      	movs	r2, #16
 80022fc:	2100      	movs	r1, #0
 80022fe:	a802      	add	r0, sp, #8
 8002300:	f005 fb79 	bl	80079f6 <memset>
  if(i2cHandle->Instance==I2C1)
 8002304:	6822      	ldr	r2, [r4, #0]
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_I2C_MspInit+0x68>)
 8002308:	429a      	cmp	r2, r3
 800230a:	d124      	bne.n	8002356 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	4c14      	ldr	r4, [pc, #80]	; (8002360 <HAL_I2C_MspInit+0x6c>)
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002310:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002312:	4814      	ldr	r0, [pc, #80]	; (8002364 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	61a3      	str	r3, [r4, #24]
 800231a:	69a3      	ldr	r3, [r4, #24]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002324:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002328:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800232a:	2312      	movs	r3, #18
 800232c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	f7ff f8df 	bl	80014f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002336:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <HAL_I2C_MspInit+0x74>)
 8002338:	6853      	ldr	r3, [r2, #4]
 800233a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002344:	69e3      	ldr	r3, [r4, #28]
 8002346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800234a:	61e3      	str	r3, [r4, #28]
 800234c:	69e3      	ldr	r3, [r4, #28]
 800234e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002356:	b006      	add	sp, #24
 8002358:	bd10      	pop	{r4, pc}
 800235a:	bf00      	nop
 800235c:	40005400 	.word	0x40005400
 8002360:	40021000 	.word	0x40021000
 8002364:	40010c00 	.word	0x40010c00
 8002368:	40010000 	.word	0x40010000

0800236c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800236c:	b510      	push	{r4, lr}
 800236e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002370:	2228      	movs	r2, #40	; 0x28
 8002372:	2100      	movs	r1, #0
 8002374:	a806      	add	r0, sp, #24
 8002376:	f005 fb3e 	bl	80079f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800237a:	2100      	movs	r1, #0
 800237c:	2214      	movs	r2, #20
 800237e:	a801      	add	r0, sp, #4
 8002380:	f005 fb39 	bl	80079f6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002388:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800238a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800238c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800238e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12; //-- overclock from 9, from 72 to 96MHz
 8002390:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002394:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002396:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002398:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12; //-- overclock from 9, from 72 to 96MHz
 800239a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800239c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239e:	f7ff fa1b 	bl	80017d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023aa:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023ac:	4621      	mov	r1, r4
 80023ae:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023b4:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023b8:	f7ff fbd6 	bl	8001b68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80023bc:	b010      	add	sp, #64	; 0x40
 80023be:	bd10      	pop	{r4, pc}

080023c0 <main>:
{
 80023c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Init();
 80023c4:	f7fe ff24 	bl	8001210 <HAL_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	2400      	movs	r4, #0
  SystemClock_Config();
 80023ca:	f7ff ffcf 	bl	800236c <SystemClock_Config>
  MX_GPIO_Init();
 80023ce:	f7ff fed7 	bl	8002180 <MX_GPIO_Init>
  MX_TIM1_Init();
 80023d2:	f000 f995 	bl	8002700 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80023d6:	f000 fa8d 	bl	80028f4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80023da:	f000 fa0b 	bl	80027f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80023de:	f000 fa49 	bl	8002874 <MX_TIM3_Init>
  MX_I2C1_Init();
 80023e2:	f7ff ff67 	bl	80022b4 <MX_I2C1_Init>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023e6:	2220      	movs	r2, #32
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e8:	4b3e      	ldr	r3, [pc, #248]	; (80024e4 <main+0x124>)
{
  /* USART1_IRQn interrupt configuration */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(USART1_IRQn);
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80023ea:	4621      	mov	r1, r4
 80023ec:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ee:	4b3e      	ldr	r3, [pc, #248]	; (80024e8 <main+0x128>)
 80023f0:	2006      	movs	r0, #6
 80023f2:	f883 4325 	strb.w	r4, [r3, #805]	; 0x325
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	4622      	mov	r2, r4
 80023fa:	f7fe ff51 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023fe:	2006      	movs	r0, #6
 8002400:	f7fe ff82 	bl	8001308 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002404:	4622      	mov	r2, r4
 8002406:	4621      	mov	r1, r4
 8002408:	2007      	movs	r0, #7
 800240a:	f7fe ff49 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800240e:	2007      	movs	r0, #7
 8002410:	f7fe ff7a 	bl	8001308 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002414:	4622      	mov	r2, r4
 8002416:	4621      	mov	r1, r4
 8002418:	2009      	movs	r0, #9
 800241a:	f7fe ff41 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800241e:	2009      	movs	r0, #9
 8002420:	f7fe ff72 	bl	8001308 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002424:	4622      	mov	r2, r4
 8002426:	4621      	mov	r1, r4
 8002428:	200a      	movs	r0, #10
 800242a:	f7fe ff39 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800242e:	200a      	movs	r0, #10
 8002430:	f7fe ff6a 	bl	8001308 <HAL_NVIC_EnableIRQ>
  timing_init();
 8002434:	f005 fa54 	bl	80078e0 <timing_init>
  uart_init();
 8002438:	f005 fa7e 	bl	8007938 <uart_init>
  eeprom_init();
 800243c:	f000 fb46 	bl	8002acc <eeprom_init>
  serial_init();   // Setup serial baud rate and interrupts
 8002440:	f003 fd72 	bl	8005f28 <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 8002444:	f004 f858 	bl	80064f8 <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 8002448:	f004 fb58 	bl	8006afc <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 800244c:	f004 ff48 	bl	80072e0 <system_init>
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8002450:	4a26      	ldr	r2, [pc, #152]	; (80024ec <main+0x12c>)
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8002452:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <main+0x130>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8002454:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8002458:	601c      	str	r4, [r3, #0]
 800245a:	605c      	str	r4, [r3, #4]
 800245c:	609c      	str	r4, [r3, #8]
    sys.state = STATE_IDLE;
 800245e:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <main+0x134>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8002460:	f012 0f10 	tst.w	r2, #16
    sys.state = STATE_IDLE;
 8002464:	701c      	strb	r4, [r3, #0]
 8002466:	461c      	mov	r4, r3
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8002468:	bf18      	it	ne
 800246a:	2301      	movne	r3, #1
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800246c:	f04f 0500 	mov.w	r5, #0
 8002470:	4f20      	ldr	r7, [pc, #128]	; (80024f4 <main+0x134>)
      memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8002472:	4e21      	ldr	r6, [pc, #132]	; (80024f8 <main+0x138>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8002474:	bf18      	it	ne
 8002476:	7023      	strbne	r3, [r4, #0]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8002478:	2214      	movs	r2, #20
 800247a:	2100      	movs	r1, #0
 800247c:	4638      	mov	r0, r7
    uint8_t prior_state = sys.state;
 800247e:	f894 8000 	ldrb.w	r8, [r4]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8002482:	f005 fab8 	bl	80079f6 <memset>
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8002486:	2364      	movs	r3, #100	; 0x64
 8002488:	7223      	strb	r3, [r4, #8]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 800248a:	7263      	strb	r3, [r4, #9]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 800248c:	72a3      	strb	r3, [r4, #10]
    sys_probe_state = 0;
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <main+0x13c>)
    sys.state = prior_state;
 8002490:	f884 8000 	strb.w	r8, [r4]
    sys_probe_state = 0;
 8002494:	701d      	strb	r5, [r3, #0]
    sys_rt_exec_state = 0;
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <main+0x140>)
      memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8002498:	6035      	str	r5, [r6, #0]
    sys_rt_exec_state = 0;
 800249a:	701d      	strb	r5, [r3, #0]
    sys_rt_exec_alarm = 0;
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <main+0x144>)
      memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 800249e:	6075      	str	r5, [r6, #4]
    sys_rt_exec_alarm = 0;
 80024a0:	701d      	strb	r5, [r3, #0]
    sys_rt_exec_motion_override = 0;
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <main+0x148>)
      memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 80024a4:	60b5      	str	r5, [r6, #8]
    sys_rt_exec_motion_override = 0;
 80024a6:	701d      	strb	r5, [r3, #0]
    sys_rt_exec_accessory_override = 0;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <main+0x14c>)
 80024aa:	701d      	strb	r5, [r3, #0]
    serial_reset_read_buffer(); // Clear serial read buffer
 80024ac:	f003 fdc8 	bl	8006040 <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 80024b0:	f000 fb6e 	bl	8002b90 <gc_init>
    spindle_init();
 80024b4:	f004 f84c 	bl	8006550 <spindle_init>
    coolant_init();
 80024b8:	f000 fa96 	bl	80029e8 <coolant_init>
    limits_init();
 80024bc:	f001 fb84 	bl	8003bc8 <limits_init>
    probe_init();
 80024c0:	f002 fd76 	bl	8004fb0 <probe_init>
    inoutputs_init();
 80024c4:	f005 f9b8 	bl	8007838 <inoutputs_init>
    plan_reset(); // Clear block buffer and planner variables
 80024c8:	f002 f9cc 	bl	8004864 <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 80024cc:	f004 fad0 	bl	8006a70 <st_reset>
    plan_sync_position();
 80024d0:	f002 fc52 	bl	8004d78 <plan_sync_position>
    gc_sync_position();
 80024d4:	f000 fb72 	bl	8002bbc <gc_sync_position>
    report_init_message();
 80024d8:	f003 f980 	bl	80057dc <report_init_message>
    protocol_main_loop();
 80024dc:	f003 f828 	bl	8005530 <protocol_main_loop>
 80024e0:	e7ca      	b.n	8002478 <main+0xb8>
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	20003478 	.word	0x20003478
 80024f0:	20002e54 	.word	0x20002e54
 80024f4:	20002e30 	.word	0x20002e30
 80024f8:	20002e48 	.word	0x20002e48
 80024fc:	20002e46 	.word	0x20002e46
 8002500:	20002e45 	.word	0x20002e45
 8002504:	20002e60 	.word	0x20002e60
 8002508:	20002e2c 	.word	0x20002e2c
 800250c:	20002e44 	.word	0x20002e44

08002510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002510:	4770      	bx	lr
	...

08002514 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_MspInit+0x3c>)
{
 8002516:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	619a      	str	r2, [r3, #24]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	f002 0201 	and.w	r2, r2, #1
 8002526:	9200      	str	r2, [sp, #0]
 8002528:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	69da      	ldr	r2, [r3, #28]
 800252c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002530:	61da      	str	r2, [r3, #28]
 8002532:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002534:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800253e:	6853      	ldr	r3, [r2, #4]
 8002540:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254a:	b002      	add	sp, #8
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	40010000 	.word	0x40010000

08002558 <NMI_Handler>:
 8002558:	4770      	bx	lr

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	e7fe      	b.n	800255a <HardFault_Handler>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	e7fe      	b.n	800255c <MemManage_Handler>

0800255e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255e:	e7fe      	b.n	800255e <BusFault_Handler>

08002560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler>

08002562 <SVC_Handler>:
 8002562:	4770      	bx	lr

08002564 <DebugMon_Handler>:
 8002564:	4770      	bx	lr

08002566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002566:	4770      	bx	lr

08002568 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002568:	f7fe be64 	b.w	8001234 <HAL_IncTick>

0800256c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800256c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800256e:	2001      	movs	r0, #1
 8002570:	f7ff f8a6 	bl	80016c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  HandleControlIT(GPIO_PIN_0);
 8002574:	2001      	movs	r0, #1
 8002576:	f004 fecd 	bl	8007314 <HandleControlIT>
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800257a:	2240      	movs	r2, #64	; 0x40
 800257c:	4b01      	ldr	r3, [pc, #4]	; (8002584 <EXTI0_IRQHandler+0x18>)
 800257e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8002582:	bd08      	pop	{r3, pc}
 8002584:	e000e100 	.word	0xe000e100

08002588 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002588:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800258a:	2002      	movs	r0, #2
 800258c:	f7ff f898 	bl	80016c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  HandleControlIT(GPIO_PIN_1);
 8002590:	2002      	movs	r0, #2
 8002592:	f004 febf 	bl	8007314 <HandleControlIT>
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	4b01      	ldr	r3, [pc, #4]	; (80025a0 <EXTI1_IRQHandler+0x18>)
 800259a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 800259e:	bd08      	pop	{r3, pc}
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80025a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80025a6:	2008      	movs	r0, #8
 80025a8:	f7ff f88a 	bl	80016c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HandleControlIT(GPIO_PIN_3);
 80025ac:	2008      	movs	r0, #8
 80025ae:	f004 feb1 	bl	8007314 <HandleControlIT>
 80025b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b6:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <EXTI3_IRQHandler+0x1c>)
 80025b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 80025bc:	bd08      	pop	{r3, pc}
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80025c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80025c6:	2010      	movs	r0, #16
 80025c8:	f7ff f87a 	bl	80016c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  HandleControlIT(GPIO_PIN_4);
 80025cc:	2010      	movs	r0, #16
 80025ce:	f004 fea1 	bl	8007314 <HandleControlIT>
 80025d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d6:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <EXTI4_IRQHandler+0x1c>)
 80025d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 80025dc:	bd08      	pop	{r3, pc}
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <TIM2_IRQHandler>:
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 80025e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025e8:	691a      	ldr	r2, [r3, #16]
		TIM2->SR &= ~(1 << 0);                          // clear UIF flag
		TIM2->CNT = 0;
		HandleStepSetIT();
		}
*/
  if (LL_TIM_IsActiveFlag_UPDATE(TIM2))
 80025ea:	07d2      	lsls	r2, r2, #31
 80025ec:	d506      	bpl.n	80025fc <TIM2_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80025ee:	f06f 0201 	mvn.w	r2, #1
 80025f2:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CNT, Counter);
 80025f4:	2200      	movs	r2, #0
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
    {
    LL_TIM_ClearFlag_UPDATE(TIM2);
    LL_TIM_SetCounter(TIM2,0);
    HandleStepSetIT();
 80025f8:	f004 b8fc 	b.w	80067f4 <HandleStepSetIT>
 80025fc:	4770      	bx	lr
	...

08002600 <TIM3_IRQHandler>:
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <TIM3_IRQHandler+0x24>)
 8002602:	691a      	ldr	r2, [r3, #16]
		TIM3->CNT = 0;
		NVIC_DisableIRQ(TIM3_IRQn);
		HandleStepResetIT();
		}
*/
  if (LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8002604:	07d2      	lsls	r2, r2, #31
 8002606:	d50b      	bpl.n	8002620 <TIM3_IRQHandler+0x20>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002608:	f06f 0201 	mvn.w	r2, #1
 800260c:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CNT, Counter);
 800260e:	2200      	movs	r2, #0
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002612:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <TIM3_IRQHandler+0x28>)
 8002618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    {
    LL_TIM_ClearFlag_UPDATE(TIM3);
    LL_TIM_SetCounter(TIM3,0);
    NVIC_DisableIRQ(TIM3_IRQn);
    HandleStepResetIT();
 800261c:	f004 b9dc 	b.w	80069d8 <HandleStepResetIT>
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40000400 	.word	0x40000400
 8002628:	e000e100 	.word	0xe000e100

0800262c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800262c:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 800262e:	4c06      	ldr	r4, [pc, #24]	; (8002648 <USART1_IRQHandler+0x1c>)
 8002630:	68e3      	ldr	r3, [r4, #12]
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	uint8_t data;
	if (LL_USART_IsEnabledIT_RXNE(USART1))
 8002632:	069b      	lsls	r3, r3, #26
 8002634:	d506      	bpl.n	8002644 <USART1_IRQHandler+0x18>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002636:	6860      	ldr	r0, [r4, #4]
	{
		data = LL_USART_ReceiveData8(USART1);
		HandleUartIT(data);
 8002638:	b2c0      	uxtb	r0, r0
 800263a:	f003 fc91 	bl	8005f60 <HandleUartIT>
  WRITE_REG(USARTx->SR , ~(USART_SR_RXNE));
 800263e:	f06f 0320 	mvn.w	r3, #32
 8002642:	6023      	str	r3, [r4, #0]
 8002644:	bd10      	pop	{r4, pc}
 8002646:	bf00      	nop
 8002648:	40013800 	.word	0x40013800

0800264c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800264c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800264e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002652:	f7ff f835 	bl	80016c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002656:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800265a:	f7ff f831 	bl	80016c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800265e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002662:	f7ff f82d 	bl	80016c0 <HAL_GPIO_EXTI_IRQHandler>
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266a:	4b03      	ldr	r3, [pc, #12]	; (8002678 <EXTI15_10_IRQHandler+0x2c>)
 800266c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
//  pinmask = LL_GPIO_ReadInputPort(GPIOB); //-- debugging
  HandleLimitIT();

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HandleLimitIT();
 8002674:	f001 bae6 	b.w	8003c44 <HandleLimitIT>
 8002678:	e000e100 	.word	0xe000e100

0800267c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800267c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <_sbrk+0x2c>)
{
 8002680:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	b909      	cbnz	r1, 800268a <_sbrk+0xe>
		heap_end = &end;
 8002686:	4909      	ldr	r1, [pc, #36]	; (80026ac <_sbrk+0x30>)
 8002688:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800268a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800268c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800268e:	4402      	add	r2, r0
 8002690:	428a      	cmp	r2, r1
 8002692:	d906      	bls.n	80026a2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002694:	f005 f976 	bl	8007984 <__errno>
 8002698:	230c      	movs	r3, #12
 800269a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80026a2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80026a4:	bd08      	pop	{r3, pc}
 80026a6:	bf00      	nop
 80026a8:	20000094 	.word	0x20000094
 80026ac:	20003568 	.word	0x20003568

080026b0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <SystemInit+0x40>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <SystemInit+0x44>)
 80026be:	400a      	ands	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80026c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026cc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026d4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80026dc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80026de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80026e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80026e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <SystemInit+0x48>)
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	f8ff0000 	.word	0xf8ff0000
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority.constprop.2>:
}
 80026fc:	2000      	movs	r0, #0
 80026fe:	4770      	bx	lr

08002700 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002700:	b570      	push	{r4, r5, r6, lr}
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002702:	2414      	movs	r4, #20
{
 8002704:	b09a      	sub	sp, #104	; 0x68
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002706:	4622      	mov	r2, r4
 8002708:	2100      	movs	r1, #0
 800270a:	a802      	add	r0, sp, #8
 800270c:	f005 f973 	bl	80079f6 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002710:	2220      	movs	r2, #32
 8002712:	2100      	movs	r1, #0
 8002714:	a812      	add	r0, sp, #72	; 0x48
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002716:	4e33      	ldr	r6, [pc, #204]	; (80027e4 <MX_TIM1_Init+0xe4>)
 8002718:	f005 f96d 	bl	80079f6 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800271c:	2218      	movs	r2, #24
 800271e:	2100      	movs	r1, #0
 8002720:	a80c      	add	r0, sp, #48	; 0x30
 8002722:	f005 f968 	bl	80079f6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002726:	4622      	mov	r2, r4
 8002728:	2100      	movs	r1, #0
 800272a:	a807      	add	r0, sp, #28
 800272c:	f005 f963 	bl	80079f6 <memset>
 8002730:	69b3      	ldr	r3, [r6, #24]
  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 7199;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct.RepetitionCounter = 0;
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002732:	4d2d      	ldr	r5, [pc, #180]	; (80027e8 <MX_TIM1_Init+0xe8>)
 8002734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002738:	61b3      	str	r3, [r6, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800273a:	69b3      	ldr	r3, [r6, #24]
 800273c:	a902      	add	r1, sp, #8
 800273e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002742:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002744:	9b01      	ldr	r3, [sp, #4]
  TIM_InitStruct.Autoreload = 7199;
 8002746:	f641 431f 	movw	r3, #7199	; 0x1c1f
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800274a:	4628      	mov	r0, r5
  TIM_InitStruct.Autoreload = 7199;
 800274c:	9304      	str	r3, [sp, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800274e:	f7ff fbab 	bl	8001ea8 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002752:	682b      	ldr	r3, [r5, #0]
  LL_TIM_DisableARRPreload(TIM1);
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002754:	2400      	movs	r4, #0
 8002756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800275a:	602b      	str	r3, [r5, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800275c:	69ab      	ldr	r3, [r5, #24]
  TIM_OC_InitStruct.CompareValue = 0;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800275e:	aa12      	add	r2, sp, #72	; 0x48
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	61ab      	str	r3, [r5, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002766:	2360      	movs	r3, #96	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002768:	2101      	movs	r1, #1
 800276a:	4628      	mov	r0, r5
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800276c:	9312      	str	r3, [sp, #72]	; 0x48
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800276e:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002770:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_OC_InitStruct.CompareValue = 0;
 8002772:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002774:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002776:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002778:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800277a:	9419      	str	r4, [sp, #100]	; 0x64
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800277c:	f7ff fbcc 	bl	8001f18 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002780:	69ab      	ldr	r3, [r5, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
  TIM_BDTRInitStruct.DeadTime = 0;
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002782:	a90c      	add	r1, sp, #48	; 0x30
 8002784:	f023 0304 	bic.w	r3, r3, #4
 8002788:	61ab      	str	r3, [r5, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800278a:	686b      	ldr	r3, [r5, #4]
 800278c:	4628      	mov	r0, r5
 800278e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002792:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002794:	68ab      	ldr	r3, [r5, #8]
 8002796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800279a:	60ab      	str	r3, [r5, #8]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800279c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80027a0:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80027a2:	9310      	str	r3, [sp, #64]	; 0x40
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80027a4:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80027a6:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_BDTRInitStruct.DeadTime = 0;
 80027a8:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80027ac:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80027b0:	9411      	str	r4, [sp, #68]	; 0x44
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80027b2:	f7ff fc79 	bl	80020a8 <LL_TIM_BDTR_Init>
  SET_BIT(RCC->APB2ENR, Periphs);
 80027b6:	69b3      	ldr	r3, [r6, #24]
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b8:	a907      	add	r1, sp, #28
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	61b3      	str	r3, [r6, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80027c0:	69b3      	ldr	r3, [r6, #24]
 80027c2:	480a      	ldr	r0, [pc, #40]	; (80027ec <MX_TIM1_Init+0xec>)
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80027ca:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <MX_TIM1_Init+0xf0>)
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027ce:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80027d0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027d2:	2309      	movs	r3, #9
 80027d4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027d6:	2302      	movs	r3, #2
 80027d8:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f7ff fa87 	bl	8001cec <LL_GPIO_Init>

}
 80027de:	b01a      	add	sp, #104	; 0x68
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40010800 	.word	0x40010800
 80027f0:	04010001 	.word	0x04010001

080027f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80027f6:	2100      	movs	r1, #0
 80027f8:	2214      	movs	r2, #20
 80027fa:	a801      	add	r0, sp, #4
 80027fc:	f005 f8fb 	bl	80079f6 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <MX_TIM2_Init+0x74>)
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002812:	9b00      	ldr	r3, [sp, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <MX_TIM2_Init+0x78>)
 8002816:	68d8      	ldr	r0, [r3, #12]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002818:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800281c:	f7ff ff6e 	bl	80026fc <NVIC_EncodePriority.constprop.2>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <MX_TIM2_Init+0x7c>)
 8002826:	0100      	lsls	r0, r0, #4
 8002828:	b2c0      	uxtb	r0, r0
 800282a:	f883 031c 	strb.w	r0, [r3, #796]	; 0x31c

  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 0;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800282e:	a901      	add	r1, sp, #4
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002836:	f7ff fb37 	bl	8001ea8 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800283a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002844:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800284c:	f022 0207 	bic.w	r2, r2, #7
 8002850:	609a      	str	r2, [r3, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002858:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002860:	609a      	str	r2, [r3, #8]
  LL_TIM_DisableARRPreload(TIM2);
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM2);

}
 8002862:	b007      	add	sp, #28
 8002864:	f85d fb04 	ldr.w	pc, [sp], #4
 8002868:	40021000 	.word	0x40021000
 800286c:	e000ed00 	.word	0xe000ed00
 8002870:	e000e100 	.word	0xe000e100

08002874 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002874:	b510      	push	{r4, lr}
 8002876:	b086      	sub	sp, #24
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002878:	2100      	movs	r1, #0
 800287a:	2214      	movs	r2, #20
 800287c:	a801      	add	r0, sp, #4
 800287e:	f005 f8ba 	bl	80079f6 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <MX_TIM3_Init+0x70>)

  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 0;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002884:	4c18      	ldr	r4, [pc, #96]	; (80028e8 <MX_TIM3_Init+0x74>)
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	f042 0202 	orr.w	r2, r2, #2
 800288c:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002896:	9b00      	ldr	r3, [sp, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <MX_TIM3_Init+0x78>)
 800289a:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800289c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80028a0:	f7ff ff2c 	bl	80026fc <NVIC_EncodePriority.constprop.2>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80028a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <MX_TIM3_Init+0x7c>)
 80028aa:	0100      	lsls	r0, r0, #4
 80028ac:	b2c0      	uxtb	r0, r0
 80028ae:	f883 031d 	strb.w	r0, [r3, #797]	; 0x31d
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80028b2:	a901      	add	r1, sp, #4
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7ff faf6 	bl	8001ea8 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80028c4:	68a3      	ldr	r3, [r4, #8]
 80028c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ca:	f023 0307 	bic.w	r3, r3, #7
 80028ce:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80028d0:	6863      	ldr	r3, [r4, #4]
 80028d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d6:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80028d8:	68a3      	ldr	r3, [r4, #8]
 80028da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028de:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM3);

}
 80028e0:	b006      	add	sp, #24
 80028e2:	bd10      	pop	{r4, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40000400 	.word	0x40000400
 80028ec:	e000ed00 	.word	0xe000ed00
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028f4:	b510      	push	{r4, lr}
 80028f6:	b08e      	sub	sp, #56	; 0x38
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80028f8:	2218      	movs	r2, #24
 80028fa:	2100      	movs	r1, #0
 80028fc:	a808      	add	r0, sp, #32
 80028fe:	f005 f87a 	bl	80079f6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002902:	2214      	movs	r2, #20
 8002904:	2100      	movs	r1, #0
 8002906:	a803      	add	r0, sp, #12
 8002908:	f005 f875 	bl	80079f6 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <MX_USART1_UART_Init+0xb0>)
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290e:	4c26      	ldr	r4, [pc, #152]	; (80029a8 <MX_USART1_UART_Init+0xb4>)
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	a903      	add	r1, sp, #12
 8002914:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002918:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	4620      	mov	r0, r4
 800291e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002922:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002924:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	f042 0208 	orr.w	r2, r2, #8
 800292c:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002936:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002938:	f244 0340 	movw	r3, #16448	; 0x4040
 800293c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800293e:	2309      	movs	r3, #9
 8002940:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	9305      	str	r3, [sp, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	f7ff f9d1 	bl	8001cec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800294a:	f248 0380 	movw	r3, #32896	; 0x8080
 800294e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002950:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002952:	a903      	add	r1, sp, #12
 8002954:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002956:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002958:	f7ff f9c8 	bl	8001cec <LL_GPIO_Init>
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP);
 800295c:	4a13      	ldr	r2, [pc, #76]	; (80029ac <MX_USART1_UART_Init+0xb8>)
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
  LL_USART_Init(USART1, &USART_InitStruct);
 800295e:	f504 5430 	add.w	r4, r4, #11264	; 0x2c00
 8002962:	6853      	ldr	r3, [r2, #4]
 8002964:	a908      	add	r1, sp, #32
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	6053      	str	r3, [r2, #4]
  USART_InitStruct.BaudRate = 921600;
 800296c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002970:	220c      	movs	r2, #12
  USART_InitStruct.BaudRate = 921600;
 8002972:	9308      	str	r3, [sp, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002974:	2300      	movs	r3, #0
  LL_USART_Init(USART1, &USART_InitStruct);
 8002976:	4620      	mov	r0, r4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002978:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800297a:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800297c:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800297e:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002980:	920c      	str	r2, [sp, #48]	; 0x30
  LL_USART_Init(USART1, &USART_InitStruct);
 8002982:	f7ff fbab 	bl	80020dc <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002986:	6923      	ldr	r3, [r4, #16]
 8002988:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800298c:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800298e:	6963      	ldr	r3, [r4, #20]
 8002990:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002994:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002996:	68e3      	ldr	r3, [r4, #12]
 8002998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800299c:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART1);
  LL_USART_Enable(USART1);

}
 800299e:	b00e      	add	sp, #56	; 0x38
 80029a0:	bd10      	pop	{r4, pc}
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40010c00 	.word	0x40010c00
 80029ac:	40010000 	.word	0x40010000

080029b0 <coolant_get_state>:
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <coolant_get_state+0x14>)
 80029b2:	68d8      	ldr	r0, [r3, #12]
 80029b4:	68db      	ldr	r3, [r3, #12]


// Returns current coolant output state. Overrides may alter it from programmed state.
uint8_t coolant_get_state()
{
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 80029b6:	f3c0 3040 	ubfx	r0, r0, #13, #1
  if (bit_istrue(GPIO_ReadOutputData(COOL_FLOOD_GPIO_Port),COOL_FLOOD_Pin))
  {
    cl_state |= COOLANT_STATE_FLOOD;
  }
  #ifdef ENABLE_M7
  if (bit_istrue(GPIO_ReadOutputData(COOL_MIST_GPIO_Port),COOL_MIST_Pin))
 80029ba:	045b      	lsls	r3, r3, #17
  {
    cl_state |= COOLANT_STATE_MIST;
 80029bc:	bf48      	it	mi
 80029be:	f040 0002 	orrmi.w	r0, r0, #2
    }
  #endif
#endif

  return(cl_state);
}
 80029c2:	4770      	bx	lr
 80029c4:	40011000 	.word	0x40011000

080029c8 <coolant_stop>:


// Directly called by coolant_init(), coolant_set_state(), and mc_reset(), which can be at
// an interrupt-level. No report flag set, but only called by routines that don't need it.
void coolant_stop()
{
 80029c8:	b510      	push	{r4, lr}
  #endif //-- ENABLE_M7
*/
#ifdef INVERT_COOLANT_FLOOD_PIN
  GPIO_SetBits(COOL_FLOOD_GPIO_Port,COOL_FLOOD_Pin);
#else
  GPIO_ResetBits(COOL_FLOOD_GPIO_Port,COOL_FLOOD_Pin);
 80029ca:	4c06      	ldr	r4, [pc, #24]	; (80029e4 <coolant_stop+0x1c>)
 80029cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029d0:	4620      	mov	r0, r4
 80029d2:	f004 ffd1 	bl	8007978 <GPIO_ResetBits>
#endif
#ifdef ENABLE_M7
  #ifdef INVERT_COOLANT_MIST_PIN
    GPIO_SetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
  #else
    GPIO_ResetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
 80029d6:	4620      	mov	r0, r4
    #else
      COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
    #endif
  #endif
#endif
}
 80029d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GPIO_ResetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
 80029dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029e0:	f004 bfca 	b.w	8007978 <GPIO_ResetBits>
 80029e4:	40011000 	.word	0x40011000

080029e8 <coolant_init>:
  coolant_stop();
 80029e8:	f7ff bfee 	b.w	80029c8 <coolant_stop>

080029ec <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 80029ec:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 80029ee:	4c0c      	ldr	r4, [pc, #48]	; (8002a20 <coolant_set_state+0x34>)
{
 80029f0:	4605      	mov	r5, r0
  if (sys.abort) { return; } // Block during abort.  
 80029f2:	7862      	ldrb	r2, [r4, #1]
 80029f4:	b922      	cbnz	r2, 8002a00 <coolant_set_state+0x14>

#ifdef STM32

  if (mode == COOLANT_DISABLE)
 80029f6:	b920      	cbnz	r0, 8002a02 <coolant_set_state+0x16>
  {
    coolant_stop();
 80029f8:	f7ff ffe6 	bl	80029c8 <coolant_stop>
      }
    #endif
  
  }
#endif
  sys.report_ovr_counter = 0; // Set to report change immediately
 80029fc:	2300      	movs	r3, #0
 80029fe:	7323      	strb	r3, [r4, #12]
 8002a00:	bd38      	pop	{r3, r4, r5, pc}
    if (mode & COOLANT_FLOOD_ENABLE)
 8002a02:	0642      	lsls	r2, r0, #25
 8002a04:	d504      	bpl.n	8002a10 <coolant_set_state+0x24>
        GPIO_SetBits(COOL_FLOOD_GPIO_Port,COOL_FLOOD_Pin);
 8002a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a0a:	4806      	ldr	r0, [pc, #24]	; (8002a24 <coolant_set_state+0x38>)
 8002a0c:	f004 ffb7 	bl	800797e <GPIO_SetBits>
      if (mode & COOLANT_MIST_ENABLE)
 8002a10:	062b      	lsls	r3, r5, #24
 8002a12:	d5f3      	bpl.n	80029fc <coolant_set_state+0x10>
          GPIO_SetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
 8002a14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <coolant_set_state+0x38>)
 8002a1a:	f004 ffb0 	bl	800797e <GPIO_SetBits>
 8002a1e:	e7ed      	b.n	80029fc <coolant_set_state+0x10>
 8002a20:	20002e30 	.word	0x20002e30
 8002a24:	40011000 	.word	0x40011000

08002a28 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8002a28:	b510      	push	{r4, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <coolant_sync+0x1c>)
{
 8002a2c:	4604      	mov	r4, r0
  if (sys.state == STATE_CHECK_MODE) { return; }
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d006      	beq.n	8002a42 <coolant_sync+0x1a>
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8002a34:	f002 fe0e 	bl	8005654 <protocol_buffer_synchronize>
  coolant_set_state(mode);
 8002a38:	4620      	mov	r0, r4
}
 8002a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  coolant_set_state(mode);
 8002a3e:	f7ff bfd5 	b.w	80029ec <coolant_set_state>
 8002a42:	bd10      	pop	{r4, pc}
 8002a44:	20002e30 	.word	0x20002e30

08002a48 <eeprom_flush>:
#endif


#ifdef STM32
void eeprom_flush()
{
 8002a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
#endif

  while (nSize > 0)
  {
    if (*pBuffer != 0xffff)
 8002a4c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  HAL_FLASH_Unlock();
 8002a50:	f7fe fcb2 	bl	80013b8 <HAL_FLASH_Unlock>
  FLASH_PageErase(EEPROM_START_ADDRESS);
 8002a54:	4817      	ldr	r0, [pc, #92]	; (8002ab4 <eeprom_flush+0x6c>)
 8002a56:	f7fe fd3b 	bl	80014d0 <FLASH_PageErase>
  FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); //-- !!
 8002a5a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a5e:	f7fe fcc7 	bl	80013f0 <FLASH_WaitForLastOperation>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002a62:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <eeprom_flush+0x70>)
  uint32_t nAddress = EEPROM_START_ADDRESS;
 8002a64:	4d13      	ldr	r5, [pc, #76]	; (8002ab4 <eeprom_flush+0x6c>)
  CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002a66:	6913      	ldr	r3, [r2, #16]
    if (*pBuffer != 0xffff)
 8002a68:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002ac8 <eeprom_flush+0x80>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002a6c:	f023 0302 	bic.w	r3, r3, #2
 8002a70:	4f12      	ldr	r7, [pc, #72]	; (8002abc <eeprom_flush+0x74>)
 8002a72:	6113      	str	r3, [r2, #16]
    if (*pBuffer != 0xffff)
 8002a74:	f835 2008 	ldrh.w	r2, [r5, r8]
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <eeprom_flush+0x78>)
 8002a7a:	42b2      	cmp	r2, r6
 8002a7c:	442b      	add	r3, r5
 8002a7e:	d016      	beq.n	8002aae <eeprom_flush+0x66>
 8002a80:	18fc      	adds	r4, r7, r3
    {
      //FLASH_ProgramHalfWord(nAddress, *pBuffer++);
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, nAddress, *pBuffer++);
 8002a82:	4629      	mov	r1, r5
 8002a84:	2300      	movs	r3, #0
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7fe fcdc 	bl	8001444 <HAL_FLASH_Program>
 8002a8c:	4623      	mov	r3, r4
    }
    else
    {
      pBuffer++;
    }
    if (*pBuffer != 0xffff)
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	42b2      	cmp	r2, r6
 8002a92:	d004      	beq.n	8002a9e <eeprom_flush+0x56>
    {
    	//FLASH_Program_HalfWord(nAddress + 2, *pBuffer++);
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, nAddress+2, *pBuffer++);
 8002a94:	2300      	movs	r3, #0
 8002a96:	1ca9      	adds	r1, r5, #2
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f7fe fcd3 	bl	8001444 <HAL_FLASH_Program>
  while (nSize > 0)
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <eeprom_flush+0x7c>)
    else
    {
      pBuffer++;
    }
    nSize -= 4;
    nAddress += 4;
 8002aa0:	3504      	adds	r5, #4
  while (nSize > 0)
 8002aa2:	429d      	cmp	r5, r3
 8002aa4:	d1e6      	bne.n	8002a74 <eeprom_flush+0x2c>
  }

  HAL_FLASH_Lock();

}
 8002aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_FLASH_Lock();
 8002aaa:	f7fe bc97 	b.w	80013dc <HAL_FLASH_Lock>
 8002aae:	443b      	add	r3, r7
 8002ab0:	e7ed      	b.n	8002a8e <eeprom_flush+0x46>
 8002ab2:	bf00      	nop
 8002ab4:	0801fc00 	.word	0x0801fc00
 8002ab8:	40022000 	.word	0x40022000
 8002abc:	20002e61 	.word	0x20002e61
 8002ac0:	f7fe0402 	.word	0xf7fe0402
 8002ac4:	08020000 	.word	0x08020000
 8002ac8:	17fe3261 	.word	0x17fe3261

08002acc <eeprom_init>:
  uint16_t VarIdx = 0;
  uint8_t *pTmp = EE_Buffer;

  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
  {
    *pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8002acc:	4a0c      	ldr	r2, [pc, #48]	; (8002b00 <eeprom_init+0x34>)
{
 8002ace:	b530      	push	{r4, r5, lr}
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <eeprom_init+0x38>)
  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002ad4:	4c0c      	ldr	r4, [pc, #48]	; (8002b08 <eeprom_init+0x3c>)
    *pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8002ad6:	781d      	ldrb	r5, [r3, #0]
 8002ad8:	f103 4178 	add.w	r1, r3, #4160749568	; 0xf8000000
 8002adc:	3301      	adds	r3, #1
 8002ade:	f5a1 31fe 	sub.w	r1, r1, #130048	; 0x1fc00
  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002ae2:	42a3      	cmp	r3, r4
    *pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8002ae4:	5455      	strb	r5, [r2, r1]
  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002ae6:	d1f6      	bne.n	8002ad6 <eeprom_init+0xa>
  }

  if (EE_Buffer[0] != SETTINGS_VERSION)
 8002ae8:	7813      	ldrb	r3, [r2, #0]
 8002aea:	2b0d      	cmp	r3, #13
 8002aec:	d006      	beq.n	8002afc <eeprom_init+0x30>
 8002aee:	2300      	movs	r3, #0
  {
    pTmp = EE_Buffer;

    for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
    {
      *pTmp++ = 0xFF;
 8002af0:	22ff      	movs	r2, #255	; 0xff
 8002af2:	54c2      	strb	r2, [r0, r3]
 8002af4:	3301      	adds	r3, #1
    for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afa:	d1fa      	bne.n	8002af2 <eeprom_init+0x26>
 8002afc:	bd30      	pop	{r4, r5, pc}
 8002afe:	bf00      	nop
 8002b00:	20002e61 	.word	0x20002e61
 8002b04:	0801fc00 	.word	0x0801fc00
 8002b08:	08020000 	.word	0x08020000

08002b0c <eeprom_get_char>:
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
}
 8002b0c:	4b01      	ldr	r3, [pc, #4]	; (8002b14 <eeprom_get_char+0x8>)
 8002b0e:	5c18      	ldrb	r0, [r3, r0]
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20002e61 	.word	0x20002e61

08002b18 <eeprom_put_char>:
 *  \param  new_value  New EEPROM value.
 */
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
#ifdef STM32
  EE_Buffer[addr] = new_value;
 8002b18:	4b01      	ldr	r3, [pc, #4]	; (8002b20 <eeprom_put_char+0x8>)
 8002b1a:	5419      	strb	r1, [r3, r0]
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20002e61 	.word	0x20002e61

08002b24 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
 8002b24:	2300      	movs	r3, #0
void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8002b26:	b4f0      	push	{r4, r5, r6, r7}
 8002b28:	4c0a      	ldr	r4, [pc, #40]	; (8002b54 <memcpy_to_eeprom_with_checksum+0x30>)
 8002b2a:	1e45      	subs	r5, r0, #1
 8002b2c:	4425      	add	r5, r4
 8002b2e:	188f      	adds	r7, r1, r2
  for(; size > 0; size--) { 
 8002b30:	42b9      	cmp	r1, r7
 8002b32:	d104      	bne.n	8002b3e <memcpy_to_eeprom_with_checksum+0x1a>
  EE_Buffer[addr] = new_value;
 8002b34:	4420      	add	r0, r4
 8002b36:	5483      	strb	r3, [r0, r2]

#ifdef STM32
  eeprom_flush();
#endif

}
 8002b38:	bcf0      	pop	{r4, r5, r6, r7}
  eeprom_flush();
 8002b3a:	f7ff bf85 	b.w	8002a48 <eeprom_flush>
    checksum = (checksum << 1) || (checksum >> 7);
 8002b3e:	b93b      	cbnz	r3, 8002b50 <memcpy_to_eeprom_with_checksum+0x2c>
 8002b40:	09db      	lsrs	r3, r3, #7
    checksum += *source;
 8002b42:	f811 6b01 	ldrb.w	r6, [r1], #1
 8002b46:	4433      	add	r3, r6
 8002b48:	b2db      	uxtb	r3, r3
  EE_Buffer[addr] = new_value;
 8002b4a:	f805 6f01 	strb.w	r6, [r5, #1]!
 8002b4e:	e7ef      	b.n	8002b30 <memcpy_to_eeprom_with_checksum+0xc>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e7f6      	b.n	8002b42 <memcpy_to_eeprom_with_checksum+0x1e>
 8002b54:	20002e61 	.word	0x20002e61

08002b58 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
 8002b58:	2300      	movs	r3, #0
int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8002b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5c:	4c0b      	ldr	r4, [pc, #44]	; (8002b8c <memcpy_from_eeprom_with_checksum+0x34>)
 8002b5e:	1e4d      	subs	r5, r1, #1
 8002b60:	4425      	add	r5, r4
 8002b62:	1887      	adds	r7, r0, r2
  for(; size > 0; size--) { 
 8002b64:	42b8      	cmp	r0, r7
 8002b66:	d105      	bne.n	8002b74 <memcpy_from_eeprom_with_checksum+0x1c>
  return EE_Buffer[addr];
 8002b68:	4421      	add	r1, r4
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
 8002b6a:	5c88      	ldrb	r0, [r1, r2]
}
 8002b6c:	1ac3      	subs	r3, r0, r3
 8002b6e:	4258      	negs	r0, r3
 8002b70:	4158      	adcs	r0, r3
 8002b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return EE_Buffer[addr];
 8002b74:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    checksum = (checksum << 1) || (checksum >> 7);
 8002b78:	b92b      	cbnz	r3, 8002b86 <memcpy_from_eeprom_with_checksum+0x2e>
 8002b7a:	09db      	lsrs	r3, r3, #7
    checksum += data;    
 8002b7c:	4433      	add	r3, r6
 8002b7e:	b2db      	uxtb	r3, r3
    *(destination++) = data; 
 8002b80:	f800 6b01 	strb.w	r6, [r0], #1
 8002b84:	e7ee      	b.n	8002b64 <memcpy_from_eeprom_with_checksum+0xc>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e7f8      	b.n	8002b7c <memcpy_from_eeprom_with_checksum+0x24>
 8002b8a:	bf00      	nop
 8002b8c:	20002e61 	.word	0x20002e61

08002b90 <gc_init>:
parser_block_t gc_block;

#define FAIL(status) return(status);

void gc_init()
{
 8002b90:	b508      	push	{r3, lr}
	memset(&gc_state, 0, sizeof(parser_state_t));
 8002b92:	2100      	movs	r1, #0
 8002b94:	2248      	movs	r2, #72	; 0x48
 8002b96:	4807      	ldr	r0, [pc, #28]	; (8002bb4 <gc_init+0x24>)
 8002b98:	f004 ff2d 	bl	80079f6 <memset>

	// Load default G54 coordinate system.
	if (!(settings_read_coord_data(gc_state.modal.coord_select,
 8002b9c:	4906      	ldr	r1, [pc, #24]	; (8002bb8 <gc_init+0x28>)
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f003 fb35 	bl	800620e <settings_read_coord_data>
 8002ba4:	b920      	cbnz	r0, 8002bb0 <gc_init+0x20>
			gc_state.coord_system)))
	{
		report_status_message(STATUS_SETTING_READ_FAIL);
	}
}
 8002ba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		report_status_message(STATUS_SETTING_READ_FAIL);
 8002baa:	2007      	movs	r0, #7
 8002bac:	f002 bdaa 	b.w	8005704 <report_status_message>
 8002bb0:	bd08      	pop	{r3, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20003264 	.word	0x20003264
 8002bb8:	20003290 	.word	0x20003290

08002bbc <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
	system_convert_array_steps_to_mpos(gc_state.position, sys_position);
 8002bbc:	4901      	ldr	r1, [pc, #4]	; (8002bc4 <gc_sync_position+0x8>)
 8002bbe:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <gc_sync_position+0xc>)
 8002bc0:	f004 bc0e 	b.w	80073e0 <system_convert_array_steps_to_mpos>
 8002bc4:	20002e54 	.word	0x20002e54
 8002bc8:	20003284 	.word	0x20003284
 8002bcc:	00000000 	.word	0x00000000

08002bd0 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8002bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd4:	b097      	sub	sp, #92	; 0x5c
 8002bd6:	9006      	str	r0, [sp, #24]
	 updates these modes and commands as the block line is parser and will only be used and
	 executed after successful error-checking. The parser block struct also contains a block
	 values struct, word tracking variables, and a non-modal commands tracker for the new
	 block. This struct contains all of the necessary information to execute the block. */

	memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8002bd8:	224c      	movs	r2, #76	; 0x4c
 8002bda:	2100      	movs	r1, #0
 8002bdc:	48ac      	ldr	r0, [pc, #688]	; (8002e90 <gc_execute_line+0x2c0>)
 8002bde:	f004 ff0a 	bl	80079f6 <memset>
	memcpy(&gc_block.modal, &gc_state.modal, sizeof(gc_modal_t)); // Copy current modes
 8002be2:	4bac      	ldr	r3, [pc, #688]	; (8002e94 <gc_execute_line+0x2c4>)
 8002be4:	4aac      	ldr	r2, [pc, #688]	; (8002e98 <gc_execute_line+0x2c8>)
 8002be6:	4698      	mov	r8, r3
 8002be8:	f103 0508 	add.w	r5, r3, #8
 8002bec:	461c      	mov	r4, r3
 8002bee:	cc03      	ldmia	r4!, {r0, r1}
 8002bf0:	42ac      	cmp	r4, r5
 8002bf2:	6010      	str	r0, [r2, #0]
 8002bf4:	6051      	str	r1, [r2, #4]
 8002bf6:	4623      	mov	r3, r4
 8002bf8:	f102 0208 	add.w	r2, r2, #8
 8002bfc:	d1f6      	bne.n	8002bec <gc_execute_line+0x1c>
 8002bfe:	6820      	ldr	r0, [r4, #0]
 8002c00:	f04f 0a00 	mov.w	sl, #0
 8002c04:	6010      	str	r0, [r2, #0]
 8002c06:	79a3      	ldrb	r3, [r4, #6]
 8002c08:	88a1      	ldrh	r1, [r4, #4]
 8002c0a:	7193      	strb	r3, [r2, #6]
 8002c0c:	8091      	strh	r1, [r2, #4]
	uint32_t value_words = 0; // Tracks value words.

	uint8_t gc_parser_flags = GC_PARSER_NONE;

	// Determine if the line is a jogging motion or a normal g-code block.
	if (line[0] == '$')
 8002c0e:	9b06      	ldr	r3, [sp, #24]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b24      	cmp	r3, #36	; 0x24
 8002c14:	f040 879f 	bne.w	8003b56 <gc_execute_line+0xf86>
	{ // NOTE: `$J=` already parsed when passed to this function.
		// Set G1 and G94 enforced modes to ensure accurate error checks.
		gc_parser_flags |= GC_PARSER_JOG_MOTION;
		gc_block.modal.motion = MOTION_MODE_LINEAR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	4a9d      	ldr	r2, [pc, #628]	; (8002e90 <gc_execute_line+0x2c0>)
		gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8002c1c:	f882 a002 	strb.w	sl, [r2, #2]
		gc_block.modal.motion = MOTION_MODE_LINEAR;
 8002c20:	7053      	strb	r3, [r2, #1]
	float value;
	uint8_t int_value = 0;
	uint16_t mantissa = 0;
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
	{
		char_counter = 3;
 8002c22:	2203      	movs	r2, #3
		gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8002c24:	469a      	mov	sl, r3
		char_counter = 3;
 8002c26:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
				word_bit = WORD_Y;
				gc_block.values.xyz[Y_AXIS] = value;
				axis_words |= (1 << Y_AXIS);
				break;
			case 'Z':
				word_bit = WORD_Z;
 8002c2a:	2400      	movs	r4, #0
 8002c2c:	4625      	mov	r5, r4
 8002c2e:	4626      	mov	r6, r4
 8002c30:	9408      	str	r4, [sp, #32]
 8002c32:	9407      	str	r4, [sp, #28]
	while (line[char_counter] != 0)
 8002c34:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8002c38:	9b06      	ldr	r3, [sp, #24]
 8002c3a:	f813 b002 	ldrb.w	fp, [r3, r2]
 8002c3e:	f1bb 0f00 	cmp.w	fp, #0
 8002c42:	d123      	bne.n	8002c8c <gc_execute_line+0xbc>
	 */

	// [0. Non-specific/common error-checks and miscellaneous setup]:
	// Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
	// command has been sent. If so, set axis command to current motion mode.
	if (axis_words)
 8002c44:	b115      	cbz	r5, 8002c4c <gc_execute_line+0x7c>
	{
		if (!axis_command)
		{
			axis_command = AXIS_COMMAND_MOTION_MODE;
 8002c46:	2e00      	cmp	r6, #0
 8002c48:	bf08      	it	eq
 8002c4a:	2602      	moveq	r6, #2
		} // Assign implicit motion-mode
	}

	// Check for valid line number N value.
	if (bit_istrue(value_words, bit(WORD_N)))
 8002c4c:	06a2      	lsls	r2, r4, #26
 8002c4e:	d505      	bpl.n	8002c5c <gc_execute_line+0x8c>
	{
		// Line number value cannot be less than zero (done) or greater than max line number.
		if (gc_block.values.n > MAX_LINE_NUMBER)
 8002c50:	4b8f      	ldr	r3, [pc, #572]	; (8002e90 <gc_execute_line+0x2c0>)
 8002c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c54:	4b91      	ldr	r3, [pc, #580]	; (8002e9c <gc_execute_line+0x2cc>)
 8002c56:	429a      	cmp	r2, r3
 8002c58:	f300 8762 	bgt.w	8003b20 <gc_execute_line+0xf50>
	// [1. Comments ]: MSG's NOT SUPPORTED. Comment handling performed by protocol.

	// [2. Set feed rate mode ]: G93 F word missing with G1,G2/3 active, implicitly or explicitly. Feed rate
	//   is not defined after switching to G94 from G93.
	// NOTE: For jogging, ignore prior feed rate mode. Enforce G94 and check for required F word.
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
 8002c5c:	f1ba 0f00 	cmp.w	sl, #0
 8002c60:	f000 81f3 	beq.w	800304a <gc_execute_line+0x47a>
	{
		if (bit_isfalse(value_words, bit(WORD_F)))
 8002c64:	07e3      	lsls	r3, r4, #31
 8002c66:	f140 8764 	bpl.w	8003b32 <gc_execute_line+0xf62>
		{
			FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE);
		}
		if (gc_block.modal.units == UNITS_MODE_INCHES)
 8002c6a:	4f89      	ldr	r7, [pc, #548]	; (8002e90 <gc_execute_line+0x2c0>)
			// - In units per mm mode: If F word passed, ensure value is in mm/min, otherwise push last state value.
			if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN)
			{ // Last state is also G94
				if (bit_istrue(value_words, bit(WORD_F)))
				{
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	f040 81f8 	bne.w	8003064 <gc_execute_line+0x494>
					{
						gc_block.values.f *= MM_PER_INCH;
 8002c74:	6938      	ldr	r0, [r7, #16]
 8002c76:	f7fd fbdb 	bl	8000430 <__aeabi_f2d>
 8002c7a:	a383      	add	r3, pc, #524	; (adr r3, 8002e88 <gc_execute_line+0x2b8>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd fc2a 	bl	80004d8 <__aeabi_dmul>
 8002c84:	f7fd ff20 	bl	8000ac8 <__aeabi_d2f>
 8002c88:	6138      	str	r0, [r7, #16]
 8002c8a:	e1eb      	b.n	8003064 <gc_execute_line+0x494>
		if ((letter < 'A') || (letter > 'Z'))
 8002c8c:	f1ab 0141 	sub.w	r1, fp, #65	; 0x41
 8002c90:	2919      	cmp	r1, #25
 8002c92:	f200 8733 	bhi.w	8003afc <gc_execute_line+0xf2c>
		char_counter++;
 8002c96:	3201      	adds	r2, #1
 8002c98:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
		if (!read_float(line, &char_counter, &value))
 8002c9c:	f10d 013b 	add.w	r1, sp, #59	; 0x3b
 8002ca0:	aa0f      	add	r2, sp, #60	; 0x3c
 8002ca2:	9806      	ldr	r0, [sp, #24]
 8002ca4:	f001 fbcc 	bl	8004440 <read_float>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	f000 872a 	beq.w	8003b02 <gc_execute_line+0xf32>
		int_value = trunc(value);
 8002cae:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8002cb2:	4648      	mov	r0, r9
 8002cb4:	f7fd fbbc 	bl	8000430 <__aeabi_f2d>
 8002cb8:	f005 fc62 	bl	8008580 <trunc>
 8002cbc:	f7fd fee4 	bl	8000a88 <__aeabi_d2uiz>
 8002cc0:	b2c7      	uxtb	r7, r0
		mantissa = round(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8002cc2:	4638      	mov	r0, r7
 8002cc4:	f7fe f80a 	bl	8000cdc <__aeabi_i2f>
 8002cc8:	4601      	mov	r1, r0
 8002cca:	4648      	mov	r0, r9
 8002ccc:	f7fd ff50 	bl	8000b70 <__aeabi_fsub>
 8002cd0:	4973      	ldr	r1, [pc, #460]	; (8002ea0 <gc_execute_line+0x2d0>)
 8002cd2:	f7fe f857 	bl	8000d84 <__aeabi_fmul>
 8002cd6:	f7fd fbab 	bl	8000430 <__aeabi_f2d>
 8002cda:	f005 fc0b 	bl	80084f4 <round>
 8002cde:	f7fd fed3 	bl	8000a88 <__aeabi_d2uiz>
		switch (letter)
 8002ce2:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
		mantissa = round(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8002ce6:	b280      	uxth	r0, r0
		switch (letter)
 8002ce8:	d01f      	beq.n	8002d2a <gc_execute_line+0x15a>
 8002cea:	f1bb 0f4d 	cmp.w	fp, #77	; 0x4d
 8002cee:	f000 80db 	beq.w	8002ea8 <gc_execute_line+0x2d8>
			switch (letter)
 8002cf2:	f1ab 0345 	sub.w	r3, fp, #69	; 0x45
 8002cf6:	2b15      	cmp	r3, #21
 8002cf8:	d824      	bhi.n	8002d44 <gc_execute_line+0x174>
 8002cfa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002cfe:	012d      	.short	0x012d
 8002d00:	00230145 	.word	0x00230145
 8002d04:	014a0023 	.word	0x014a0023
 8002d08:	015c0153 	.word	0x015c0153
 8002d0c:	00230165 	.word	0x00230165
 8002d10:	0023016a 	.word	0x0023016a
 8002d14:	01760171 	.word	0x01760171
 8002d18:	0180017b 	.word	0x0180017b
 8002d1c:	00230185 	.word	0x00230185
 8002d20:	00230023 	.word	0x00230023
 8002d24:	01980191 	.word	0x01980191
 8002d28:	019f      	.short	0x019f
			switch (int_value)
 8002d2a:	2f28      	cmp	r7, #40	; 0x28
 8002d2c:	f000 80a0 	beq.w	8002e70 <gc_execute_line+0x2a0>
 8002d30:	d81e      	bhi.n	8002d70 <gc_execute_line+0x1a0>
 8002d32:	2f13      	cmp	r7, #19
 8002d34:	d808      	bhi.n	8002d48 <gc_execute_line+0x178>
 8002d36:	2f11      	cmp	r7, #17
 8002d38:	d275      	bcs.n	8002e26 <gc_execute_line+0x256>
 8002d3a:	2f04      	cmp	r7, #4
 8002d3c:	d05d      	beq.n	8002dfa <gc_execute_line+0x22a>
 8002d3e:	d312      	bcc.n	8002d66 <gc_execute_line+0x196>
 8002d40:	2f0a      	cmp	r7, #10
 8002d42:	d055      	beq.n	8002df0 <gc_execute_line+0x220>
					FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
				} // [G10 L2 R not supported]
			}
			else
			{
				FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 8002d44:	2314      	movs	r3, #20
 8002d46:	e075      	b.n	8002e34 <gc_execute_line+0x264>
			switch (int_value)
 8002d48:	2f1c      	cmp	r7, #28
 8002d4a:	d051      	beq.n	8002df0 <gc_execute_line+0x220>
 8002d4c:	d807      	bhi.n	8002d5e <gc_execute_line+0x18e>
 8002d4e:	2f15      	cmp	r7, #21
 8002d50:	d8f8      	bhi.n	8002d44 <gc_execute_line+0x174>
				gc_block.modal.units = 21 - int_value;
 8002d52:	4b4f      	ldr	r3, [pc, #316]	; (8002e90 <gc_execute_line+0x2c0>)
 8002d54:	f1c7 0715 	rsb	r7, r7, #21
 8002d58:	70df      	strb	r7, [r3, #3]
				word_bit = MODAL_GROUP_G6;
 8002d5a:	2306      	movs	r3, #6
				break;
 8002d5c:	e067      	b.n	8002e2e <gc_execute_line+0x25e>
			switch (int_value)
 8002d5e:	2f1e      	cmp	r7, #30
 8002d60:	d046      	beq.n	8002df0 <gc_execute_line+0x220>
 8002d62:	2f26      	cmp	r7, #38	; 0x26
 8002d64:	d1ee      	bne.n	8002d44 <gc_execute_line+0x174>
				if (axis_command)
 8002d66:	2e00      	cmp	r6, #0
 8002d68:	f040 86ce 	bne.w	8003b08 <gc_execute_line+0xf38>
				axis_command = AXIS_COMMAND_MOTION_MODE;
 8002d6c:	2602      	movs	r6, #2
 8002d6e:	e020      	b.n	8002db2 <gc_execute_line+0x1e2>
			switch (int_value)
 8002d70:	2f3d      	cmp	r7, #61	; 0x3d
 8002d72:	d078      	beq.n	8002e66 <gc_execute_line+0x296>
 8002d74:	d817      	bhi.n	8002da6 <gc_execute_line+0x1d6>
 8002d76:	2f35      	cmp	r7, #53	; 0x35
 8002d78:	d03f      	beq.n	8002dfa <gc_execute_line+0x22a>
 8002d7a:	d80d      	bhi.n	8002d98 <gc_execute_line+0x1c8>
 8002d7c:	2f2b      	cmp	r7, #43	; 0x2b
 8002d7e:	d001      	beq.n	8002d84 <gc_execute_line+0x1b4>
 8002d80:	2f31      	cmp	r7, #49	; 0x31
 8002d82:	d1df      	bne.n	8002d44 <gc_execute_line+0x174>
				if (axis_command)
 8002d84:	2e00      	cmp	r6, #0
 8002d86:	f040 86bf 	bne.w	8003b08 <gc_execute_line+0xf38>
				if (int_value == 49)
 8002d8a:	2f31      	cmp	r7, #49	; 0x31
 8002d8c:	d164      	bne.n	8002e58 <gc_execute_line+0x288>
					gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 8002d8e:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <gc_execute_line+0x2c0>)
 8002d90:	719e      	strb	r6, [r3, #6]
				word_bit = MODAL_GROUP_G8;
 8002d92:	2308      	movs	r3, #8
				axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8002d94:	2603      	movs	r6, #3
 8002d96:	e03e      	b.n	8002e16 <gc_execute_line+0x246>
			switch (int_value)
 8002d98:	2f3b      	cmp	r7, #59	; 0x3b
 8002d9a:	d8d3      	bhi.n	8002d44 <gc_execute_line+0x174>
				gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8002d9c:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <gc_execute_line+0x2c0>)
 8002d9e:	3f36      	subs	r7, #54	; 0x36
 8002da0:	71df      	strb	r7, [r3, #7]
				word_bit = MODAL_GROUP_G12;
 8002da2:	2309      	movs	r3, #9
				break;
 8002da4:	e043      	b.n	8002e2e <gc_execute_line+0x25e>
			switch (int_value)
 8002da6:	2f5b      	cmp	r7, #91	; 0x5b
 8002da8:	d818      	bhi.n	8002ddc <gc_execute_line+0x20c>
 8002daa:	2f5a      	cmp	r7, #90	; 0x5a
 8002dac:	d246      	bcs.n	8002e3c <gc_execute_line+0x26c>
 8002dae:	2f50      	cmp	r7, #80	; 0x50
 8002db0:	d1c8      	bne.n	8002d44 <gc_execute_line+0x174>
				gc_block.modal.motion = int_value;
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <gc_execute_line+0x2c0>)
				if (int_value == 38)
 8002db4:	2f26      	cmp	r7, #38	; 0x26
				gc_block.modal.motion = int_value;
 8002db6:	705f      	strb	r7, [r3, #1]
				if (int_value == 38)
 8002db8:	d15e      	bne.n	8002e78 <gc_execute_line+0x2a8>
					if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40)
 8002dba:	f1a0 0214 	sub.w	r2, r0, #20
 8002dbe:	b292      	uxth	r2, r2
 8002dc0:	2a1e      	cmp	r2, #30
 8002dc2:	d8bf      	bhi.n	8002d44 <gc_execute_line+0x174>
 8002dc4:	4937      	ldr	r1, [pc, #220]	; (8002ea4 <gc_execute_line+0x2d4>)
 8002dc6:	fa21 f202 	lsr.w	r2, r1, r2
 8002dca:	07d7      	lsls	r7, r2, #31
 8002dcc:	d5ba      	bpl.n	8002d44 <gc_execute_line+0x174>
					gc_block.modal.motion += (mantissa / 10) + 100;
 8002dce:	270a      	movs	r7, #10
 8002dd0:	fbb0 f0f7 	udiv	r0, r0, r7
 8002dd4:	3876      	subs	r0, #118	; 0x76
 8002dd6:	7058      	strb	r0, [r3, #1]
				word_bit = MODAL_GROUP_G1;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e01c      	b.n	8002e16 <gc_execute_line+0x246>
			switch (int_value)
 8002ddc:	2f5c      	cmp	r7, #92	; 0x5c
 8002dde:	d007      	beq.n	8002df0 <gc_execute_line+0x220>
 8002de0:	2f5e      	cmp	r7, #94	; 0x5e
 8002de2:	d8af      	bhi.n	8002d44 <gc_execute_line+0x174>
				gc_block.modal.feed_rate = 94 - int_value;
 8002de4:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <gc_execute_line+0x2c0>)
 8002de6:	f1c7 075e 	rsb	r7, r7, #94	; 0x5e
 8002dea:	709f      	strb	r7, [r3, #2]
				word_bit = MODAL_GROUP_G5;
 8002dec:	2305      	movs	r3, #5
				break;
 8002dee:	e01e      	b.n	8002e2e <gc_execute_line+0x25e>
				if (mantissa == 0)
 8002df0:	b918      	cbnz	r0, 8002dfa <gc_execute_line+0x22a>
					if (axis_command)
 8002df2:	2e00      	cmp	r6, #0
 8002df4:	f040 8688 	bne.w	8003b08 <gc_execute_line+0xf38>
					axis_command = AXIS_COMMAND_NON_MODAL;
 8002df8:	2601      	movs	r6, #1
				gc_block.non_modal_command = int_value;
 8002dfa:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <gc_execute_line+0x2c0>)
				if ((int_value == 28) || (int_value == 30) || (int_value == 92))
 8002dfc:	f007 02fd 	and.w	r2, r7, #253	; 0xfd
 8002e00:	2a1c      	cmp	r2, #28
				gc_block.non_modal_command = int_value;
 8002e02:	701f      	strb	r7, [r3, #0]
				if ((int_value == 28) || (int_value == 30) || (int_value == 92))
 8002e04:	d001      	beq.n	8002e0a <gc_execute_line+0x23a>
 8002e06:	2f5c      	cmp	r7, #92	; 0x5c
 8002e08:	d134      	bne.n	8002e74 <gc_execute_line+0x2a4>
					if (!((mantissa == 0) || (mantissa == 10)))
 8002e0a:	b108      	cbz	r0, 8002e10 <gc_execute_line+0x240>
 8002e0c:	280a      	cmp	r0, #10
 8002e0e:	d199      	bne.n	8002d44 <gc_execute_line+0x174>
					gc_block.non_modal_command += mantissa;
 8002e10:	4438      	add	r0, r7
 8002e12:	7018      	strb	r0, [r3, #0]
				word_bit = MODAL_GROUP_G0;
 8002e14:	2300      	movs	r3, #0
			if (bit_istrue(command_words, bit(word_bit)))
 8002e16:	2201      	movs	r2, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	9a08      	ldr	r2, [sp, #32]
 8002e1e:	421a      	tst	r2, r3
 8002e20:	d02c      	beq.n	8002e7c <gc_execute_line+0x2ac>
				FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION);
 8002e22:	2315      	movs	r3, #21
 8002e24:	e006      	b.n	8002e34 <gc_execute_line+0x264>
				gc_block.modal.plane_select = int_value - 17;
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <gc_execute_line+0x2c0>)
 8002e28:	3f11      	subs	r7, #17
 8002e2a:	715f      	strb	r7, [r3, #5]
				word_bit = MODAL_GROUP_G2;
 8002e2c:	2302      	movs	r3, #2
			if (mantissa > 0)
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	d0f1      	beq.n	8002e16 <gc_execute_line+0x246>
				FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER);
 8002e32:	2317      	movs	r3, #23
#endif

	// TODO: % to denote start of program.

	return (STATUS_OK);
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	b017      	add	sp, #92	; 0x5c
 8002e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (mantissa == 0)
 8002e3c:	b920      	cbnz	r0, 8002e48 <gc_execute_line+0x278>
					gc_block.modal.distance = int_value - 90;
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <gc_execute_line+0x2c0>)
 8002e40:	3f5a      	subs	r7, #90	; 0x5a
 8002e42:	711f      	strb	r7, [r3, #4]
					word_bit = MODAL_GROUP_G3;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e7e6      	b.n	8002e16 <gc_execute_line+0x246>
					if ((mantissa != 10) || (int_value == 90))
 8002e48:	280a      	cmp	r0, #10
 8002e4a:	f47f af7b 	bne.w	8002d44 <gc_execute_line+0x174>
 8002e4e:	2f5a      	cmp	r7, #90	; 0x5a
 8002e50:	f43f af78 	beq.w	8002d44 <gc_execute_line+0x174>
					word_bit = MODAL_GROUP_G4;
 8002e54:	2304      	movs	r3, #4
 8002e56:	e7de      	b.n	8002e16 <gc_execute_line+0x246>
				else if (mantissa == 10)
 8002e58:	280a      	cmp	r0, #10
 8002e5a:	f47f af73 	bne.w	8002d44 <gc_execute_line+0x174>
					gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <gc_execute_line+0x2c0>)
 8002e62:	719a      	strb	r2, [r3, #6]
 8002e64:	e795      	b.n	8002d92 <gc_execute_line+0x1c2>
				if (mantissa != 0)
 8002e66:	2800      	cmp	r0, #0
 8002e68:	f47f af6c 	bne.w	8002d44 <gc_execute_line+0x174>
				word_bit = MODAL_GROUP_G13;
 8002e6c:	230a      	movs	r3, #10
 8002e6e:	e7d2      	b.n	8002e16 <gc_execute_line+0x246>
				word_bit = MODAL_GROUP_G7;
 8002e70:	2307      	movs	r3, #7
 8002e72:	e7dc      	b.n	8002e2e <gc_execute_line+0x25e>
				word_bit = MODAL_GROUP_G0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e7da      	b.n	8002e2e <gc_execute_line+0x25e>
				word_bit = MODAL_GROUP_G1;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e7d8      	b.n	8002e2e <gc_execute_line+0x25e>
			command_words |= bit(word_bit);
 8002e7c:	9a08      	ldr	r2, [sp, #32]
			command_words |= bit(word_bit);
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	9208      	str	r2, [sp, #32]
			break;
 8002e82:	e6d7      	b.n	8002c34 <gc_execute_line+0x64>
 8002e84:	f3af 8000 	nop.w
 8002e88:	66666666 	.word	0x66666666
 8002e8c:	40396666 	.word	0x40396666
 8002e90:	200032ac 	.word	0x200032ac
 8002e94:	20003264 	.word	0x20003264
 8002e98:	200032ad 	.word	0x200032ad
 8002e9c:	00989680 	.word	0x00989680
 8002ea0:	42c80000 	.word	0x42c80000
 8002ea4:	40100401 	.word	0x40100401
			if (mantissa > 0)
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	d1c2      	bne.n	8002e32 <gc_execute_line+0x262>
			switch (int_value)
 8002eac:	2f09      	cmp	r7, #9
 8002eae:	d815      	bhi.n	8002edc <gc_execute_line+0x30c>
 8002eb0:	2f07      	cmp	r7, #7
 8002eb2:	d23a      	bcs.n	8002f2a <gc_execute_line+0x35a>
 8002eb4:	2f02      	cmp	r7, #2
 8002eb6:	d929      	bls.n	8002f0c <gc_execute_line+0x33c>
 8002eb8:	2f05      	cmp	r7, #5
 8002eba:	f63f af43 	bhi.w	8002d44 <gc_execute_line+0x174>
				switch (int_value)
 8002ebe:	2f04      	cmp	r7, #4
 8002ec0:	4bb1      	ldr	r3, [pc, #708]	; (8003188 <gc_execute_line+0x5b8>)
 8002ec2:	d02e      	beq.n	8002f22 <gc_execute_line+0x352>
 8002ec4:	2f05      	cmp	r7, #5
 8002ec6:	d02e      	beq.n	8002f26 <gc_execute_line+0x356>
					gc_block.modal.spindle = SPINDLE_ENABLE_CW;
 8002ec8:	2210      	movs	r2, #16
					gc_block.modal.spindle = SPINDLE_DISABLE;
 8002eca:	729a      	strb	r2, [r3, #10]
				word_bit = MODAL_GROUP_M7;
 8002ecc:	230c      	movs	r3, #12
			if (bit_istrue(command_words, bit(word_bit)))
 8002ece:	2201      	movs	r2, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	9a08      	ldr	r2, [sp, #32]
 8002ed6:	421a      	tst	r2, r3
 8002ed8:	d0d1      	beq.n	8002e7e <gc_execute_line+0x2ae>
 8002eda:	e7a2      	b.n	8002e22 <gc_execute_line+0x252>
			switch (int_value)
 8002edc:	2f3f      	cmp	r7, #63	; 0x3f
 8002ede:	d031      	beq.n	8002f44 <gc_execute_line+0x374>
 8002ee0:	d809      	bhi.n	8002ef6 <gc_execute_line+0x326>
 8002ee2:	2f1e      	cmp	r7, #30
 8002ee4:	d015      	beq.n	8002f12 <gc_execute_line+0x342>
 8002ee6:	2f3e      	cmp	r7, #62	; 0x3e
 8002ee8:	f47f af2c 	bne.w	8002d44 <gc_execute_line+0x174>
				gc_block.modal.digital = DIGITAL_CONTROL_ON;
 8002eec:	2201      	movs	r2, #1
				gc_block.modal.digital = DIGITAL_CONTROL_OFF;
 8002eee:	4ba6      	ldr	r3, [pc, #664]	; (8003188 <gc_execute_line+0x5b8>)
 8002ef0:	731a      	strb	r2, [r3, #12]
				word_bit = MODAL_GROUP_MO;
 8002ef2:	230f      	movs	r3, #15
				break;
 8002ef4:	e7eb      	b.n	8002ece <gc_execute_line+0x2fe>
			switch (int_value)
 8002ef6:	2f43      	cmp	r7, #67	; 0x43
 8002ef8:	d026      	beq.n	8002f48 <gc_execute_line+0x378>
 8002efa:	2f64      	cmp	r7, #100	; 0x64
 8002efc:	d028      	beq.n	8002f50 <gc_execute_line+0x380>
 8002efe:	2f42      	cmp	r7, #66	; 0x42
 8002f00:	f47f af20 	bne.w	8002d44 <gc_execute_line+0x174>
				gc_block.modal.waitoninput = WAITONINPUT_CONTROL;
 8002f04:	2201      	movs	r2, #1
 8002f06:	4ba0      	ldr	r3, [pc, #640]	; (8003188 <gc_execute_line+0x5b8>)
 8002f08:	735a      	strb	r2, [r3, #13]
 8002f0a:	e7f2      	b.n	8002ef2 <gc_execute_line+0x322>
				switch (int_value)
 8002f0c:	b127      	cbz	r7, 8002f18 <gc_execute_line+0x348>
 8002f0e:	2f01      	cmp	r7, #1
 8002f10:	d005      	beq.n	8002f1e <gc_execute_line+0x34e>
					gc_block.modal.program_flow = int_value; // Program end and reset
 8002f12:	4b9d      	ldr	r3, [pc, #628]	; (8003188 <gc_execute_line+0x5b8>)
 8002f14:	721f      	strb	r7, [r3, #8]
 8002f16:	e002      	b.n	8002f1e <gc_execute_line+0x34e>
					gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED;
 8002f18:	2203      	movs	r2, #3
 8002f1a:	4b9b      	ldr	r3, [pc, #620]	; (8003188 <gc_execute_line+0x5b8>)
 8002f1c:	721a      	strb	r2, [r3, #8]
				word_bit = MODAL_GROUP_M4;
 8002f1e:	230b      	movs	r3, #11
 8002f20:	e7d5      	b.n	8002ece <gc_execute_line+0x2fe>
					gc_block.modal.spindle = SPINDLE_ENABLE_CCW;
 8002f22:	2220      	movs	r2, #32
 8002f24:	e7d1      	b.n	8002eca <gc_execute_line+0x2fa>
					gc_block.modal.spindle = SPINDLE_DISABLE;
 8002f26:	2200      	movs	r2, #0
 8002f28:	e7cf      	b.n	8002eca <gc_execute_line+0x2fa>
				switch (int_value)
 8002f2a:	2f08      	cmp	r7, #8
 8002f2c:	4b96      	ldr	r3, [pc, #600]	; (8003188 <gc_execute_line+0x5b8>)
 8002f2e:	d005      	beq.n	8002f3c <gc_execute_line+0x36c>
 8002f30:	2f09      	cmp	r7, #9
 8002f32:	d005      	beq.n	8002f40 <gc_execute_line+0x370>
					gc_block.modal.coolant = COOLANT_MIST_ENABLE;
 8002f34:	2280      	movs	r2, #128	; 0x80
					gc_block.modal.coolant = COOLANT_DISABLE;
 8002f36:	725a      	strb	r2, [r3, #9]
				word_bit = MODAL_GROUP_M8;
 8002f38:	230d      	movs	r3, #13
					break;
 8002f3a:	e7c8      	b.n	8002ece <gc_execute_line+0x2fe>
					gc_block.modal.coolant = COOLANT_FLOOD_ENABLE;
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	e7fa      	b.n	8002f36 <gc_execute_line+0x366>
					gc_block.modal.coolant = COOLANT_DISABLE;
 8002f40:	2200      	movs	r2, #0
 8002f42:	e7f8      	b.n	8002f36 <gc_execute_line+0x366>
				gc_block.modal.digital = DIGITAL_CONTROL_OFF;
 8002f44:	2202      	movs	r2, #2
 8002f46:	e7d2      	b.n	8002eee <gc_execute_line+0x31e>
				gc_block.modal.analog = ANALOG_CONTROL;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4b8f      	ldr	r3, [pc, #572]	; (8003188 <gc_execute_line+0x5b8>)
 8002f4c:	739a      	strb	r2, [r3, #14]
 8002f4e:	e7d0      	b.n	8002ef2 <gc_execute_line+0x322>
				gc_block.modal.accel_scaling = ACCEL_SCALING;
 8002f50:	2201      	movs	r2, #1
 8002f52:	4b8d      	ldr	r3, [pc, #564]	; (8003188 <gc_execute_line+0x5b8>)
 8002f54:	73da      	strb	r2, [r3, #15]
 8002f56:	e7cc      	b.n	8002ef2 <gc_execute_line+0x322>
				gc_block.values.e = int_value;
 8002f58:	4b8b      	ldr	r3, [pc, #556]	; (8003188 <gc_execute_line+0x5b8>)
 8002f5a:	f883 7044 	strb.w	r7, [r3, #68]	; 0x44
				word_bit = WORD_E;
 8002f5e:	2310      	movs	r3, #16
			if (bit_istrue(value_words, bit(word_bit)))
 8002f60:	2701      	movs	r7, #1
 8002f62:	409f      	lsls	r7, r3
 8002f64:	423c      	tst	r4, r7
 8002f66:	f040 85d5 	bne.w	8003b14 <gc_execute_line+0xf44>
			if ( bit(word_bit)
 8002f6a:	f240 3161 	movw	r1, #865	; 0x361
 8002f6e:	fa41 f303 	asr.w	r3, r1, r3
 8002f72:	07d9      	lsls	r1, r3, #31
 8002f74:	d506      	bpl.n	8002f84 <gc_execute_line+0x3b4>
				if (value < 0.0)
 8002f76:	2100      	movs	r1, #0
 8002f78:	4648      	mov	r0, r9
 8002f7a:	f7fe f8a1 	bl	80010c0 <__aeabi_fcmplt>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	f040 85cb 	bne.w	8003b1a <gc_execute_line+0xf4a>
			value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8002f84:	433c      	orrs	r4, r7
 8002f86:	e655      	b.n	8002c34 <gc_execute_line+0x64>
				gc_block.values.f = value;
 8002f88:	4b7f      	ldr	r3, [pc, #508]	; (8003188 <gc_execute_line+0x5b8>)
 8002f8a:	f8c3 9010 	str.w	r9, [r3, #16]
				word_bit = WORD_F;
 8002f8e:	2300      	movs	r3, #0
				break;
 8002f90:	e7e6      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.ijk[X_AXIS] = value;
 8002f92:	4b7d      	ldr	r3, [pc, #500]	; (8003188 <gc_execute_line+0x5b8>)
 8002f94:	f8c3 9014 	str.w	r9, [r3, #20]
				ijk_words |= (1 << X_AXIS);
 8002f98:	9b07      	ldr	r3, [sp, #28]
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	9307      	str	r3, [sp, #28]
				word_bit = WORD_I;
 8002fa0:	2301      	movs	r3, #1
				break;
 8002fa2:	e7dd      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.ijk[Y_AXIS] = value;
 8002fa4:	4b78      	ldr	r3, [pc, #480]	; (8003188 <gc_execute_line+0x5b8>)
 8002fa6:	f8c3 9018 	str.w	r9, [r3, #24]
				ijk_words |= (1 << Y_AXIS);
 8002faa:	9b07      	ldr	r3, [sp, #28]
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	9307      	str	r3, [sp, #28]
				word_bit = WORD_J;
 8002fb2:	2302      	movs	r3, #2
				break;
 8002fb4:	e7d4      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.ijk[Z_AXIS] = value;
 8002fb6:	4b74      	ldr	r3, [pc, #464]	; (8003188 <gc_execute_line+0x5b8>)
 8002fb8:	f8c3 901c 	str.w	r9, [r3, #28]
				ijk_words |= (1 << Z_AXIS);
 8002fbc:	9b07      	ldr	r3, [sp, #28]
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	9307      	str	r3, [sp, #28]
				word_bit = WORD_K;
 8002fc4:	2303      	movs	r3, #3
				break;
 8002fc6:	e7cb      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.l = int_value;
 8002fc8:	4b6f      	ldr	r3, [pc, #444]	; (8003188 <gc_execute_line+0x5b8>)
 8002fca:	f883 7020 	strb.w	r7, [r3, #32]
				word_bit = WORD_L;
 8002fce:	2304      	movs	r3, #4
				break;
 8002fd0:	e7c6      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.n = trunc(value);
 8002fd2:	4648      	mov	r0, r9
 8002fd4:	f7fe f8b2 	bl	800113c <__aeabi_f2iz>
 8002fd8:	4b6b      	ldr	r3, [pc, #428]	; (8003188 <gc_execute_line+0x5b8>)
 8002fda:	6258      	str	r0, [r3, #36]	; 0x24
				word_bit = WORD_N;
 8002fdc:	2305      	movs	r3, #5
				break;
 8002fde:	e7bf      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.p = value;
 8002fe0:	4b69      	ldr	r3, [pc, #420]	; (8003188 <gc_execute_line+0x5b8>)
 8002fe2:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
				word_bit = WORD_P;
 8002fe6:	2306      	movs	r3, #6
				break;
 8002fe8:	e7ba      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.q = value;
 8002fea:	4b67      	ldr	r3, [pc, #412]	; (8003188 <gc_execute_line+0x5b8>)
 8002fec:	f8c3 9048 	str.w	r9, [r3, #72]	; 0x48
				word_bit = WORD_Q;
 8002ff0:	2311      	movs	r3, #17
				break;
 8002ff2:	e7b5      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.r = value;
 8002ff4:	4b64      	ldr	r3, [pc, #400]	; (8003188 <gc_execute_line+0x5b8>)
 8002ff6:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
				word_bit = WORD_R;
 8002ffa:	2307      	movs	r3, #7
				break;
 8002ffc:	e7b0      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.s = value;
 8002ffe:	4b62      	ldr	r3, [pc, #392]	; (8003188 <gc_execute_line+0x5b8>)
 8003000:	f8c3 9030 	str.w	r9, [r3, #48]	; 0x30
				word_bit = WORD_S;
 8003004:	2308      	movs	r3, #8
				break;
 8003006:	e7ab      	b.n	8002f60 <gc_execute_line+0x390>
				if (value > MAX_TOOL_NUMBER)
 8003008:	4960      	ldr	r1, [pc, #384]	; (800318c <gc_execute_line+0x5bc>)
 800300a:	4648      	mov	r0, r9
 800300c:	f7fe f876 	bl	80010fc <__aeabi_fcmpgt>
 8003010:	2800      	cmp	r0, #0
 8003012:	f040 857c 	bne.w	8003b0e <gc_execute_line+0xf3e>
				gc_block.values.t = int_value;
 8003016:	4b5c      	ldr	r3, [pc, #368]	; (8003188 <gc_execute_line+0x5b8>)
 8003018:	f883 7034 	strb.w	r7, [r3, #52]	; 0x34
				word_bit = WORD_T;
 800301c:	2309      	movs	r3, #9
				break;
 800301e:	e79f      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.xyz[X_AXIS] = value;
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <gc_execute_line+0x5b8>)
				axis_words |= (1 << X_AXIS);
 8003022:	f045 0501 	orr.w	r5, r5, #1
				gc_block.values.xyz[X_AXIS] = value;
 8003026:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
				word_bit = WORD_X;
 800302a:	230a      	movs	r3, #10
				break;
 800302c:	e798      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.xyz[Y_AXIS] = value;
 800302e:	4b56      	ldr	r3, [pc, #344]	; (8003188 <gc_execute_line+0x5b8>)
				axis_words |= (1 << Y_AXIS);
 8003030:	f045 0502 	orr.w	r5, r5, #2
				gc_block.values.xyz[Y_AXIS] = value;
 8003034:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
				word_bit = WORD_Y;
 8003038:	230b      	movs	r3, #11
				break;
 800303a:	e791      	b.n	8002f60 <gc_execute_line+0x390>
				gc_block.values.xyz[Z_AXIS] = value;
 800303c:	4b52      	ldr	r3, [pc, #328]	; (8003188 <gc_execute_line+0x5b8>)
				axis_words |= (1 << Z_AXIS);
 800303e:	f045 0504 	orr.w	r5, r5, #4
				gc_block.values.xyz[Z_AXIS] = value;
 8003042:	f8c3 9040 	str.w	r9, [r3, #64]	; 0x40
				word_bit = WORD_Z;
 8003046:	230c      	movs	r3, #12
				break;
 8003048:	e78a      	b.n	8002f60 <gc_execute_line+0x390>
		if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME)
 800304a:	4f4f      	ldr	r7, [pc, #316]	; (8003188 <gc_execute_line+0x5b8>)
 800304c:	78bb      	ldrb	r3, [r7, #2]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d117      	bne.n	8003082 <gc_execute_line+0x4b2>
			if (axis_command == AXIS_COMMAND_MOTION_MODE)
 8003052:	2e02      	cmp	r6, #2
 8003054:	d106      	bne.n	8003064 <gc_execute_line+0x494>
				if ((gc_block.modal.motion != MOTION_MODE_NONE)
 8003056:	787b      	ldrb	r3, [r7, #1]
 8003058:	2b50      	cmp	r3, #80	; 0x50
 800305a:	d003      	beq.n	8003064 <gc_execute_line+0x494>
						&& (gc_block.modal.motion != MOTION_MODE_SEEK))
 800305c:	b113      	cbz	r3, 8003064 <gc_execute_line+0x494>
					if (bit_isfalse(value_words, bit(WORD_F)))
 800305e:	07e7      	lsls	r7, r4, #31
 8003060:	f140 8567 	bpl.w	8003b32 <gc_execute_line+0xf62>
	if (bit_isfalse(value_words, bit(WORD_S)))
 8003064:	f414 7f80 	tst.w	r4, #256	; 0x100
		gc_block.values.s = gc_state.spindle_speed;
 8003068:	bf08      	it	eq
 800306a:	f8d8 3010 	ldreq.w	r3, [r8, #16]
 800306e:	4f46      	ldr	r7, [pc, #280]	; (8003188 <gc_execute_line+0x5b8>)
 8003070:	bf08      	it	eq
 8003072:	633b      	streq	r3, [r7, #48]	; 0x30
	if (gc_block.non_modal_command == NON_MODAL_DWELL)
 8003074:	783b      	ldrb	r3, [r7, #0]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d110      	bne.n	800309c <gc_execute_line+0x4cc>
		if (bit_isfalse(value_words, bit(WORD_P)))
 800307a:	0661      	lsls	r1, r4, #25
 800307c:	d40c      	bmi.n	8003098 <gc_execute_line+0x4c8>
			FAIL(STATUS_GCODE_VALUE_WORD_MISSING);
 800307e:	231c      	movs	r3, #28
 8003080:	e6d8      	b.n	8002e34 <gc_execute_line+0x264>
			if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN)
 8003082:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1ec      	bne.n	8003064 <gc_execute_line+0x494>
				if (bit_istrue(value_words, bit(WORD_F)))
 800308a:	07e0      	lsls	r0, r4, #31
 800308c:	f53f adee 	bmi.w	8002c6c <gc_execute_line+0x9c>
					gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 8003090:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	e7e5      	b.n	8003064 <gc_execute_line+0x494>
		bit_false(value_words, bit(WORD_P));
 8003098:	f024 0440 	bic.w	r4, r4, #64	; 0x40
	switch (gc_block.modal.plane_select)
 800309c:	797b      	ldrb	r3, [r7, #5]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d03c      	beq.n	800311c <gc_execute_line+0x54c>
		axis_linear = X_AXIS;
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80030ac:	bf0c      	ite	eq
 80030ae:	2300      	moveq	r3, #0
 80030b0:	2302      	movne	r3, #2
 80030b2:	930a      	str	r3, [sp, #40]	; 0x28
 80030b4:	bf0c      	ite	eq
 80030b6:	2302      	moveq	r3, #2
 80030b8:	2301      	movne	r3, #1
		axis_0 = X_AXIS;
 80030ba:	9309      	str	r3, [sp, #36]	; 0x24
	if (gc_block.modal.units == UNITS_MODE_INCHES)
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d031      	beq.n	8003126 <gc_execute_line+0x556>
	if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 80030c2:	2e03      	cmp	r6, #3
 80030c4:	d105      	bne.n	80030d2 <gc_execute_line+0x502>
		if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC)
 80030c6:	79bb      	ldrb	r3, [r7, #6]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d102      	bne.n	80030d2 <gc_execute_line+0x502>
			if (axis_words ^ (1 << TOOL_LENGTH_OFFSET_AXIS))
 80030cc:	2d04      	cmp	r5, #4
 80030ce:	f040 852a 	bne.w	8003b26 <gc_execute_line+0xf56>
	memcpy(block_coord_system, gc_state.coord_system,
 80030d2:	4a2f      	ldr	r2, [pc, #188]	; (8003190 <gc_execute_line+0x5c0>)
 80030d4:	ab10      	add	r3, sp, #64	; 0x40
 80030d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80030d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (bit_istrue(command_words, bit(MODAL_GROUP_G12)))
 80030dc:	9a08      	ldr	r2, [sp, #32]
 80030de:	4f2a      	ldr	r7, [pc, #168]	; (8003188 <gc_execute_line+0x5b8>)
 80030e0:	f412 7f00 	tst.w	r2, #512	; 0x200
 80030e4:	d13c      	bne.n	8003160 <gc_execute_line+0x590>
	switch (gc_block.non_modal_command)
 80030e6:	f897 b000 	ldrb.w	fp, [r7]
 80030ea:	f1bb 0f0a 	cmp.w	fp, #10
 80030ee:	d055      	beq.n	800319c <gc_execute_line+0x5cc>
 80030f0:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
 80030f4:	f000 8117 	beq.w	8003326 <gc_execute_line+0x756>
		if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 80030f8:	2e03      	cmp	r6, #3
 80030fa:	f040 8149 	bne.w	8003390 <gc_execute_line+0x7c0>
		switch (gc_block.non_modal_command)
 80030fe:	f1bb 0f1e 	cmp.w	fp, #30
 8003102:	f000 8183 	beq.w	800340c <gc_execute_line+0x83c>
 8003106:	f1bb 0f35 	cmp.w	fp, #53	; 0x35
 800310a:	f000 819a 	beq.w	8003442 <gc_execute_line+0x872>
 800310e:	f1bb 0f1c 	cmp.w	fp, #28
 8003112:	f040 8136 	bne.w	8003382 <gc_execute_line+0x7b2>
				if (!settings_read_coord_data(SETTING_INDEX_G28, gc_block.values.ijk))
 8003116:	491f      	ldr	r1, [pc, #124]	; (8003194 <gc_execute_line+0x5c4>)
 8003118:	2006      	movs	r0, #6
 800311a:	e179      	b.n	8003410 <gc_execute_line+0x840>
		axis_linear = Z_AXIS;
 800311c:	2202      	movs	r2, #2
 800311e:	920b      	str	r2, [sp, #44]	; 0x2c
		axis_1 = Y_AXIS;
 8003120:	2201      	movs	r2, #1
 8003122:	920a      	str	r2, [sp, #40]	; 0x28
 8003124:	e7c9      	b.n	80030ba <gc_execute_line+0x4ea>
	if (gc_block.modal.units == UNITS_MODE_INCHES)
 8003126:	f04f 0900 	mov.w	r9, #0
 800312a:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8003198 <gc_execute_line+0x5c8>
			if (bit_istrue(axis_words, bit(idx)))
 800312e:	fa45 f309 	asr.w	r3, r5, r9
 8003132:	07da      	lsls	r2, r3, #31
 8003134:	d50c      	bpl.n	8003150 <gc_execute_line+0x580>
				gc_block.values.xyz[idx] *= MM_PER_INCH;
 8003136:	f8db 0000 	ldr.w	r0, [fp]
 800313a:	f7fd f979 	bl	8000430 <__aeabi_f2d>
 800313e:	a310      	add	r3, pc, #64	; (adr r3, 8003180 <gc_execute_line+0x5b0>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f7fd f9c8 	bl	80004d8 <__aeabi_dmul>
 8003148:	f7fd fcbe 	bl	8000ac8 <__aeabi_d2f>
 800314c:	f8cb 0000 	str.w	r0, [fp]
 8003150:	f109 0901 	add.w	r9, r9, #1
		for (idx = 0; idx < N_AXIS; idx++)
 8003154:	f1b9 0f03 	cmp.w	r9, #3
 8003158:	f10b 0b04 	add.w	fp, fp, #4
 800315c:	d1e7      	bne.n	800312e <gc_execute_line+0x55e>
 800315e:	e7b0      	b.n	80030c2 <gc_execute_line+0x4f2>
		if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM)
 8003160:	79f8      	ldrb	r0, [r7, #7]
 8003162:	2806      	cmp	r0, #6
 8003164:	d901      	bls.n	800316a <gc_execute_line+0x59a>
			FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS);
 8003166:	231d      	movs	r3, #29
 8003168:	e664      	b.n	8002e34 <gc_execute_line+0x264>
		if (gc_state.modal.coord_select != gc_block.modal.coord_select)
 800316a:	f898 2006 	ldrb.w	r2, [r8, #6]
 800316e:	4282      	cmp	r2, r0
 8003170:	d0b9      	beq.n	80030e6 <gc_execute_line+0x516>
			if (!(settings_read_coord_data(gc_block.modal.coord_select,
 8003172:	4619      	mov	r1, r3
 8003174:	f003 f84b 	bl	800620e <settings_read_coord_data>
 8003178:	2800      	cmp	r0, #0
 800317a:	d1b4      	bne.n	80030e6 <gc_execute_line+0x516>
					FAIL(STATUS_SETTING_READ_FAIL);
 800317c:	2307      	movs	r3, #7
 800317e:	e659      	b.n	8002e34 <gc_execute_line+0x264>
 8003180:	66666666 	.word	0x66666666
 8003184:	40396666 	.word	0x40396666
 8003188:	200032ac 	.word	0x200032ac
 800318c:	437f0000 	.word	0x437f0000
 8003190:	20003290 	.word	0x20003290
 8003194:	200032c0 	.word	0x200032c0
 8003198:	200032e4 	.word	0x200032e4
		if (!axis_words)
 800319c:	b90d      	cbnz	r5, 80031a2 <gc_execute_line+0x5d2>
			FAIL(STATUS_GCODE_NO_AXIS_WORDS)
 800319e:	231a      	movs	r3, #26
 80031a0:	e648      	b.n	8002e34 <gc_execute_line+0x264>
		if (bit_isfalse(value_words, ((1<<WORD_P)|(1<<WORD_L))))
 80031a2:	f014 0f50 	tst.w	r4, #80	; 0x50
 80031a6:	f43f af6a 	beq.w	800307e <gc_execute_line+0x4ae>
		coord_select = trunc(gc_block.values.p); // Convert p value to int.
 80031aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ac:	f7fd f940 	bl	8000430 <__aeabi_f2d>
 80031b0:	f005 f9e6 	bl	8008580 <trunc>
 80031b4:	f7fd fc68 	bl	8000a88 <__aeabi_d2uiz>
 80031b8:	b2c0      	uxtb	r0, r0
		if (coord_select > N_COORDINATE_SYSTEM)
 80031ba:	2806      	cmp	r0, #6
 80031bc:	d8d3      	bhi.n	8003166 <gc_execute_line+0x596>
		if (gc_block.values.l != 20)
 80031be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031c2:	2b14      	cmp	r3, #20
 80031c4:	d005      	beq.n	80031d2 <gc_execute_line+0x602>
			if (gc_block.values.l == 2)
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	f47f adbc 	bne.w	8002d44 <gc_execute_line+0x174>
				if (bit_istrue(value_words, bit(WORD_R)))
 80031cc:	0623      	lsls	r3, r4, #24
 80031ce:	f53f adb9 	bmi.w	8002d44 <gc_execute_line+0x174>
		bit_false(value_words, (bit(WORD_L)|bit(WORD_P)));
 80031d2:	f024 0450 	bic.w	r4, r4, #80	; 0x50
		if (coord_select > 0)
 80031d6:	2800      	cmp	r0, #0
 80031d8:	f000 809e 	beq.w	8003318 <gc_execute_line+0x748>
			coord_select--;
 80031dc:	3801      	subs	r0, #1
 80031de:	b2c3      	uxtb	r3, r0
			coord_select = gc_block.modal.coord_select;
 80031e0:	9306      	str	r3, [sp, #24]
		if (!settings_read_coord_data(coord_select, gc_block.values.ijk))
 80031e2:	49a8      	ldr	r1, [pc, #672]	; (8003484 <gc_execute_line+0x8b4>)
 80031e4:	9806      	ldr	r0, [sp, #24]
 80031e6:	f003 f812 	bl	800620e <settings_read_coord_data>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d0c6      	beq.n	800317c <gc_execute_line+0x5ac>
						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 80031ee:	f04f 0800 	mov.w	r8, #0
				if (gc_block.values.l == 20)
 80031f2:	f897 3020 	ldrb.w	r3, [r7, #32]
						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 80031f6:	4fa4      	ldr	r7, [pc, #656]	; (8003488 <gc_execute_line+0x8b8>)
				if (gc_block.values.l == 20)
 80031f8:	930c      	str	r3, [sp, #48]	; 0x30
 80031fa:	f8df b288 	ldr.w	fp, [pc, #648]	; 8003484 <gc_execute_line+0x8b4>
						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 80031fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003200:	f1ab 0914 	sub.w	r9, fp, #20
 8003204:	930d      	str	r3, [sp, #52]	; 0x34
 8003206:	3720      	adds	r7, #32
			if (bit_istrue(axis_words, bit(idx)))
 8003208:	fa45 f208 	asr.w	r2, r5, r8
 800320c:	07d1      	lsls	r1, r2, #31
 800320e:	d515      	bpl.n	800323c <gc_execute_line+0x66c>
				if (gc_block.values.l == 20)
 8003210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003212:	2b14      	cmp	r3, #20
 8003214:	f040 8082 	bne.w	800331c <gc_execute_line+0x74c>
							- gc_state.coord_offset[idx] - gc_block.values.xyz[idx];
 8003218:	69b9      	ldr	r1, [r7, #24]
 800321a:	6838      	ldr	r0, [r7, #0]
 800321c:	f7fd fca8 	bl	8000b70 <__aeabi_fsub>
 8003220:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 8003224:	f7fd fca4 	bl	8000b70 <__aeabi_fsub>
					if (idx == TOOL_LENGTH_OFFSET_AXIS)
 8003228:	f1b8 0f02 	cmp.w	r8, #2
					gc_block.values.ijk[idx] = gc_state.position[idx]
 800322c:	f8cb 0000 	str.w	r0, [fp]
					if (idx == TOOL_LENGTH_OFFSET_AXIS)
 8003230:	d104      	bne.n	800323c <gc_execute_line+0x66c>
						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 8003232:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003234:	f7fd fc9c 	bl	8000b70 <__aeabi_fsub>
 8003238:	f8c9 001c 	str.w	r0, [r9, #28]
 800323c:	f108 0801 	add.w	r8, r8, #1
		for (idx = 0; idx < N_AXIS; idx++)
 8003240:	f1b8 0f03 	cmp.w	r8, #3
 8003244:	f10b 0b04 	add.w	fp, fp, #4
 8003248:	f107 0704 	add.w	r7, r7, #4
 800324c:	d1dc      	bne.n	8003208 <gc_execute_line+0x638>
	if (gc_block.modal.motion == MOTION_MODE_NONE)
 800324e:	4b8f      	ldr	r3, [pc, #572]	; (800348c <gc_execute_line+0x8bc>)
 8003250:	785f      	ldrb	r7, [r3, #1]
 8003252:	4699      	mov	r9, r3
 8003254:	2f50      	cmp	r7, #80	; 0x50
 8003256:	f040 80fa 	bne.w	800344e <gc_execute_line+0x87e>
		if (axis_words)
 800325a:	2d00      	cmp	r5, #0
 800325c:	f040 8466 	bne.w	8003b2c <gc_execute_line+0xf5c>
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
 8003260:	f01a 0201 	ands.w	r2, sl, #1
		bit_false(value_words, (bit(WORD_N)|bit(WORD_F)|bit(WORD_S)|bit(WORD_T))); // Remove single-meaning value words.
 8003264:	bf0a      	itet	eq
 8003266:	f424 7448 	biceq.w	r4, r4, #800	; 0x320
		bit_false(value_words, (bit(WORD_N)|bit(WORD_F)));
 800326a:	f024 0421 	bicne.w	r4, r4, #33	; 0x21
		bit_false(value_words, (bit(WORD_N)|bit(WORD_F)|bit(WORD_S)|bit(WORD_T))); // Remove single-meaning value words.
 800326e:	f024 0401 	biceq.w	r4, r4, #1
	if (axis_command)
 8003272:	b10e      	cbz	r6, 8003278 <gc_execute_line+0x6a8>
		bit_false(value_words,
 8003274:	f424 447c 	bic.w	r4, r4, #64512	; 0xfc00
	if (gc_block.modal.digital)
 8003278:	4f84      	ldr	r7, [pc, #528]	; (800348c <gc_execute_line+0x8bc>)
 800327a:	7b3b      	ldrb	r3, [r7, #12]
 800327c:	b123      	cbz	r3, 8003288 <gc_execute_line+0x6b8>
		if (bit_isfalse(value_words, bit(WORD_P)))
 800327e:	0663      	lsls	r3, r4, #25
 8003280:	f57f aefd 	bpl.w	800307e <gc_execute_line+0x4ae>
		bit_false(value_words, bit(WORD_P));
 8003284:	f024 0440 	bic.w	r4, r4, #64	; 0x40
	if (gc_block.modal.waitoninput)
 8003288:	7b7b      	ldrb	r3, [r7, #13]
 800328a:	b143      	cbz	r3, 800329e <gc_execute_line+0x6ce>
		if (bit_isfalse(value_words, (bit(WORD_P)|bit(WORD_L)|bit(WORD_Q))))
 800328c:	4b80      	ldr	r3, [pc, #512]	; (8003490 <gc_execute_line+0x8c0>)
 800328e:	4023      	ands	r3, r4
 8003290:	2b00      	cmp	r3, #0
 8003292:	f43f aef4 	beq.w	800307e <gc_execute_line+0x4ae>
		bit_false(value_words, (bit(WORD_P)|bit(WORD_L)|bit(WORD_Q)));
 8003296:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 800329a:	f024 0450 	bic.w	r4, r4, #80	; 0x50
	if (gc_block.modal.analog)
 800329e:	7bbb      	ldrb	r3, [r7, #14]
 80032a0:	b12b      	cbz	r3, 80032ae <gc_execute_line+0x6de>
		if (bit_isfalse(value_words, (bit(WORD_E)|bit(WORD_Q))))
 80032a2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80032a6:	f43f aeea 	beq.w	800307e <gc_execute_line+0x4ae>
		bit_false(value_words, (bit(WORD_E)|bit(WORD_Q)));
 80032aa:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
	if (gc_block.modal.accel_scaling)
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	b143      	cbz	r3, 80032c4 <gc_execute_line+0x6f4>
		if (bit_isfalse(value_words, (bit(WORD_P)|bit(WORD_Q))))
 80032b2:	4b78      	ldr	r3, [pc, #480]	; (8003494 <gc_execute_line+0x8c4>)
 80032b4:	4023      	ands	r3, r4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f43f aee1 	beq.w	800307e <gc_execute_line+0x4ae>
		bit_false(value_words, (bit(WORD_P)|bit(WORD_Q)));
 80032bc:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 80032c0:	f024 0440 	bic.w	r4, r4, #64	; 0x40
	if (value_words)
 80032c4:	2c00      	cmp	r4, #0
 80032c6:	f040 8440 	bne.w	8003b4a <gc_execute_line+0xf7a>
	memset(pl_data, 0, sizeof(plan_line_data_t)); // Zero pl_data struct
 80032ca:	9413      	str	r4, [sp, #76]	; 0x4c
 80032cc:	9414      	str	r4, [sp, #80]	; 0x50
 80032ce:	9415      	str	r4, [sp, #84]	; 0x54
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
 80032d0:	2a00      	cmp	r2, #0
 80032d2:	f000 825d 	beq.w	8003790 <gc_execute_line+0xbc0>
		if (command_words
 80032d6:	9b08      	ldr	r3, [sp, #32]
 80032d8:	f033 0349 	bics.w	r3, r3, #73	; 0x49
 80032dc:	f040 8438 	bne.w	8003b50 <gc_execute_line+0xf80>
		if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE
 80032e0:	783b      	ldrb	r3, [r7, #0]
 80032e2:	2b35      	cmp	r3, #53	; 0x35
 80032e4:	d002      	beq.n	80032ec <gc_execute_line+0x71c>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 8432 	bne.w	8003b50 <gc_execute_line+0xf80>
		pl_data->spindle_speed = gc_state.spindle_speed;
 80032ec:	4c66      	ldr	r4, [pc, #408]	; (8003488 <gc_execute_line+0x8b8>)
		uint8_t status = jog_execute(&plan_data, &gc_block);
 80032ee:	4967      	ldr	r1, [pc, #412]	; (800348c <gc_execute_line+0x8bc>)
		pl_data->spindle_speed = gc_state.spindle_speed;
 80032f0:	6923      	ldr	r3, [r4, #16]
		plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80032f2:	7a22      	ldrb	r2, [r4, #8]
		pl_data->spindle_speed = gc_state.spindle_speed;
 80032f4:	9314      	str	r3, [sp, #80]	; 0x50
		plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80032f6:	7a63      	ldrb	r3, [r4, #9]
		uint8_t status = jog_execute(&plan_data, &gc_block);
 80032f8:	a813      	add	r0, sp, #76	; 0x4c
		plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		uint8_t status = jog_execute(&plan_data, &gc_block);
 8003300:	f000 fc32 	bl	8003b68 <jog_execute>
		if (status == STATUS_OK)
 8003304:	4603      	mov	r3, r0
 8003306:	2800      	cmp	r0, #0
 8003308:	f47f ad94 	bne.w	8002e34 <gc_execute_line+0x264>
			memcpy(gc_state.position, gc_block.values.xyz,
 800330c:	4a62      	ldr	r2, [pc, #392]	; (8003498 <gc_execute_line+0x8c8>)
 800330e:	3420      	adds	r4, #32
 8003310:	ca07      	ldmia	r2, {r0, r1, r2}
 8003312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003316:	e58d      	b.n	8002e34 <gc_execute_line+0x264>
			coord_select = gc_block.modal.coord_select;
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	e761      	b.n	80031e0 <gc_execute_line+0x610>
					gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 800331c:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 8003320:	f8cb 2000 	str.w	r2, [fp]
 8003324:	e78a      	b.n	800323c <gc_execute_line+0x66c>
		if (!axis_words)
 8003326:	2d00      	cmp	r5, #0
 8003328:	f43f af39 	beq.w	800319e <gc_execute_line+0x5ce>
					gc_block.values.xyz[idx] -= gc_state.tool_length_offset;
 800332c:	f04f 0800 	mov.w	r8, #0
 8003330:	4f55      	ldr	r7, [pc, #340]	; (8003488 <gc_execute_line+0x8b8>)
 8003332:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8003498 <gc_execute_line+0x8c8>
 8003336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003338:	f1a9 0b38 	sub.w	fp, r9, #56	; 0x38
 800333c:	9306      	str	r3, [sp, #24]
 800333e:	3720      	adds	r7, #32
			if (bit_istrue(axis_words, bit(idx)))
 8003340:	fa45 f108 	asr.w	r1, r5, r8
 8003344:	07ca      	lsls	r2, r1, #31
 8003346:	d51f      	bpl.n	8003388 <gc_execute_line+0x7b8>
						- block_coord_system[idx] - gc_block.values.xyz[idx];
 8003348:	ab10      	add	r3, sp, #64	; 0x40
 800334a:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800334e:	6838      	ldr	r0, [r7, #0]
 8003350:	f7fd fc0e 	bl	8000b70 <__aeabi_fsub>
 8003354:	f8d9 1000 	ldr.w	r1, [r9]
 8003358:	f7fd fc0a 	bl	8000b70 <__aeabi_fsub>
				if (idx == TOOL_LENGTH_OFFSET_AXIS)
 800335c:	f1b8 0f02 	cmp.w	r8, #2
				gc_block.values.xyz[idx] = gc_state.position[idx]
 8003360:	f8c9 0000 	str.w	r0, [r9]
				if (idx == TOOL_LENGTH_OFFSET_AXIS)
 8003364:	d104      	bne.n	8003370 <gc_execute_line+0x7a0>
					gc_block.values.xyz[idx] -= gc_state.tool_length_offset;
 8003366:	9906      	ldr	r1, [sp, #24]
 8003368:	f7fd fc02 	bl	8000b70 <__aeabi_fsub>
 800336c:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8003370:	f108 0801 	add.w	r8, r8, #1
		for (idx = 0; idx < N_AXIS; idx++)
 8003374:	f1b8 0f03 	cmp.w	r8, #3
 8003378:	f107 0704 	add.w	r7, r7, #4
 800337c:	f109 0904 	add.w	r9, r9, #4
 8003380:	d1de      	bne.n	8003340 <gc_execute_line+0x770>
	uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8003382:	2300      	movs	r3, #0
 8003384:	9306      	str	r3, [sp, #24]
 8003386:	e762      	b.n	800324e <gc_execute_line+0x67e>
				gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8003388:	69b9      	ldr	r1, [r7, #24]
 800338a:	f8c9 1000 	str.w	r1, [r9]
 800338e:	e7ef      	b.n	8003370 <gc_execute_line+0x7a0>
			if (axis_words)
 8003390:	2d00      	cmp	r5, #0
 8003392:	f43f aeb4 	beq.w	80030fe <gc_execute_line+0x52e>
									gc_block.values.xyz[idx] += gc_state.tool_length_offset;
 8003396:	f04f 0900 	mov.w	r9, #0
							if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE)
 800339a:	793b      	ldrb	r3, [r7, #4]
 800339c:	4f3e      	ldr	r7, [pc, #248]	; (8003498 <gc_execute_line+0x8c8>)
 800339e:	9306      	str	r3, [sp, #24]
									gc_block.values.xyz[idx] += gc_state.tool_length_offset;
 80033a0:	4b39      	ldr	r3, [pc, #228]	; (8003488 <gc_execute_line+0x8b8>)
 80033a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a4:	f103 0820 	add.w	r8, r3, #32
 80033a8:	920c      	str	r2, [sp, #48]	; 0x30
					if (bit_isfalse(axis_words, bit(idx)))
 80033aa:	fa45 f209 	asr.w	r2, r5, r9
 80033ae:	07d3      	lsls	r3, r2, #31
 80033b0:	d40c      	bmi.n	80033cc <gc_execute_line+0x7fc>
						gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80033b2:	f8d8 2000 	ldr.w	r2, [r8]
 80033b6:	603a      	str	r2, [r7, #0]
 80033b8:	f109 0901 	add.w	r9, r9, #1
				for (idx = 0; idx < N_AXIS; idx++)
 80033bc:	f1b9 0f03 	cmp.w	r9, #3
 80033c0:	f108 0804 	add.w	r8, r8, #4
 80033c4:	f107 0704 	add.w	r7, r7, #4
 80033c8:	d1ef      	bne.n	80033aa <gc_execute_line+0x7da>
 80033ca:	e698      	b.n	80030fe <gc_execute_line+0x52e>
						if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE)
 80033cc:	f1bb 0f35 	cmp.w	fp, #53	; 0x35
 80033d0:	d0f2      	beq.n	80033b8 <gc_execute_line+0x7e8>
							if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE)
 80033d2:	9b06      	ldr	r3, [sp, #24]
 80033d4:	b99b      	cbnz	r3, 80033fe <gc_execute_line+0x82e>
										+ gc_state.coord_offset[idx];
 80033d6:	ab10      	add	r3, sp, #64	; 0x40
 80033d8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80033dc:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80033e0:	f7fd fbc8 	bl	8000b74 <__addsf3>
								gc_block.values.xyz[idx] += block_coord_system[idx]
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	f7fd fbc5 	bl	8000b74 <__addsf3>
								if (idx == TOOL_LENGTH_OFFSET_AXIS)
 80033ea:	f1b9 0f02 	cmp.w	r9, #2
								gc_block.values.xyz[idx] += block_coord_system[idx]
 80033ee:	6038      	str	r0, [r7, #0]
								if (idx == TOOL_LENGTH_OFFSET_AXIS)
 80033f0:	d1e2      	bne.n	80033b8 <gc_execute_line+0x7e8>
									gc_block.values.xyz[idx] += gc_state.tool_length_offset;
 80033f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033f4:	f7fd fbbe 	bl	8000b74 <__addsf3>
 80033f8:	4b24      	ldr	r3, [pc, #144]	; (800348c <gc_execute_line+0x8bc>)
 80033fa:	6418      	str	r0, [r3, #64]	; 0x40
 80033fc:	e7dc      	b.n	80033b8 <gc_execute_line+0x7e8>
								gc_block.values.xyz[idx] += gc_state.position[idx];
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f8d8 1000 	ldr.w	r1, [r8]
 8003404:	f7fd fbb6 	bl	8000b74 <__addsf3>
 8003408:	6038      	str	r0, [r7, #0]
 800340a:	e7d5      	b.n	80033b8 <gc_execute_line+0x7e8>
				if (!settings_read_coord_data(SETTING_INDEX_G30, gc_block.values.ijk))
 800340c:	2007      	movs	r0, #7
 800340e:	491d      	ldr	r1, [pc, #116]	; (8003484 <gc_execute_line+0x8b4>)
				if (!settings_read_coord_data(SETTING_INDEX_G28, gc_block.values.ijk))
 8003410:	f002 fefd 	bl	800620e <settings_read_coord_data>
 8003414:	2800      	cmp	r0, #0
 8003416:	f43f aeb1 	beq.w	800317c <gc_execute_line+0x5ac>
			if (axis_words)
 800341a:	b915      	cbnz	r5, 8003422 <gc_execute_line+0x852>
	uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 800341c:	9506      	str	r5, [sp, #24]
				axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 800341e:	462e      	mov	r6, r5
 8003420:	e715      	b.n	800324e <gc_execute_line+0x67e>
 8003422:	2300      	movs	r3, #0
						gc_block.values.ijk[idx] = gc_state.position[idx];
 8003424:	4919      	ldr	r1, [pc, #100]	; (800348c <gc_execute_line+0x8bc>)
 8003426:	4818      	ldr	r0, [pc, #96]	; (8003488 <gc_execute_line+0x8b8>)
					if (!(axis_words & (1 << idx)))
 8003428:	fa45 f203 	asr.w	r2, r5, r3
 800342c:	07d7      	lsls	r7, r2, #31
 800342e:	d404      	bmi.n	800343a <gc_execute_line+0x86a>
 8003430:	009a      	lsls	r2, r3, #2
						gc_block.values.ijk[idx] = gc_state.position[idx];
 8003432:	1857      	adds	r7, r2, r1
 8003434:	4402      	add	r2, r0
 8003436:	6a12      	ldr	r2, [r2, #32]
 8003438:	617a      	str	r2, [r7, #20]
 800343a:	3301      	adds	r3, #1
				for (idx = 0; idx < N_AXIS; idx++)
 800343c:	2b03      	cmp	r3, #3
 800343e:	d1f3      	bne.n	8003428 <gc_execute_line+0x858>
 8003440:	e79f      	b.n	8003382 <gc_execute_line+0x7b2>
			if (!(gc_block.modal.motion == MOTION_MODE_SEEK
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <gc_execute_line+0x8bc>)
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d99b      	bls.n	8003382 <gc_execute_line+0x7b2>
				FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 800344a:	231e      	movs	r3, #30
 800344c:	e4f2      	b.n	8002e34 <gc_execute_line+0x264>
	else if (axis_command == AXIS_COMMAND_MOTION_MODE)
 800344e:	2e02      	cmp	r6, #2
 8003450:	f47f af06 	bne.w	8003260 <gc_execute_line+0x690>
		if (gc_block.modal.motion == MOTION_MODE_SEEK)
 8003454:	b91f      	cbnz	r7, 800345e <gc_execute_line+0x88e>
					axis_command = AXIS_COMMAND_NONE;
 8003456:	2d00      	cmp	r5, #0
 8003458:	bf08      	it	eq
 800345a:	2600      	moveq	r6, #0
 800345c:	e700      	b.n	8003260 <gc_execute_line+0x690>
			if (gc_block.values.f == 0.0)
 800345e:	2100      	movs	r1, #0
 8003460:	6918      	ldr	r0, [r3, #16]
 8003462:	f7fd fe23 	bl	80010ac <__aeabi_fcmpeq>
 8003466:	2800      	cmp	r0, #0
 8003468:	f040 8363 	bne.w	8003b32 <gc_execute_line+0xf62>
			switch (gc_block.modal.motion)
 800346c:	2f8c      	cmp	r7, #140	; 0x8c
 800346e:	d01d      	beq.n	80034ac <gc_execute_line+0x8dc>
 8003470:	d814      	bhi.n	800349c <gc_execute_line+0x8cc>
 8003472:	2f02      	cmp	r7, #2
 8003474:	d02b      	beq.n	80034ce <gc_execute_line+0x8fe>
 8003476:	2f03      	cmp	r7, #3
 8003478:	d02b      	beq.n	80034d2 <gc_execute_line+0x902>
 800347a:	2f01      	cmp	r7, #1
 800347c:	f47f aef0 	bne.w	8003260 <gc_execute_line+0x690>
 8003480:	e7e9      	b.n	8003456 <gc_execute_line+0x886>
 8003482:	bf00      	nop
 8003484:	200032c0 	.word	0x200032c0
 8003488:	20003264 	.word	0x20003264
 800348c:	200032ac 	.word	0x200032ac
 8003490:	00020050 	.word	0x00020050
 8003494:	00020040 	.word	0x00020040
 8003498:	200032e4 	.word	0x200032e4
 800349c:	2f8e      	cmp	r7, #142	; 0x8e
 800349e:	d005      	beq.n	80034ac <gc_execute_line+0x8dc>
 80034a0:	d302      	bcc.n	80034a8 <gc_execute_line+0x8d8>
 80034a2:	2f8f      	cmp	r7, #143	; 0x8f
 80034a4:	f47f aedc 	bne.w	8003260 <gc_execute_line+0x690>
				gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 80034a8:	f04a 0a10 	orr.w	sl, sl, #16
						|| (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR))
 80034ac:	3772      	adds	r7, #114	; 0x72
				if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY)
 80034ae:	b2ff      	uxtb	r7, r7
 80034b0:	2f01      	cmp	r7, #1
					gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY;
 80034b2:	bf98      	it	ls
 80034b4:	f04a 0a08 	orrls.w	sl, sl, #8
				if (!axis_words)
 80034b8:	2d00      	cmp	r5, #0
 80034ba:	f43f ae70 	beq.w	800319e <gc_execute_line+0x5ce>
				if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 80034be:	220c      	movs	r2, #12
 80034c0:	49ad      	ldr	r1, [pc, #692]	; (8003778 <gc_execute_line+0xba8>)
 80034c2:	48ae      	ldr	r0, [pc, #696]	; (800377c <gc_execute_line+0xbac>)
 80034c4:	f004 fa88 	bl	80079d8 <memcmp>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d038      	beq.n	800353e <gc_execute_line+0x96e>
 80034cc:	e6c8      	b.n	8003260 <gc_execute_line+0x690>
				gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 80034ce:	f04a 0a04 	orr.w	sl, sl, #4
				if (!axis_words)
 80034d2:	2d00      	cmp	r5, #0
 80034d4:	f43f ae63 	beq.w	800319e <gc_execute_line+0x5ce>
				if (!(axis_words & (bit(axis_0) | bit(axis_1))))
 80034d8:	2201      	movs	r2, #1
 80034da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	408a      	lsls	r2, r1
 80034e4:	4313      	orrs	r3, r2
 80034e6:	421d      	tst	r5, r3
 80034e8:	f000 8326 	beq.w	8003b38 <gc_execute_line+0xf68>
 80034ec:	930c      	str	r3, [sp, #48]	; 0x30
				x = gc_block.values.xyz[axis_0] - gc_state.position[axis_0]; // Delta x between current position and target
 80034ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034f0:	f8df 8294 	ldr.w	r8, [pc, #660]	; 8003788 <gc_execute_line+0xbb8>
 80034f4:	f103 020e 	add.w	r2, r3, #14
 80034f8:	f103 0108 	add.w	r1, r3, #8
 80034fc:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8003500:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 8003504:	f7fd fb34 	bl	8000b70 <__aeabi_fsub>
				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current position and target
 8003508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				x = gc_block.values.xyz[axis_0] - gc_state.position[axis_0]; // Delta x between current position and target
 800350a:	4683      	mov	fp, r0
				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current position and target
 800350c:	f103 020e 	add.w	r2, r3, #14
 8003510:	f103 0108 	add.w	r1, r3, #8
 8003514:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 8003518:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800351c:	f7fd fb28 	bl	8000b70 <__aeabi_fsub>
				if (value_words & bit(WORD_R))
 8003520:	f014 0280 	ands.w	r2, r4, #128	; 0x80
				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current position and target
 8003524:	4607      	mov	r7, r0
				if (value_words & bit(WORD_R))
 8003526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003528:	f000 80a3 	beq.w	8003672 <gc_execute_line+0xaa2>
					if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 800352c:	220c      	movs	r2, #12
 800352e:	4992      	ldr	r1, [pc, #584]	; (8003778 <gc_execute_line+0xba8>)
 8003530:	f108 0020 	add.w	r0, r8, #32
					bit_false(value_words, bit(WORD_R));
 8003534:	f024 0480 	bic.w	r4, r4, #128	; 0x80
					if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 8003538:	f004 fa4e 	bl	80079d8 <memcmp>
 800353c:	b908      	cbnz	r0, 8003542 <gc_execute_line+0x972>
						FAIL(STATUS_GCODE_INVALID_TARGET);
 800353e:	2321      	movs	r3, #33	; 0x21
 8003540:	e478      	b.n	8002e34 <gc_execute_line+0x264>
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 8003542:	f899 3003 	ldrb.w	r3, [r9, #3]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d10c      	bne.n	8003564 <gc_execute_line+0x994>
						gc_block.values.r *= MM_PER_INCH;
 800354a:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800354e:	f7fc ff6f 	bl	8000430 <__aeabi_f2d>
 8003552:	a383      	add	r3, pc, #524	; (adr r3, 8003760 <gc_execute_line+0xb90>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f7fc ffbe 	bl	80004d8 <__aeabi_dmul>
 800355c:	f7fd fab4 	bl	8000ac8 <__aeabi_d2f>
 8003560:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					float h_x2_div_d = 4.0 * gc_block.values.r * gc_block.values.r - x * x
 8003564:	4b86      	ldr	r3, [pc, #536]	; (8003780 <gc_execute_line+0xbb0>)
 8003566:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003568:	f7fc ff62 	bl	8000430 <__aeabi_f2d>
 800356c:	4680      	mov	r8, r0
 800356e:	4689      	mov	r9, r1
 8003570:	2200      	movs	r2, #0
 8003572:	4b84      	ldr	r3, [pc, #528]	; (8003784 <gc_execute_line+0xbb4>)
 8003574:	f7fc ffb0 	bl	80004d8 <__aeabi_dmul>
 8003578:	4642      	mov	r2, r8
 800357a:	464b      	mov	r3, r9
 800357c:	f7fc ffac 	bl	80004d8 <__aeabi_dmul>
 8003580:	4680      	mov	r8, r0
 8003582:	4689      	mov	r9, r1
 8003584:	4658      	mov	r0, fp
 8003586:	4659      	mov	r1, fp
 8003588:	f7fd fbfc 	bl	8000d84 <__aeabi_fmul>
 800358c:	f7fc ff50 	bl	8000430 <__aeabi_f2d>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4640      	mov	r0, r8
 8003596:	4649      	mov	r1, r9
 8003598:	f7fc fdea 	bl	8000170 <__aeabi_dsub>
 800359c:	4680      	mov	r8, r0
 800359e:	4689      	mov	r9, r1
							- y * y;
 80035a0:	4638      	mov	r0, r7
 80035a2:	4639      	mov	r1, r7
 80035a4:	f7fd fbee 	bl	8000d84 <__aeabi_fmul>
 80035a8:	f7fc ff42 	bl	8000430 <__aeabi_f2d>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4640      	mov	r0, r8
 80035b2:	4649      	mov	r1, r9
 80035b4:	f7fc fddc 	bl	8000170 <__aeabi_dsub>
					float h_x2_div_d = 4.0 * gc_block.values.r * gc_block.values.r - x * x
 80035b8:	f7fd fa86 	bl	8000ac8 <__aeabi_d2f>
					if (h_x2_div_d < 0)
 80035bc:	2100      	movs	r1, #0
					float h_x2_div_d = 4.0 * gc_block.values.r * gc_block.values.r - x * x
 80035be:	4680      	mov	r8, r0
					if (h_x2_div_d < 0)
 80035c0:	f7fd fd7e 	bl	80010c0 <__aeabi_fcmplt>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	f040 82ba 	bne.w	8003b3e <gc_execute_line+0xf6e>
					h_x2_div_d = -sqrt(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 80035ca:	4640      	mov	r0, r8
 80035cc:	f7fc ff30 	bl	8000430 <__aeabi_f2d>
 80035d0:	f005 f8b2 	bl	8008738 <sqrt>
 80035d4:	4681      	mov	r9, r0
 80035d6:	4688      	mov	r8, r1
 80035d8:	4658      	mov	r0, fp
 80035da:	4639      	mov	r1, r7
 80035dc:	f000 fff4 	bl	80045c8 <hypot_f>
 80035e0:	f7fc ff26 	bl	8000430 <__aeabi_f2d>
 80035e4:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4648      	mov	r0, r9
 80035ee:	4641      	mov	r1, r8
 80035f0:	f7fd f89c 	bl	800072c <__aeabi_ddiv>
 80035f4:	f7fd fa68 	bl	8000ac8 <__aeabi_d2f>
					if (gc_block.modal.motion == MOTION_MODE_CCW_ARC)
 80035f8:	4b61      	ldr	r3, [pc, #388]	; (8003780 <gc_execute_line+0xbb0>)
					if (gc_block.values.r < 0)
 80035fa:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8003780 <gc_execute_line+0xbb0>
					if (gc_block.modal.motion == MOTION_MODE_CCW_ARC)
 80035fe:	785b      	ldrb	r3, [r3, #1]
					h_x2_div_d = -sqrt(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 8003600:	4680      	mov	r8, r0
					if (gc_block.modal.motion == MOTION_MODE_CCW_ARC)
 8003602:	2b03      	cmp	r3, #3
					if (gc_block.values.r < 0)
 8003604:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
						h_x2_div_d = -h_x2_div_d;
 8003608:	bf08      	it	eq
 800360a:	f100 4800 	addeq.w	r8, r0, #2147483648	; 0x80000000
					if (gc_block.values.r < 0)
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	9307      	str	r3, [sp, #28]
 8003614:	f7fd fd54 	bl	80010c0 <__aeabi_fcmplt>
 8003618:	9b07      	ldr	r3, [sp, #28]
 800361a:	b128      	cbz	r0, 8003628 <gc_execute_line+0xa58>
						gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 800361c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
						h_x2_div_d = -h_x2_div_d;
 8003620:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
						gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8003624:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
					gc_block.values.ijk[axis_0] = 0.5 * (x - (y * h_x2_div_d));
 8003628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800362a:	4639      	mov	r1, r7
 800362c:	3304      	adds	r3, #4
 800362e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8003632:	4640      	mov	r0, r8
 8003634:	9307      	str	r3, [sp, #28]
 8003636:	f7fd fba5 	bl	8000d84 <__aeabi_fmul>
 800363a:	4601      	mov	r1, r0
 800363c:	4658      	mov	r0, fp
 800363e:	f7fd fa97 	bl	8000b70 <__aeabi_fsub>
 8003642:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003646:	f7fd fb9d 	bl	8000d84 <__aeabi_fmul>
 800364a:	9b07      	ldr	r3, [sp, #28]
					gc_block.values.ijk[axis_1] = 0.5 * (y + (x * h_x2_div_d));
 800364c:	4659      	mov	r1, fp
					gc_block.values.ijk[axis_0] = 0.5 * (x - (y * h_x2_div_d));
 800364e:	6058      	str	r0, [r3, #4]
					gc_block.values.ijk[axis_1] = 0.5 * (y + (x * h_x2_div_d));
 8003650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003652:	4640      	mov	r0, r8
 8003654:	3304      	adds	r3, #4
 8003656:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 800365a:	f7fd fb93 	bl	8000d84 <__aeabi_fmul>
 800365e:	4639      	mov	r1, r7
 8003660:	f7fd fa88 	bl	8000b74 <__addsf3>
 8003664:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003668:	f7fd fb8c 	bl	8000d84 <__aeabi_fmul>
 800366c:	f8c9 0004 	str.w	r0, [r9, #4]
 8003670:	e5f6      	b.n	8003260 <gc_execute_line+0x690>
					if (!(ijk_words & (bit(axis_0) | bit(axis_1))))
 8003672:	9907      	ldr	r1, [sp, #28]
 8003674:	420b      	tst	r3, r1
 8003676:	f000 8265 	beq.w	8003b44 <gc_execute_line+0xf74>
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 800367a:	f899 3003 	ldrb.w	r3, [r9, #3]
					bit_false(value_words, (bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 800367e:	f024 040e 	bic.w	r4, r4, #14
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 8003682:	2b01      	cmp	r3, #1
 8003684:	d04e      	beq.n	8003724 <gc_execute_line+0xb54>
					y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8003686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003688:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8003780 <gc_execute_line+0xbb0>
 800368c:	f103 0904 	add.w	r9, r3, #4
 8003690:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 8003694:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003698:	4638      	mov	r0, r7
 800369a:	f7fd fa69 	bl	8000b70 <__aeabi_fsub>
					x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 800369e:	9b09      	ldr	r3, [sp, #36]	; 0x24
					y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 80036a0:	9007      	str	r0, [sp, #28]
					x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 80036a2:	1d1f      	adds	r7, r3, #4
 80036a4:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4658      	mov	r0, fp
 80036ac:	f7fd fa60 	bl	8000b70 <__aeabi_fsub>
					float target_r = hypot_f(x, y);
 80036b0:	9b07      	ldr	r3, [sp, #28]
 80036b2:	4619      	mov	r1, r3
 80036b4:	f000 ff88 	bl	80045c8 <hypot_f>
					gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0],
 80036b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
					float target_r = hypot_f(x, y);
 80036bc:	4683      	mov	fp, r0
					gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0],
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 ff82 	bl	80045c8 <hypot_f>
 80036c4:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
					float delta_r = fabs(target_r - gc_block.values.r);
 80036c8:	4601      	mov	r1, r0
					gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0],
 80036ca:	4607      	mov	r7, r0
					float delta_r = fabs(target_r - gc_block.values.r);
 80036cc:	4658      	mov	r0, fp
 80036ce:	f7fd fa4f 	bl	8000b70 <__aeabi_fsub>
 80036d2:	f020 4b00 	bic.w	fp, r0, #2147483648	; 0x80000000
					if (delta_r > 0.005)
 80036d6:	4658      	mov	r0, fp
 80036d8:	f7fc feaa 	bl	8000430 <__aeabi_f2d>
 80036dc:	a322      	add	r3, pc, #136	; (adr r3, 8003768 <gc_execute_line+0xb98>)
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	4680      	mov	r8, r0
 80036e4:	4689      	mov	r9, r1
 80036e6:	f7fd f987 	bl	80009f8 <__aeabi_dcmpgt>
 80036ea:	2800      	cmp	r0, #0
 80036ec:	f43f adb8 	beq.w	8003260 <gc_execute_line+0x690>
						if (delta_r > 0.5)
 80036f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80036f4:	4658      	mov	r0, fp
 80036f6:	f7fd fd01 	bl	80010fc <__aeabi_fcmpgt>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	f47f af1f 	bne.w	800353e <gc_execute_line+0x96e>
						if (delta_r > (0.001 * gc_block.values.r))
 8003700:	4638      	mov	r0, r7
 8003702:	f7fc fe95 	bl	8000430 <__aeabi_f2d>
 8003706:	a31a      	add	r3, pc, #104	; (adr r3, 8003770 <gc_execute_line+0xba0>)
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f7fc fee4 	bl	80004d8 <__aeabi_dmul>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4640      	mov	r0, r8
 8003716:	4649      	mov	r1, r9
 8003718:	f7fd f96e 	bl	80009f8 <__aeabi_dcmpgt>
 800371c:	2800      	cmp	r0, #0
 800371e:	f47f af0e 	bne.w	800353e <gc_execute_line+0x96e>
 8003722:	e59d      	b.n	8003260 <gc_execute_line+0x690>
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 8003724:	4690      	mov	r8, r2
 8003726:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800378c <gc_execute_line+0xbbc>
							if (ijk_words & bit(idx))
 800372a:	9b07      	ldr	r3, [sp, #28]
 800372c:	fa43 f308 	asr.w	r3, r3, r8
 8003730:	07da      	lsls	r2, r3, #31
 8003732:	d50c      	bpl.n	800374e <gc_execute_line+0xb7e>
								gc_block.values.ijk[idx] *= MM_PER_INCH;
 8003734:	f8d9 0000 	ldr.w	r0, [r9]
 8003738:	f7fc fe7a 	bl	8000430 <__aeabi_f2d>
 800373c:	a308      	add	r3, pc, #32	; (adr r3, 8003760 <gc_execute_line+0xb90>)
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f7fc fec9 	bl	80004d8 <__aeabi_dmul>
 8003746:	f7fd f9bf 	bl	8000ac8 <__aeabi_d2f>
 800374a:	f8c9 0000 	str.w	r0, [r9]
 800374e:	f108 0801 	add.w	r8, r8, #1
						for (idx = 0; idx < N_AXIS; idx++)
 8003752:	f1b8 0f03 	cmp.w	r8, #3
 8003756:	f109 0904 	add.w	r9, r9, #4
 800375a:	d1e6      	bne.n	800372a <gc_execute_line+0xb5a>
 800375c:	e793      	b.n	8003686 <gc_execute_line+0xab6>
 800375e:	bf00      	nop
 8003760:	66666666 	.word	0x66666666
 8003764:	40396666 	.word	0x40396666
 8003768:	47ae147b 	.word	0x47ae147b
 800376c:	3f747ae1 	.word	0x3f747ae1
 8003770:	d2f1a9fc 	.word	0xd2f1a9fc
 8003774:	3f50624d 	.word	0x3f50624d
 8003778:	200032e4 	.word	0x200032e4
 800377c:	20003284 	.word	0x20003284
 8003780:	200032ac 	.word	0x200032ac
 8003784:	40100000 	.word	0x40100000
 8003788:	20003264 	.word	0x20003264
 800378c:	200032c0 	.word	0x200032c0
	if (bit_istrue(settings.flags, BITFLAG_LASER_MODE))
 8003790:	4baa      	ldr	r3, [pc, #680]	; (8003a3c <gc_execute_line+0xe6c>)
 8003792:	4cab      	ldr	r4, [pc, #684]	; (8003a40 <gc_execute_line+0xe70>)
 8003794:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003798:	f013 0f02 	tst.w	r3, #2
 800379c:	d00d      	beq.n	80037ba <gc_execute_line+0xbea>
		if (!((gc_block.modal.motion == MOTION_MODE_LINEAR)
 800379e:	787b      	ldrb	r3, [r7, #1]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	2b02      	cmp	r3, #2
			gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 80037a4:	bf88      	it	hi
 80037a6:	f04a 0a40 	orrhi.w	sl, sl, #64	; 0x40
		if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE))
 80037aa:	2d00      	cmp	r5, #0
 80037ac:	f000 80e5 	beq.w	800397a <gc_execute_line+0xdaa>
 80037b0:	2e02      	cmp	r6, #2
 80037b2:	f040 80e2 	bne.w	800397a <gc_execute_line+0xdaa>
			gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 80037b6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
	gc_state.line_number = gc_block.values.n;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	61e3      	str	r3, [r4, #28]
	gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 80037be:	78bb      	ldrb	r3, [r7, #2]
 80037c0:	7063      	strb	r3, [r4, #1]
	if (gc_state.modal.feed_rate)
 80037c2:	b113      	cbz	r3, 80037ca <gc_execute_line+0xbfa>
		pl_data->condition |= PL_COND_FLAG_INVERSE_TIME;
 80037c4:	2308      	movs	r3, #8
 80037c6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
	gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 80037ca:	693b      	ldr	r3, [r7, #16]
	if ((gc_state.spindle_speed != gc_block.values.s)
 80037cc:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
	gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 80037d0:	6163      	str	r3, [r4, #20]
	if ((gc_state.spindle_speed != gc_block.values.s)
 80037d2:	4641      	mov	r1, r8
 80037d4:	6920      	ldr	r0, [r4, #16]
	pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 80037d6:	9313      	str	r3, [sp, #76]	; 0x4c
	if ((gc_state.spindle_speed != gc_block.values.s)
 80037d8:	f7fd fc68 	bl	80010ac <__aeabi_fcmpeq>
 80037dc:	f00a 0540 	and.w	r5, sl, #64	; 0x40
 80037e0:	b110      	cbz	r0, 80037e8 <gc_execute_line+0xc18>
			|| bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC))
 80037e2:	f01a 0f20 	tst.w	sl, #32
 80037e6:	d00c      	beq.n	8003802 <gc_execute_line+0xc32>
		if (gc_state.modal.spindle != SPINDLE_DISABLE)
 80037e8:	7a60      	ldrb	r0, [r4, #9]
 80037ea:	b140      	cbz	r0, 80037fe <gc_execute_line+0xc2e>
			if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION))
 80037ec:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80037f0:	d105      	bne.n	80037fe <gc_execute_line+0xc2e>
				if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 80037f2:	2d00      	cmp	r5, #0
 80037f4:	f000 80d5 	beq.w	80039a2 <gc_execute_line+0xdd2>
					spindle_sync(gc_state.modal.spindle, 0.0);
 80037f8:	2100      	movs	r1, #0
					spindle_sync(gc_state.modal.spindle, gc_block.values.s);
 80037fa:	f002 ff67 	bl	80066cc <spindle_sync>
		gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6123      	str	r3, [r4, #16]
	if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 8003802:	b90d      	cbnz	r5, 8003808 <gc_execute_line+0xc38>
		pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use.
 8003804:	6923      	ldr	r3, [r4, #16]
 8003806:	9314      	str	r3, [sp, #80]	; 0x50
	gc_state.tool = gc_block.values.t;
 8003808:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
	if (gc_state.modal.spindle != gc_block.modal.spindle)
 800380c:	7ab8      	ldrb	r0, [r7, #10]
	gc_state.tool = gc_block.values.t;
 800380e:	7623      	strb	r3, [r4, #24]
	if (gc_state.modal.spindle != gc_block.modal.spindle)
 8003810:	7a63      	ldrb	r3, [r4, #9]
 8003812:	4283      	cmp	r3, r0
 8003814:	d004      	beq.n	8003820 <gc_execute_line+0xc50>
		spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 8003816:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003818:	f002 ff58 	bl	80066cc <spindle_sync>
		gc_state.modal.spindle = gc_block.modal.spindle;
 800381c:	7abb      	ldrb	r3, [r7, #10]
 800381e:	7263      	strb	r3, [r4, #9]
	pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8003820:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8003824:	7a62      	ldrb	r2, [r4, #9]
	if (gc_state.modal.coolant != gc_block.modal.coolant)
 8003826:	7a78      	ldrb	r0, [r7, #9]
	pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8003828:	4313      	orrs	r3, r2
 800382a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
	if (gc_state.modal.coolant != gc_block.modal.coolant)
 800382e:	7a23      	ldrb	r3, [r4, #8]
 8003830:	4283      	cmp	r3, r0
 8003832:	d006      	beq.n	8003842 <gc_execute_line+0xc72>
		coolant_sync(gc_block.modal.coolant);
 8003834:	f7ff f8f8 	bl	8002a28 <coolant_sync>
		if (gc_block.modal.coolant == COOLANT_DISABLE)
 8003838:	7a7b      	ldrb	r3, [r7, #9]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f040 80b3 	bne.w	80039a6 <gc_execute_line+0xdd6>
			gc_state.modal.coolant |= gc_block.modal.coolant;
 8003840:	7223      	strb	r3, [r4, #8]
	pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8003842:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8003846:	7a22      	ldrb	r2, [r4, #8]
 8003848:	4313      	orrs	r3, r2
 800384a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
	if (gc_block.non_modal_command == NON_MODAL_DWELL)
 800384e:	783b      	ldrb	r3, [r7, #0]
 8003850:	2b04      	cmp	r3, #4
 8003852:	d102      	bne.n	800385a <gc_execute_line+0xc8a>
		mc_dwell(gc_block.values.p);
 8003854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003856:	f000 fd2b 	bl	80042b0 <mc_dwell>
	gc_state.modal.plane_select = gc_block.modal.plane_select;
 800385a:	797b      	ldrb	r3, [r7, #5]
	if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 800385c:	2e03      	cmp	r6, #3
	gc_state.modal.plane_select = gc_block.modal.plane_select;
 800385e:	7123      	strb	r3, [r4, #4]
	gc_state.modal.units = gc_block.modal.units;
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	70a3      	strb	r3, [r4, #2]
	if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 8003864:	d10d      	bne.n	8003882 <gc_execute_line+0xcb2>
		gc_state.modal.tool_length = gc_block.modal.tool_length;
 8003866:	79bb      	ldrb	r3, [r7, #6]
 8003868:	7163      	strb	r3, [r4, #5]
		if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL)
 800386a:	b90b      	cbnz	r3, 8003870 <gc_execute_line+0xca0>
			gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0;
 800386c:	2300      	movs	r3, #0
 800386e:	643b      	str	r3, [r7, #64]	; 0x40
				!= gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS])
 8003870:	6c3d      	ldr	r5, [r7, #64]	; 0x40
		if (gc_state.tool_length_offset
 8003872:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003874:	4629      	mov	r1, r5
 8003876:	f7fd fc19 	bl	80010ac <__aeabi_fcmpeq>
 800387a:	b910      	cbnz	r0, 8003882 <gc_execute_line+0xcb2>
			gc_state.tool_length_offset =
 800387c:	6465      	str	r5, [r4, #68]	; 0x44
			system_flag_wco_change();
 800387e:	f003 fd97 	bl	80073b0 <system_flag_wco_change>
	if (gc_state.modal.coord_select != gc_block.modal.coord_select)
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	79a2      	ldrb	r2, [r4, #6]
 8003886:	429a      	cmp	r2, r3
 8003888:	d007      	beq.n	800389a <gc_execute_line+0xcca>
		gc_state.modal.coord_select = gc_block.modal.coord_select;
 800388a:	71a3      	strb	r3, [r4, #6]
		memcpy(gc_state.coord_system, block_coord_system, N_AXIS * sizeof(float));
 800388c:	4b6d      	ldr	r3, [pc, #436]	; (8003a44 <gc_execute_line+0xe74>)
 800388e:	aa10      	add	r2, sp, #64	; 0x40
 8003890:	ca07      	ldmia	r2, {r0, r1, r2}
 8003892:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		system_flag_wco_change();
 8003896:	f003 fd8b 	bl	80073b0 <system_flag_wco_change>
	gc_state.modal.distance = gc_block.modal.distance;
 800389a:	793b      	ldrb	r3, [r7, #4]
 800389c:	70e3      	strb	r3, [r4, #3]
	switch (gc_block.non_modal_command)
 800389e:	783b      	ldrb	r3, [r7, #0]
 80038a0:	2b26      	cmp	r3, #38	; 0x26
 80038a2:	f000 80b4 	beq.w	8003a0e <gc_execute_line+0xe3e>
 80038a6:	f200 8081 	bhi.w	80039ac <gc_execute_line+0xddc>
 80038aa:	2b1c      	cmp	r3, #28
 80038ac:	f000 8099 	beq.w	80039e2 <gc_execute_line+0xe12>
 80038b0:	2b1e      	cmp	r3, #30
 80038b2:	f000 8096 	beq.w	80039e2 <gc_execute_line+0xe12>
 80038b6:	2b0a      	cmp	r3, #10
 80038b8:	f000 8081 	beq.w	80039be <gc_execute_line+0xdee>
	gc_state.modal.motion = gc_block.modal.motion;
 80038bc:	787b      	ldrb	r3, [r7, #1]
	if (gc_state.modal.motion != MOTION_MODE_NONE)
 80038be:	2b50      	cmp	r3, #80	; 0x50
	gc_state.modal.motion = gc_block.modal.motion;
 80038c0:	7023      	strb	r3, [r4, #0]
	if (gc_state.modal.motion != MOTION_MODE_NONE)
 80038c2:	d00e      	beq.n	80038e2 <gc_execute_line+0xd12>
		if (axis_command == AXIS_COMMAND_MOTION_MODE)
 80038c4:	2e02      	cmp	r6, #2
 80038c6:	d10c      	bne.n	80038e2 <gc_execute_line+0xd12>
			if (gc_state.modal.motion == MOTION_MODE_LINEAR)
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	4d5f      	ldr	r5, [pc, #380]	; (8003a48 <gc_execute_line+0xe78>)
 80038cc:	f040 80ae 	bne.w	8003a2c <gc_execute_line+0xe5c>
				mc_line(gc_block.values.xyz, pl_data);
 80038d0:	a913      	add	r1, sp, #76	; 0x4c
 80038d2:	4628      	mov	r0, r5
 80038d4:	f000 fb04 	bl	8003ee0 <mc_line>
				memcpy(gc_state.position, gc_block.values.xyz,
 80038d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038dc:	4b5b      	ldr	r3, [pc, #364]	; (8003a4c <gc_execute_line+0xe7c>)
 80038de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	gc_state.modal.program_flow = gc_block.modal.program_flow;
 80038e2:	7a3b      	ldrb	r3, [r7, #8]
 80038e4:	71e3      	strb	r3, [r4, #7]
	if (gc_state.modal.program_flow)
 80038e6:	b183      	cbz	r3, 800390a <gc_execute_line+0xd3a>
		protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 80038e8:	f001 feb4 	bl	8005654 <protocol_buffer_synchronize>
		if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED)
 80038ec:	79e3      	ldrb	r3, [r4, #7]
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	4b57      	ldr	r3, [pc, #348]	; (8003a50 <gc_execute_line+0xe80>)
 80038f2:	f040 80df 	bne.w	8003ab4 <gc_execute_line+0xee4>
			if (sys.state != STATE_CHECK_MODE)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d004      	beq.n	8003906 <gc_execute_line+0xd36>
				system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 80038fc:	2008      	movs	r0, #8
 80038fe:	f003 fd9b 	bl	8007438 <system_set_exec_state_flag>
				protocol_execute_realtime(); // Execute suspend.
 8003902:	f001 fd3f 	bl	8005384 <protocol_execute_realtime>
		gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 8003906:	2300      	movs	r3, #0
 8003908:	71e3      	strb	r3, [r4, #7]
	if (gc_block.modal.digital)
 800390a:	7b3c      	ldrb	r4, [r7, #12]
 800390c:	b154      	cbz	r4, 8003924 <gc_execute_line+0xd54>
		output_select = trunc(gc_block.values.p); // Convert p value to int.
 800390e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003910:	f7fc fd8e 	bl	8000430 <__aeabi_f2d>
 8003914:	f004 fe34 	bl	8008580 <trunc>
 8003918:	f7fd f8b6 	bl	8000a88 <__aeabi_d2uiz>
		outputs_digital_action(output_select, gc_block.modal.digital);
 800391c:	4621      	mov	r1, r4
 800391e:	b2c0      	uxtb	r0, r0
 8003920:	f003 ffb8 	bl	8007894 <outputs_digital_action>
	if (gc_block.modal.waitoninput)
 8003924:	7b7b      	ldrb	r3, [r7, #13]
 8003926:	b16b      	cbz	r3, 8003944 <gc_execute_line+0xd74>
		input_select = trunc(gc_block.values.p); // Convert p value to int.
 8003928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800392a:	f7fc fd81 	bl	8000430 <__aeabi_f2d>
 800392e:	f004 fe27 	bl	8008580 <trunc>
 8003932:	f7fd f8a9 	bl	8000a88 <__aeabi_d2uiz>
		wait_on_input_action(input_select, gc_block.values.l, &gc_block.values.q);
 8003936:	f897 4020 	ldrb.w	r4, [r7, #32]
 800393a:	4a46      	ldr	r2, [pc, #280]	; (8003a54 <gc_execute_line+0xe84>)
 800393c:	4621      	mov	r1, r4
 800393e:	b2c0      	uxtb	r0, r0
 8003940:	f003 ffcc 	bl	80078dc <wait_on_input_action>
	if (gc_block.modal.analog)
 8003944:	7bbb      	ldrb	r3, [r7, #14]
 8003946:	b123      	cbz	r3, 8003952 <gc_execute_line+0xd82>
		outputs_analog_action(gc_block.values.e, &gc_block.values.q);
 8003948:	4942      	ldr	r1, [pc, #264]	; (8003a54 <gc_execute_line+0xe84>)
 800394a:	f897 0044 	ldrb.w	r0, [r7, #68]	; 0x44
 800394e:	f003 ffc4 	bl	80078da <outputs_analog_action>
	if (gc_block.modal.accel_scaling)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f43f aa6d 	beq.w	8002e34 <gc_execute_line+0x264>
		output_select = trunc(gc_block.values.p); // Convert p value to int.
 800395a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800395c:	f7fc fd68 	bl	8000430 <__aeabi_f2d>
 8003960:	f004 fe0e 	bl	8008580 <trunc>
 8003964:	f7fd f890 	bl	8000a88 <__aeabi_d2uiz>
		acceleration_scaling(output_select, &gc_block.values.q); // in settings.c
 8003968:	493a      	ldr	r1, [pc, #232]	; (8003a54 <gc_execute_line+0xe84>)
 800396a:	b2c0      	uxtb	r0, r0
 800396c:	f002 fd8a 	bl	8006484 <acceleration_scaling>
		plan_reset(); // Clear block buffer and planner variables
 8003970:	f000 ff78 	bl	8004864 <plan_reset>
	return (STATUS_OK);
 8003974:	2300      	movs	r3, #0
 8003976:	f7ff ba5d 	b.w	8002e34 <gc_execute_line+0x264>
			if (gc_state.modal.spindle == SPINDLE_ENABLE_CW)
 800397a:	7a63      	ldrb	r3, [r4, #9]
 800397c:	2b10      	cmp	r3, #16
 800397e:	f47f af1c 	bne.w	80037ba <gc_execute_line+0xbea>
						|| (gc_state.modal.motion == MOTION_MODE_CCW_ARC))
 8003982:	7823      	ldrb	r3, [r4, #0]
				if ((gc_state.modal.motion == MOTION_MODE_LINEAR)
 8003984:	3b01      	subs	r3, #1
 8003986:	2b02      	cmp	r3, #2
 8003988:	f00a 0340 	and.w	r3, sl, #64	; 0x40
 800398c:	d805      	bhi.n	800399a <gc_execute_line+0xdca>
					if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 800398e:	2b00      	cmp	r3, #0
 8003990:	f43f af13 	beq.w	80037ba <gc_execute_line+0xbea>
						gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8003994:	f04a 0a20 	orr.w	sl, sl, #32
 8003998:	e70f      	b.n	80037ba <gc_execute_line+0xbea>
					if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 800399a:	2b00      	cmp	r3, #0
 800399c:	f47f af0d 	bne.w	80037ba <gc_execute_line+0xbea>
 80039a0:	e7f8      	b.n	8003994 <gc_execute_line+0xdc4>
					spindle_sync(gc_state.modal.spindle, gc_block.values.s);
 80039a2:	4641      	mov	r1, r8
 80039a4:	e729      	b.n	80037fa <gc_execute_line+0xc2a>
			gc_state.modal.coolant |= gc_block.modal.coolant;
 80039a6:	7a22      	ldrb	r2, [r4, #8]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	e749      	b.n	8003840 <gc_execute_line+0xc70>
	switch (gc_block.non_modal_command)
 80039ac:	2b5c      	cmp	r3, #92	; 0x5c
 80039ae:	d033      	beq.n	8003a18 <gc_execute_line+0xe48>
 80039b0:	2b66      	cmp	r3, #102	; 0x66
 80039b2:	d035      	beq.n	8003a20 <gc_execute_line+0xe50>
 80039b4:	2b28      	cmp	r3, #40	; 0x28
 80039b6:	d181      	bne.n	80038bc <gc_execute_line+0xcec>
		settings_write_coord_data(SETTING_INDEX_G30, gc_state.position);
 80039b8:	4924      	ldr	r1, [pc, #144]	; (8003a4c <gc_execute_line+0xe7c>)
 80039ba:	2007      	movs	r0, #7
 80039bc:	e029      	b.n	8003a12 <gc_execute_line+0xe42>
		settings_write_coord_data(coord_select, gc_block.values.ijk);
 80039be:	4d26      	ldr	r5, [pc, #152]	; (8003a58 <gc_execute_line+0xe88>)
 80039c0:	9806      	ldr	r0, [sp, #24]
 80039c2:	4629      	mov	r1, r5
 80039c4:	f002 fb5c 	bl	8006080 <settings_write_coord_data>
		if (gc_state.modal.coord_select == coord_select)
 80039c8:	79a3      	ldrb	r3, [r4, #6]
 80039ca:	9a06      	ldr	r2, [sp, #24]
 80039cc:	4293      	cmp	r3, r2
 80039ce:	f47f af75 	bne.w	80038bc <gc_execute_line+0xcec>
			memcpy(gc_state.coord_system, gc_block.values.ijk,
 80039d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <gc_execute_line+0xe74>)
		memcpy(gc_state.coord_offset, gc_block.values.xyz,
 80039d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		system_flag_wco_change();
 80039dc:	f003 fce8 	bl	80073b0 <system_flag_wco_change>
		break;
 80039e0:	e76c      	b.n	80038bc <gc_execute_line+0xcec>
		pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 80039e2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (axis_command)
 80039ee:	b11e      	cbz	r6, 80039f8 <gc_execute_line+0xe28>
			mc_line(gc_block.values.xyz, pl_data);
 80039f0:	a913      	add	r1, sp, #76	; 0x4c
 80039f2:	4815      	ldr	r0, [pc, #84]	; (8003a48 <gc_execute_line+0xe78>)
 80039f4:	f000 fa74 	bl	8003ee0 <mc_line>
		mc_line(gc_block.values.ijk, pl_data);
 80039f8:	4d17      	ldr	r5, [pc, #92]	; (8003a58 <gc_execute_line+0xe88>)
 80039fa:	a913      	add	r1, sp, #76	; 0x4c
 80039fc:	4628      	mov	r0, r5
 80039fe:	f000 fa6f 	bl	8003ee0 <mc_line>
		memcpy(gc_state.position, gc_block.values.ijk, N_AXIS * sizeof(float));
 8003a02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <gc_execute_line+0xe7c>)
 8003a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		break;
 8003a0c:	e756      	b.n	80038bc <gc_execute_line+0xcec>
		settings_write_coord_data(SETTING_INDEX_G28, gc_state.position);
 8003a0e:	2006      	movs	r0, #6
 8003a10:	490e      	ldr	r1, [pc, #56]	; (8003a4c <gc_execute_line+0xe7c>)
		settings_write_coord_data(SETTING_INDEX_G30, gc_state.position);
 8003a12:	f002 fb35 	bl	8006080 <settings_write_coord_data>
		break;
 8003a16:	e751      	b.n	80038bc <gc_execute_line+0xcec>
		memcpy(gc_state.coord_offset, gc_block.values.xyz,
 8003a18:	4a0b      	ldr	r2, [pc, #44]	; (8003a48 <gc_execute_line+0xe78>)
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <gc_execute_line+0xe8c>)
 8003a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a1e:	e7db      	b.n	80039d8 <gc_execute_line+0xe08>
		clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8003a20:	2300      	movs	r3, #0
 8003a22:	4a0e      	ldr	r2, [pc, #56]	; (8003a5c <gc_execute_line+0xe8c>)
 8003a24:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a26:	6053      	str	r3, [r2, #4]
 8003a28:	6093      	str	r3, [r2, #8]
 8003a2a:	e7d7      	b.n	80039dc <gc_execute_line+0xe0c>
			else if (gc_state.modal.motion == MOTION_MODE_SEEK)
 8003a2c:	b9c3      	cbnz	r3, 8003a60 <gc_execute_line+0xe90>
				pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8003a2e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8003a3a:	e749      	b.n	80038d0 <gc_execute_line+0xd00>
 8003a3c:	20003478 	.word	0x20003478
 8003a40:	20003264 	.word	0x20003264
 8003a44:	20003290 	.word	0x20003290
 8003a48:	200032e4 	.word	0x200032e4
 8003a4c:	20003284 	.word	0x20003284
 8003a50:	20002e30 	.word	0x20002e30
 8003a54:	200032f4 	.word	0x200032f4
 8003a58:	200032c0 	.word	0x200032c0
 8003a5c:	2000329c 	.word	0x2000329c
			else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8003a60:	3b02      	subs	r3, #2
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d812      	bhi.n	8003a8c <gc_execute_line+0xebc>
				mc_arc(gc_block.values.xyz, pl_data, gc_state.position,
 8003a66:	f3ca 0380 	ubfx	r3, sl, #2, #1
 8003a6a:	9304      	str	r3, [sp, #16]
 8003a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a6e:	4a3c      	ldr	r2, [pc, #240]	; (8003b60 <gc_execute_line+0xf90>)
 8003a70:	9303      	str	r3, [sp, #12]
 8003a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a74:	a913      	add	r1, sp, #76	; 0x4c
 8003a76:	9302      	str	r3, [sp, #8]
 8003a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	f1a5 0324 	sub.w	r3, r5, #36	; 0x24
 8003a86:	f000 fa5f 	bl	8003f48 <mc_arc>
 8003a8a:	e725      	b.n	80038d8 <gc_execute_line+0xd08>
				pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003a8c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
				gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data,
 8003a90:	4652      	mov	r2, sl
				pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003a92:	f043 0304 	orr.w	r3, r3, #4
				gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data,
 8003a96:	a913      	add	r1, sp, #76	; 0x4c
 8003a98:	4628      	mov	r0, r5
				pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003a9a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data,
 8003a9e:	f000 fc41 	bl	8004324 <mc_probe_cycle>
			if (gc_update_pos == GC_UPDATE_POS_TARGET)
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	f43f af18 	beq.w	80038d8 <gc_execute_line+0xd08>
			else if (gc_update_pos == GC_UPDATE_POS_SYSTEM)
 8003aa8:	2801      	cmp	r0, #1
 8003aaa:	f47f af1a 	bne.w	80038e2 <gc_execute_line+0xd12>
				gc_sync_position(); // gc_state.position[] = sys_position
 8003aae:	f7ff f885 	bl	8002bbc <gc_sync_position>
 8003ab2:	e716      	b.n	80038e2 <gc_execute_line+0xd12>
			gc_state.modal.motion = MOTION_MODE_LINEAR;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	7022      	strb	r2, [r4, #0]
			sys.f_override = DEFAULT_FEED_OVERRIDE;
 8003ab8:	2264      	movs	r2, #100	; 0x64
			gc_state.modal.plane_select = PLANE_SELECT_XY;
 8003aba:	2500      	movs	r5, #0
			sys.f_override = DEFAULT_FEED_OVERRIDE;
 8003abc:	721a      	strb	r2, [r3, #8]
			sys.r_override = DEFAULT_RAPID_OVERRIDE;
 8003abe:	725a      	strb	r2, [r3, #9]
			sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 8003ac0:	729a      	strb	r2, [r3, #10]
			if (sys.state != STATE_CHECK_MODE)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
			gc_state.modal.plane_select = PLANE_SELECT_XY;
 8003ac4:	7125      	strb	r5, [r4, #4]
			if (sys.state != STATE_CHECK_MODE)
 8003ac6:	2b02      	cmp	r3, #2
			gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 8003ac8:	70e5      	strb	r5, [r4, #3]
			gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8003aca:	7065      	strb	r5, [r4, #1]
			gc_state.modal.coord_select = 0; // G54
 8003acc:	71a5      	strb	r5, [r4, #6]
			gc_state.modal.spindle = SPINDLE_DISABLE;
 8003ace:	7265      	strb	r5, [r4, #9]
			gc_state.modal.coolant = COOLANT_DISABLE;
 8003ad0:	7225      	strb	r5, [r4, #8]
			if (sys.state != STATE_CHECK_MODE)
 8003ad2:	d00f      	beq.n	8003af4 <gc_execute_line+0xf24>
				if (!(settings_read_coord_data(gc_state.modal.coord_select,
 8003ad4:	4923      	ldr	r1, [pc, #140]	; (8003b64 <gc_execute_line+0xf94>)
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	f002 fb99 	bl	800620e <settings_read_coord_data>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	f43f ab4d 	beq.w	800317c <gc_execute_line+0x5ac>
				system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 8003ae2:	f003 fc65 	bl	80073b0 <system_flag_wco_change>
				spindle_set_state(SPINDLE_DISABLE, 0.0);
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	2100      	movs	r1, #0
 8003aea:	f002 fdc3 	bl	8006674 <spindle_set_state>
				coolant_set_state(COOLANT_DISABLE);
 8003aee:	4628      	mov	r0, r5
 8003af0:	f7fe ff7c 	bl	80029ec <coolant_set_state>
			report_feedback_message(MESSAGE_PROGRAM_END);
 8003af4:	2008      	movs	r0, #8
 8003af6:	f001 fe2d 	bl	8005754 <report_feedback_message>
 8003afa:	e704      	b.n	8003906 <gc_execute_line+0xd36>
			FAIL(STATUS_EXPECTED_COMMAND_LETTER);
 8003afc:	2301      	movs	r3, #1
 8003afe:	f7ff b999 	b.w	8002e34 <gc_execute_line+0x264>
			FAIL(STATUS_BAD_NUMBER_FORMAT);
 8003b02:	2302      	movs	r3, #2
 8003b04:	f7ff b996 	b.w	8002e34 <gc_execute_line+0x264>
						FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT);
 8003b08:	2318      	movs	r3, #24
 8003b0a:	f7ff b993 	b.w	8002e34 <gc_execute_line+0x264>
					FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED);
 8003b0e:	2326      	movs	r3, #38	; 0x26
 8003b10:	f7ff b990 	b.w	8002e34 <gc_execute_line+0x264>
				FAIL(STATUS_GCODE_WORD_REPEATED);
 8003b14:	2319      	movs	r3, #25
 8003b16:	f7ff b98d 	b.w	8002e34 <gc_execute_line+0x264>
					FAIL(STATUS_NEGATIVE_VALUE);
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	f7ff b98a 	b.w	8002e34 <gc_execute_line+0x264>
			FAIL(STATUS_GCODE_INVALID_LINE_NUMBER);
 8003b20:	231b      	movs	r3, #27
 8003b22:	f7ff b987 	b.w	8002e34 <gc_execute_line+0x264>
				FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR);
 8003b26:	2325      	movs	r3, #37	; 0x25
 8003b28:	f7ff b984 	b.w	8002e34 <gc_execute_line+0x264>
			FAIL(STATUS_GCODE_AXIS_WORDS_EXIST);
 8003b2c:	231f      	movs	r3, #31
 8003b2e:	f7ff b981 	b.w	8002e34 <gc_execute_line+0x264>
				FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE);
 8003b32:	2316      	movs	r3, #22
 8003b34:	f7ff b97e 	b.w	8002e34 <gc_execute_line+0x264>
					FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE);
 8003b38:	2320      	movs	r3, #32
 8003b3a:	f7ff b97b 	b.w	8002e34 <gc_execute_line+0x264>
						FAIL(STATUS_GCODE_ARC_RADIUS_ERROR);
 8003b3e:	2322      	movs	r3, #34	; 0x22
 8003b40:	f7ff b978 	b.w	8002e34 <gc_execute_line+0x264>
						FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE);
 8003b44:	2323      	movs	r3, #35	; 0x23
 8003b46:	f7ff b975 	b.w	8002e34 <gc_execute_line+0x264>
		FAIL(STATUS_GCODE_UNUSED_WORDS);
 8003b4a:	2324      	movs	r3, #36	; 0x24
 8003b4c:	f7ff b972 	b.w	8002e34 <gc_execute_line+0x264>
			FAIL(STATUS_INVALID_JOG_COMMAND)
 8003b50:	2310      	movs	r3, #16
 8003b52:	f7ff b96f 	b.w	8002e34 <gc_execute_line+0x264>
		char_counter = 0;
 8003b56:	f88d a03b 	strb.w	sl, [sp, #59]	; 0x3b
 8003b5a:	f7ff b866 	b.w	8002c2a <gc_execute_line+0x5a>
 8003b5e:	bf00      	nop
 8003b60:	20003284 	.word	0x20003284
 8003b64:	20003290 	.word	0x20003290

08003b68 <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8003b68:	b538      	push	{r3, r4, r5, lr}
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
 8003b6a:	690b      	ldr	r3, [r1, #16]
{
 8003b6c:	4605      	mov	r5, r0
  pl_data->feed_rate = gc_block->values.f;
 8003b6e:	6003      	str	r3, [r0, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003b70:	7a03      	ldrb	r3, [r0, #8]
 8003b72:	f101 0438 	add.w	r4, r1, #56	; 0x38
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	7203      	strb	r3, [r0, #8]
  #ifdef USE_LINE_NUMBERS
    pl_data->line_number = gc_block->values.n;
  #endif

  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003b7c:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <jog_execute+0x58>)
 8003b7e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003b82:	f013 0f20 	tst.w	r3, #32
 8003b86:	d110      	bne.n	8003baa <jog_execute+0x42>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
  }

  // Valid jog command. Plan, set state, and execute.
  mc_line(gc_block->values.xyz,pl_data);
 8003b88:	4629      	mov	r1, r5
  if (sys.state == STATE_IDLE) {
 8003b8a:	4d0e      	ldr	r5, [pc, #56]	; (8003bc4 <jog_execute+0x5c>)
  mc_line(gc_block->values.xyz,pl_data);
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f000 f9a7 	bl	8003ee0 <mc_line>
  if (sys.state == STATE_IDLE) {
 8003b92:	782c      	ldrb	r4, [r5, #0]
 8003b94:	b984      	cbnz	r4, 8003bb8 <jog_execute+0x50>
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8003b96:	f000 fe97 	bl	80048c8 <plan_get_current_block>
 8003b9a:	b168      	cbz	r0, 8003bb8 <jog_execute+0x50>
      sys.state = STATE_JOG;
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	702b      	strb	r3, [r5, #0]
      st_prep_buffer();
 8003ba0:	f002 ffe6 	bl	8006b70 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8003ba4:	f002 fda4 	bl	80066f0 <st_wake_up>
 8003ba8:	e007      	b.n	8003bba <jog_execute+0x52>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8003baa:	4620      	mov	r0, r4
 8003bac:	f003 fc26 	bl	80073fc <system_check_travel_limits>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d0e9      	beq.n	8003b88 <jog_execute+0x20>
 8003bb4:	240f      	movs	r4, #15
 8003bb6:	e000      	b.n	8003bba <jog_execute+0x52>
    }
  }

  return(STATUS_OK);
 8003bb8:	2400      	movs	r4, #0
}
 8003bba:	4620      	mov	r0, r4
 8003bbc:	bd38      	pop	{r3, r4, r5, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20003478 	.word	0x20003478
 8003bc4:	20002e30 	.word	0x20002e30

08003bc8 <limits_init>:
#endif

void limits_init()
{
#ifdef STM32
  if (bit_isfalse(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <limits_init+0x18>)
 8003bca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003bce:	071b      	lsls	r3, r3, #28
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003bd0:	bf5e      	ittt	pl
 8003bd2:	f44f 7280 	movpl.w	r2, #256	; 0x100
 8003bd6:	4b03      	ldrpl	r3, [pc, #12]	; (8003be4 <limits_init+0x1c>)
 8003bd8:	f8c3 2084 	strpl.w	r2, [r3, #132]	; 0x84
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20003478 	.word	0x20003478
 8003be4:	e000e100 	.word	0xe000e100

08003be8 <limits_disable>:
 8003be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bec:	4b01      	ldr	r3, [pc, #4]	; (8003bf4 <limits_disable+0xc>)
 8003bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003bf2:	4770      	bx	lr
 8003bf4:	e000e100 	.word	0xe000e100

08003bf8 <limits_get_state>:
  return (READ_REG(GPIOx->IDR));
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <limits_get_state+0x40>)
	#endif

	#ifdef INVERT_LIMIT_PIN_MASK
		pin ^= INVERT_LIMIT_PIN_MASK;
	#endif
	if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIM_MASK; }
 8003bfa:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <limits_get_state+0x44>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
    pin = GPIO_ReadInputData(LIM_GPIO_Port);
 8003c02:	b29b      	uxth	r3, r3
	if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIM_MASK; }
 8003c04:	0652      	lsls	r2, r2, #25
 8003c06:	bf58      	it	pl
 8003c08:	f483 53e0 	eorpl.w	r3, r3, #7168	; 0x1c00
	if (pin)
 8003c0c:	b18b      	cbz	r3, 8003c32 <limits_get_state+0x3a>
	{
		uint8_t idx;
		for (idx=0; idx<N_AXIS; idx++)
		{
			if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003c0e:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <limits_get_state+0x48>)
 8003c10:	8811      	ldrh	r1, [r2, #0]
 8003c12:	420b      	tst	r3, r1
 8003c14:	bf18      	it	ne
 8003c16:	2001      	movne	r0, #1
 8003c18:	8851      	ldrh	r1, [r2, #2]
 8003c1a:	8892      	ldrh	r2, [r2, #4]
 8003c1c:	bf08      	it	eq
 8003c1e:	2000      	moveq	r0, #0
 8003c20:	420b      	tst	r3, r1
 8003c22:	bf18      	it	ne
 8003c24:	f040 0002 	orrne.w	r0, r0, #2
 8003c28:	4213      	tst	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <limits_get_state+0x3c>
 8003c2c:	f040 0004 	orr.w	r0, r0, #4
 8003c30:	4770      	bx	lr
  uint8_t limit_state = 0;
 8003c32:	4618      	mov	r0, r3
      if (pin & get_limit_pin_mask(idx)) { limit_state |= (1 << idx); }
    }
  }
#endif
  return(limit_state);
}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40010c00 	.word	0x40010c00
 8003c3c:	20003478 	.word	0x20003478
 8003c40:	08009ae0 	.word	0x08009ae0

08003c44 <HandleLimitIT>:
	}
*/


void HandleLimitIT(void)
{
 8003c44:	b508      	push	{r3, lr}
	// Ignore limit switches if already in an alarm state or in-process of executing an alarm.
	// When in the alarm state, Grbl should have been reset or will force a reset, so any pending
	// moves in the planner and serial buffers are all cleared and newly sent blocks will be
	// locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
	// limit setting if their limits are constantly triggering after a reset and move their axes.
	if (sys.state != STATE_ALARM)
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <HandleLimitIT+0x28>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d00c      	beq.n	8003c68 <HandleLimitIT+0x24>
	{
		if (!(sys_rt_exec_alarm))
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <HandleLimitIT+0x2c>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	b94b      	cbnz	r3, 8003c68 <HandleLimitIT+0x24>
		{
#ifdef HARD_LIMIT_FORCE_STATE_CHECK
			// Check limit pin state.
			if (limits_get_state())
 8003c54:	f7ff ffd0 	bl	8003bf8 <limits_get_state>
 8003c58:	b130      	cbz	r0, 8003c68 <HandleLimitIT+0x24>
			{
				mc_reset(); // Initiate system kill.
 8003c5a:	f000 fbc7 	bl	80043ec <mc_reset>
			system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif //HARD_LIMIT_FORCE_STATE_CHECK
		}
	}

}
 8003c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8003c62:	2001      	movs	r0, #1
 8003c64:	f003 bd74 	b.w	8007750 <system_set_exec_alarm>
 8003c68:	bd08      	pop	{r3, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20002e30 	.word	0x20002e30
 8003c70:	20002e60 	.word	0x20002e60

08003c74 <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 8003c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003c78:	4b82      	ldr	r3, [pc, #520]	; (8003e84 <limits_go_home+0x210>)
{
 8003c7a:	b08b      	sub	sp, #44	; 0x2c
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003c7c:	785c      	ldrb	r4, [r3, #1]
{
 8003c7e:	4681      	mov	r9, r0
 8003c80:	9301      	str	r3, [sp, #4]
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003c82:	2c00      	cmp	r4, #0
 8003c84:	f040 80b3 	bne.w	8003dee <limits_go_home+0x17a>

  // Initialize plan data struct for homing motion. Spindle and coolant are disabled.
  plan_line_data_t plan_data;
  plan_line_data_t *pl_data = &plan_data;
  memset(pl_data,0,sizeof(plan_line_data_t));
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8003c88:	2306      	movs	r3, #6

  // Initialize variables used for homing computations.
  uint8_t n_cycle = (2*N_HOMING_LOCATE_CYCLE+1);
  uint16_t step_pin[N_AXIS];
  float target[N_AXIS];
  float max_travel = 0.0;
 8003c8a:	2500      	movs	r5, #0
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
    // Initialize step pin masks
    #ifdef STM32
      step_pin[idx] = step_pin_mask[idx];
 8003c8c:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8003e9c <limits_go_home+0x228>
    #endif

    if (bit_istrue(cycle_mask,bit(idx))) {
      // Set target based on max_travel setting. Ensure homing switches engaged with search scalar.
      // NOTE: settings.max_travel[] is stored as a negative value.
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003c90:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8003e88 <limits_go_home+0x214>
  memset(pl_data,0,sizeof(plan_line_data_t));
 8003c94:	9406      	str	r4, [sp, #24]
 8003c96:	9404      	str	r4, [sp, #16]
 8003c98:	9405      	str	r4, [sp, #20]
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8003c9a:	f88d 3018 	strb.w	r3, [sp, #24]
      step_pin[idx] = step_pin_mask[idx];
 8003c9e:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
 8003ca2:	aa02      	add	r2, sp, #8
 8003ca4:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003ca8:	fa49 f304 	asr.w	r3, r9, r4
 8003cac:	07d8      	lsls	r0, r3, #31
 8003cae:	d518      	bpl.n	8003ce2 <limits_go_home+0x6e>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003cb0:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
 8003cb4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003cb6:	f7fc fbbb 	bl	8000430 <__aeabi_f2d>
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8003cc0:	f7fc fc0a 	bl	80004d8 <__aeabi_dmul>
 8003cc4:	4606      	mov	r6, r0
 8003cc6:	460f      	mov	r7, r1
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f7fc fbb1 	bl	8000430 <__aeabi_f2d>
 8003cce:	4632      	mov	r2, r6
 8003cd0:	463b      	mov	r3, r7
 8003cd2:	f7fc fe91 	bl	80009f8 <__aeabi_dcmpgt>
 8003cd6:	b920      	cbnz	r0, 8003ce2 <limits_go_home+0x6e>
 8003cd8:	4630      	mov	r0, r6
 8003cda:	4639      	mov	r1, r7
 8003cdc:	f7fc fef4 	bl	8000ac8 <__aeabi_d2f>
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8003ce4:	2c03      	cmp	r4, #3
 8003ce6:	d1da      	bne.n	8003c9e <limits_go_home+0x2a>
    }
  }

  // Set search mode with approach at seek rate to quickly engage the specified cycle_mask limit switches.
  bool approach = true;
  float homing_rate = settings.homing_seek_rate;
 8003ce8:	2404      	movs	r4, #4
  bool approach = true;
 8003cea:	f04f 0801 	mov.w	r8, #1
  float homing_rate = settings.homing_seek_rate;
 8003cee:	4e66      	ldr	r6, [pc, #408]	; (8003e88 <limits_go_home+0x214>)
 8003cf0:	f8d6 b050 	ldr.w	fp, [r6, #80]	; 0x50
  uint8_t limit_state, n_active_axis;
  uint16_t axislock;

  do {

    system_convert_array_steps_to_mpos(target,sys_position);
 8003cf4:	f10d 0a1c 	add.w	sl, sp, #28
 8003cf8:	4650      	mov	r0, sl
 8003cfa:	4964      	ldr	r1, [pc, #400]	; (8003e8c <limits_go_home+0x218>)
 8003cfc:	f003 fb70 	bl	80073e0 <system_convert_array_steps_to_mpos>

    // Initialize and declare variables needed for homing routine.
    axislock = 0;
    n_active_axis = 0;
 8003d00:	2000      	movs	r0, #0
        #else
          sys_position[idx] = 0;
        #endif
        // Set target direction based on cycle mask and homing cycle approach state.
        // NOTE: This happens to compile smaller than any other implementation tried.
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003d02:	4603      	mov	r3, r0
    axislock = 0;
 8003d04:	4607      	mov	r7, r0
          sys_position[idx] = 0;
 8003d06:	4686      	mov	lr, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003d08:	f896 c049 	ldrb.w	ip, [r6, #73]	; 0x49
          if (approach) { target[idx] = -max_travel; }
          else { target[idx] = max_travel; }
        } else {
          if (approach) { target[idx] = max_travel; }
          else { target[idx] = -max_travel; }
 8003d0c:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003d10:	fa49 f103 	asr.w	r1, r9, r3
 8003d14:	07c9      	lsls	r1, r1, #31
 8003d16:	d517      	bpl.n	8003d48 <limits_go_home+0xd4>
          sys_position[idx] = 0;
 8003d18:	495c      	ldr	r1, [pc, #368]	; (8003e8c <limits_go_home+0x218>)
        n_active_axis++;
 8003d1a:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 8003d1c:	f841 e023 	str.w	lr, [r1, r3, lsl #2]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003d20:	fa4c f103 	asr.w	r1, ip, r3
 8003d24:	07c9      	lsls	r1, r1, #31
        n_active_axis++;
 8003d26:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003d28:	d505      	bpl.n	8003d36 <limits_go_home+0xc2>
          if (approach) { target[idx] = -max_travel; }
 8003d2a:	f1b8 0f00 	cmp.w	r8, #0
 8003d2e:	d005      	beq.n	8003d3c <limits_go_home+0xc8>
          else { target[idx] = -max_travel; }
 8003d30:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
 8003d34:	e004      	b.n	8003d40 <limits_go_home+0xcc>
          if (approach) { target[idx] = max_travel; }
 8003d36:	f1b8 0f00 	cmp.w	r8, #0
 8003d3a:	d0f9      	beq.n	8003d30 <limits_go_home+0xbc>
 8003d3c:	f84a 5023 	str.w	r5, [sl, r3, lsl #2]
        }
        // Apply axislock to the step port pins active in this cycle.
        axislock |= step_pin[idx];
 8003d40:	a902      	add	r1, sp, #8
 8003d42:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8003d46:	430f      	orrs	r7, r1
 8003d48:	3301      	adds	r3, #1
    for (idx=0; idx<N_AXIS; idx++) {
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d1e0      	bne.n	8003d10 <limits_go_home+0x9c>
      }

    }
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003d4e:	f7fc ffc1 	bl	8000cd4 <__aeabi_ui2f>
 8003d52:	f004 fd47 	bl	80087e4 <sqrtf>
    sys.homing_axis_lock = axislock;
 8003d56:	9b01      	ldr	r3, [sp, #4]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003d58:	4601      	mov	r1, r0
    sys.homing_axis_lock = axislock;
 8003d5a:	80df      	strh	r7, [r3, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003d5c:	4658      	mov	r0, fp
 8003d5e:	f7fd f811 	bl	8000d84 <__aeabi_fmul>

    // Perform homing cycle. Planner buffer should be empty, as required to initiate the homing cycle.
    pl_data->feed_rate = homing_rate; // Set current homing rate.
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8003d62:	a904      	add	r1, sp, #16
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 8003d64:	9004      	str	r0, [sp, #16]
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8003d66:	a807      	add	r0, sp, #28
 8003d68:	f000 fe7a 	bl	8004a60 <plan_buffer_line>

    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	9a01      	ldr	r2, [sp, #4]
      }

      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.

      // Exit routines: No time to run protocol_execute_realtime() in this loop.
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8003d70:	4d47      	ldr	r5, [pc, #284]	; (8003e90 <limits_go_home+0x21c>)
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8003d72:	7113      	strb	r3, [r2, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 8003d74:	f002 fefc 	bl	8006b70 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 8003d78:	f002 fcba 	bl	80066f0 <st_wake_up>
      if (approach) {
 8003d7c:	f1b8 0f00 	cmp.w	r8, #0
 8003d80:	d011      	beq.n	8003da6 <limits_go_home+0x132>
        limit_state = limits_get_state();
 8003d82:	f7ff ff39 	bl	8003bf8 <limits_get_state>
 8003d86:	2300      	movs	r3, #0
          if (axislock & step_pin[idx]) {
 8003d88:	aa02      	add	r2, sp, #8
 8003d8a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003d8e:	423a      	tst	r2, r7
 8003d90:	d004      	beq.n	8003d9c <limits_go_home+0x128>
            if (limit_state & (1 << idx)) {
 8003d92:	fa40 f103 	asr.w	r1, r0, r3
 8003d96:	07c9      	lsls	r1, r1, #31
                axislock &= ~(step_pin[idx]);
 8003d98:	bf48      	it	mi
 8003d9a:	4397      	bicmi	r7, r2
 8003d9c:	3301      	adds	r3, #1
        for (idx=0; idx<N_AXIS; idx++) {
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d1f2      	bne.n	8003d88 <limits_go_home+0x114>
        sys.homing_axis_lock = axislock;
 8003da2:	9b01      	ldr	r3, [sp, #4]
 8003da4:	80df      	strh	r7, [r3, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8003da6:	f002 fee3 	bl	8006b70 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8003daa:	782b      	ldrb	r3, [r5, #0]
 8003dac:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003db0:	d059      	beq.n	8003e66 <limits_go_home+0x1f2>
        uint8_t rt_exec = sys_rt_exec_state;
 8003db2:	782d      	ldrb	r5, [r5, #0]
 8003db4:	b2ed      	uxtb	r5, r5
        // Homing failure condition: Reset issued during cycle.
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003db6:	06eb      	lsls	r3, r5, #27
 8003db8:	d502      	bpl.n	8003dc0 <limits_go_home+0x14c>
 8003dba:	2006      	movs	r0, #6
 8003dbc:	f003 fcc8 	bl	8007750 <system_set_exec_alarm>
        // Homing failure condition: Safety door was opened.
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8003dc0:	06af      	lsls	r7, r5, #26
 8003dc2:	d502      	bpl.n	8003dca <limits_go_home+0x156>
 8003dc4:	2007      	movs	r0, #7
 8003dc6:	f003 fcc3 	bl	8007750 <system_set_exec_alarm>
        // Homing failure condition: Limit switch still engaged after pull-off motion
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003dca:	f1b8 0f00 	cmp.w	r8, #0
 8003dce:	d155      	bne.n	8003e7c <limits_go_home+0x208>
 8003dd0:	f7ff ff12 	bl	8003bf8 <limits_get_state>
 8003dd4:	ea19 0f00 	tst.w	r9, r0
 8003dd8:	d002      	beq.n	8003de0 <limits_go_home+0x16c>
 8003dda:	2008      	movs	r0, #8
        // Homing failure condition: Limit switch not found during approach.
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8003ddc:	f003 fcb8 	bl	8007750 <system_set_exec_alarm>
        if (sys_rt_exec_alarm) {
 8003de0:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <limits_go_home+0x220>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b133      	cbz	r3, 8003df4 <limits_go_home+0x180>
          mc_reset(); // Stop motors, if they are running.
 8003de6:	f000 fb01 	bl	80043ec <mc_reset>
          protocol_execute_realtime();
 8003dea:	f001 facb 	bl	8005384 <protocol_execute_realtime>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
}
 8003dee:	b00b      	add	sp, #44	; 0x2c
 8003df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8003df4:	2004      	movs	r0, #4
 8003df6:	f003 fca1 	bl	800773c <system_clear_exec_state_flag>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8003dfa:	f002 fe39 	bl	8006a70 <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 8003dfe:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
 8003e02:	f000 fbd7 	bl	80045b4 <delay_ms>
    if (approach) {
 8003e06:	f098 0801 	eors.w	r8, r8, #1
 8003e0a:	d02f      	beq.n	8003e6c <limits_go_home+0x1f8>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8003e0c:	4922      	ldr	r1, [pc, #136]	; (8003e98 <limits_go_home+0x224>)
 8003e0e:	6db0      	ldr	r0, [r6, #88]	; 0x58
 8003e10:	f7fc ffb8 	bl	8000d84 <__aeabi_fmul>
 8003e14:	4605      	mov	r5, r0
      homing_rate = settings.homing_feed_rate;
 8003e16:	f8d6 b04c 	ldr.w	fp, [r6, #76]	; 0x4c
 8003e1a:	3c01      	subs	r4, #1
  } while (n_cycle-- > 0);
 8003e1c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003e20:	f47f af68 	bne.w	8003cf4 <limits_go_home+0x80>
 8003e24:	4d18      	ldr	r5, [pc, #96]	; (8003e88 <limits_go_home+0x214>)
        sys_position[idx] = set_axis_position;
 8003e26:	4f19      	ldr	r7, [pc, #100]	; (8003e8c <limits_go_home+0x218>)
    if (cycle_mask & bit(idx)) {
 8003e28:	fa49 f304 	asr.w	r3, r9, r4
 8003e2c:	07d9      	lsls	r1, r3, #31
 8003e2e:	d511      	bpl.n	8003e54 <limits_go_home+0x1e0>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003e30:	f896 3049 	ldrb.w	r3, [r6, #73]	; 0x49
 8003e34:	4123      	asrs	r3, r4
 8003e36:	07da      	lsls	r2, r3, #31
 8003e38:	d51c      	bpl.n	8003e74 <limits_go_home+0x200>
          set_axis_position = lround((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 8003e3a:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8003e3c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003e3e:	f7fc fe99 	bl	8000b74 <__addsf3>
          set_axis_position = lround(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8003e42:	6829      	ldr	r1, [r5, #0]
 8003e44:	f7fc ff9e 	bl	8000d84 <__aeabi_fmul>
 8003e48:	f7fc faf2 	bl	8000430 <__aeabi_f2d>
 8003e4c:	f004 fb10 	bl	8008470 <lround>
        sys_position[idx] = set_axis_position;
 8003e50:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8003e54:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8003e56:	2c03      	cmp	r4, #3
 8003e58:	f105 0504 	add.w	r5, r5, #4
 8003e5c:	d1e4      	bne.n	8003e28 <limits_go_home+0x1b4>
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9a01      	ldr	r2, [sp, #4]
 8003e62:	7113      	strb	r3, [r2, #4]
 8003e64:	e7c3      	b.n	8003dee <limits_go_home+0x17a>
    } while (STEP_MASK & axislock);
 8003e66:	0778      	lsls	r0, r7, #29
 8003e68:	d188      	bne.n	8003d7c <limits_go_home+0x108>
 8003e6a:	e7c6      	b.n	8003dfa <limits_go_home+0x186>
      max_travel = settings.homing_pulloff;
 8003e6c:	6db5      	ldr	r5, [r6, #88]	; 0x58
      homing_rate = settings.homing_seek_rate;
 8003e6e:	f8d6 b050 	ldr.w	fp, [r6, #80]	; 0x50
 8003e72:	e7d2      	b.n	8003e1a <limits_go_home+0x1a6>
          set_axis_position = lround(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8003e74:	6db0      	ldr	r0, [r6, #88]	; 0x58
 8003e76:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003e7a:	e7e2      	b.n	8003e42 <limits_go_home+0x1ce>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8003e7c:	076b      	lsls	r3, r5, #29
 8003e7e:	d5af      	bpl.n	8003de0 <limits_go_home+0x16c>
 8003e80:	2009      	movs	r0, #9
 8003e82:	e7ab      	b.n	8003ddc <limits_go_home+0x168>
 8003e84:	20002e30 	.word	0x20002e30
 8003e88:	20003478 	.word	0x20003478
 8003e8c:	20002e54 	.word	0x20002e54
 8003e90:	20002e45 	.word	0x20002e45
 8003e94:	20002e60 	.word	0x20002e60
 8003e98:	40a00000 	.word	0x40a00000
 8003e9c:	08009ae6 	.word	0x08009ae6

08003ea0 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 8003ea0:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 8003ea2:	f003 faab 	bl	80073fc <system_check_travel_limits>
 8003ea6:	b1c0      	cbz	r0, 8003eda <limits_soft_check+0x3a>
    sys.soft_limit = true;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4c0c      	ldr	r4, [pc, #48]	; (8003edc <limits_soft_check+0x3c>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 8003eac:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 8003eae:	70e2      	strb	r2, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 8003eb0:	2808      	cmp	r0, #8
 8003eb2:	d008      	beq.n	8003ec6 <limits_soft_check+0x26>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 8003eb4:	f000 fa9a 	bl	80043ec <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 8003eb8:	2002      	movs	r0, #2
 8003eba:	f003 fc49 	bl	8007750 <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 8003ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 8003ec2:	f001 ba5f 	b.w	8005384 <protocol_execute_realtime>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 8003ec6:	f003 fab7 	bl	8007438 <system_set_exec_state_flag>
        protocol_execute_realtime();
 8003eca:	f001 fa5b 	bl	8005384 <protocol_execute_realtime>
        if (sys.abort) { return; }
 8003ece:	7863      	ldrb	r3, [r4, #1]
 8003ed0:	b91b      	cbnz	r3, 8003eda <limits_soft_check+0x3a>
      } while ( sys.state != STATE_IDLE );
 8003ed2:	7823      	ldrb	r3, [r4, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f8      	bne.n	8003eca <limits_soft_check+0x2a>
 8003ed8:	e7ec      	b.n	8003eb4 <limits_soft_check+0x14>
 8003eda:	bd10      	pop	{r4, pc}
 8003edc:	20002e30 	.word	0x20002e30

08003ee0 <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003ee2:	4c17      	ldr	r4, [pc, #92]	; (8003f40 <mc_line+0x60>)
{
 8003ee4:	4607      	mov	r7, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003ee6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
{
 8003eea:	460d      	mov	r5, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003eec:	f012 0f20 	tst.w	r2, #32
 8003ef0:	4e14      	ldr	r6, [pc, #80]	; (8003f44 <mc_line+0x64>)
 8003ef2:	d004      	beq.n	8003efe <mc_line+0x1e>
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003ef4:	7833      	ldrb	r3, [r6, #0]
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d001      	beq.n	8003efe <mc_line+0x1e>
 8003efa:	f7ff ffd1 	bl	8003ea0 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003efe:	7833      	ldrb	r3, [r6, #0]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d01b      	beq.n	8003f3c <mc_line+0x5c>
  // parser and planner are separate from the system machine positions, this is doable.

  // If the buffer is full: good! That means we are well ahead of the robot.
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_realtime(); // Check for any run-time commands
 8003f04:	f001 fa3e 	bl	8005384 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003f08:	7873      	ldrb	r3, [r6, #1]
 8003f0a:	b9bb      	cbnz	r3, 8003f3c <mc_line+0x5c>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003f0c:	f000 fd08 	bl	8004920 <plan_check_full_buffer>
 8003f10:	b110      	cbz	r0, 8003f18 <mc_line+0x38>
 8003f12:	f001 f879 	bl	8005008 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003f16:	e7f5      	b.n	8003f04 <mc_line+0x24>
    else { break; }
  } while (1);

  // Plan and queue motion into planner buffer
  if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003f18:	4629      	mov	r1, r5
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	f000 fda0 	bl	8004a60 <plan_buffer_line>
 8003f20:	b960      	cbnz	r0, 8003f3c <mc_line+0x5c>
    if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8003f22:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8003f26:	079a      	lsls	r2, r3, #30
 8003f28:	d508      	bpl.n	8003f3c <mc_line+0x5c>
      // Correctly set spindle state, if there is a coincident position passed. Forces a buffer
      // sync while in M3 laser mode only.
      if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003f2a:	7a2b      	ldrb	r3, [r5, #8]
 8003f2c:	06db      	lsls	r3, r3, #27
 8003f2e:	d505      	bpl.n	8003f3c <mc_line+0x5c>
        spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003f30:	6869      	ldr	r1, [r5, #4]
 8003f32:	2010      	movs	r0, #16
      }
    }
  }
}
 8003f34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003f38:	f002 bbc8 	b.w	80066cc <spindle_sync>
 8003f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20003478 	.word	0x20003478
 8003f44:	20002e30 	.word	0x20002e30

08003f48 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8003f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	461c      	mov	r4, r3
 8003f4e:	b08f      	sub	sp, #60	; 0x3c
 8003f50:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8003f54:	9201      	str	r2, [sp, #4]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003f56:	00ab      	lsls	r3, r5, #2
 8003f58:	441a      	add	r2, r3
 8003f5a:	18e3      	adds	r3, r4, r3
 8003f5c:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
 8003f60:	9309      	str	r3, [sp, #36]	; 0x24
 8003f62:	9b01      	ldr	r3, [sp, #4]
{
 8003f64:	9003      	str	r0, [sp, #12]
 8003f66:	9102      	str	r1, [sp, #8]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003f68:	4638      	mov	r0, r7
 8003f6a:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8003f6e:	9208      	str	r2, [sp, #32]
 8003f70:	f7fc fe00 	bl	8000b74 <__addsf3>
{
 8003f74:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003f78:	9a01      	ldr	r2, [sp, #4]
 8003f7a:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8003f7e:	441a      	add	r2, r3
 8003f80:	18e3      	adds	r3, r4, r3
 8003f82:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f84:	f854 4028 	ldr.w	r4, [r4, r8, lsl #2]
 8003f88:	9b01      	ldr	r3, [sp, #4]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003f8a:	9004      	str	r0, [sp, #16]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003f8c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003f90:	4620      	mov	r0, r4
 8003f92:	920a      	str	r2, [sp, #40]	; 0x28
 8003f94:	f7fc fdee 	bl	8000b74 <__addsf3>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
 8003f98:	9b03      	ldr	r3, [sp, #12]
 8003f9a:	9904      	ldr	r1, [sp, #16]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003f9c:	9005      	str	r0, [sp, #20]
  float rt_axis0 = target[axis_0] - center_axis0;
 8003f9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003fa2:	f7fc fde5 	bl	8000b70 <__aeabi_fsub>
  float rt_axis1 = target[axis_1] - center_axis1;
 8003fa6:	9b03      	ldr	r3, [sp, #12]
  float rt_axis0 = target[axis_0] - center_axis0;
 8003fa8:	4605      	mov	r5, r0
  float rt_axis1 = target[axis_1] - center_axis1;
 8003faa:	9905      	ldr	r1, [sp, #20]
 8003fac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003fb0:	f7fc fdde 	bl	8000b70 <__aeabi_fsub>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8003fb4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  float rt_axis1 = target[axis_1] - center_axis1;
 8003fb8:	4680      	mov	r8, r0

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	f7fc fee1 	bl	8000d84 <__aeabi_fmul>
  float r_axis1 = -offset[axis_1];
 8003fc2:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003fc6:	4682      	mov	sl, r0
 8003fc8:	4641      	mov	r1, r8
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f7fc feda 	bl	8000d84 <__aeabi_fmul>
 8003fd0:	4601      	mov	r1, r0
 8003fd2:	4650      	mov	r0, sl
 8003fd4:	f7fc fdce 	bl	8000b74 <__addsf3>
 8003fd8:	4641      	mov	r1, r8
 8003fda:	4682      	mov	sl, r0
 8003fdc:	4638      	mov	r0, r7
 8003fde:	f7fc fed1 	bl	8000d84 <__aeabi_fmul>
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	4680      	mov	r8, r0
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f7fc fecc 	bl	8000d84 <__aeabi_fmul>
 8003fec:	4601      	mov	r1, r0
 8003fee:	4640      	mov	r0, r8
 8003ff0:	f7fc fdbe 	bl	8000b70 <__aeabi_fsub>
 8003ff4:	4651      	mov	r1, sl
{
 8003ff6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8003ff8:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8003ffc:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8004000:	f004 fbee 	bl	80087e0 <atan2f>
 8004004:	4605      	mov	r5, r0
  if (is_clockwise_arc) { // Correct atan2 output per direction
 8004006:	f1b9 0f00 	cmp.w	r9, #0
 800400a:	d04e      	beq.n	80040aa <mc_arc+0x162>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 800400c:	f7fc fa10 	bl	8000430 <__aeabi_f2d>
 8004010:	a39b      	add	r3, pc, #620	; (adr r3, 8004280 <mc_arc+0x338>)
 8004012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004016:	4680      	mov	r8, r0
 8004018:	4689      	mov	r9, r1
 800401a:	f7fc fce3 	bl	80009e4 <__aeabi_dcmpge>
 800401e:	b148      	cbz	r0, 8004034 <mc_arc+0xec>
 8004020:	a399      	add	r3, pc, #612	; (adr r3, 8004288 <mc_arc+0x340>)
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	4640      	mov	r0, r8
 8004028:	4649      	mov	r1, r9
 800402a:	f7fc f8a1 	bl	8000170 <__aeabi_dsub>
  } else {
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 800402e:	f7fc fd4b 	bl	8000ac8 <__aeabi_d2f>
 8004032:	4605      	mov	r5, r0
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8004034:	4b9a      	ldr	r3, [pc, #616]	; (80042a0 <mc_arc+0x358>)
 8004036:	4631      	mov	r1, r6
 8004038:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
 800403c:	4630      	mov	r0, r6
 800403e:	f7fc fd99 	bl	8000b74 <__addsf3>
 8004042:	4641      	mov	r1, r8
 8004044:	f7fc fd94 	bl	8000b70 <__aeabi_fsub>
 8004048:	4641      	mov	r1, r8
 800404a:	f7fc fe9b 	bl	8000d84 <__aeabi_fmul>
 800404e:	f004 fbc9 	bl	80087e4 <sqrtf>
 8004052:	4682      	mov	sl, r0
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 8004054:	4628      	mov	r0, r5
 8004056:	f7fc f9eb 	bl	8000430 <__aeabi_f2d>
 800405a:	2200      	movs	r2, #0
 800405c:	4b91      	ldr	r3, [pc, #580]	; (80042a4 <mc_arc+0x35c>)
 800405e:	f7fc fa3b 	bl	80004d8 <__aeabi_dmul>
 8004062:	4680      	mov	r8, r0
 8004064:	4630      	mov	r0, r6
 8004066:	4689      	mov	r9, r1
 8004068:	f7fc f9e2 	bl	8000430 <__aeabi_f2d>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4640      	mov	r0, r8
 8004072:	4649      	mov	r1, r9
 8004074:	f7fc fa30 	bl	80004d8 <__aeabi_dmul>
 8004078:	4680      	mov	r8, r0
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 800407a:	4650      	mov	r0, sl
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 800407c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8004080:	f7fc f9d6 	bl	8000430 <__aeabi_f2d>
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4640      	mov	r0, r8
 800408a:	4631      	mov	r1, r6
 800408c:	f7fc fb4e 	bl	800072c <__aeabi_ddiv>
 8004090:	f004 f96a 	bl	8008368 <floor>
 8004094:	f7fc fcf8 	bl	8000a88 <__aeabi_d2uiz>
 8004098:	b286      	uxth	r6, r0

  if (segments) {
 800409a:	b9ce      	cbnz	r6, 80040d0 <mc_arc+0x188>
      // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
      if (sys.abort) { return; }
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
 800409c:	9902      	ldr	r1, [sp, #8]
 800409e:	9803      	ldr	r0, [sp, #12]
}
 80040a0:	b00f      	add	sp, #60	; 0x3c
 80040a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mc_line(target, pl_data);
 80040a6:	f7ff bf1b 	b.w	8003ee0 <mc_line>
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 80040aa:	f7fc f9c1 	bl	8000430 <__aeabi_f2d>
 80040ae:	a378      	add	r3, pc, #480	; (adr r3, 8004290 <mc_arc+0x348>)
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	4680      	mov	r8, r0
 80040b6:	4689      	mov	r9, r1
 80040b8:	f7fc fc8a 	bl	80009d0 <__aeabi_dcmple>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d0b9      	beq.n	8004034 <mc_arc+0xec>
 80040c0:	a371      	add	r3, pc, #452	; (adr r3, 8004288 <mc_arc+0x340>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	4640      	mov	r0, r8
 80040c8:	4649      	mov	r1, r9
 80040ca:	f7fc f853 	bl	8000174 <__adddf3>
 80040ce:	e7ae      	b.n	800402e <mc_arc+0xe6>
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 80040d0:	9b02      	ldr	r3, [sp, #8]
 80040d2:	f893 8008 	ldrb.w	r8, [r3, #8]
 80040d6:	f018 0f08 	tst.w	r8, #8
 80040da:	d00d      	beq.n	80040f8 <mc_arc+0x1b0>
      pl_data->feed_rate *= segments; 
 80040dc:	4630      	mov	r0, r6
 80040de:	f7fc fdfd 	bl	8000cdc <__aeabi_i2f>
 80040e2:	9b02      	ldr	r3, [sp, #8]
 80040e4:	4601      	mov	r1, r0
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	f7fc fe4c 	bl	8000d84 <__aeabi_fmul>
 80040ec:	9b02      	ldr	r3, [sp, #8]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 80040ee:	f028 0808 	bic.w	r8, r8, #8
      pl_data->feed_rate *= segments; 
 80040f2:	6018      	str	r0, [r3, #0]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 80040f4:	f883 8008 	strb.w	r8, [r3, #8]
    float theta_per_segment = angular_travel/segments;
 80040f8:	4630      	mov	r0, r6
 80040fa:	f7fc fdef 	bl	8000cdc <__aeabi_i2f>
 80040fe:	4680      	mov	r8, r0
 8004100:	4601      	mov	r1, r0
 8004102:	4628      	mov	r0, r5
 8004104:	f7fc fef2 	bl	8000eec <__aeabi_fdiv>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8004108:	9b01      	ldr	r3, [sp, #4]
    float theta_per_segment = angular_travel/segments;
 800410a:	4682      	mov	sl, r0
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 800410c:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8004110:	9306      	str	r3, [sp, #24]
 8004112:	9b01      	ldr	r3, [sp, #4]
 8004114:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 8004118:	9b03      	ldr	r3, [sp, #12]
 800411a:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800411e:	f7fc fd27 	bl	8000b70 <__aeabi_fsub>
 8004122:	4641      	mov	r1, r8
 8004124:	f7fc fee2 	bl	8000eec <__aeabi_fdiv>
    float cos_T = 2.0 - theta_per_segment*theta_per_segment;
 8004128:	4651      	mov	r1, sl
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 800412a:	900c      	str	r0, [sp, #48]	; 0x30
    float cos_T = 2.0 - theta_per_segment*theta_per_segment;
 800412c:	4650      	mov	r0, sl
 800412e:	f7fc fe29 	bl	8000d84 <__aeabi_fmul>
 8004132:	4601      	mov	r1, r0
 8004134:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004138:	f7fc fd1a 	bl	8000b70 <__aeabi_fsub>
 800413c:	4605      	mov	r5, r0
    float sin_T = theta_per_segment*0.16666667*(cos_T + 4.0);
 800413e:	4650      	mov	r0, sl
 8004140:	f7fc f976 	bl	8000430 <__aeabi_f2d>
 8004144:	a354      	add	r3, pc, #336	; (adr r3, 8004298 <mc_arc+0x350>)
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f7fc f9c5 	bl	80004d8 <__aeabi_dmul>
 800414e:	4680      	mov	r8, r0
 8004150:	4628      	mov	r0, r5
 8004152:	4689      	mov	r9, r1
 8004154:	f7fc f96c 	bl	8000430 <__aeabi_f2d>
 8004158:	2200      	movs	r2, #0
 800415a:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <mc_arc+0x360>)
 800415c:	f7fc f80a 	bl	8000174 <__adddf3>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4640      	mov	r0, r8
 8004166:	4649      	mov	r1, r9
 8004168:	f7fc f9b6 	bl	80004d8 <__aeabi_dmul>
 800416c:	f7fc fcac 	bl	8000ac8 <__aeabi_d2f>
    cos_T *= 0.5;
 8004170:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float sin_T = theta_per_segment*0.16666667*(cos_T + 4.0);
 8004174:	9007      	str	r0, [sp, #28]
    cos_T *= 0.5;
 8004176:	4628      	mov	r0, r5
 8004178:	f7fc fe04 	bl	8000d84 <__aeabi_fmul>
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 800417c:	2501      	movs	r5, #1
    cos_T *= 0.5;
 800417e:	4680      	mov	r8, r0
    uint8_t count = 0;
 8004180:	f04f 0900 	mov.w	r9, #0
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8004184:	b2ab      	uxth	r3, r5
 8004186:	429e      	cmp	r6, r3
 8004188:	d988      	bls.n	800409c <mc_arc+0x154>
      if (count < N_ARC_CORRECTION) {
 800418a:	f1b9 0f0b 	cmp.w	r9, #11
 800418e:	d83f      	bhi.n	8004210 <mc_arc+0x2c8>
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8004190:	9907      	ldr	r1, [sp, #28]
 8004192:	4638      	mov	r0, r7
 8004194:	f7fc fdf6 	bl	8000d84 <__aeabi_fmul>
 8004198:	4641      	mov	r1, r8
 800419a:	4683      	mov	fp, r0
 800419c:	4620      	mov	r0, r4
 800419e:	f7fc fdf1 	bl	8000d84 <__aeabi_fmul>
 80041a2:	4601      	mov	r1, r0
 80041a4:	4658      	mov	r0, fp
 80041a6:	f7fc fce5 	bl	8000b74 <__addsf3>
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 80041aa:	4641      	mov	r1, r8
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 80041ac:	4683      	mov	fp, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 80041ae:	4638      	mov	r0, r7
 80041b0:	f7fc fde8 	bl	8000d84 <__aeabi_fmul>
 80041b4:	9907      	ldr	r1, [sp, #28]
 80041b6:	4607      	mov	r7, r0
 80041b8:	4620      	mov	r0, r4
 80041ba:	f7fc fde3 	bl	8000d84 <__aeabi_fmul>
 80041be:	4601      	mov	r1, r0
 80041c0:	4638      	mov	r0, r7
 80041c2:	f7fc fcd5 	bl	8000b70 <__aeabi_fsub>
        r_axis1 = r_axisi;
 80041c6:	465c      	mov	r4, fp
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 80041c8:	4607      	mov	r7, r0
        count++;
 80041ca:	f109 0901 	add.w	r9, r9, #1
 80041ce:	fa5f f989 	uxtb.w	r9, r9
      position[axis_0] = center_axis0 + r_axis0;
 80041d2:	9904      	ldr	r1, [sp, #16]
 80041d4:	4638      	mov	r0, r7
 80041d6:	f7fc fccd 	bl	8000b74 <__addsf3>
 80041da:	9b08      	ldr	r3, [sp, #32]
      position[axis_1] = center_axis1 + r_axis1;
 80041dc:	9905      	ldr	r1, [sp, #20]
      position[axis_0] = center_axis0 + r_axis0;
 80041de:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 80041e0:	4620      	mov	r0, r4
 80041e2:	f7fc fcc7 	bl	8000b74 <__addsf3>
 80041e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      position[axis_linear] += linear_per_segment;
 80041e8:	990c      	ldr	r1, [sp, #48]	; 0x30
      position[axis_1] = center_axis1 + r_axis1;
 80041ea:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 80041ec:	9b06      	ldr	r3, [sp, #24]
 80041ee:	3501      	adds	r5, #1
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f7fc fcbf 	bl	8000b74 <__addsf3>
 80041f6:	9b06      	ldr	r3, [sp, #24]
      mc_line(position, pl_data);
 80041f8:	9902      	ldr	r1, [sp, #8]
      position[axis_linear] += linear_per_segment;
 80041fa:	6018      	str	r0, [r3, #0]
      mc_line(position, pl_data);
 80041fc:	9801      	ldr	r0, [sp, #4]
 80041fe:	f7ff fe6f 	bl	8003ee0 <mc_line>
      if (sys.abort) { return; }
 8004202:	4b2a      	ldr	r3, [pc, #168]	; (80042ac <mc_arc+0x364>)
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0bc      	beq.n	8004184 <mc_arc+0x23c>
}
 800420a:	b00f      	add	sp, #60	; 0x3c
 800420c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cos_Ti = cosf(i*theta_per_segment);
 8004210:	4628      	mov	r0, r5
 8004212:	f7fc fd63 	bl	8000cdc <__aeabi_i2f>
 8004216:	4651      	mov	r1, sl
 8004218:	f7fc fdb4 	bl	8000d84 <__aeabi_fmul>
 800421c:	4607      	mov	r7, r0
 800421e:	f004 fa21 	bl	8008664 <cosf>
 8004222:	4604      	mov	r4, r0
        sin_Ti = sinf(i*theta_per_segment);
 8004224:	4638      	mov	r0, r7
 8004226:	f004 fa51 	bl	80086cc <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 800422a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800422e:	681b      	ldr	r3, [r3, #0]
        sin_Ti = sinf(i*theta_per_segment);
 8004230:	4683      	mov	fp, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8004232:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004236:	4619      	mov	r1, r3
 8004238:	4620      	mov	r0, r4
 800423a:	f8d2 9000 	ldr.w	r9, [r2]
 800423e:	930d      	str	r3, [sp, #52]	; 0x34
 8004240:	f7fc fda0 	bl	8000d84 <__aeabi_fmul>
 8004244:	4649      	mov	r1, r9
 8004246:	4607      	mov	r7, r0
 8004248:	4658      	mov	r0, fp
 800424a:	f7fc fd9b 	bl	8000d84 <__aeabi_fmul>
 800424e:	4601      	mov	r1, r0
 8004250:	4638      	mov	r0, r7
 8004252:	f7fc fc8f 	bl	8000b74 <__addsf3>
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8004256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8004258:	4607      	mov	r7, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 800425a:	4619      	mov	r1, r3
 800425c:	4658      	mov	r0, fp
 800425e:	f7fc fd91 	bl	8000d84 <__aeabi_fmul>
 8004262:	4649      	mov	r1, r9
 8004264:	4683      	mov	fp, r0
 8004266:	4620      	mov	r0, r4
 8004268:	f7fc fd8c 	bl	8000d84 <__aeabi_fmul>
 800426c:	4601      	mov	r1, r0
 800426e:	4658      	mov	r0, fp
 8004270:	f7fc fc7e 	bl	8000b70 <__aeabi_fsub>
        count = 0;
 8004274:	f04f 0900 	mov.w	r9, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8004278:	4604      	mov	r4, r0
 800427a:	e7aa      	b.n	80041d2 <mc_arc+0x28a>
 800427c:	f3af 8000 	nop.w
 8004280:	a0b5ed8d 	.word	0xa0b5ed8d
 8004284:	bea0c6f7 	.word	0xbea0c6f7
 8004288:	54442d18 	.word	0x54442d18
 800428c:	401921fb 	.word	0x401921fb
 8004290:	a0b5ed8d 	.word	0xa0b5ed8d
 8004294:	3ea0c6f7 	.word	0x3ea0c6f7
 8004298:	5c7dda4b 	.word	0x5c7dda4b
 800429c:	3fc55555 	.word	0x3fc55555
 80042a0:	20003478 	.word	0x20003478
 80042a4:	3fe00000 	.word	0x3fe00000
 80042a8:	40100000 	.word	0x40100000
 80042ac:	20002e30 	.word	0x20002e30

080042b0 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
 80042b0:	b510      	push	{r4, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <mc_dwell+0x20>)
{
 80042b4:	4604      	mov	r4, r0
  if (sys.state == STATE_CHECK_MODE) { return; }
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d007      	beq.n	80042cc <mc_dwell+0x1c>
  protocol_buffer_synchronize();
 80042bc:	f001 f9ca 	bl	8005654 <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 80042c0:	4620      	mov	r0, r4
}
 80042c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 80042c6:	2100      	movs	r1, #0
 80042c8:	f000 b950 	b.w	800456c <delay_sec>
 80042cc:	bd10      	pop	{r4, pc}
 80042ce:	bf00      	nop
 80042d0:	20002e30 	.word	0x20002e30

080042d4 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 80042d4:	b510      	push	{r4, lr}
 80042d6:	4604      	mov	r4, r0
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 80042d8:	f7ff fc86 	bl	8003be8 <limits_disable>

  // -------------------------------------------------------------------------------------
  // Perform homing routine. NOTE: Special motion case. Only system reset works.
  
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
 80042dc:	b1bc      	cbz	r4, 800430e <mc_homing_cycle+0x3a>
 80042de:	4620      	mov	r0, r4
  #endif
  {
    // Search to engage all axes limit switches at faster homing seek rate.
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
    #ifdef HOMING_CYCLE_1
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 80042e0:	f7ff fcc8 	bl	8003c74 <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 80042e4:	f001 f84e 	bl	8005384 <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <mc_homing_cycle+0x48>)
 80042ea:	785b      	ldrb	r3, [r3, #1]
 80042ec:	b9a3      	cbnz	r3, 8004318 <mc_homing_cycle+0x44>

  // Homing cycle complete! Setup system for normal operation.
  // -------------------------------------------------------------------------------------

  // Sync gcode parser and planner positions to homed position.
  gc_sync_position();
 80042ee:	f7fe fc65 	bl	8002bbc <gc_sync_position>
  plan_sync_position();
 80042f2:	f000 fd41 	bl	8004d78 <plan_sync_position>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80042f6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <mc_homing_cycle+0x4c>)
	EXTI_ClearITPendingBit(LIMIT_MASK);
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
*/
  LL_EXTI_ClearFlag_0_31(LIM_MASK);
  HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80042fc:	2028      	movs	r0, #40	; 0x28
 80042fe:	615a      	str	r2, [r3, #20]
 8004300:	f7fd f824 	bl	800134c <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

#elif ATMEGA328P
  limits_init();
#endif
}
 8004304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004308:	2028      	movs	r0, #40	; 0x28
 800430a:	f7fc bffd 	b.w	8001308 <HAL_NVIC_EnableIRQ>
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 800430e:	2004      	movs	r0, #4
 8004310:	f7ff fcb0 	bl	8003c74 <limits_go_home>
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8004314:	2003      	movs	r0, #3
 8004316:	e7e3      	b.n	80042e0 <mc_homing_cycle+0xc>
 8004318:	bd10      	pop	{r4, pc}
 800431a:	bf00      	nop
 800431c:	20002e30 	.word	0x20002e30
 8004320:	40010400 	.word	0x40010400

08004324 <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8004324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8004328:	4c2c      	ldr	r4, [pc, #176]	; (80043dc <mc_probe_cycle+0xb8>)
{
 800432a:	4680      	mov	r8, r0
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 800432c:	7823      	ldrb	r3, [r4, #0]
{
 800432e:	4689      	mov	r9, r1
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8004330:	2b02      	cmp	r3, #2
{
 8004332:	4617      	mov	r7, r2
 8004334:	4625      	mov	r5, r4
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8004336:	d04e      	beq.n	80043d6 <mc_probe_cycle+0xb2>

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8004338:	f001 f98c 	bl	8005654 <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 800433c:	7866      	ldrb	r6, [r4, #1]
 800433e:	b116      	cbz	r6, 8004346 <mc_probe_cycle+0x22>
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
    protocol_execute_realtime();
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8004340:	2002      	movs	r0, #2
 8004342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  probe_configure_invert_mask(is_probe_away);
 8004346:	f3c7 00c0 	ubfx	r0, r7, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 800434a:	7166      	strb	r6, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 800434c:	f000 fe1a 	bl	8004f84 <probe_configure_invert_mask>
  if ( probe_get_state() ) { // Check probe pin state.
 8004350:	f000 fe32 	bl	8004fb8 <probe_get_state>
 8004354:	b140      	cbz	r0, 8004368 <mc_probe_cycle+0x44>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8004356:	2004      	movs	r0, #4
 8004358:	f003 f9fa 	bl	8007750 <system_set_exec_alarm>
    protocol_execute_realtime();
 800435c:	f001 f812 	bl	8005384 <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8004360:	4630      	mov	r0, r6
 8004362:	f000 fe0f 	bl	8004f84 <probe_configure_invert_mask>
 8004366:	e7eb      	b.n	8004340 <mc_probe_cycle+0x1c>
  }

  // Setup and queue probing motion. Auto cycle-start should not start the cycle.
  mc_line(target, pl_data);
 8004368:	4640      	mov	r0, r8
 800436a:	4649      	mov	r1, r9
 800436c:	f7ff fdb8 	bl	8003ee0 <mc_line>

  // Activate the probing state monitor in the stepper module.
  sys_probe_state = PROBE_ACTIVE;
 8004370:	2301      	movs	r3, #1
 8004372:	4c1b      	ldr	r4, [pc, #108]	; (80043e0 <mc_probe_cycle+0xbc>)

  // Perform probing cycle. Wait here until probe is triggered or motion completes.
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8004374:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 8004376:	7023      	strb	r3, [r4, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8004378:	f003 f85e 	bl	8007438 <system_set_exec_state_flag>
  do {
    protocol_execute_realtime();
 800437c:	f001 f802 	bl	8005384 <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8004380:	786b      	ldrb	r3, [r5, #1]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1dc      	bne.n	8004340 <mc_probe_cycle+0x1c>
  } while (sys.state != STATE_IDLE);
 8004386:	782b      	ldrb	r3, [r5, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f7      	bne.n	800437c <mc_probe_cycle+0x58>

  // Probing cycle complete!

  // Set state variables and error out, if the probe failed and cycle with error is enabled.
  if (sys_probe_state == PROBE_ACTIVE) {
 800438c:	7823      	ldrb	r3, [r4, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d11e      	bne.n	80043d0 <mc_probe_cycle+0xac>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8004392:	06fb      	lsls	r3, r7, #27
 8004394:	d518      	bpl.n	80043c8 <mc_probe_cycle+0xa4>
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <mc_probe_cycle+0xc0>)
 8004398:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <mc_probe_cycle+0xc4>)
 800439a:	ca07      	ldmia	r2, {r0, r1, r2}
 800439c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
  } else {
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
  }
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 80043a0:	2000      	movs	r0, #0
 80043a2:	7020      	strb	r0, [r4, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 80043a4:	f000 fdee 	bl	8004f84 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 80043a8:	f000 ffec 	bl	8005384 <protocol_execute_realtime>

  // Reset the stepper and planner buffers to remove the remainder of the probe motion.
  st_reset(); // Reset step segment buffer.
 80043ac:	f002 fb60 	bl	8006a70 <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 80043b0:	f000 fa58 	bl	8004864 <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 80043b4:	f000 fce0 	bl	8004d78 <plan_sync_position>

  #ifdef MESSAGE_PROBE_COORDINATES
    // All done! Output the probe position as message.
    report_probe_parameters();
 80043b8:	f001 fad8 	bl	800596c <report_probe_parameters>
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 80043bc:	7968      	ldrb	r0, [r5, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80043be:	3000      	adds	r0, #0
 80043c0:	bf18      	it	ne
 80043c2:	2001      	movne	r0, #1
 80043c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 80043c8:	2005      	movs	r0, #5
 80043ca:	f003 f9c1 	bl	8007750 <system_set_exec_alarm>
 80043ce:	e7e7      	b.n	80043a0 <mc_probe_cycle+0x7c>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 80043d0:	2301      	movs	r3, #1
 80043d2:	716b      	strb	r3, [r5, #5]
 80043d4:	e7e4      	b.n	80043a0 <mc_probe_cycle+0x7c>
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80043d6:	2000      	movs	r0, #0
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 80043d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043dc:	20002e30 	.word	0x20002e30
 80043e0:	20002e46 	.word	0x20002e46
 80043e4:	20002e48 	.word	0x20002e48
 80043e8:	20002e54 	.word	0x20002e54

080043ec <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 80043ec:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 80043ee:	4b11      	ldr	r3, [pc, #68]	; (8004434 <mc_reset+0x48>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	06db      	lsls	r3, r3, #27
 80043f4:	d41d      	bmi.n	8004432 <mc_reset+0x46>
    system_set_exec_state_flag(EXEC_RESET);
 80043f6:	2010      	movs	r0, #16
 80043f8:	f003 f81e 	bl	8007438 <system_set_exec_state_flag>

    // Kill spindle and coolant.
    spindle_stop();
 80043fc:	f002 f8a0 	bl	8006540 <spindle_stop>
    coolant_stop();
 8004400:	f7fe fae2 	bl	80029c8 <coolant_stop>

    // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
    // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
    // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
    // violated, by which, all bets are off.
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8004404:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <mc_reset+0x4c>)
 8004406:	7813      	ldrb	r3, [r2, #0]
 8004408:	f013 0f2c 	tst.w	r3, #44	; 0x2c
 800440c:	d103      	bne.n	8004416 <mc_reset+0x2a>
 800440e:	7912      	ldrb	r2, [r2, #4]
 8004410:	f012 0f06 	tst.w	r2, #6
 8004414:	d00d      	beq.n	8004432 <mc_reset+0x46>
    		(sys.step_control & (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION))) {
      if (sys.state == STATE_HOMING) { 
 8004416:	2b04      	cmp	r3, #4
 8004418:	d109      	bne.n	800442e <mc_reset+0x42>
        if (!sys_rt_exec_alarm) {system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <mc_reset+0x50>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	b913      	cbnz	r3, 8004426 <mc_reset+0x3a>
 8004420:	2006      	movs	r0, #6
      } else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8004422:	f003 f995 	bl	8007750 <system_set_exec_alarm>
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 8004426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 800442a:	f002 b9a5 	b.w	8006778 <st_go_idle>
      } else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 800442e:	2003      	movs	r0, #3
 8004430:	e7f7      	b.n	8004422 <mc_reset+0x36>
 8004432:	bd08      	pop	{r3, pc}
 8004434:	20002e45 	.word	0x20002e45
 8004438:	20002e30 	.word	0x20002e30
 800443c:	20002e60 	.word	0x20002e60

08004440 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8004440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char *ptr = line + *char_counter;
 8004444:	780b      	ldrb	r3, [r1, #0]
{
 8004446:	4693      	mov	fp, r2
  char *ptr = line + *char_counter;
 8004448:	18c2      	adds	r2, r0, r3
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 800444a:	5cc3      	ldrb	r3, [r0, r3]
{
 800444c:	4606      	mov	r6, r0

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 800444e:	2b2d      	cmp	r3, #45	; 0x2d
{
 8004450:	468a      	mov	sl, r1
  if (c == '-') {
 8004452:	d118      	bne.n	8004486 <read_float+0x46>
    isnegative = true;
 8004454:	2701      	movs	r7, #1
    c = *ptr++;
 8004456:	7853      	ldrb	r3, [r2, #1]
 8004458:	1c95      	adds	r5, r2, #2

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 800445a:	2100      	movs	r1, #0
  uint8_t ndigit = 0;
 800445c:	460a      	mov	r2, r1
  int8_t exp = 0;
 800445e:	460c      	mov	r4, r1
  uint32_t intval = 0;
 8004460:	4608      	mov	r0, r1
  while(1) {
    c -= '0';
 8004462:	3b30      	subs	r3, #48	; 0x30
 8004464:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8004466:	2b09      	cmp	r3, #9
 8004468:	d819      	bhi.n	800449e <read_float+0x5e>
      ndigit++;
 800446a:	3201      	adds	r2, #1
 800446c:	b2d2      	uxtb	r2, r2
      if (ndigit <= MAX_INT_DIGITS) {
 800446e:	2a08      	cmp	r2, #8
 8004470:	d810      	bhi.n	8004494 <read_float+0x54>
        if (isdecimal) { exp--; }
 8004472:	b109      	cbz	r1, 8004478 <read_float+0x38>
 8004474:	3c01      	subs	r4, #1
 8004476:	b264      	sxtb	r4, r4
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8004478:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800447c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 8004480:	f815 3b01 	ldrb.w	r3, [r5], #1
    c -= '0';
 8004484:	e7ed      	b.n	8004462 <read_float+0x22>
  } else if (c == '+') {
 8004486:	2b2b      	cmp	r3, #43	; 0x2b
  c = *ptr++;
 8004488:	bf12      	itee	ne
 800448a:	1c55      	addne	r5, r2, #1
    c = *ptr++;
 800448c:	1c95      	addeq	r5, r2, #2
 800448e:	7853      	ldrbeq	r3, [r2, #1]
  bool isnegative = false;
 8004490:	2700      	movs	r7, #0
 8004492:	e7e2      	b.n	800445a <read_float+0x1a>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8004494:	2900      	cmp	r1, #0
 8004496:	d1f3      	bne.n	8004480 <read_float+0x40>
 8004498:	3401      	adds	r4, #1
 800449a:	b264      	sxtb	r4, r4
 800449c:	e7f0      	b.n	8004480 <read_float+0x40>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 800449e:	2bfe      	cmp	r3, #254	; 0xfe
 80044a0:	d102      	bne.n	80044a8 <read_float+0x68>
 80044a2:	b909      	cbnz	r1, 80044a8 <read_float+0x68>
      isdecimal = true;
 80044a4:	2101      	movs	r1, #1
 80044a6:	e7eb      	b.n	8004480 <read_float+0x40>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 80044a8:	b31a      	cbz	r2, 80044f2 <read_float+0xb2>

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 80044aa:	f7fc fc13 	bl	8000cd4 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 80044ae:	2100      	movs	r1, #0
  fval = (float)intval;
 80044b0:	9001      	str	r0, [sp, #4]
  if (fval != 0) {
 80044b2:	f7fc fdfb 	bl	80010ac <__aeabi_fcmpeq>
 80044b6:	9b01      	ldr	r3, [sp, #4]
 80044b8:	b988      	cbnz	r0, 80044de <read_float+0x9e>
    while (exp <= -2) {
      fval *= 0.01;
 80044ba:	f20f 097c 	addw	r9, pc, #124	; 0x7c
 80044be:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (exp <= -2) {
 80044c2:	1c62      	adds	r2, r4, #1
 80044c4:	db19      	blt.n	80044fa <read_float+0xba>
      exp += 2;
    }
    if (exp < 0) {
 80044c6:	d125      	bne.n	8004514 <read_float+0xd4>
      fval *= 0.1;
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fb ffb1 	bl	8000430 <__aeabi_f2d>
 80044ce:	a31c      	add	r3, pc, #112	; (adr r3, 8004540 <read_float+0x100>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f7fc f800 	bl	80004d8 <__aeabi_dmul>
 80044d8:	f7fc faf6 	bl	8000ac8 <__aeabi_d2f>
 80044dc:	4603      	mov	r3, r0
      } while (--exp > 0);
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 80044de:	b10f      	cbz	r7, 80044e4 <read_float+0xa4>
    *float_ptr = -fval;
 80044e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 80044e4:	2201      	movs	r2, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 80044e6:	1bad      	subs	r5, r5, r6
 80044e8:	3d01      	subs	r5, #1
    *float_ptr = fval;
 80044ea:	f8cb 3000 	str.w	r3, [fp]
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 80044ee:	f88a 5000 	strb.w	r5, [sl]
}
 80044f2:	4610      	mov	r0, r2
 80044f4:	b003      	add	sp, #12
 80044f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      fval *= 0.01;
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fb ff98 	bl	8000430 <__aeabi_f2d>
 8004500:	464b      	mov	r3, r9
 8004502:	4642      	mov	r2, r8
 8004504:	f7fb ffe8 	bl	80004d8 <__aeabi_dmul>
 8004508:	f7fc fade 	bl	8000ac8 <__aeabi_d2f>
 800450c:	3402      	adds	r4, #2
 800450e:	4603      	mov	r3, r0
 8004510:	b264      	sxtb	r4, r4
 8004512:	e7d6      	b.n	80044c2 <read_float+0x82>
    } else if (exp > 0) {
 8004514:	2c00      	cmp	r4, #0
 8004516:	d0e2      	beq.n	80044de <read_float+0x9e>
        fval *= 10.0;
 8004518:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8004548 <read_float+0x108>
 800451c:	4618      	mov	r0, r3
 800451e:	4641      	mov	r1, r8
 8004520:	f7fc fc30 	bl	8000d84 <__aeabi_fmul>
 8004524:	3c01      	subs	r4, #1
 8004526:	b2e2      	uxtb	r2, r4
 8004528:	4603      	mov	r3, r0
 800452a:	b254      	sxtb	r4, r2
      } while (--exp > 0);
 800452c:	2a00      	cmp	r2, #0
 800452e:	d1f5      	bne.n	800451c <read_float+0xdc>
 8004530:	e7d5      	b.n	80044de <read_float+0x9e>
 8004532:	bf00      	nop
 8004534:	f3af 8000 	nop.w
 8004538:	47ae147b 	.word	0x47ae147b
 800453c:	3f847ae1 	.word	0x3f847ae1
 8004540:	9999999a 	.word	0x9999999a
 8004544:	3fb99999 	.word	0x3fb99999
 8004548:	41200000 	.word	0x41200000

0800454c <_delay_ms>:
  SysTick->CTRL = 0x00;                                            // Close the counter
  SysTick->VAL = 0X00;                                            // Empty the counter
*/
	//HAL_Delay(x);

	uint32_t mililoop = SystemCoreClock/1000;
 800454c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <_delay_ms+0x1c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	fbb3 f3f2 	udiv	r3, r3, r2
	for (uint32_t i=0; i< mililoop; i++)
 8004558:	2200      	movs	r2, #0
 800455a:	429a      	cmp	r2, r3
 800455c:	d100      	bne.n	8004560 <_delay_ms+0x14>
		__asm__ __volatile__("nop\n\t":::"memory");


}
 800455e:	4770      	bx	lr
		__asm__ __volatile__("nop\n\t":::"memory");
 8004560:	bf00      	nop
	for (uint32_t i=0; i< mililoop; i++)
 8004562:	3201      	adds	r2, #1
 8004564:	e7f9      	b.n	800455a <_delay_ms+0xe>
 8004566:	bf00      	nop
 8004568:	20000008 	.word	0x20000008

0800456c <delay_sec>:
#endif

// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	460e      	mov	r6, r1
 	uint16_t i = ceil(1000/DWELL_TIME_STEP*seconds);
 8004570:	490e      	ldr	r1, [pc, #56]	; (80045ac <delay_sec+0x40>)
 8004572:	f7fc fc07 	bl	8000d84 <__aeabi_fmul>
 8004576:	f7fb ff5b 	bl	8000430 <__aeabi_f2d>
 800457a:	f003 fe71 	bl	8008260 <ceil>
 800457e:	f7fc fa83 	bl	8000a88 <__aeabi_d2uiz>
	while (i-- > 0) {
		if (sys.abort) { return; }
 8004582:	4d0b      	ldr	r5, [pc, #44]	; (80045b0 <delay_sec+0x44>)
 	uint16_t i = ceil(1000/DWELL_TIME_STEP*seconds);
 8004584:	b284      	uxth	r4, r0
	while (i-- > 0) {
 8004586:	b17c      	cbz	r4, 80045a8 <delay_sec+0x3c>
		if (sys.abort) { return; }
 8004588:	786b      	ldrb	r3, [r5, #1]
 800458a:	b96b      	cbnz	r3, 80045a8 <delay_sec+0x3c>
		if (mode == DELAY_MODE_DWELL) {
 800458c:	b93e      	cbnz	r6, 800459e <delay_sec+0x32>
			protocol_execute_realtime();
 800458e:	f000 fef9 	bl	8005384 <protocol_execute_realtime>
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
		}
//		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
		HAL_Delay(DWELL_TIME_STEP);
 8004592:	2032      	movs	r0, #50	; 0x32
 8004594:	3c01      	subs	r4, #1
 8004596:	f7fc fe5f 	bl	8001258 <HAL_Delay>
 800459a:	b2a4      	uxth	r4, r4
 800459c:	e7f3      	b.n	8004586 <delay_sec+0x1a>
		  protocol_exec_rt_system();
 800459e:	f000 fd3d 	bl	800501c <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 80045a2:	78ab      	ldrb	r3, [r5, #2]
 80045a4:	079b      	lsls	r3, r3, #30
 80045a6:	d5f4      	bpl.n	8004592 <delay_sec+0x26>
 80045a8:	bd70      	pop	{r4, r5, r6, pc}
 80045aa:	bf00      	nop
 80045ac:	41a00000 	.word	0x41a00000
 80045b0:	20002e30 	.word	0x20002e30

080045b4 <delay_ms>:


// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
 80045b4:	4601      	mov	r1, r0
 80045b6:	b508      	push	{r3, lr}
  while ( ms-- ) { _delay_ms(1); }
 80045b8:	b901      	cbnz	r1, 80045bc <delay_ms+0x8>
}
 80045ba:	bd08      	pop	{r3, pc}
  while ( ms-- ) { _delay_ms(1); }
 80045bc:	2001      	movs	r0, #1
 80045be:	f7ff ffc5 	bl	800454c <_delay_ms>
 80045c2:	3901      	subs	r1, #1
 80045c4:	b289      	uxth	r1, r1
 80045c6:	e7f7      	b.n	80045b8 <delay_ms+0x4>

080045c8 <hypot_f>:
  }
}


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	460d      	mov	r5, r1
 80045cc:	4601      	mov	r1, r0
 80045ce:	f7fc fbd9 	bl	8000d84 <__aeabi_fmul>
 80045d2:	4629      	mov	r1, r5
 80045d4:	4604      	mov	r4, r0
 80045d6:	4628      	mov	r0, r5
 80045d8:	f7fc fbd4 	bl	8000d84 <__aeabi_fmul>
 80045dc:	4601      	mov	r1, r0
 80045de:	4620      	mov	r0, r4
 80045e0:	f7fc fac8 	bl	8000b74 <__addsf3>
 80045e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e8:	f004 b8fc 	b.w	80087e4 <sqrtf>

080045ec <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 80045ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t idx;
  float magnitude = 0.0;
 80045f0:	2500      	movs	r5, #0
{
 80045f2:	4604      	mov	r4, r0
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0) {
 80045f4:	46a9      	mov	r9, r5
 80045f6:	1f06      	subs	r6, r0, #4
 80045f8:	f100 0808 	add.w	r8, r0, #8
 80045fc:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8004600:	4649      	mov	r1, r9
 8004602:	4638      	mov	r0, r7
 8004604:	f7fc fd52 	bl	80010ac <__aeabi_fcmpeq>
 8004608:	b940      	cbnz	r0, 800461c <convert_delta_vector_to_unit_vector+0x30>
      magnitude += vector[idx]*vector[idx];
 800460a:	4639      	mov	r1, r7
 800460c:	4638      	mov	r0, r7
 800460e:	f7fc fbb9 	bl	8000d84 <__aeabi_fmul>
 8004612:	4601      	mov	r1, r0
 8004614:	4628      	mov	r0, r5
 8004616:	f7fc faad 	bl	8000b74 <__addsf3>
 800461a:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) {
 800461c:	45b0      	cmp	r8, r6
 800461e:	d1ed      	bne.n	80045fc <convert_delta_vector_to_unit_vector+0x10>
    }
  }
  magnitude = sqrtf(magnitude);
 8004620:	4628      	mov	r0, r5
 8004622:	f004 f8df 	bl	80087e4 <sqrtf>
 8004626:	4606      	mov	r6, r0
  float inv_magnitude = 1.0/magnitude;
 8004628:	4601      	mov	r1, r0
 800462a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800462e:	f7fc fc5d 	bl	8000eec <__aeabi_fdiv>
 8004632:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8004634:	4601      	mov	r1, r0
 8004636:	6820      	ldr	r0, [r4, #0]
 8004638:	f7fc fba4 	bl	8000d84 <__aeabi_fmul>
 800463c:	4629      	mov	r1, r5
 800463e:	6020      	str	r0, [r4, #0]
 8004640:	6860      	ldr	r0, [r4, #4]
 8004642:	f7fc fb9f 	bl	8000d84 <__aeabi_fmul>
 8004646:	4629      	mov	r1, r5
 8004648:	6060      	str	r0, [r4, #4]
 800464a:	68a0      	ldr	r0, [r4, #8]
 800464c:	f7fc fb9a 	bl	8000d84 <__aeabi_fmul>
 8004650:	60a0      	str	r0, [r4, #8]
  return(magnitude);
}
 8004652:	4630      	mov	r0, r6
 8004654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004658 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 8004658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800465c:	4607      	mov	r7, r0
 800465e:	4688      	mov	r8, r1
 8004660:	2400      	movs	r4, #0
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004662:	f04f 0900 	mov.w	r9, #0
  float limit_value = SOME_LARGE_VALUE;
 8004666:	4d0d      	ldr	r5, [pc, #52]	; (800469c <limit_value_by_axis_maximum+0x44>)
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004668:	f858 6024 	ldr.w	r6, [r8, r4, lsl #2]
 800466c:	4649      	mov	r1, r9
 800466e:	4630      	mov	r0, r6
 8004670:	f7fc fd1c 	bl	80010ac <__aeabi_fcmpeq>
 8004674:	b960      	cbnz	r0, 8004690 <limit_value_by_axis_maximum+0x38>
      limit_value = min(limit_value,fabs(max_value[idx]/unit_vec[idx]));
 8004676:	4631      	mov	r1, r6
 8004678:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 800467c:	f7fc fc36 	bl	8000eec <__aeabi_fdiv>
 8004680:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8004684:	4629      	mov	r1, r5
 8004686:	4630      	mov	r0, r6
 8004688:	f7fc fd38 	bl	80010fc <__aeabi_fcmpgt>
 800468c:	b900      	cbnz	r0, 8004690 <limit_value_by_axis_maximum+0x38>
 800468e:	4635      	mov	r5, r6
 8004690:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8004692:	2c03      	cmp	r4, #3
 8004694:	d1e8      	bne.n	8004668 <limit_value_by_axis_maximum+0x10>
    }
  }
  return(limit_value);
}
 8004696:	4628      	mov	r0, r5
 8004698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800469c:	7f7fffff 	.word	0x7f7fffff

080046a0 <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 80046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80046a4:	4b61      	ldr	r3, [pc, #388]	; (800482c <planner_recalculate+0x18c>)

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 80046a6:	4e62      	ldr	r6, [pc, #392]	; (8004830 <planner_recalculate+0x190>)
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80046a8:	781f      	ldrb	r7, [r3, #0]
  if (block_index == block_buffer_planned) { return; }
 80046aa:	f896 9000 	ldrb.w	r9, [r6]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80046ae:	2f00      	cmp	r7, #0
 80046b0:	bf08      	it	eq
 80046b2:	27c8      	moveq	r7, #200	; 0xc8
  block_index--;
 80046b4:	3f01      	subs	r7, #1
 80046b6:	b2ff      	uxtb	r7, r7
{
 80046b8:	b085      	sub	sp, #20
  if (block_index == block_buffer_planned) { return; }
 80046ba:	45b9      	cmp	r9, r7
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	d077      	beq.n	80047b0 <planner_recalculate+0x110>
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->pbacceleration*current->millimeters);
 80046c0:	2434      	movs	r4, #52	; 0x34
 80046c2:	4d5c      	ldr	r5, [pc, #368]	; (8004834 <planner_recalculate+0x194>)
 80046c4:	fb04 5b07 	mla	fp, r4, r7, r5
 80046c8:	f8db 101c 	ldr.w	r1, [fp, #28]
 80046cc:	f8db a018 	ldr.w	sl, [fp, #24]
 80046d0:	4608      	mov	r0, r1
 80046d2:	f7fc fa4f 	bl	8000b74 <__addsf3>
 80046d6:	f8db 1020 	ldr.w	r1, [fp, #32]
 80046da:	f7fc fb53 	bl	8000d84 <__aeabi_fmul>
 80046de:	4683      	mov	fp, r0
 80046e0:	4601      	mov	r1, r0
 80046e2:	4650      	mov	r0, sl
 80046e4:	f7fc fcec 	bl	80010c0 <__aeabi_fcmplt>
 80046e8:	b900      	cbnz	r0, 80046ec <planner_recalculate+0x4c>
 80046ea:	46da      	mov	sl, fp
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80046ec:	2f00      	cmp	r7, #0
 80046ee:	bf14      	ite	ne
 80046f0:	463b      	movne	r3, r7
 80046f2:	23c8      	moveq	r3, #200	; 0xc8
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->pbacceleration*current->millimeters);
 80046f4:	fb04 5407 	mla	r4, r4, r7, r5
  block_index--;
 80046f8:	3b01      	subs	r3, #1
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->pbacceleration*current->millimeters);
 80046fa:	f8c4 a014 	str.w	sl, [r4, #20]
  block_index--;
 80046fe:	fa5f fa83 	uxtb.w	sl, r3

  block_index = plan_prev_block_index(block_index);
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8004702:	45d1      	cmp	r9, sl
 8004704:	d036      	beq.n	8004774 <planner_recalculate+0xd4>
    // Check if the first block is the tail. If so, notify stepper to update its current parameters.
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
  } else { // Three or more plan-able blocks
    while (block_index != block_buffer_planned) {
      next = current;
      current = &block_buffer[block_index];
 8004706:	f04f 0934 	mov.w	r9, #52	; 0x34
    while (block_index != block_buffer_planned) {
 800470a:	7832      	ldrb	r2, [r6, #0]
 800470c:	4552      	cmp	r2, sl
 800470e:	d037      	beq.n	8004780 <planner_recalculate+0xe0>
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004710:	f1ba 0f00 	cmp.w	sl, #0
      current = &block_buffer[block_index];
 8004714:	46d0      	mov	r8, sl
 8004716:	fb09 5b0a 	mla	fp, r9, sl, r5
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 800471a:	bf08      	it	eq
 800471c:	f04f 0ac8 	moveq.w	sl, #200	; 0xc8
  block_index--;
 8004720:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004724:	fa5f fa83 	uxtb.w	sl, r3
      block_index = plan_prev_block_index(block_index);

      // Check if next block is the tail block(=planned block). If so, update current stepper parameters.
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004728:	4b43      	ldr	r3, [pc, #268]	; (8004838 <planner_recalculate+0x198>)
 800472a:	781a      	ldrb	r2, [r3, #0]
 800472c:	4552      	cmp	r2, sl
 800472e:	d101      	bne.n	8004734 <planner_recalculate+0x94>
 8004730:	f002 fa06 	bl	8006b40 <st_update_plan_block_parameters>

      // Compute maximum entry speed decelerating over the current block from its exit speed.
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8004734:	fb09 5808 	mla	r8, r9, r8, r5
 8004738:	f8d8 7018 	ldr.w	r7, [r8, #24]
 800473c:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8004740:	4639      	mov	r1, r7
 8004742:	f7fc fcb3 	bl	80010ac <__aeabi_fcmpeq>
 8004746:	b998      	cbnz	r0, 8004770 <planner_recalculate+0xd0>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->pbacceleration*current->millimeters;
 8004748:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800474c:	4608      	mov	r0, r1
 800474e:	f7fc fa11 	bl	8000b74 <__addsf3>
 8004752:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8004756:	f7fc fb15 	bl	8000d84 <__aeabi_fmul>
 800475a:	6961      	ldr	r1, [r4, #20]
 800475c:	f7fc fa0a 	bl	8000b74 <__addsf3>
 8004760:	4604      	mov	r4, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 8004762:	4601      	mov	r1, r0
 8004764:	4638      	mov	r0, r7
 8004766:	f7fc fcc9 	bl	80010fc <__aeabi_fcmpgt>
 800476a:	b320      	cbz	r0, 80047b6 <planner_recalculate+0x116>
          current->entry_speed_sqr = entry_speed_sqr;
 800476c:	f8c8 4014 	str.w	r4, [r8, #20]
  block_index--;
 8004770:	465c      	mov	r4, fp
 8004772:	e7ca      	b.n	800470a <planner_recalculate+0x6a>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004774:	4b30      	ldr	r3, [pc, #192]	; (8004838 <planner_recalculate+0x198>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	454b      	cmp	r3, r9
 800477a:	d101      	bne.n	8004780 <planner_recalculate+0xe0>
 800477c:	f002 f9e0 	bl	8006b40 <st_update_plan_block_parameters>
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 8004780:	f896 a000 	ldrb.w	sl, [r6]
 8004784:	2734      	movs	r7, #52	; 0x34
  block_index++;
 8004786:	f10a 0401 	add.w	r4, sl, #1
 800478a:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800478c:	2cc8      	cmp	r4, #200	; 0xc8
 800478e:	bf08      	it	eq
 8004790:	2400      	moveq	r4, #0
  block_index = plan_next_block_index(block_buffer_planned);
  while (block_index != block_buffer_head) {
 8004792:	f04f 0800 	mov.w	r8, #0
 8004796:	9b01      	ldr	r3, [sp, #4]
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 8004798:	fb07 5b0a 	mla	fp, r7, sl, r5
  while (block_index != block_buffer_head) {
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	9303      	str	r3, [sp, #12]
 80047a0:	9b03      	ldr	r3, [sp, #12]
 80047a2:	429c      	cmp	r4, r3
 80047a4:	d10a      	bne.n	80047bc <planner_recalculate+0x11c>
 80047a6:	f1b8 0f00 	cmp.w	r8, #0
 80047aa:	d001      	beq.n	80047b0 <planner_recalculate+0x110>
 80047ac:	f886 a000 	strb.w	sl, [r6]
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
    block_index = plan_next_block_index( block_index );
  }
}
 80047b0:	b005      	add	sp, #20
 80047b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 80047b6:	f8c8 7014 	str.w	r7, [r8, #20]
 80047ba:	e7d9      	b.n	8004770 <planner_recalculate+0xd0>
    next = &block_buffer[block_index];
 80047bc:	fb07 5904 	mla	r9, r7, r4, r5
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 80047c0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80047ca:	9801      	ldr	r0, [sp, #4]
 80047cc:	4619      	mov	r1, r3
 80047ce:	9302      	str	r3, [sp, #8]
 80047d0:	f7fc fc76 	bl	80010c0 <__aeabi_fcmplt>
 80047d4:	b1b0      	cbz	r0, 8004804 <planner_recalculate+0x164>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->pbacceleration*current->millimeters;
 80047d6:	f8db 101c 	ldr.w	r1, [fp, #28]
 80047da:	4608      	mov	r0, r1
 80047dc:	f7fc f9ca 	bl	8000b74 <__addsf3>
 80047e0:	f8db 1020 	ldr.w	r1, [fp, #32]
 80047e4:	f7fc face 	bl	8000d84 <__aeabi_fmul>
 80047e8:	9901      	ldr	r1, [sp, #4]
 80047ea:	f7fc f9c3 	bl	8000b74 <__addsf3>
 80047ee:	4683      	mov	fp, r0
      if (entry_speed_sqr < next->entry_speed_sqr) {
 80047f0:	4601      	mov	r1, r0
 80047f2:	9802      	ldr	r0, [sp, #8]
 80047f4:	f7fc fc82 	bl	80010fc <__aeabi_fcmpgt>
 80047f8:	b120      	cbz	r0, 8004804 <planner_recalculate+0x164>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 80047fa:	46a2      	mov	sl, r4
 80047fc:	f04f 0801 	mov.w	r8, #1
 8004800:	f8c9 b014 	str.w	fp, [r9, #20]
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 8004804:	fb07 5204 	mla	r2, r7, r4, r5
 8004808:	6991      	ldr	r1, [r2, #24]
 800480a:	6950      	ldr	r0, [r2, #20]
 800480c:	f7fc fc4e 	bl	80010ac <__aeabi_fcmpeq>
 8004810:	2800      	cmp	r0, #0
 8004812:	bf18      	it	ne
 8004814:	46a2      	movne	sl, r4
  block_index++;
 8004816:	f104 0401 	add.w	r4, r4, #1
 800481a:	b2e4      	uxtb	r4, r4
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 800481c:	bf18      	it	ne
 800481e:	f04f 0801 	movne.w	r8, #1
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004822:	2cc8      	cmp	r4, #200	; 0xc8
 8004824:	bf08      	it	eq
 8004826:	2400      	moveq	r4, #0
  while (block_index != block_buffer_head) {
 8004828:	46cb      	mov	fp, r9
 800482a:	e7b9      	b.n	80047a0 <planner_recalculate+0x100>
 800482c:	20002938 	.word	0x20002938
 8004830:	20002939 	.word	0x20002939
 8004834:	20000098 	.word	0x20000098
 8004838:	2000293a 	.word	0x2000293a

0800483c <plan_reset_buffer>:
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 800483c:	2300      	movs	r3, #0
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 800483e:	2101      	movs	r1, #1
  block_buffer_tail = 0;
 8004840:	4a04      	ldr	r2, [pc, #16]	; (8004854 <plan_reset_buffer+0x18>)
 8004842:	7013      	strb	r3, [r2, #0]
  block_buffer_head = 0; // Empty = tail
 8004844:	4a04      	ldr	r2, [pc, #16]	; (8004858 <plan_reset_buffer+0x1c>)
 8004846:	7013      	strb	r3, [r2, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8004848:	4a04      	ldr	r2, [pc, #16]	; (800485c <plan_reset_buffer+0x20>)
 800484a:	7011      	strb	r1, [r2, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 800484c:	4a04      	ldr	r2, [pc, #16]	; (8004860 <plan_reset_buffer+0x24>)
 800484e:	7013      	strb	r3, [r2, #0]
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	2000293a 	.word	0x2000293a
 8004858:	20002938 	.word	0x20002938
 800485c:	2000293b 	.word	0x2000293b
 8004860:	20002939 	.word	0x20002939

08004864 <plan_reset>:
{
 8004864:	b508      	push	{r3, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8004866:	221c      	movs	r2, #28
 8004868:	2100      	movs	r1, #0
 800486a:	4803      	ldr	r0, [pc, #12]	; (8004878 <plan_reset+0x14>)
 800486c:	f003 f8c3 	bl	80079f6 <memset>
}
 8004870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  plan_reset_buffer();
 8004874:	f7ff bfe2 	b.w	800483c <plan_reset_buffer>
 8004878:	2000293c 	.word	0x2000293c

0800487c <plan_discard_current_block>:
}


void plan_discard_current_block()
{
 800487c:	b510      	push	{r4, lr}
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <plan_discard_current_block+0x28>)
 8004880:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <plan_discard_current_block+0x2c>)
 8004882:	7819      	ldrb	r1, [r3, #0]
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	428a      	cmp	r2, r1
 8004888:	461a      	mov	r2, r3
 800488a:	d00a      	beq.n	80048a2 <plan_discard_current_block+0x26>
  block_index++;
 800488c:	1c4b      	adds	r3, r1, #1
 800488e:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004890:	2bc8      	cmp	r3, #200	; 0xc8
 8004892:	bf08      	it	eq
 8004894:	2300      	moveq	r3, #0
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004896:	4805      	ldr	r0, [pc, #20]	; (80048ac <plan_discard_current_block+0x30>)
    block_buffer_tail = block_index;
 8004898:	7013      	strb	r3, [r2, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 800489a:	7804      	ldrb	r4, [r0, #0]
 800489c:	428c      	cmp	r4, r1
 800489e:	bf08      	it	eq
 80048a0:	7003      	strbeq	r3, [r0, #0]
 80048a2:	bd10      	pop	{r4, pc}
 80048a4:	2000293a 	.word	0x2000293a
 80048a8:	20002938 	.word	0x20002938
 80048ac:	20002939 	.word	0x20002939

080048b0 <plan_get_system_motion_block>:

// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
}
 80048b0:	2034      	movs	r0, #52	; 0x34
  return(&block_buffer[block_buffer_head]);
 80048b2:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <plan_get_system_motion_block+0x10>)
 80048b4:	781a      	ldrb	r2, [r3, #0]
}
 80048b6:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <plan_get_system_motion_block+0x14>)
 80048b8:	fb00 3002 	mla	r0, r0, r2, r3
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20002938 	.word	0x20002938
 80048c4:	20000098 	.word	0x20000098

080048c8 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <plan_get_current_block+0x18>)
 80048ca:	7818      	ldrb	r0, [r3, #0]
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <plan_get_current_block+0x1c>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	4283      	cmp	r3, r0
  return(&block_buffer[block_buffer_tail]);
 80048d2:	bf1d      	ittte	ne
 80048d4:	2234      	movne	r2, #52	; 0x34
 80048d6:	4b04      	ldrne	r3, [pc, #16]	; (80048e8 <plan_get_current_block+0x20>)
 80048d8:	fb02 3000 	mlane	r0, r2, r0, r3
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 80048dc:	2000      	moveq	r0, #0
}
 80048de:	4770      	bx	lr
 80048e0:	2000293a 	.word	0x2000293a
 80048e4:	20002938 	.word	0x20002938
 80048e8:	20000098 	.word	0x20000098

080048ec <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80048ee:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 80048f0:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80048f2:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 80048f4:	3301      	adds	r3, #1
 80048f6:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80048f8:	2bc8      	cmp	r3, #200	; 0xc8
 80048fa:	bf08      	it	eq
 80048fc:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80048fe:	429a      	cmp	r2, r3
  return( block_buffer[block_index].entry_speed_sqr );
 8004900:	bf1f      	itttt	ne
 8004902:	2134      	movne	r1, #52	; 0x34
 8004904:	4a05      	ldrne	r2, [pc, #20]	; (800491c <plan_get_exec_block_exit_speed_sqr+0x30>)
 8004906:	fb01 2303 	mlane	r3, r1, r3, r2
 800490a:	6958      	ldrne	r0, [r3, #20]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800490c:	bf08      	it	eq
 800490e:	2000      	moveq	r0, #0
}
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	2000293a 	.word	0x2000293a
 8004918:	20002938 	.word	0x20002938
 800491c:	20000098 	.word	0x20000098

08004920 <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 8004920:	4b03      	ldr	r3, [pc, #12]	; (8004930 <plan_check_full_buffer+0x10>)
 8004922:	7818      	ldrb	r0, [r3, #0]
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <plan_check_full_buffer+0x14>)
 8004926:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 8004928:	1ac3      	subs	r3, r0, r3
 800492a:	4258      	negs	r0, r3
 800492c:	4158      	adcs	r0, r3
 800492e:	4770      	bx	lr
 8004930:	2000293a 	.word	0x2000293a
 8004934:	2000293b 	.word	0x2000293b

08004938 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01*sys.r_override); }
 800493a:	7c43      	ldrb	r3, [r0, #17]
{
 800493c:	4605      	mov	r5, r0
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01*sys.r_override); }
 800493e:	07da      	lsls	r2, r3, #31
  float nominal_speed = block->programmed_rate;
 8004940:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01*sys.r_override); }
 8004942:	d520      	bpl.n	8004986 <plan_compute_profile_nominal_speed+0x4e>
 8004944:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <plan_compute_profile_nominal_speed+0xa0>)
 8004946:	7a58      	ldrb	r0, [r3, #9]
 8004948:	f7fb fd60 	bl	800040c <__aeabi_i2d>
 800494c:	a320      	add	r3, pc, #128	; (adr r3, 80049d0 <plan_compute_profile_nominal_speed+0x98>)
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f7fb fdc1 	bl	80004d8 <__aeabi_dmul>
 8004956:	4606      	mov	r6, r0
 8004958:	4620      	mov	r0, r4
 800495a:	460f      	mov	r7, r1
 800495c:	f7fb fd68 	bl	8000430 <__aeabi_f2d>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4630      	mov	r0, r6
 8004966:	4639      	mov	r1, r7
 8004968:	f7fb fdb6 	bl	80004d8 <__aeabi_dmul>
 800496c:	f7fc f8ac 	bl	8000ac8 <__aeabi_d2f>
 8004970:	4604      	mov	r4, r0
  else {
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 8004972:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004976:	4620      	mov	r0, r4
 8004978:	f7fc fbc0 	bl	80010fc <__aeabi_fcmpgt>
 800497c:	b908      	cbnz	r0, 8004982 <plan_compute_profile_nominal_speed+0x4a>
  return(MINIMUM_FEED_RATE);
 800497e:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
}
 8004982:	4620      	mov	r0, r4
 8004984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01*sys.f_override); }
 8004986:	075b      	lsls	r3, r3, #29
 8004988:	d416      	bmi.n	80049b8 <plan_compute_profile_nominal_speed+0x80>
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <plan_compute_profile_nominal_speed+0xa0>)
 800498c:	7a18      	ldrb	r0, [r3, #8]
 800498e:	f7fb fd3d 	bl	800040c <__aeabi_i2d>
 8004992:	a30f      	add	r3, pc, #60	; (adr r3, 80049d0 <plan_compute_profile_nominal_speed+0x98>)
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f7fb fd9e 	bl	80004d8 <__aeabi_dmul>
 800499c:	4606      	mov	r6, r0
 800499e:	4620      	mov	r0, r4
 80049a0:	460f      	mov	r7, r1
 80049a2:	f7fb fd45 	bl	8000430 <__aeabi_f2d>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4630      	mov	r0, r6
 80049ac:	4639      	mov	r1, r7
 80049ae:	f7fb fd93 	bl	80004d8 <__aeabi_dmul>
 80049b2:	f7fc f889 	bl	8000ac8 <__aeabi_d2f>
 80049b6:	4604      	mov	r4, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 80049b8:	6aad      	ldr	r5, [r5, #40]	; 0x28
 80049ba:	4620      	mov	r0, r4
 80049bc:	4629      	mov	r1, r5
 80049be:	f7fc fb9d 	bl	80010fc <__aeabi_fcmpgt>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d0d5      	beq.n	8004972 <plan_compute_profile_nominal_speed+0x3a>
 80049c6:	462c      	mov	r4, r5
 80049c8:	e7d3      	b.n	8004972 <plan_compute_profile_nominal_speed+0x3a>
 80049ca:	bf00      	nop
 80049cc:	f3af 8000 	nop.w
 80049d0:	47ae147b 	.word	0x47ae147b
 80049d4:	3f847ae1 	.word	0x3f847ae1
 80049d8:	20002e30 	.word	0x20002e30

080049dc <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 80049dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t block_index = block_buffer_tail;
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
  while (block_index != block_buffer_head) {
    block = &block_buffer[block_index];
 80049e0:	f04f 0834 	mov.w	r8, #52	; 0x34
  uint8_t block_index = block_buffer_tail;
 80049e4:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <plan_update_velocity_profile_parameters+0x70>)
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 80049e6:	4d1a      	ldr	r5, [pc, #104]	; (8004a50 <plan_update_velocity_profile_parameters+0x74>)
  uint8_t block_index = block_buffer_tail;
 80049e8:	781c      	ldrb	r4, [r3, #0]
  while (block_index != block_buffer_head) {
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <plan_update_velocity_profile_parameters+0x78>)
    block = &block_buffer[block_index];
 80049ec:	4f1a      	ldr	r7, [pc, #104]	; (8004a58 <plan_update_velocity_profile_parameters+0x7c>)
  while (block_index != block_buffer_head) {
 80049ee:	f893 9000 	ldrb.w	r9, [r3]
 80049f2:	454c      	cmp	r4, r9
 80049f4:	d103      	bne.n	80049fe <plan_update_velocity_profile_parameters+0x22>
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 80049f6:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <plan_update_velocity_profile_parameters+0x80>)
 80049f8:	619d      	str	r5, [r3, #24]
 80049fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    block = &block_buffer[block_index];
 80049fe:	fb08 7a04 	mla	sl, r8, r4, r7
    nominal_speed = plan_compute_profile_nominal_speed(block);
 8004a02:	4650      	mov	r0, sl
 8004a04:	f7ff ff98 	bl	8004938 <plan_compute_profile_nominal_speed>
 8004a08:	4606      	mov	r6, r0
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004a0a:	4601      	mov	r1, r0
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f7fc fb57 	bl	80010c0 <__aeabi_fcmplt>
 8004a12:	b1b8      	cbz	r0, 8004a44 <plan_update_velocity_profile_parameters+0x68>
 8004a14:	4629      	mov	r1, r5
 8004a16:	4628      	mov	r0, r5
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004a18:	f7fc f9b4 	bl	8000d84 <__aeabi_fmul>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004a1c:	fb08 7504 	mla	r5, r8, r4, r7
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004a20:	f8ca 0018 	str.w	r0, [sl, #24]
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004a24:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
 8004a28:	69a8      	ldr	r0, [r5, #24]
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	f7fc fb66 	bl	80010fc <__aeabi_fcmpgt>
 8004a30:	b108      	cbz	r0, 8004a36 <plan_update_velocity_profile_parameters+0x5a>
 8004a32:	f8c5 a018 	str.w	sl, [r5, #24]
  block_index++;
 8004a36:	3401      	adds	r4, #1
 8004a38:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004a3a:	2cc8      	cmp	r4, #200	; 0xc8
 8004a3c:	bf08      	it	eq
 8004a3e:	2400      	moveq	r4, #0
 8004a40:	4635      	mov	r5, r6
 8004a42:	e7d6      	b.n	80049f2 <plan_update_velocity_profile_parameters+0x16>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004a44:	4631      	mov	r1, r6
 8004a46:	4630      	mov	r0, r6
 8004a48:	e7e6      	b.n	8004a18 <plan_update_velocity_profile_parameters+0x3c>
 8004a4a:	bf00      	nop
 8004a4c:	2000293a 	.word	0x2000293a
 8004a50:	7f7fffff 	.word	0x7f7fffff
 8004a54:	20002938 	.word	0x20002938
 8004a58:	20000098 	.word	0x20000098
 8004a5c:	2000293c 	.word	0x2000293c

08004a60 <plan_buffer_line>:
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004a60:	2234      	movs	r2, #52	; 0x34
{
 8004a62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a66:	468b      	mov	fp, r1
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004a68:	4eb5      	ldr	r6, [pc, #724]	; (8004d40 <plan_buffer_line+0x2e0>)
 8004a6a:	4db6      	ldr	r5, [pc, #728]	; (8004d44 <plan_buffer_line+0x2e4>)
 8004a6c:	7834      	ldrb	r4, [r6, #0]
{
 8004a6e:	b091      	sub	sp, #68	; 0x44
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004a70:	fb02 5704 	mla	r7, r2, r4, r5
{
 8004a74:	9001      	str	r0, [sp, #4]
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 8004a76:	2100      	movs	r1, #0
 8004a78:	4638      	mov	r0, r7
 8004a7a:	f002 ffbc 	bl	80079f6 <memset>
  block->condition = pl_data->condition;
 8004a7e:	f89b 3008 	ldrb.w	r3, [fp, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 8004a82:	f8db 2004 	ldr.w	r2, [fp, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) { 
 8004a86:	f013 0f02 	tst.w	r3, #2
  block->condition = pl_data->condition;
 8004a8a:	747b      	strb	r3, [r7, #17]
    #ifdef COREXY
      position_steps[X_AXIS] = system_convert_corexy_to_x_axis_steps(sys_position);
      position_steps[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      position_steps[Z_AXIS] = sys_position[Z_AXIS];
    #else
      memcpy(position_steps, sys_position, sizeof(sys_position)); 
 8004a8c:	bf14      	ite	ne
 8004a8e:	4bae      	ldrne	r3, [pc, #696]	; (8004d48 <plan_buffer_line+0x2e8>)
    #endif
  } else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004a90:	4bae      	ldreq	r3, [pc, #696]	; (8004d4c <plan_buffer_line+0x2ec>)
    block->spindle_speed = pl_data->spindle_speed;
 8004a92:	633a      	str	r2, [r7, #48]	; 0x30
 8004a94:	9600      	str	r6, [sp, #0]
  } else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004a96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lround(target[idx]*settings.steps_per_mm[idx]);
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004a9a:	2334      	movs	r3, #52	; 0x34
{
 8004a9c:	f04f 0800 	mov.w	r8, #0
 8004aa0:	f10d 0a1c 	add.w	sl, sp, #28
  } else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004aa4:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004aa8:	fb03 5904 	mla	r9, r3, r4, r5
      target_steps[idx] = lround(target[idx]*settings.steps_per_mm[idx]);
 8004aac:	4aa8      	ldr	r2, [pc, #672]	; (8004d50 <plan_buffer_line+0x2f0>)
 8004aae:	9b01      	ldr	r3, [sp, #4]
 8004ab0:	f852 1028 	ldr.w	r1, [r2, r8, lsl #2]
 8004ab4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004ab8:	9202      	str	r2, [sp, #8]
 8004aba:	f7fc f963 	bl	8000d84 <__aeabi_fmul>
 8004abe:	f7fb fcb7 	bl	8000430 <__aeabi_f2d>
 8004ac2:	f003 fcd5 	bl	8008470 <lround>
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
 8004ac6:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
      target_steps[idx] = lround(target[idx]*settings.steps_per_mm[idx]);
 8004aca:	ab04      	add	r3, sp, #16
 8004acc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
 8004ad0:	1a40      	subs	r0, r0, r1
 8004ad2:	ea80 76e0 	eor.w	r6, r0, r0, asr #31
 8004ad6:	eba6 76e0 	sub.w	r6, r6, r0, asr #31
 8004ada:	f847 6028 	str.w	r6, [r7, r8, lsl #2]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004ade:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8004ae2:	4633      	mov	r3, r6
 8004ae4:	428e      	cmp	r6, r1
 8004ae6:	bf38      	it	cc
 8004ae8:	460b      	movcc	r3, r1
 8004aea:	f8c9 300c 	str.w	r3, [r9, #12]
 8004aee:	9303      	str	r3, [sp, #12]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004af0:	f7fc f8f4 	bl	8000cdc <__aeabi_i2f>
 8004af4:	9a02      	ldr	r2, [sp, #8]
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004af6:	ae0a      	add	r6, sp, #40	; 0x28
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004af8:	f852 1028 	ldr.w	r1, [r2, r8, lsl #2]
 8004afc:	f7fc f9f6 	bl	8000eec <__aeabi_fdiv>

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0 )
 8004b00:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004b02:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
    if (delta_mm < 0.0 )
 8004b06:	f7fc fadb 	bl	80010c0 <__aeabi_fcmplt>
 8004b0a:	9b03      	ldr	r3, [sp, #12]
 8004b0c:	b138      	cbz	r0, 8004b1e <plan_buffer_line+0xbe>
    {
      #ifdef STM32
        block->direction_bits |= direction_pin_mask[idx];
 8004b0e:	4a91      	ldr	r2, [pc, #580]	; (8004d54 <plan_buffer_line+0x2f4>)
 8004b10:	f812 1018 	ldrb.w	r1, [r2, r8, lsl #1]
 8004b14:	f899 2010 	ldrb.w	r2, [r9, #16]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	f889 2010 	strb.w	r2, [r9, #16]
 8004b1e:	f108 0801 	add.w	r8, r8, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8004b22:	f1b8 0f03 	cmp.w	r8, #3
 8004b26:	d1c1      	bne.n	8004aac <plan_buffer_line+0x4c>
      #endif
    }
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80fd 	beq.w	8004d28 <plan_buffer_line+0x2c8>

  // Calculate the unit vector of the line move and the block maximum feed rate and acceleration scaled
  // down such that no individual axes maximum values are exceeded with respect to the line direction.
  // NOTE: This calculation assumes all axes are orthogonal (Cartesian) and works with ABC-axes,
  // if they are also orthogonal/independent. Operates on the absolute value of the unit vector.
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 8004b2e:	f04f 0934 	mov.w	r9, #52	; 0x34
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7ff fd5a 	bl	80045ec <convert_delta_vector_to_unit_vector>
 8004b38:	fb09 5904 	mla	r9, r9, r4, r5
#ifdef ENABLE_ACCEL_SCALING
  block->pbacceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, unit_vec);
 8004b3c:	4631      	mov	r1, r6
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 8004b3e:	f8c9 0020 	str.w	r0, [r9, #32]
  block->pbacceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, unit_vec);
 8004b42:	4885      	ldr	r0, [pc, #532]	; (8004d58 <plan_buffer_line+0x2f8>)
 8004b44:	f7ff fd88 	bl	8004658 <limit_value_by_axis_maximum>
#else
  block->pbacceleration = limit_value_by_axis_maximum(settings.eeacceleration, unit_vec);
#endif
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004b48:	4631      	mov	r1, r6
  block->pbacceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, unit_vec);
 8004b4a:	f8c9 001c 	str.w	r0, [r9, #28]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004b4e:	4883      	ldr	r0, [pc, #524]	; (8004d5c <plan_buffer_line+0x2fc>)
 8004b50:	f7ff fd82 	bl	8004658 <limit_value_by_axis_maximum>

  // Store programmed rate.
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004b54:	f899 8011 	ldrb.w	r8, [r9, #17]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004b58:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004b5c:	f018 0f01 	tst.w	r8, #1
 8004b60:	d052      	beq.n	8004c08 <plan_buffer_line+0x1a8>
  else { 
    block->programmed_rate = pl_data->feed_rate;
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004b62:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
  }

  // TODO: Need to check this method handling zero junction speeds when starting from rest.
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004b66:	9b00      	ldr	r3, [sp, #0]
 8004b68:	f04f 0a00 	mov.w	sl, #0
 8004b6c:	781a      	ldrb	r2, [r3, #0]
 8004b6e:	4b7c      	ldr	r3, [pc, #496]	; (8004d60 <plan_buffer_line+0x300>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d002      	beq.n	8004b7c <plan_buffer_line+0x11c>
 8004b76:	f018 0802 	ands.w	r8, r8, #2
 8004b7a:	d051      	beq.n	8004c20 <plan_buffer_line+0x1c0>

    // Initialize block entry speed as zero. Assume it will be starting from rest. Planner will correct this later.
    // If system motion, the system motion block always is assumed to start from rest and end at a complete stop.
    block->entry_speed_sqr = 0.0;
 8004b7c:	2334      	movs	r3, #52	; 0x34
 8004b7e:	fb03 5304 	mla	r3, r3, r4, r5
 8004b82:	f8c3 a014 	str.w	sl, [r3, #20]
    }

    // NOTE: Computed without any expensive trig, sin() or acos(), by trig half angle identity of cos(theta).
    if (junction_cos_theta > 0.999999) {
      //  For a 0 degree acute junction, just set minimum junction speed.
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8004b86:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
      }
    }
  }

  // Block system motion from updating this data to ensure next g-code motion is computed correctly.
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004b8a:	f04f 0834 	mov.w	r8, #52	; 0x34
 8004b8e:	fb08 5804 	mla	r8, r8, r4, r5
 8004b92:	f898 3011 	ldrb.w	r3, [r8, #17]
 8004b96:	079b      	lsls	r3, r3, #30
 8004b98:	d434      	bmi.n	8004c04 <plan_buffer_line+0x1a4>
    float nominal_speed = plan_compute_profile_nominal_speed(block);
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	f7ff fecc 	bl	8004938 <plan_compute_profile_nominal_speed>
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004ba0:	4f6a      	ldr	r7, [pc, #424]	; (8004d4c <plan_buffer_line+0x2ec>)
    float nominal_speed = plan_compute_profile_nominal_speed(block);
 8004ba2:	4681      	mov	r9, r0
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004ba4:	f8d7 a018 	ldr.w	sl, [r7, #24]
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004ba8:	4651      	mov	r1, sl
 8004baa:	f7fc faa7 	bl	80010fc <__aeabi_fcmpgt>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	f000 80b7 	beq.w	8004d22 <plan_buffer_line+0x2c2>
 8004bb4:	4651      	mov	r1, sl
 8004bb6:	4650      	mov	r0, sl
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004bb8:	f7fc f8e4 	bl	8000d84 <__aeabi_fmul>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004bbc:	2334      	movs	r3, #52	; 0x34
 8004bbe:	fb03 5404 	mla	r4, r3, r4, r5
 8004bc2:	6a65      	ldr	r5, [r4, #36]	; 0x24
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004bc4:	f8c8 0018 	str.w	r0, [r8, #24]
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004bc8:	4629      	mov	r1, r5
 8004bca:	69a0      	ldr	r0, [r4, #24]
 8004bcc:	f7fc fa96 	bl	80010fc <__aeabi_fcmpgt>
 8004bd0:	b100      	cbz	r0, 8004bd4 <plan_buffer_line+0x174>
 8004bd2:	61a5      	str	r5, [r4, #24]
    pl.previous_nominal_speed = nominal_speed;

    // Update previous path unit_vector and planner position.
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004bd4:	4b63      	ldr	r3, [pc, #396]	; (8004d64 <plan_buffer_line+0x304>)
 8004bd6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    pl.previous_nominal_speed = nominal_speed;
 8004bda:	f8c7 9018 	str.w	r9, [r7, #24]
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004bde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004be2:	ab04      	add	r3, sp, #16
 8004be4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004be8:	e887 0007 	stmia.w	r7, {r0, r1, r2}

    // New block is all set. Update buffer head and next buffer head indices.
    block_buffer_head = next_buffer_head;
 8004bec:	4a5e      	ldr	r2, [pc, #376]	; (8004d68 <plan_buffer_line+0x308>)
 8004bee:	9900      	ldr	r1, [sp, #0]
 8004bf0:	7813      	ldrb	r3, [r2, #0]
 8004bf2:	700b      	strb	r3, [r1, #0]
  block_index++;
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004bf8:	2bc8      	cmp	r3, #200	; 0xc8
 8004bfa:	bf08      	it	eq
 8004bfc:	2300      	moveq	r3, #0
    next_buffer_head = plan_next_block_index(block_buffer_head);
 8004bfe:	7013      	strb	r3, [r2, #0]

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
 8004c00:	f7ff fd4e 	bl	80046a0 <planner_recalculate>
  }
  return(PLAN_OK);
 8004c04:	2001      	movs	r0, #1
 8004c06:	e090      	b.n	8004d2a <plan_buffer_line+0x2ca>
    block->programmed_rate = pl_data->feed_rate;
 8004c08:	f8db 1000 	ldr.w	r1, [fp]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004c0c:	f018 0f08 	tst.w	r8, #8
    block->programmed_rate = pl_data->feed_rate;
 8004c10:	f8c9 102c 	str.w	r1, [r9, #44]	; 0x2c
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004c14:	d0a7      	beq.n	8004b66 <plan_buffer_line+0x106>
 8004c16:	f8d9 0020 	ldr.w	r0, [r9, #32]
 8004c1a:	f7fc f8b3 	bl	8000d84 <__aeabi_fmul>
 8004c1e:	e7a0      	b.n	8004b62 <plan_buffer_line+0x102>
 8004c20:	46d1      	mov	r9, sl
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004c22:	f10d 0b34 	add.w	fp, sp, #52	; 0x34
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004c26:	4b49      	ldr	r3, [pc, #292]	; (8004d4c <plan_buffer_line+0x2ec>)
 8004c28:	4443      	add	r3, r8
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	f856 3008 	ldr.w	r3, [r6, r8]
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	9303      	str	r3, [sp, #12]
 8004c36:	9201      	str	r2, [sp, #4]
 8004c38:	f7fc f8a4 	bl	8000d84 <__aeabi_fmul>
 8004c3c:	4601      	mov	r1, r0
 8004c3e:	4648      	mov	r0, r9
 8004c40:	f7fb ff96 	bl	8000b70 <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004c44:	9a01      	ldr	r2, [sp, #4]
 8004c46:	9b03      	ldr	r3, [sp, #12]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004c48:	4681      	mov	r9, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fb ff8f 	bl	8000b70 <__aeabi_fsub>
 8004c52:	f84b 0008 	str.w	r0, [fp, r8]
 8004c56:	f108 0804 	add.w	r8, r8, #4
    for (idx=0; idx<N_AXIS; idx++) {
 8004c5a:	f1b8 0f0c 	cmp.w	r8, #12
 8004c5e:	d1e2      	bne.n	8004c26 <plan_buffer_line+0x1c6>
    if (junction_cos_theta > 0.999999) {
 8004c60:	4648      	mov	r0, r9
 8004c62:	f7fb fbe5 	bl	8000430 <__aeabi_f2d>
 8004c66:	a332      	add	r3, pc, #200	; (adr r3, 8004d30 <plan_buffer_line+0x2d0>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	4680      	mov	r8, r0
 8004c6e:	4689      	mov	r9, r1
 8004c70:	f7fb fec2 	bl	80009f8 <__aeabi_dcmpgt>
 8004c74:	b118      	cbz	r0, 8004c7e <plan_buffer_line+0x21e>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8004c76:	2334      	movs	r3, #52	; 0x34
 8004c78:	fb03 5304 	mla	r3, r3, r4, r5
 8004c7c:	e783      	b.n	8004b86 <plan_buffer_line+0x126>
      if (junction_cos_theta < -0.999999) {
 8004c7e:	a32e      	add	r3, pc, #184	; (adr r3, 8004d38 <plan_buffer_line+0x2d8>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	4640      	mov	r0, r8
 8004c86:	4649      	mov	r1, r9
 8004c88:	f7fb fe98 	bl	80009bc <__aeabi_dcmplt>
 8004c8c:	b128      	cbz	r0, 8004c9a <plan_buffer_line+0x23a>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8004c8e:	2334      	movs	r3, #52	; 0x34
 8004c90:	fb03 5304 	mla	r3, r3, r4, r5
 8004c94:	4a35      	ldr	r2, [pc, #212]	; (8004d6c <plan_buffer_line+0x30c>)
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24
 8004c98:	e777      	b.n	8004b8a <plan_buffer_line+0x12a>
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 8004c9a:	4658      	mov	r0, fp
 8004c9c:	f7ff fca6 	bl	80045ec <convert_delta_vector_to_unit_vector>
        	float junction_acceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, junction_unit_vec);
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	482d      	ldr	r0, [pc, #180]	; (8004d58 <plan_buffer_line+0x2f8>)
 8004ca4:	f7ff fcd8 	bl	8004658 <limit_value_by_axis_maximum>
        	float sin_theta_d2 = sqrtf(0.5*(1.0-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004ca8:	4642      	mov	r2, r8
 8004caa:	464b      	mov	r3, r9
        	float junction_acceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, junction_unit_vec);
 8004cac:	4683      	mov	fp, r0
        	float sin_theta_d2 = sqrtf(0.5*(1.0-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004cae:	4930      	ldr	r1, [pc, #192]	; (8004d70 <plan_buffer_line+0x310>)
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	f7fb fa5d 	bl	8000170 <__aeabi_dsub>
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <plan_buffer_line+0x314>)
 8004cba:	f7fb fc0d 	bl	80004d8 <__aeabi_dmul>
 8004cbe:	f7fb ff03 	bl	8000ac8 <__aeabi_d2f>
 8004cc2:	f003 fd8f 	bl	80087e4 <sqrtf>
 8004cc6:	4682      	mov	sl, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8004cc8:	9b02      	ldr	r3, [sp, #8]
 8004cca:	4658      	mov	r0, fp
 8004ccc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004cce:	f7fc f859 	bl	8000d84 <__aeabi_fmul>
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	f7fc f856 	bl	8000d84 <__aeabi_fmul>
 8004cd8:	f7fb fbaa 	bl	8000430 <__aeabi_f2d>
 8004cdc:	4680      	mov	r8, r0
 8004cde:	4650      	mov	r0, sl
 8004ce0:	4689      	mov	r9, r1
 8004ce2:	f7fb fba5 	bl	8000430 <__aeabi_f2d>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	2000      	movs	r0, #0
 8004cec:	4920      	ldr	r1, [pc, #128]	; (8004d70 <plan_buffer_line+0x310>)
 8004cee:	f7fb fa3f 	bl	8000170 <__aeabi_dsub>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	f7fb fd17 	bl	800072c <__aeabi_ddiv>
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2300      	movs	r3, #0
 8004d02:	4680      	mov	r8, r0
 8004d04:	4689      	mov	r9, r1
 8004d06:	f7fb fe59 	bl	80009bc <__aeabi_dcmplt>
 8004d0a:	b940      	cbnz	r0, 8004d1e <plan_buffer_line+0x2be>
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	4649      	mov	r1, r9
 8004d10:	f7fb feda 	bl	8000ac8 <__aeabi_d2f>
 8004d14:	2334      	movs	r3, #52	; 0x34
 8004d16:	fb03 5304 	mla	r3, r3, r4, r5
 8004d1a:	6258      	str	r0, [r3, #36]	; 0x24
 8004d1c:	e735      	b.n	8004b8a <plan_buffer_line+0x12a>
 8004d1e:	2000      	movs	r0, #0
 8004d20:	e7f8      	b.n	8004d14 <plan_buffer_line+0x2b4>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004d22:	4649      	mov	r1, r9
 8004d24:	4648      	mov	r0, r9
 8004d26:	e747      	b.n	8004bb8 <plan_buffer_line+0x158>
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004d28:	4618      	mov	r0, r3
}
 8004d2a:	b011      	add	sp, #68	; 0x44
 8004d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d30:	e7210be9 	.word	0xe7210be9
 8004d34:	3feffffd 	.word	0x3feffffd
 8004d38:	e7210be9 	.word	0xe7210be9
 8004d3c:	bfeffffd 	.word	0xbfeffffd
 8004d40:	20002938 	.word	0x20002938
 8004d44:	20000098 	.word	0x20000098
 8004d48:	20002e54 	.word	0x20002e54
 8004d4c:	2000293c 	.word	0x2000293c
 8004d50:	20003478 	.word	0x20003478
 8004d54:	08009ada 	.word	0x08009ada
 8004d58:	200034e4 	.word	0x200034e4
 8004d5c:	20003484 	.word	0x20003484
 8004d60:	2000293a 	.word	0x2000293a
 8004d64:	20002948 	.word	0x20002948
 8004d68:	2000293b 	.word	0x2000293b
 8004d6c:	7f7fffff 	.word	0x7f7fffff
 8004d70:	3ff00000 	.word	0x3ff00000
 8004d74:	3fe00000 	.word	0x3fe00000

08004d78 <plan_sync_position>:
        pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      } else {
        pl.position[idx] = sys_position[idx];
      }
    #else
      pl.position[idx] = sys_position[idx];
 8004d78:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <plan_sync_position+0x14>)
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <plan_sync_position+0x18>)
 8004d7c:	6811      	ldr	r1, [r2, #0]
 8004d7e:	6019      	str	r1, [r3, #0]
 8004d80:	6851      	ldr	r1, [r2, #4]
 8004d82:	6892      	ldr	r2, [r2, #8]
 8004d84:	6059      	str	r1, [r3, #4]
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20002e54 	.word	0x20002e54
 8004d90:	2000293c 	.word	0x2000293c

08004d94 <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <plan_get_block_buffer_available+0x1c>)
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <plan_get_block_buffer_available+0x20>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	bf2c      	ite	cs
 8004da0:	f1a3 0039 	subcs.w	r0, r3, #57	; 0x39
  return((block_buffer_tail-block_buffer_head-1));
 8004da4:	f103 30ff 	addcc.w	r0, r3, #4294967295
 8004da8:	1a80      	subs	r0, r0, r2
 8004daa:	b2c0      	uxtb	r0, r0
}
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20002938 	.word	0x20002938
 8004db4:	2000293a 	.word	0x2000293a

08004db8 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8004db8:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8004dba:	f001 fec1 	bl	8006b40 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8004dbe:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <plan_cycle_reinitialize+0x18>)
 8004dc0:	781a      	ldrb	r2, [r3, #0]
 8004dc2:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <plan_cycle_reinitialize+0x1c>)
 8004dc4:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 8004dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 8004dca:	f7ff bc69 	b.w	80046a0 <planner_recalculate>
 8004dce:	bf00      	nop
 8004dd0:	2000293a 	.word	0x2000293a
 8004dd4:	20002939 	.word	0x20002939

08004dd8 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	1e44      	subs	r4, r0, #1
  while (*s)
 8004ddc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004de0:	b900      	cbnz	r0, 8004de4 <printString+0xc>
    serial_write(*s++);
//	uart_sendstr(s);
}
 8004de2:	bd10      	pop	{r4, pc}
    serial_write(*s++);
 8004de4:	f001 f8a1 	bl	8005f2a <serial_write>
 8004de8:	e7f8      	b.n	8004ddc <printString+0x4>

08004dea <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8004dea:	2863      	cmp	r0, #99	; 0x63
{
 8004dec:	b538      	push	{r3, r4, r5, lr}
  if (n >= 100) { // 100-255
 8004dee:	d91d      	bls.n	8004e2c <print_uint8_base10+0x42>
    digit_a = '0' + n % 10;
 8004df0:	240a      	movs	r4, #10
 8004df2:	fbb0 f3f4 	udiv	r3, r0, r4
 8004df6:	fb04 0413 	mls	r4, r4, r3, r0
 8004dfa:	3430      	adds	r4, #48	; 0x30
 8004dfc:	b2e4      	uxtb	r4, r4
    n /= 10;
 8004dfe:	b2d8      	uxtb	r0, r3
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
 8004e00:	250a      	movs	r5, #10
 8004e02:	fbb0 f3f5 	udiv	r3, r0, r5
 8004e06:	fb05 0513 	mls	r5, r5, r3, r0
 8004e0a:	3530      	adds	r5, #48	; 0x30
 8004e0c:	b2ed      	uxtb	r5, r5
    n /= 10;
 8004e0e:	b2d8      	uxtb	r0, r3
  }
  serial_write('0' + n);
 8004e10:	3030      	adds	r0, #48	; 0x30
 8004e12:	b2c0      	uxtb	r0, r0
 8004e14:	f001 f889 	bl	8005f2a <serial_write>
  if (digit_b) { serial_write(digit_b); }
 8004e18:	b115      	cbz	r5, 8004e20 <print_uint8_base10+0x36>
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f001 f885 	bl	8005f2a <serial_write>
  if (digit_a) { serial_write(digit_a); }
 8004e20:	b154      	cbz	r4, 8004e38 <print_uint8_base10+0x4e>
 8004e22:	4620      	mov	r0, r4
}
 8004e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (digit_a) { serial_write(digit_a); }
 8004e28:	f001 b87f 	b.w	8005f2a <serial_write>
  if (n >= 10) { // 10-99
 8004e2c:	2809      	cmp	r0, #9
  uint8_t digit_a = 0;
 8004e2e:	f04f 0400 	mov.w	r4, #0
  if (n >= 10) { // 10-99
 8004e32:	d8e5      	bhi.n	8004e00 <print_uint8_base10+0x16>
  uint8_t digit_b = 0;
 8004e34:	4625      	mov	r5, r4
 8004e36:	e7eb      	b.n	8004e10 <print_uint8_base10+0x26>
 8004e38:	bd38      	pop	{r3, r4, r5, pc}
	...

08004e3c <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8004e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e3e:	460d      	mov	r5, r1
 8004e40:	b085      	sub	sp, #20
  if (n < 0) {
 8004e42:	2100      	movs	r1, #0
{
 8004e44:	4604      	mov	r4, r0
  if (n < 0) {
 8004e46:	f7fc f93b 	bl	80010c0 <__aeabi_fcmplt>
 8004e4a:	b120      	cbz	r0, 8004e56 <printFloat+0x1a>
    serial_write('-');
 8004e4c:	202d      	movs	r0, #45	; 0x2d
 8004e4e:	f001 f86c 	bl	8005f2a <serial_write>
    n = -n;
 8004e52:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004e56:	462e      	mov	r6, r5
    n *= 100;
 8004e58:	4f28      	ldr	r7, [pc, #160]	; (8004efc <printFloat+0xc0>)
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004e5a:	2e01      	cmp	r6, #1
 8004e5c:	d82a      	bhi.n	8004eb4 <printFloat+0x78>
    decimals -= 2;
  }
  if (decimals) { n *= 10; }
 8004e5e:	086b      	lsrs	r3, r5, #1
 8004e60:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8004e64:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8004e68:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004e6c:	d004      	beq.n	8004e78 <printFloat+0x3c>
 8004e6e:	4620      	mov	r0, r4
 8004e70:	4923      	ldr	r1, [pc, #140]	; (8004f00 <printFloat+0xc4>)
 8004e72:	f7fb ff87 	bl	8000d84 <__aeabi_fmul>
 8004e76:	4604      	mov	r4, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004e78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f7fb fe79 	bl	8000b74 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8004e82:	f7fc f95b 	bl	800113c <__aeabi_f2iz>
  while(a > 0) {
 8004e86:	2300      	movs	r3, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004e88:	220a      	movs	r2, #10
 8004e8a:	b2dc      	uxtb	r4, r3
 8004e8c:	3301      	adds	r3, #1
  while(a > 0) {
 8004e8e:	b9c8      	cbnz	r0, 8004ec4 <printFloat+0x88>
    a /= 10;
  }
  while (i < decimal_places) {
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e90:	2230      	movs	r2, #48	; 0x30
 8004e92:	1e63      	subs	r3, r4, #1
 8004e94:	446b      	add	r3, sp
  while (i < decimal_places) {
 8004e96:	42ac      	cmp	r4, r5
 8004e98:	d31f      	bcc.n	8004eda <printFloat+0x9e>
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004e9a:	d106      	bne.n	8004eaa <printFloat+0x6e>
    buf[i++] = '0';
 8004e9c:	aa04      	add	r2, sp, #16
 8004e9e:	1c63      	adds	r3, r4, #1
 8004ea0:	4414      	add	r4, r2
 8004ea2:	2230      	movs	r2, #48	; 0x30
 8004ea4:	f804 2c10 	strb.w	r2, [r4, #-16]
 8004ea8:	b2dc      	uxtb	r4, r3
 8004eaa:	eb0d 0604 	add.w	r6, sp, r4
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8004eae:	b9cc      	cbnz	r4, 8004ee4 <printFloat+0xa8>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
    serial_write(buf[i-1]);
  }
}
 8004eb0:	b005      	add	sp, #20
 8004eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    n *= 100;
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	4639      	mov	r1, r7
 8004eb8:	f7fb ff64 	bl	8000d84 <__aeabi_fmul>
    decimals -= 2;
 8004ebc:	3e02      	subs	r6, #2
    n *= 100;
 8004ebe:	4604      	mov	r4, r0
    decimals -= 2;
 8004ec0:	b2f6      	uxtb	r6, r6
 8004ec2:	e7ca      	b.n	8004e5a <printFloat+0x1e>
    buf[i++] = (a % 10) + '0'; // Get digit
 8004ec4:	a904      	add	r1, sp, #16
 8004ec6:	440c      	add	r4, r1
 8004ec8:	fbb0 f1f2 	udiv	r1, r0, r2
 8004ecc:	fb02 0011 	mls	r0, r2, r1, r0
 8004ed0:	3030      	adds	r0, #48	; 0x30
 8004ed2:	f804 0c10 	strb.w	r0, [r4, #-16]
    a /= 10;
 8004ed6:	4608      	mov	r0, r1
 8004ed8:	e7d7      	b.n	8004e8a <printFloat+0x4e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004eda:	3401      	adds	r4, #1
 8004edc:	b2e4      	uxtb	r4, r4
 8004ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ee2:	e7d8      	b.n	8004e96 <printFloat+0x5a>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004ee4:	42ac      	cmp	r4, r5
 8004ee6:	d102      	bne.n	8004eee <printFloat+0xb2>
 8004ee8:	202e      	movs	r0, #46	; 0x2e
 8004eea:	f001 f81e 	bl	8005f2a <serial_write>
    serial_write(buf[i-1]);
 8004eee:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8004ef2:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004ef4:	f001 f819 	bl	8005f2a <serial_write>
  for (; i > 0; i--) {
 8004ef8:	b2e4      	uxtb	r4, r4
 8004efa:	e7d8      	b.n	8004eae <printFloat+0x72>
 8004efc:	42c80000 	.word	0x42c80000
 8004f00:	41200000 	.word	0x41200000
 8004f04:	00000000 	.word	0x00000000

08004f08 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8004f08:	b508      	push	{r3, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004f0a:	4b0d      	ldr	r3, [pc, #52]	; (8004f40 <printFloat_CoordValue+0x38>)
 8004f0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004f10:	07db      	lsls	r3, r3, #31
 8004f12:	d50d      	bpl.n	8004f30 <printFloat_CoordValue+0x28>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004f14:	f7fb fa8c 	bl	8000430 <__aeabi_f2d>
 8004f18:	a307      	add	r3, pc, #28	; (adr r3, 8004f38 <printFloat_CoordValue+0x30>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fadb 	bl	80004d8 <__aeabi_dmul>
 8004f22:	f7fb fdd1 	bl	8000ac8 <__aeabi_d2f>
 8004f26:	2104      	movs	r1, #4
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8004f28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
 8004f2c:	f7ff bf86 	b.w	8004e3c <printFloat>
 8004f30:	2103      	movs	r1, #3
 8004f32:	e7f9      	b.n	8004f28 <printFloat_CoordValue+0x20>
 8004f34:	f3af 8000 	nop.w
 8004f38:	57e16865 	.word	0x57e16865
 8004f3c:	3fa42851 	.word	0x3fa42851
 8004f40:	20003478 	.word	0x20003478
 8004f44:	00000000 	.word	0x00000000

08004f48 <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 8004f48:	b508      	push	{r3, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <printFloat_RateValue+0x38>)
 8004f4c:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8004f50:	f011 0101 	ands.w	r1, r1, #1
 8004f54:	d009      	beq.n	8004f6a <printFloat_RateValue+0x22>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004f56:	f7fb fa6b 	bl	8000430 <__aeabi_f2d>
 8004f5a:	a307      	add	r3, pc, #28	; (adr r3, 8004f78 <printFloat_RateValue+0x30>)
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f7fb faba 	bl	80004d8 <__aeabi_dmul>
 8004f64:	f7fb fdb0 	bl	8000ac8 <__aeabi_d2f>
 8004f68:	2101      	movs	r1, #1
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8004f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
 8004f6e:	f7ff bf65 	b.w	8004e3c <printFloat>
 8004f72:	bf00      	nop
 8004f74:	f3af 8000 	nop.w
 8004f78:	57e16865 	.word	0x57e16865
 8004f7c:	3fa42851 	.word	0x3fa42851
 8004f80:	20003478 	.word	0x20003478

08004f84 <probe_configure_invert_mask>:
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 8004f84:	2200      	movs	r2, #0
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <probe_configure_invert_mask+0x24>)
 8004f88:	801a      	strh	r2, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_Pin; }
 8004f8a:	4a08      	ldr	r2, [pc, #32]	; (8004fac <probe_configure_invert_mask+0x28>)
 8004f8c:	f992 2048 	ldrsb.w	r2, [r2, #72]	; 0x48
 8004f90:	2a00      	cmp	r2, #0
 8004f92:	bfa4      	itt	ge
 8004f94:	f44f 4200 	movge.w	r2, #32768	; 0x8000
 8004f98:	801a      	strhge	r2, [r3, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_Pin; }
 8004f9a:	b118      	cbz	r0, 8004fa4 <probe_configure_invert_mask+0x20>
 8004f9c:	881a      	ldrh	r2, [r3, #0]
 8004f9e:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	200032f8 	.word	0x200032f8
 8004fac:	20003478 	.word	0x20003478

08004fb0 <probe_init>:
  probe_configure_invert_mask(false); // Initialize invert mask.
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	f7ff bfe7 	b.w	8004f84 <probe_configure_invert_mask>
	...

08004fb8 <probe_get_state>:
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <probe_get_state+0x14>)

// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state()
{
#ifdef STM32
  return !((GPIO_ReadInputData(PROBE_GPIO_Port) & PROBE_Pin) ^ probe_invert_mask);
 8004fba:	4a05      	ldr	r2, [pc, #20]	; (8004fd0 <probe_get_state+0x18>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	8810      	ldrh	r0, [r2, #0]
 8004fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
#elif ATMEGA328P
  return((PROBE_PIN & PROBE_MASK) ^ probe_invert_mask);
#endif
}
 8004fc4:	1a1b      	subs	r3, r3, r0
 8004fc6:	4258      	negs	r0, r3
 8004fc8:	4158      	adcs	r0, r3
 8004fca:	4770      	bx	lr
 8004fcc:	40010800 	.word	0x40010800
 8004fd0:	200032f8 	.word	0x200032f8

08004fd4 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8004fd4:	b508      	push	{r3, lr}
  if (probe_get_state()) {
 8004fd6:	f7ff ffef 	bl	8004fb8 <probe_get_state>
 8004fda:	b160      	cbz	r0, 8004ff6 <probe_state_monitor+0x22>
    sys_probe_state = PROBE_OFF;
 8004fdc:	2200      	movs	r2, #0
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <probe_state_monitor+0x24>)
 8004fe0:	701a      	strb	r2, [r3, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <probe_state_monitor+0x28>)
 8004fe4:	4a06      	ldr	r2, [pc, #24]	; (8005000 <probe_state_monitor+0x2c>)
 8004fe6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004fe8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004fec:	4a05      	ldr	r2, [pc, #20]	; (8005004 <probe_state_monitor+0x30>)
 8004fee:	7813      	ldrb	r3, [r2, #0]
 8004ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff4:	7013      	strb	r3, [r2, #0]
 8004ff6:	bd08      	pop	{r3, pc}
 8004ff8:	20002e46 	.word	0x20002e46
 8004ffc:	20002e48 	.word	0x20002e48
 8005000:	20002e54 	.word	0x20002e54
 8005004:	20002e45 	.word	0x20002e45

08005008 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 8005008:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800500a:	f7ff fc5d 	bl	80048c8 <plan_get_current_block>
 800500e:	b120      	cbz	r0, 800501a <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 8005010:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005014:	2002      	movs	r0, #2
 8005016:	f002 ba0f 	b.w	8007438 <system_set_exec_state_flag>
 800501a:	bd08      	pop	{r3, pc}

0800501c <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 800501e:	4b38      	ldr	r3, [pc, #224]	; (8005100 <protocol_exec_rt_system+0xe4>)
 8005020:	4c38      	ldr	r4, [pc, #224]	; (8005104 <protocol_exec_rt_system+0xe8>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	4e38      	ldr	r6, [pc, #224]	; (8005108 <protocol_exec_rt_system+0xec>)
  if (rt_exec) { // Enter only if any bit flag is true
 8005026:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800502a:	b14b      	cbz	r3, 8005040 <protocol_exec_rt_system+0x24>
    // System alarm. Everything has shutdown by something that has gone severely wrong. Report
    // the source of the error to the user. If critical, Grbl disables by entering an infinite
    // loop until system reset/abort.
    sys.state = STATE_ALARM; // Set system alarm state
 800502c:	2701      	movs	r7, #1
    report_alarm_message(rt_exec);
 800502e:	4628      	mov	r0, r5
    // Halt everything upon a critical event flag. Currently hard and soft limits flag this.
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005030:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8005032:	7027      	strb	r7, [r4, #0]
    report_alarm_message(rt_exec);
 8005034:	f000 fb7c 	bl	8005730 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005038:	42bd      	cmp	r5, r7
 800503a:	d90c      	bls.n	8005056 <protocol_exec_rt_system+0x3a>
        // the user and a GUI time to do what is needed before resetting, like killing the
        // incoming stream. The same could be said about soft limits. While the position is not
        // lost, continued streaming could cause a serious crash if by chance it gets executed.
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
 800503c:	f002 fb92 	bl	8007764 <system_clear_exec_alarm>
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005040:	7833      	ldrb	r3, [r6, #0]
  if (rt_exec) {
 8005042:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80ba 	beq.w	80051c0 <protocol_exec_rt_system+0x1a4>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 800504c:	06e8      	lsls	r0, r5, #27
 800504e:	d50c      	bpl.n	800506a <protocol_exec_rt_system+0x4e>
      sys.abort = true;  // Only place this is set true.
 8005050:	2301      	movs	r3, #1
 8005052:	7063      	strb	r3, [r4, #1]
      return; // Nothing else to do but exit.
 8005054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005056:	4638      	mov	r0, r7
 8005058:	f000 fb7c 	bl	8005754 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 800505c:	2010      	movs	r0, #16
 800505e:	f002 fb6d 	bl	800773c <system_clear_exec_state_flag>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005062:	7833      	ldrb	r3, [r6, #0]
 8005064:	06dd      	lsls	r5, r3, #27
 8005066:	d5fc      	bpl.n	8005062 <protocol_exec_rt_system+0x46>
 8005068:	e7e8      	b.n	800503c <protocol_exec_rt_system+0x20>
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 800506a:	07e9      	lsls	r1, r5, #31
 800506c:	d504      	bpl.n	8005078 <protocol_exec_rt_system+0x5c>
      report_realtime_status();
 800506e:	f000 fde3 	bl	8005c38 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005072:	2001      	movs	r0, #1
 8005074:	f002 fb62 	bl	800773c <system_clear_exec_state_flag>
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005078:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 800507c:	d05a      	beq.n	8005134 <protocol_exec_rt_system+0x118>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 800507e:	7823      	ldrb	r3, [r4, #0]
 8005080:	b26e      	sxtb	r6, r5
 8005082:	f013 0f03 	tst.w	r3, #3
 8005086:	d147      	bne.n	8005118 <protocol_exec_rt_system+0xfc>
      
        // If in CYCLE or JOG states, immediately initiate a motion HOLD.
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005088:	f013 0f28 	tst.w	r3, #40	; 0x28
 800508c:	d010      	beq.n	80050b0 <protocol_exec_rt_system+0x94>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 800508e:	78a3      	ldrb	r3, [r4, #2]
 8005090:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8005094:	d10c      	bne.n	80050b0 <protocol_exec_rt_system+0x94>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005096:	f001 fd53 	bl	8006b40 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800509a:	2302      	movs	r3, #2
 800509c:	7123      	strb	r3, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800509e:	7823      	ldrb	r3, [r4, #0]
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d105      	bne.n	80050b0 <protocol_exec_rt_system+0x94>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 80050a4:	2e00      	cmp	r6, #0
 80050a6:	db07      	blt.n	80050b8 <protocol_exec_rt_system+0x9c>
 80050a8:	78a3      	ldrb	r3, [r4, #2]
 80050aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050ae:	70a3      	strb	r3, [r4, #2]
            }
          }
        }
        // If IDLE, Grbl is not in motion. Simply indicate suspend state and hold is complete.
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80050b0:	7823      	ldrb	r3, [r4, #0]
 80050b2:	b90b      	cbnz	r3, 80050b8 <protocol_exec_rt_system+0x9c>
 80050b4:	2201      	movs	r2, #1
 80050b6:	70a2      	strb	r2, [r4, #2]

        // Execute and flag a motion cancel with deceleration and return to idle. Used primarily by probing cycle
        // to halt and cancel the remainder of the motion.
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80050b8:	066a      	lsls	r2, r5, #25
 80050ba:	d505      	bpl.n	80050c8 <protocol_exec_rt_system+0xac>
          // MOTION_CANCEL only occurs during a CYCLE, but a HOLD and SAFETY_DOOR may been initiated beforehand
          // to hold the CYCLE. Motion cancel is valid for a single planner block motion only, while jog cancel
          // will handle and clear multiple planner block motions.
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80050bc:	069f      	lsls	r7, r3, #26
 80050be:	bf5e      	ittt	pl
 80050c0:	78a2      	ldrbpl	r2, [r4, #2]
 80050c2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80050c6:	70a2      	strbpl	r2, [r4, #2]
        }

        // Execute a feed hold with deceleration, if required. Then, suspend system.
        if (rt_exec & EXEC_FEED_HOLD) {
 80050c8:	0728      	lsls	r0, r5, #28
 80050ca:	d504      	bpl.n	80050d6 <protocol_exec_rt_system+0xba>
          // Block SAFETY_DOOR, JOG, and SLEEP states from changing to HOLD state.
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80050cc:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 80050d0:	bf04      	itt	eq
 80050d2:	2310      	moveq	r3, #16
 80050d4:	7023      	strbeq	r3, [r4, #0]
        }

        // Execute a safety door stop with a feed hold and disable spindle/coolant.
        // NOTE: Safety door differs from feed holds by stopping everything no matter state, disables powered
        // devices (spindle/coolant), and blocks resuming until switch is re-engaged.
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80050d6:	06a9      	lsls	r1, r5, #26
 80050d8:	d51e      	bpl.n	8005118 <protocol_exec_rt_system+0xfc>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 80050da:	2006      	movs	r0, #6
 80050dc:	f000 fb3a 	bl	8005754 <report_feedback_message>
          // If jogging, block safety door methods until jog cancel is complete. Just flag that it happened.
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80050e0:	78a3      	ldrb	r3, [r4, #2]
 80050e2:	061a      	lsls	r2, r3, #24
 80050e4:	d414      	bmi.n	8005110 <protocol_exec_rt_system+0xf4>
            // Check if the safety re-opened during a restore parking motion only. Ignore if
            // already retracting, parked or in sleep state.
            if (sys.state == STATE_SAFETY_DOOR) {
 80050e6:	7822      	ldrb	r2, [r4, #0]
 80050e8:	2a40      	cmp	r2, #64	; 0x40
 80050ea:	d10f      	bne.n	800510c <protocol_exec_rt_system+0xf0>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 80050ec:	071f      	lsls	r7, r3, #28
 80050ee:	d504      	bpl.n	80050fa <protocol_exec_rt_system+0xde>
                    st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
                    sys.step_control = (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION);
                    sys.suspend &= ~(SUSPEND_HOLD_COMPLETE);
                  } // else NO_MOTION is active.
                #endif
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80050f0:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80050f4:	f043 0302 	orr.w	r3, r3, #2
 80050f8:	70a3      	strb	r3, [r4, #2]
              }
            }
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 80050fa:	2340      	movs	r3, #64	; 0x40
 80050fc:	7023      	strb	r3, [r4, #0]
 80050fe:	e007      	b.n	8005110 <protocol_exec_rt_system+0xf4>
 8005100:	20002e60 	.word	0x20002e60
 8005104:	20002e30 	.word	0x20002e30
 8005108:	20002e45 	.word	0x20002e45
 800510c:	2a80      	cmp	r2, #128	; 0x80
 800510e:	d1f4      	bne.n	80050fa <protocol_exec_rt_system+0xde>
          }
          // NOTE: This flag doesn't change when the door closes, unlike sys.state. Ensures any parking motions
          // are executed if the door switch closes and the state returns to HOLD.
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005110:	78a3      	ldrb	r3, [r4, #2]
 8005112:	f043 0320 	orr.w	r3, r3, #32
 8005116:	70a3      	strb	r3, [r4, #2]
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 8005118:	2e00      	cmp	r6, #0
 800511a:	da08      	bge.n	800512e <protocol_exec_rt_system+0x112>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800511c:	7823      	ldrb	r3, [r4, #0]
 800511e:	2b01      	cmp	r3, #1
 8005120:	bf02      	ittt	eq
 8005122:	78a3      	ldrbeq	r3, [r4, #2]
 8005124:	f043 0305 	orreq.w	r3, r3, #5
 8005128:	70a3      	strbeq	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 800512a:	2380      	movs	r3, #128	; 0x80
 800512c:	7023      	strb	r3, [r4, #0]
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 800512e:	20e8      	movs	r0, #232	; 0xe8
 8005130:	f002 fb04 	bl	800773c <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 8005134:	07a8      	lsls	r0, r5, #30
 8005136:	d523      	bpl.n	8005180 <protocol_exec_rt_system+0x164>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005138:	f015 0f68 	tst.w	r5, #104	; 0x68
 800513c:	d11d      	bne.n	800517a <protocol_exec_rt_system+0x15e>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 800513e:	7823      	ldrb	r3, [r4, #0]
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d107      	bne.n	8005154 <protocol_exec_rt_system+0x138>
 8005144:	78a3      	ldrb	r3, [r4, #2]
 8005146:	f013 0220 	ands.w	r2, r3, #32
 800514a:	d103      	bne.n	8005154 <protocol_exec_rt_system+0x138>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 800514c:	06d9      	lsls	r1, r3, #27
 800514e:	f140 80d4 	bpl.w	80052fa <protocol_exec_rt_system+0x2de>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005152:	7022      	strb	r2, [r4, #0]
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005154:	7823      	ldrb	r3, [r4, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80d5 	beq.w	8005306 <protocol_exec_rt_system+0x2ea>
 800515c:	06df      	lsls	r7, r3, #27
 800515e:	d50c      	bpl.n	800517a <protocol_exec_rt_system+0x15e>
 8005160:	78a2      	ldrb	r2, [r4, #2]
 8005162:	07d6      	lsls	r6, r2, #31
 8005164:	d509      	bpl.n	800517a <protocol_exec_rt_system+0x15e>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005166:	2b10      	cmp	r3, #16
 8005168:	f040 80cd 	bne.w	8005306 <protocol_exec_rt_system+0x2ea>
 800516c:	7ae3      	ldrb	r3, [r4, #11]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 80c9 	beq.w	8005306 <protocol_exec_rt_system+0x2ea>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005174:	f043 0308 	orr.w	r3, r3, #8
 8005178:	72e3      	strb	r3, [r4, #11]
              sys.state = STATE_IDLE;
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 800517a:	2002      	movs	r0, #2
 800517c:	f002 fade 	bl	800773c <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 8005180:	0768      	lsls	r0, r5, #29
 8005182:	d51d      	bpl.n	80051c0 <protocol_exec_rt_system+0x1a4>
      // Reinitializes the cycle plan and stepper system after a feed hold for a resume. Called by
      // realtime command execution in the main program, ensuring that the planner re-plans safely.
      // NOTE: Bresenham algorithm variables are still maintained through both the planner and stepper
      // cycle reinitializations. The stepper path should continue exactly as if nothing has happened.
      // NOTE: EXEC_CYCLE_STOP is set by the stepper subsystem when a cycle or feed hold completes.
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005184:	7823      	ldrb	r3, [r4, #0]
 8005186:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 800518a:	f000 80d1 	beq.w	8005330 <protocol_exec_rt_system+0x314>
 800518e:	78e3      	ldrb	r3, [r4, #3]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f040 80cd 	bne.w	8005330 <protocol_exec_rt_system+0x314>
 8005196:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800519a:	2b00      	cmp	r3, #0
 800519c:	f2c0 80c8 	blt.w	8005330 <protocol_exec_rt_system+0x314>
        // Hold complete. Set to indicate ready to resume.  Remain in HOLD or DOOR states until user
        // has issued a resume command or reset.
        plan_cycle_reinitialize();
 80051a0:	f7ff fe0a 	bl	8004db8 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 80051a4:	7923      	ldrb	r3, [r4, #4]
 80051a6:	0799      	lsls	r1, r3, #30
 80051a8:	bf48      	it	mi
 80051aa:	78a2      	ldrbmi	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 80051ac:	f023 0306 	bic.w	r3, r3, #6
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 80051b0:	bf44      	itt	mi
 80051b2:	f042 0201 	orrmi.w	r2, r2, #1
 80051b6:	70a2      	strbmi	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 80051b8:	7123      	strb	r3, [r4, #4]
        } else {
          sys.suspend = SUSPEND_DISABLE;
          sys.state = STATE_IDLE;
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80051ba:	2004      	movs	r0, #4
 80051bc:	f002 fabe 	bl	800773c <system_clear_exec_state_flag>
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 80051c0:	4b6d      	ldr	r3, [pc, #436]	; (8005378 <protocol_exec_rt_system+0x35c>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 80051c4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d038      	beq.n	800523e <protocol_exec_rt_system+0x222>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 80051cc:	f002 fae6 	bl	800779c <system_clear_exec_motion_overrides>

    uint8_t new_f_override =  sys.f_override;
 80051d0:	7a20      	ldrb	r0, [r4, #8]
    if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 80051d2:	f015 0f01 	tst.w	r5, #1
 80051d6:	bf0c      	ite	eq
 80051d8:	4603      	moveq	r3, r0
 80051da:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80051dc:	07aa      	lsls	r2, r5, #30
 80051de:	bf44      	itt	mi
 80051e0:	330a      	addmi	r3, #10
 80051e2:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 80051e4:	076f      	lsls	r7, r5, #29
 80051e6:	bf44      	itt	mi
 80051e8:	3b0a      	submi	r3, #10
 80051ea:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 80051ec:	072e      	lsls	r6, r5, #28
 80051ee:	bf44      	itt	mi
 80051f0:	3301      	addmi	r3, #1
 80051f2:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 80051f4:	06e9      	lsls	r1, r5, #27
 80051f6:	bf44      	itt	mi
 80051f8:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80051fc:	b2db      	uxtbmi	r3, r3
    new_f_override = min(new_f_override,MAX_FEED_RATE_OVERRIDE);
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 80051fe:	2bc8      	cmp	r3, #200	; 0xc8
 8005200:	bf28      	it	cs
 8005202:	23c8      	movcs	r3, #200	; 0xc8
 8005204:	2b0a      	cmp	r3, #10
 8005206:	bf38      	it	cc
 8005208:	230a      	movcc	r3, #10

    uint8_t new_r_override = sys.r_override;
 800520a:	7a61      	ldrb	r1, [r4, #9]
    if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 800520c:	f015 0f20 	tst.w	r5, #32
 8005210:	bf14      	ite	ne
 8005212:	2264      	movne	r2, #100	; 0x64
 8005214:	460a      	moveq	r2, r1
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005216:	f015 0f40 	tst.w	r5, #64	; 0x40
 800521a:	bf18      	it	ne
 800521c:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 800521e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005222:	bf18      	it	ne
 8005224:	2219      	movne	r2, #25

    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005226:	4298      	cmp	r0, r3
 8005228:	d101      	bne.n	800522e <protocol_exec_rt_system+0x212>
 800522a:	428a      	cmp	r2, r1
 800522c:	d007      	beq.n	800523e <protocol_exec_rt_system+0x222>
      sys.f_override = new_f_override;
 800522e:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005230:	2300      	movs	r3, #0
      sys.r_override = new_r_override;
 8005232:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005234:	7323      	strb	r3, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005236:	f7ff fbd1 	bl	80049dc <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 800523a:	f7ff fdbd 	bl	8004db8 <plan_cycle_reinitialize>
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 800523e:	4b4f      	ldr	r3, [pc, #316]	; (800537c <protocol_exec_rt_system+0x360>)
 8005240:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005242:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8005246:	2b00      	cmp	r3, #0
 8005248:	d04f      	beq.n	80052ea <protocol_exec_rt_system+0x2ce>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 800524a:	f002 faaf 	bl	80077ac <system_clear_exec_accessory_overrides>

    // NOTE: Unlike motion overrides, spindle overrides do not require a planner reinitialization.
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 800524e:	7aa2      	ldrb	r2, [r4, #10]
    if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 8005250:	f016 0f01 	tst.w	r6, #1
 8005254:	bf0c      	ite	eq
 8005256:	4613      	moveq	r3, r2
 8005258:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800525a:	07b7      	lsls	r7, r6, #30
 800525c:	bf44      	itt	mi
 800525e:	330a      	addmi	r3, #10
 8005260:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005262:	0775      	lsls	r5, r6, #29
 8005264:	bf44      	itt	mi
 8005266:	3b0a      	submi	r3, #10
 8005268:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800526a:	0730      	lsls	r0, r6, #28
 800526c:	bf44      	itt	mi
 800526e:	3301      	addmi	r3, #1
 8005270:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005272:	06f1      	lsls	r1, r6, #27
 8005274:	bf44      	itt	mi
 8005276:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800527a:	b2db      	uxtbmi	r3, r3
    last_s_override = min(last_s_override,MAX_SPINDLE_SPEED_OVERRIDE);
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 800527c:	2bc8      	cmp	r3, #200	; 0xc8
 800527e:	bf28      	it	cs
 8005280:	23c8      	movcs	r3, #200	; 0xc8
 8005282:	2b0a      	cmp	r3, #10
 8005284:	bf38      	it	cc
 8005286:	230a      	movcc	r3, #10

    if (last_s_override != sys.spindle_speed_ovr) {
 8005288:	429a      	cmp	r2, r3
 800528a:	d006      	beq.n	800529a <protocol_exec_rt_system+0x27e>
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
      sys.spindle_speed_ovr = last_s_override;
 800528c:	72a3      	strb	r3, [r4, #10]
      sys.report_ovr_counter = 0; // Set to report change immediately
 800528e:	2300      	movs	r3, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005290:	7922      	ldrb	r2, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005292:	7323      	strb	r3, [r4, #12]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005294:	f042 0208 	orr.w	r2, r2, #8
 8005298:	7122      	strb	r2, [r4, #4]
    }

    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 800529a:	06b7      	lsls	r7, r6, #26
 800529c:	d507      	bpl.n	80052ae <protocol_exec_rt_system+0x292>
      // Spindle stop override allowed only while in HOLD state.
      // NOTE: Report counters are set in spindle_set_state() when spindle stop is executed.
      if (sys.state == STATE_HOLD) {
 800529e:	7823      	ldrb	r3, [r4, #0]
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d104      	bne.n	80052ae <protocol_exec_rt_system+0x292>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 80052a4:	7ae3      	ldrb	r3, [r4, #11]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d15f      	bne.n	800536a <protocol_exec_rt_system+0x34e>
 80052aa:	2302      	movs	r3, #2
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80052ac:	72e3      	strb	r3, [r4, #11]
      }
    }

    // NOTE: Since coolant state always performs a planner sync whenever it changes, the current
    // run state can be determined by checking the parser state.
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80052ae:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80052b2:	d01a      	beq.n	80052ea <protocol_exec_rt_system+0x2ce>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80052b4:	7823      	ldrb	r3, [r4, #0]
 80052b6:	b113      	cbz	r3, 80052be <protocol_exec_rt_system+0x2a2>
 80052b8:	f013 0f18 	tst.w	r3, #24
 80052bc:	d015      	beq.n	80052ea <protocol_exec_rt_system+0x2ce>
        uint8_t coolant_state = gc_state.modal.coolant;
 80052be:	4f30      	ldr	r7, [pc, #192]	; (8005380 <protocol_exec_rt_system+0x364>)
        #ifdef ENABLE_M7
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80052c0:	0630      	lsls	r0, r6, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 80052c2:	7a3d      	ldrb	r5, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80052c4:	d505      	bpl.n	80052d2 <protocol_exec_rt_system+0x2b6>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 80052c6:	0629      	lsls	r1, r5, #24
 80052c8:	bf4c      	ite	mi
 80052ca:	f005 057f 	andmi.w	r5, r5, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 80052ce:	f045 0580 	orrpl.w	r5, r5, #128	; 0x80
          }
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 80052d2:	0672      	lsls	r2, r6, #25
 80052d4:	d505      	bpl.n	80052e2 <protocol_exec_rt_system+0x2c6>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80052d6:	066b      	lsls	r3, r5, #25
 80052d8:	bf4c      	ite	mi
 80052da:	f005 05bf 	andmi.w	r5, r5, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 80052de:	f045 0540 	orrpl.w	r5, r5, #64	; 0x40
          }
        #else
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
          else { coolant_state |= COOLANT_FLOOD_ENABLE; }
        #endif
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 80052e2:	4628      	mov	r0, r5
 80052e4:	f7fd fb82 	bl	80029ec <coolant_set_state>
        gc_state.modal.coolant = coolant_state;
 80052e8:	723d      	strb	r5, [r7, #8]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 80052ea:	7823      	ldrb	r3, [r4, #0]
 80052ec:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 80052f0:	d040      	beq.n	8005374 <protocol_exec_rt_system+0x358>
    st_prep_buffer();
  }

}
 80052f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 80052f6:	f001 bc3b 	b.w	8006b70 <st_prep_buffer>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80052fa:	075a      	lsls	r2, r3, #29
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 80052fc:	bf44      	itt	mi
 80052fe:	f043 0308 	orrmi.w	r3, r3, #8
 8005302:	70a3      	strbmi	r3, [r4, #2]
 8005304:	e726      	b.n	8005154 <protocol_exec_rt_system+0x138>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005306:	2300      	movs	r3, #0
 8005308:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 800530a:	f7ff fadd 	bl	80048c8 <plan_get_current_block>
 800530e:	b158      	cbz	r0, 8005328 <protocol_exec_rt_system+0x30c>
 8005310:	78a3      	ldrb	r3, [r4, #2]
 8005312:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005316:	d107      	bne.n	8005328 <protocol_exec_rt_system+0x30c>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005318:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 800531a:	2308      	movs	r3, #8
 800531c:	7023      	strb	r3, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 800531e:	f001 fc27 	bl	8006b70 <st_prep_buffer>
              st_wake_up();
 8005322:	f001 f9e5 	bl	80066f0 <st_wake_up>
 8005326:	e728      	b.n	800517a <protocol_exec_rt_system+0x15e>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005328:	2300      	movs	r3, #0
 800532a:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 800532c:	7023      	strb	r3, [r4, #0]
 800532e:	e724      	b.n	800517a <protocol_exec_rt_system+0x15e>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005330:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005334:	2b00      	cmp	r3, #0
 8005336:	da09      	bge.n	800534c <protocol_exec_rt_system+0x330>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005338:	2300      	movs	r3, #0
 800533a:	7123      	strb	r3, [r4, #4]
          plan_reset();
 800533c:	f7ff fa92 	bl	8004864 <plan_reset>
          st_reset();
 8005340:	f001 fb96 	bl	8006a70 <st_reset>
          gc_sync_position();
 8005344:	f7fd fc3a 	bl	8002bbc <gc_sync_position>
          plan_sync_position();
 8005348:	f7ff fd16 	bl	8004d78 <plan_sync_position>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 800534c:	78a3      	ldrb	r3, [r4, #2]
 800534e:	f013 0220 	ands.w	r2, r3, #32
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005352:	bf1f      	itttt	ne
 8005354:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005358:	f043 0301 	orrne.w	r3, r3, #1
 800535c:	70a3      	strbne	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 800535e:	2340      	movne	r3, #64	; 0x40
          sys.suspend = SUSPEND_DISABLE;
 8005360:	bf0a      	itet	eq
 8005362:	70a2      	strbeq	r2, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005364:	7023      	strbne	r3, [r4, #0]
          sys.state = STATE_IDLE;
 8005366:	7022      	strbeq	r2, [r4, #0]
 8005368:	e727      	b.n	80051ba <protocol_exec_rt_system+0x19e>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 800536a:	07dd      	lsls	r5, r3, #31
 800536c:	d59f      	bpl.n	80052ae <protocol_exec_rt_system+0x292>
 800536e:	f043 0304 	orr.w	r3, r3, #4
 8005372:	e79b      	b.n	80052ac <protocol_exec_rt_system+0x290>
 8005374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005376:	bf00      	nop
 8005378:	20002e2c 	.word	0x20002e2c
 800537c:	20002e44 	.word	0x20002e44
 8005380:	20003264 	.word	0x20003264

08005384 <protocol_execute_realtime>:
{
 8005384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005388:	4c66      	ldr	r4, [pc, #408]	; (8005524 <protocol_execute_realtime+0x1a0>)
  protocol_exec_rt_system();
 800538a:	f7ff fe47 	bl	800501c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800538e:	78a3      	ldrb	r3, [r4, #2]
 8005390:	b1ab      	cbz	r3, 80053be <protocol_execute_realtime+0x3a>
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 8005392:	f7ff fa99 	bl	80048c8 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 8005396:	b9a0      	cbnz	r0, 80053c2 <protocol_execute_realtime+0x3e>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005398:	4b63      	ldr	r3, [pc, #396]	; (8005528 <protocol_execute_realtime+0x1a4>)
 800539a:	7a5d      	ldrb	r5, [r3, #9]
 800539c:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 800539e:	691f      	ldr	r7, [r3, #16]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80053a0:	4315      	orrs	r5, r2
    } else {
      restore_condition = block->condition;
      restore_spindle_speed = block->spindle_speed;
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) { 
 80053a2:	4e62      	ldr	r6, [pc, #392]	; (800552c <protocol_execute_realtime+0x1a8>)
 80053a4:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 80053a8:	079b      	lsls	r3, r3, #30
 80053aa:	d502      	bpl.n	80053b2 <protocol_execute_realtime+0x2e>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 80053ac:	2020      	movs	r0, #32
 80053ae:	f002 f9eb 	bl	8007788 <system_set_exec_accessory_override_flag>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 80053b2:	f04f 0800 	mov.w	r8, #0
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 80053b6:	f04f 4a81 	mov.w	sl, #1082130432	; 0x40800000
  while (sys.suspend) {
 80053ba:	78a3      	ldrb	r3, [r4, #2]
 80053bc:	b923      	cbnz	r3, 80053c8 <protocol_execute_realtime+0x44>
 80053be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      restore_condition = block->condition;
 80053c2:	7c45      	ldrb	r5, [r0, #17]
      restore_spindle_speed = block->spindle_speed;
 80053c4:	6b07      	ldr	r7, [r0, #48]	; 0x30
 80053c6:	e7ec      	b.n	80053a2 <protocol_execute_realtime+0x1e>
    if (sys.abort) { return; }
 80053c8:	f894 9001 	ldrb.w	r9, [r4, #1]
 80053cc:	f1b9 0f00 	cmp.w	r9, #0
 80053d0:	d1f5      	bne.n	80053be <protocol_execute_realtime+0x3a>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 80053d2:	07d8      	lsls	r0, r3, #31
 80053d4:	d515      	bpl.n	8005402 <protocol_execute_realtime+0x7e>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 80053d6:	7821      	ldrb	r1, [r4, #0]
 80053d8:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 80053dc:	d067      	beq.n	80054ae <protocol_execute_realtime+0x12a>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 80053de:	f013 0b04 	ands.w	fp, r3, #4
 80053e2:	d111      	bne.n	8005408 <protocol_execute_realtime+0x84>
            spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 80053e4:	4641      	mov	r1, r8
 80053e6:	4658      	mov	r0, fp
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 80053e8:	f884 b00b 	strb.w	fp, [r4, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 80053ec:	f001 f942 	bl	8006674 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 80053f0:	4658      	mov	r0, fp
 80053f2:	f7fd fafb 	bl	80029ec <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 80053f6:	78a3      	ldrb	r3, [r4, #2]
 80053f8:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 80053fc:	f043 0304 	orr.w	r3, r3, #4
 8005400:	70a3      	strb	r3, [r4, #2]
        }

      }
    }

    protocol_exec_rt_system();
 8005402:	f7ff fe0b 	bl	800501c <protocol_exec_rt_system>
 8005406:	e7d8      	b.n	80053ba <protocol_execute_realtime+0x36>
          if (sys.state == STATE_SLEEP) {
 8005408:	2980      	cmp	r1, #128	; 0x80
 800540a:	d112      	bne.n	8005432 <protocol_execute_realtime+0xae>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 800540c:	200b      	movs	r0, #11
 800540e:	f000 f9a1 	bl	8005754 <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 8005412:	2100      	movs	r1, #0
 8005414:	4648      	mov	r0, r9
 8005416:	f001 f92d 	bl	8006674 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 800541a:	4648      	mov	r0, r9
 800541c:	f7fd fae6 	bl	80029ec <coolant_set_state>
            st_go_idle(); // Disable steppers
 8005420:	f001 f9aa 	bl	8006778 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 8005424:	7863      	ldrb	r3, [r4, #1]
 8005426:	b10b      	cbz	r3, 800542c <protocol_execute_realtime+0xa8>
 8005428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542c:	f7ff fdf6 	bl	800501c <protocol_exec_rt_system>
 8005430:	e7f8      	b.n	8005424 <protocol_execute_realtime+0xa0>
          if (sys.state == STATE_SAFETY_DOOR) {
 8005432:	2940      	cmp	r1, #64	; 0x40
 8005434:	d106      	bne.n	8005444 <protocol_execute_realtime+0xc0>
            if (!(system_check_safety_door_ajar())) {
 8005436:	f001 ff9b 	bl	8007370 <system_check_safety_door_ajar>
 800543a:	b918      	cbnz	r0, 8005444 <protocol_execute_realtime+0xc0>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 800543c:	78a3      	ldrb	r3, [r4, #2]
 800543e:	f023 0320 	bic.w	r3, r3, #32
 8005442:	70a3      	strb	r3, [r4, #2]
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8005444:	78a3      	ldrb	r3, [r4, #2]
 8005446:	0719      	lsls	r1, r3, #28
 8005448:	d5db      	bpl.n	8005402 <protocol_execute_realtime+0x7e>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800544a:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8005528 <protocol_execute_realtime+0x1a4>
 800544e:	f89b 2009 	ldrb.w	r2, [fp, #9]
 8005452:	b14a      	cbz	r2, 8005468 <protocol_execute_realtime+0xe4>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005454:	079a      	lsls	r2, r3, #30
 8005456:	d407      	bmi.n	8005468 <protocol_execute_realtime+0xe4>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8005458:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 800545c:	079b      	lsls	r3, r3, #30
 800545e:	d51c      	bpl.n	800549a <protocol_execute_realtime+0x116>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005460:	7923      	ldrb	r3, [r4, #4]
 8005462:	f043 0308 	orr.w	r3, r3, #8
 8005466:	7123      	strb	r3, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005468:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800546c:	b15b      	cbz	r3, 8005486 <protocol_execute_realtime+0x102>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800546e:	78a3      	ldrb	r3, [r4, #2]
 8005470:	0798      	lsls	r0, r3, #30
 8005472:	d408      	bmi.n	8005486 <protocol_execute_realtime+0x102>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8005474:	f005 0040 	and.w	r0, r5, #64	; 0x40
 8005478:	f7fd fab8 	bl	80029ec <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 800547c:	2101      	movs	r1, #1
 800547e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005482:	f7ff f873 	bl	800456c <delay_sec>
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005486:	78a3      	ldrb	r3, [r4, #2]
 8005488:	0799      	lsls	r1, r3, #30
 800548a:	d4ba      	bmi.n	8005402 <protocol_execute_realtime+0x7e>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 800548c:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005490:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005492:	70a3      	strb	r3, [r4, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005494:	f001 ffd0 	bl	8007438 <system_set_exec_state_flag>
 8005498:	e7b3      	b.n	8005402 <protocol_execute_realtime+0x7e>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800549a:	4639      	mov	r1, r7
 800549c:	f005 0030 	and.w	r0, r5, #48	; 0x30
 80054a0:	f001 f8e8 	bl	8006674 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 80054a4:	2101      	movs	r1, #1
 80054a6:	4650      	mov	r0, sl
 80054a8:	f7ff f860 	bl	800456c <delay_sec>
 80054ac:	e7dc      	b.n	8005468 <protocol_execute_realtime+0xe4>
        if (sys.spindle_stop_ovr) {
 80054ae:	7ae3      	ldrb	r3, [r4, #11]
 80054b0:	b34b      	cbz	r3, 8005506 <protocol_execute_realtime+0x182>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 80054b2:	079a      	lsls	r2, r3, #30
 80054b4:	d508      	bpl.n	80054c8 <protocol_execute_realtime+0x144>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80054b6:	4b1c      	ldr	r3, [pc, #112]	; (8005528 <protocol_execute_realtime+0x1a4>)
 80054b8:	7a5b      	ldrb	r3, [r3, #9]
 80054ba:	b1e3      	cbz	r3, 80054f6 <protocol_execute_realtime+0x172>
              spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 80054bc:	4641      	mov	r1, r8
 80054be:	f001 f8d9 	bl	8006674 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 80054c2:	2301      	movs	r3, #1
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 80054c4:	72e3      	strb	r3, [r4, #11]
 80054c6:	e79c      	b.n	8005402 <protocol_execute_realtime+0x7e>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 80054c8:	f013 0f0c 	tst.w	r3, #12
 80054cc:	d099      	beq.n	8005402 <protocol_execute_realtime+0x7e>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <protocol_execute_realtime+0x1a4>)
 80054d0:	7a5b      	ldrb	r3, [r3, #9]
 80054d2:	b153      	cbz	r3, 80054ea <protocol_execute_realtime+0x166>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 80054d4:	200a      	movs	r0, #10
 80054d6:	f000 f93d 	bl	8005754 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80054da:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 80054de:	0799      	lsls	r1, r3, #30
 80054e0:	d50b      	bpl.n	80054fa <protocol_execute_realtime+0x176>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80054e2:	7923      	ldrb	r3, [r4, #4]
 80054e4:	f043 0308 	orr.w	r3, r3, #8
 80054e8:	7123      	strb	r3, [r4, #4]
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 80054ea:	7ae3      	ldrb	r3, [r4, #11]
 80054ec:	071a      	lsls	r2, r3, #28
 80054ee:	d502      	bpl.n	80054f6 <protocol_execute_realtime+0x172>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 80054f0:	2002      	movs	r0, #2
 80054f2:	f001 ffa1 	bl	8007438 <system_set_exec_state_flag>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 80054f6:	2300      	movs	r3, #0
 80054f8:	e7e4      	b.n	80054c4 <protocol_execute_realtime+0x140>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80054fa:	4639      	mov	r1, r7
 80054fc:	f005 0030 	and.w	r0, r5, #48	; 0x30
 8005500:	f001 f8b8 	bl	8006674 <spindle_set_state>
 8005504:	e7f1      	b.n	80054ea <protocol_execute_realtime+0x166>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8005506:	7923      	ldrb	r3, [r4, #4]
 8005508:	071b      	lsls	r3, r3, #28
 800550a:	f57f af7a 	bpl.w	8005402 <protocol_execute_realtime+0x7e>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800550e:	4639      	mov	r1, r7
 8005510:	f005 0030 	and.w	r0, r5, #48	; 0x30
 8005514:	f001 f8ae 	bl	8006674 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005518:	7923      	ldrb	r3, [r4, #4]
 800551a:	f023 0308 	bic.w	r3, r3, #8
 800551e:	7123      	strb	r3, [r4, #4]
 8005520:	e76f      	b.n	8005402 <protocol_execute_realtime+0x7e>
 8005522:	bf00      	nop
 8005524:	20002e30 	.word	0x20002e30
 8005528:	20003264 	.word	0x20003264
 800552c:	20003478 	.word	0x20003478

08005530 <protocol_main_loop>:
{
 8005530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 8005534:	4b43      	ldr	r3, [pc, #268]	; (8005644 <protocol_main_loop+0x114>)
 8005536:	4e44      	ldr	r6, [pc, #272]	; (8005648 <protocol_main_loop+0x118>)
 8005538:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800553c:	f013 0f08 	tst.w	r3, #8
 8005540:	d007      	beq.n	8005552 <protocol_main_loop+0x22>
      if (limits_get_state()) {
 8005542:	f7fe fb59 	bl	8003bf8 <limits_get_state>
 8005546:	b120      	cbz	r0, 8005552 <protocol_main_loop+0x22>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8005548:	2301      	movs	r3, #1
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 800554a:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 800554c:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 800554e:	f000 f901 	bl	8005754 <report_feedback_message>
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 8005552:	7833      	ldrb	r3, [r6, #0]
 8005554:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 8005558:	d014      	beq.n	8005584 <protocol_main_loop+0x54>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 800555a:	2002      	movs	r0, #2
 800555c:	f000 f8fa 	bl	8005754 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 8005560:	2301      	movs	r3, #1
 8005562:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 8005564:	2400      	movs	r4, #0
 8005566:	4625      	mov	r5, r4
        line[char_counter] = 0; // Set string termination character.
 8005568:	4f38      	ldr	r7, [pc, #224]	; (800564c <protocol_main_loop+0x11c>)
    while((c = serial_read()) != SERIAL_NO_DATA) {
 800556a:	f000 fce1 	bl	8005f30 <serial_read>
 800556e:	28ff      	cmp	r0, #255	; 0xff
 8005570:	d117      	bne.n	80055a2 <protocol_main_loop+0x72>
    protocol_auto_cycle_start();
 8005572:	f7ff fd49 	bl	8005008 <protocol_auto_cycle_start>
    protocol_execute_realtime();  // Runtime command check point.
 8005576:	f7ff ff05 	bl	8005384 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 800557a:	7873      	ldrb	r3, [r6, #1]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f4      	beq.n	800556a <protocol_main_loop+0x3a>
 8005580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sys.state = STATE_IDLE;
 8005584:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 8005586:	f001 fef3 	bl	8007370 <system_check_safety_door_ajar>
 800558a:	b130      	cbz	r0, 800559a <protocol_main_loop+0x6a>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 800558c:	4a30      	ldr	r2, [pc, #192]	; (8005650 <protocol_main_loop+0x120>)
 800558e:	7813      	ldrb	r3, [r2, #0]
 8005590:	f043 0320 	orr.w	r3, r3, #32
 8005594:	7013      	strb	r3, [r2, #0]
      protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 8005596:	f7ff fef5 	bl	8005384 <protocol_execute_realtime>
    system_execute_startup(line); // Execute startup script.
 800559a:	482c      	ldr	r0, [pc, #176]	; (800564c <protocol_main_loop+0x11c>)
 800559c:	f001 feee 	bl	800737c <system_execute_startup>
 80055a0:	e7e0      	b.n	8005564 <protocol_main_loop+0x34>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 80055a2:	280a      	cmp	r0, #10
 80055a4:	d001      	beq.n	80055aa <protocol_main_loop+0x7a>
 80055a6:	280d      	cmp	r0, #13
 80055a8:	d12a      	bne.n	8005600 <protocol_main_loop+0xd0>
        protocol_execute_realtime(); // Runtime command check point.
 80055aa:	f7ff feeb 	bl	8005384 <protocol_execute_realtime>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 80055ae:	f896 8001 	ldrb.w	r8, [r6, #1]
 80055b2:	f1b8 0f00 	cmp.w	r8, #0
 80055b6:	d1e3      	bne.n	8005580 <protocol_main_loop+0x50>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 80055b8:	f015 0501 	ands.w	r5, r5, #1
        line[char_counter] = 0; // Set string termination character.
 80055bc:	f807 8004 	strb.w	r8, [r7, r4]
        if (line_flags & LINE_FLAG_OVERFLOW) {
 80055c0:	d005      	beq.n	80055ce <protocol_main_loop+0x9e>
          report_status_message(STATUS_OVERFLOW);
 80055c2:	200b      	movs	r0, #11
 80055c4:	f000 f89e 	bl	8005704 <report_status_message>
        char_counter = 0;
 80055c8:	4644      	mov	r4, r8
        line_flags = 0;
 80055ca:	4625      	mov	r5, r4
 80055cc:	e7cd      	b.n	800556a <protocol_main_loop+0x3a>
        } else if (line[0] == 0) {
 80055ce:	783c      	ldrb	r4, [r7, #0]
 80055d0:	b91c      	cbnz	r4, 80055da <protocol_main_loop+0xaa>
          report_status_message(STATUS_OK);
 80055d2:	4620      	mov	r0, r4
 80055d4:	f000 f896 	bl	8005704 <report_status_message>
 80055d8:	e7f7      	b.n	80055ca <protocol_main_loop+0x9a>
        } else if (line[0] == '$') {
 80055da:	2c24      	cmp	r4, #36	; 0x24
 80055dc:	d106      	bne.n	80055ec <protocol_main_loop+0xbc>
          report_status_message(system_execute_line(line));
 80055de:	4638      	mov	r0, r7
 80055e0:	f001 ff34 	bl	800744c <system_execute_line>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 80055e4:	f000 f88e 	bl	8005704 <report_status_message>
        char_counter = 0;
 80055e8:	462c      	mov	r4, r5
 80055ea:	e7ee      	b.n	80055ca <protocol_main_loop+0x9a>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 80055ec:	7833      	ldrb	r3, [r6, #0]
 80055ee:	f013 0421 	ands.w	r4, r3, #33	; 0x21
 80055f2:	d001      	beq.n	80055f8 <protocol_main_loop+0xc8>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 80055f4:	2009      	movs	r0, #9
 80055f6:	e7f5      	b.n	80055e4 <protocol_main_loop+0xb4>
          report_status_message(gc_execute_line(line));
 80055f8:	4638      	mov	r0, r7
 80055fa:	f7fd fae9 	bl	8002bd0 <gc_execute_line>
 80055fe:	e7e9      	b.n	80055d4 <protocol_main_loop+0xa4>
        if (line_flags) {
 8005600:	b135      	cbz	r5, 8005610 <protocol_main_loop+0xe0>
          if (c == ')') {
 8005602:	2829      	cmp	r0, #41	; 0x29
 8005604:	d1b1      	bne.n	800556a <protocol_main_loop+0x3a>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8005606:	07ab      	lsls	r3, r5, #30
 8005608:	d5af      	bpl.n	800556a <protocol_main_loop+0x3a>
 800560a:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800560e:	e7ac      	b.n	800556a <protocol_main_loop+0x3a>
          if (c <= ' ') {
 8005610:	2820      	cmp	r0, #32
 8005612:	d9aa      	bls.n	800556a <protocol_main_loop+0x3a>
          } else if (c == '/') {
 8005614:	282f      	cmp	r0, #47	; 0x2f
 8005616:	d0a8      	beq.n	800556a <protocol_main_loop+0x3a>
          } else if (c == '(') {
 8005618:	2828      	cmp	r0, #40	; 0x28
 800561a:	d00d      	beq.n	8005638 <protocol_main_loop+0x108>
          } else if (c == ';') {
 800561c:	283b      	cmp	r0, #59	; 0x3b
 800561e:	d00d      	beq.n	800563c <protocol_main_loop+0x10c>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 8005620:	2c4e      	cmp	r4, #78	; 0x4e
 8005622:	d80d      	bhi.n	8005640 <protocol_main_loop+0x110>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 8005624:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 800562c:	bf98      	it	ls
 800562e:	3820      	subls	r0, #32
 8005630:	1c63      	adds	r3, r4, #1
            line[char_counter++] = c;
 8005632:	5538      	strb	r0, [r7, r4]
 8005634:	b2dc      	uxtb	r4, r3
 8005636:	e798      	b.n	800556a <protocol_main_loop+0x3a>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 8005638:	2502      	movs	r5, #2
 800563a:	e796      	b.n	800556a <protocol_main_loop+0x3a>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 800563c:	2504      	movs	r5, #4
 800563e:	e794      	b.n	800556a <protocol_main_loop+0x3a>
            line_flags |= LINE_FLAG_OVERFLOW;
 8005640:	2501      	movs	r5, #1
 8005642:	e792      	b.n	800556a <protocol_main_loop+0x3a>
 8005644:	20003478 	.word	0x20003478
 8005648:	20002e30 	.word	0x20002e30
 800564c:	20002958 	.word	0x20002958
 8005650:	20002e45 	.word	0x20002e45

08005654 <protocol_buffer_synchronize>:
{
 8005654:	b510      	push	{r4, lr}
  protocol_auto_cycle_start();
 8005656:	f7ff fcd7 	bl	8005008 <protocol_auto_cycle_start>
    if (sys.abort) { return; } // Check for system abort
 800565a:	4c06      	ldr	r4, [pc, #24]	; (8005674 <protocol_buffer_synchronize+0x20>)
    protocol_execute_realtime();   // Check and execute run-time commands
 800565c:	f7ff fe92 	bl	8005384 <protocol_execute_realtime>
    if (sys.abort) { return; } // Check for system abort
 8005660:	7863      	ldrb	r3, [r4, #1]
 8005662:	b933      	cbnz	r3, 8005672 <protocol_buffer_synchronize+0x1e>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 8005664:	f7ff f930 	bl	80048c8 <plan_get_current_block>
 8005668:	2800      	cmp	r0, #0
 800566a:	d1f7      	bne.n	800565c <protocol_buffer_synchronize+0x8>
 800566c:	7823      	ldrb	r3, [r4, #0]
 800566e:	2b08      	cmp	r3, #8
 8005670:	d0f4      	beq.n	800565c <protocol_buffer_synchronize+0x8>
 8005672:	bd10      	pop	{r4, pc}
 8005674:	20002e30 	.word	0x20002e30

08005678 <report_util_line_feed>:

#include "grbl.h"

// Internal report utilities to reduce flash with repetitive tasks turned into functions.
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005678:	4801      	ldr	r0, [pc, #4]	; (8005680 <report_util_line_feed+0x8>)
 800567a:	f7ff bbad 	b.w	8004dd8 <printString>
 800567e:	bf00      	nop
 8005680:	08009a49 	.word	0x08009a49

08005684 <report_util_feedback_line_feed>:
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005684:	b508      	push	{r3, lr}
 8005686:	205d      	movs	r0, #93	; 0x5d
 8005688:	f000 fc4f 	bl	8005f2a <serial_write>
 800568c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005690:	f7ff bff2 	b.w	8005678 <report_util_line_feed>

08005694 <report_util_axis_values>:
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
// static void report_util_comment_line_feed() { serial_write(')'); report_util_line_feed(); }
static void report_util_axis_values(float *axis_value) {
 8005694:	b510      	push	{r4, lr}
 8005696:	4604      	mov	r4, r0
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
    printFloat_CoordValue(axis_value[idx]);
 8005698:	6800      	ldr	r0, [r0, #0]
 800569a:	f7ff fc35 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800569e:	202c      	movs	r0, #44	; 0x2c
 80056a0:	f000 fc43 	bl	8005f2a <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80056a4:	6860      	ldr	r0, [r4, #4]
 80056a6:	f7ff fc2f 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80056aa:	202c      	movs	r0, #44	; 0x2c
 80056ac:	f000 fc3d 	bl	8005f2a <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80056b0:	68a0      	ldr	r0, [r4, #8]
  }
}
 80056b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printFloat_CoordValue(axis_value[idx]);
 80056b6:	f7ff bc27 	b.w	8004f08 <printFloat_CoordValue>

080056ba <report_util_setting_prefix>:
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80056ba:	b510      	push	{r4, lr}
 80056bc:	4604      	mov	r4, r0
 80056be:	2024      	movs	r0, #36	; 0x24
 80056c0:	f000 fc33 	bl	8005f2a <serial_write>
 80056c4:	4620      	mov	r0, r4
 80056c6:	f7ff fb90 	bl	8004dea <print_uint8_base10>
 80056ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ce:	203d      	movs	r0, #61	; 0x3d
 80056d0:	f000 bc2b 	b.w	8005f2a <serial_write>

080056d4 <report_util_uint8_setting>:
  }
  report_util_comment_line_feed();
}
*/

static void report_util_uint8_setting(uint8_t n, int val) { 
 80056d4:	b510      	push	{r4, lr}
 80056d6:	460c      	mov	r4, r1
  report_util_setting_prefix(n); 
 80056d8:	f7ff ffef 	bl	80056ba <report_util_setting_prefix>
  print_uint8_base10(val); 
 80056dc:	b2e0      	uxtb	r0, r4
 80056de:	f7ff fb84 	bl	8004dea <print_uint8_base10>
  report_util_line_feed(); // report_util_setting_string(n); 
}
 80056e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_line_feed(); // report_util_setting_string(n); 
 80056e6:	f7ff bfc7 	b.w	8005678 <report_util_line_feed>

080056ea <report_util_float_setting>:
static void report_util_float_setting(uint8_t n, float val, uint8_t n_decimal) { 
 80056ea:	b538      	push	{r3, r4, r5, lr}
 80056ec:	460c      	mov	r4, r1
 80056ee:	4615      	mov	r5, r2
  report_util_setting_prefix(n); 
 80056f0:	f7ff ffe3 	bl	80056ba <report_util_setting_prefix>
  printFloat(val,n_decimal);
 80056f4:	4629      	mov	r1, r5
 80056f6:	4620      	mov	r0, r4
 80056f8:	f7ff fba0 	bl	8004e3c <printFloat>
  report_util_line_feed(); // report_util_setting_string(n);
}
 80056fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  report_util_line_feed(); // report_util_setting_string(n);
 8005700:	f7ff bfba 	b.w	8005678 <report_util_line_feed>

08005704 <report_status_message>:
// 'error:'  to indicate some error event with the line or some critical system error during
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
 8005704:	b510      	push	{r4, lr}
  switch(status_code) {
 8005706:	4604      	mov	r4, r0
 8005708:	b920      	cbnz	r0, 8005714 <report_status_message+0x10>
    default:
      printPgmString(PSTR("error:"));
      print_uint8_base10(status_code);
      report_util_line_feed();
  }
}
 800570a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      printPgmString(PSTR("ok\r\n")); break;
 800570e:	4806      	ldr	r0, [pc, #24]	; (8005728 <report_status_message+0x24>)
 8005710:	f7ff bb62 	b.w	8004dd8 <printString>
      printPgmString(PSTR("error:"));
 8005714:	4805      	ldr	r0, [pc, #20]	; (800572c <report_status_message+0x28>)
 8005716:	f7ff fb5f 	bl	8004dd8 <printString>
      print_uint8_base10(status_code);
 800571a:	4620      	mov	r0, r4
 800571c:	f7ff fb65 	bl	8004dea <print_uint8_base10>
}
 8005720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      report_util_line_feed();
 8005724:	f7ff bfa8 	b.w	8005678 <report_util_line_feed>
 8005728:	08009ac6 	.word	0x08009ac6
 800572c:	08009acb 	.word	0x08009acb

08005730 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8005730:	b510      	push	{r4, lr}
 8005732:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 8005734:	4806      	ldr	r0, [pc, #24]	; (8005750 <report_alarm_message+0x20>)
 8005736:	f7ff fb4f 	bl	8004dd8 <printString>
  print_uint8_base10(alarm_code);
 800573a:	4620      	mov	r0, r4
 800573c:	f7ff fb55 	bl	8004dea <print_uint8_base10>
  report_util_line_feed();
 8005740:	f7ff ff9a 	bl	8005678 <report_util_line_feed>
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 8005744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 8005748:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800574c:	f7fe bf32 	b.w	80045b4 <delay_ms>
 8005750:	08009904 	.word	0x08009904

08005754 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 8005754:	b510      	push	{r4, lr}
 8005756:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 8005758:	4814      	ldr	r0, [pc, #80]	; (80057ac <report_feedback_message+0x58>)
 800575a:	f7ff fb3d 	bl	8004dd8 <printString>
  switch(message_code) {
 800575e:	1e60      	subs	r0, r4, #1
 8005760:	280a      	cmp	r0, #10
 8005762:	d80a      	bhi.n	800577a <report_feedback_message+0x26>
 8005764:	e8df f000 	tbb	[pc, r0]
 8005768:	110f0d06 	.word	0x110f0d06
 800576c:	19171513 	.word	0x19171513
 8005770:	1d1b      	.short	0x1d1b
 8005772:	1f          	.byte	0x1f
 8005773:	00          	.byte	0x00
    case MESSAGE_CRITICAL_EVENT:
      printPgmString(PSTR("Reset to continue")); break;
 8005774:	480e      	ldr	r0, [pc, #56]	; (80057b0 <report_feedback_message+0x5c>)
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 8005776:	f7ff fb2f 	bl	8004dd8 <printString>
  }
  report_util_feedback_line_feed();
}
 800577a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_feedback_line_feed();
 800577e:	f7ff bf81 	b.w	8005684 <report_util_feedback_line_feed>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 8005782:	480c      	ldr	r0, [pc, #48]	; (80057b4 <report_feedback_message+0x60>)
 8005784:	e7f7      	b.n	8005776 <report_feedback_message+0x22>
      printPgmString(PSTR("Caution: Unlocked")); break;
 8005786:	480c      	ldr	r0, [pc, #48]	; (80057b8 <report_feedback_message+0x64>)
 8005788:	e7f5      	b.n	8005776 <report_feedback_message+0x22>
      printPgmString(PSTR("Enabled")); break;
 800578a:	480c      	ldr	r0, [pc, #48]	; (80057bc <report_feedback_message+0x68>)
 800578c:	e7f3      	b.n	8005776 <report_feedback_message+0x22>
      printPgmString(PSTR("Disabled")); break;
 800578e:	480c      	ldr	r0, [pc, #48]	; (80057c0 <report_feedback_message+0x6c>)
 8005790:	e7f1      	b.n	8005776 <report_feedback_message+0x22>
      printPgmString(PSTR("Check Door")); break;
 8005792:	480c      	ldr	r0, [pc, #48]	; (80057c4 <report_feedback_message+0x70>)
 8005794:	e7ef      	b.n	8005776 <report_feedback_message+0x22>
      printPgmString(PSTR("Check Limits")); break;
 8005796:	480c      	ldr	r0, [pc, #48]	; (80057c8 <report_feedback_message+0x74>)
 8005798:	e7ed      	b.n	8005776 <report_feedback_message+0x22>
      printPgmString(PSTR("Pgm End")); break;
 800579a:	480c      	ldr	r0, [pc, #48]	; (80057cc <report_feedback_message+0x78>)
 800579c:	e7eb      	b.n	8005776 <report_feedback_message+0x22>
      printPgmString(PSTR("Restoring defaults")); break;
 800579e:	480c      	ldr	r0, [pc, #48]	; (80057d0 <report_feedback_message+0x7c>)
 80057a0:	e7e9      	b.n	8005776 <report_feedback_message+0x22>
      printPgmString(PSTR("Restoring spindle")); break;
 80057a2:	480c      	ldr	r0, [pc, #48]	; (80057d4 <report_feedback_message+0x80>)
 80057a4:	e7e7      	b.n	8005776 <report_feedback_message+0x22>
      printPgmString(PSTR("Sleeping")); break;
 80057a6:	480c      	ldr	r0, [pc, #48]	; (80057d8 <report_feedback_message+0x84>)
 80057a8:	e7e5      	b.n	8005776 <report_feedback_message+0x22>
 80057aa:	bf00      	nop
 80057ac:	0800992a 	.word	0x0800992a
 80057b0:	08009930 	.word	0x08009930
 80057b4:	08009942 	.word	0x08009942
 80057b8:	08009956 	.word	0x08009956
 80057bc:	08009968 	.word	0x08009968
 80057c0:	08009970 	.word	0x08009970
 80057c4:	08009979 	.word	0x08009979
 80057c8:	08009984 	.word	0x08009984
 80057cc:	08009991 	.word	0x08009991
 80057d0:	08009999 	.word	0x08009999
 80057d4:	080099ac 	.word	0x080099ac
 80057d8:	080099be 	.word	0x080099be

080057dc <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 80057dc:	4801      	ldr	r0, [pc, #4]	; (80057e4 <report_init_message+0x8>)
 80057de:	f7ff bafb 	b.w	8004dd8 <printString>
 80057e2:	bf00      	nop
 80057e4:	08009a2a 	.word	0x08009a2a

080057e8 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 80057e8:	4801      	ldr	r0, [pc, #4]	; (80057f0 <report_grbl_help+0x8>)
 80057ea:	f7ff baf5 	b.w	8004dd8 <printString>
 80057ee:	bf00      	nop
 80057f0:	080099e0 	.word	0x080099e0

080057f4 <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 80057f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // Print Grbl settings.
//  report_util_uint8_setting(0,settings.pulse_microseconds);
	report_util_float_setting(0,settings.fpulse_microseconds,N_DECIMAL_SETTINGVALUE);
 80057f8:	4c5a      	ldr	r4, [pc, #360]	; (8005964 <report_grbl_settings+0x170>)
 80057fa:	2203      	movs	r2, #3
 80057fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80057fe:	2000      	movs	r0, #0
 8005800:	f7ff ff73 	bl	80056ea <report_util_float_setting>
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 8005804:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 8005808:	2001      	movs	r0, #1
 800580a:	f7ff ff63 	bl	80056d4 <report_util_uint8_setting>
  report_util_uint8_setting(2,settings.step_invert_mask);
 800580e:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8005812:	2002      	movs	r0, #2
 8005814:	f7ff ff5e 	bl	80056d4 <report_util_uint8_setting>
  report_util_uint8_setting(3,settings.dir_invert_mask);
 8005818:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 800581c:	2003      	movs	r0, #3
 800581e:	f7ff ff59 	bl	80056d4 <report_util_uint8_setting>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 8005822:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8005826:	2004      	movs	r0, #4
 8005828:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800582c:	f7ff ff52 	bl	80056d4 <report_util_uint8_setting>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8005830:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8005834:	2005      	movs	r0, #5
 8005836:	f3c1 1180 	ubfx	r1, r1, #6, #1
 800583a:	f7ff ff4b 	bl	80056d4 <report_util_uint8_setting>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 800583e:	f994 1048 	ldrsb.w	r1, [r4, #72]	; 0x48
 8005842:	2006      	movs	r0, #6
 8005844:	0fc9      	lsrs	r1, r1, #31
 8005846:	f7ff ff45 	bl	80056d4 <report_util_uint8_setting>
  report_util_uint8_setting(10,settings.status_report_mask);
 800584a:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 800584e:	200a      	movs	r0, #10
 8005850:	f7ff ff40 	bl	80056d4 <report_util_uint8_setting>
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 8005854:	2203      	movs	r2, #3
 8005856:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005858:	200b      	movs	r0, #11
 800585a:	f7ff ff46 	bl	80056ea <report_util_float_setting>
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 800585e:	2203      	movs	r2, #3
 8005860:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005862:	200c      	movs	r0, #12
 8005864:	f7ff ff41 	bl	80056ea <report_util_float_setting>
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 8005868:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800586c:	200d      	movs	r0, #13
 800586e:	f001 0101 	and.w	r1, r1, #1
 8005872:	f7ff ff2f 	bl	80056d4 <report_util_uint8_setting>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8005876:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800587a:	2014      	movs	r0, #20
 800587c:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8005880:	f7ff ff28 	bl	80056d4 <report_util_uint8_setting>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8005884:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8005888:	2015      	movs	r0, #21
 800588a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800588e:	f7ff ff21 	bl	80056d4 <report_util_uint8_setting>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8005892:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8005896:	2016      	movs	r0, #22
 8005898:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800589c:	f7ff ff1a 	bl	80056d4 <report_util_uint8_setting>
  report_util_uint8_setting(23,settings.homing_dir_mask);
 80058a0:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
 80058a4:	2017      	movs	r0, #23
 80058a6:	f7ff ff15 	bl	80056d4 <report_util_uint8_setting>
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 80058aa:	2203      	movs	r2, #3
 80058ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80058ae:	2018      	movs	r0, #24
 80058b0:	f7ff ff1b 	bl	80056ea <report_util_float_setting>
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 80058b4:	2203      	movs	r2, #3
 80058b6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80058b8:	2019      	movs	r0, #25
 80058ba:	f7ff ff16 	bl	80056ea <report_util_float_setting>
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 80058be:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 80058c2:	201a      	movs	r0, #26
 80058c4:	f7ff ff06 	bl	80056d4 <report_util_uint8_setting>
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 80058c8:	2203      	movs	r2, #3
 80058ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80058cc:	201b      	movs	r0, #27
 80058ce:	f7ff ff0c 	bl	80056ea <report_util_float_setting>
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 80058d2:	2200      	movs	r2, #0
 80058d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80058d6:	201e      	movs	r0, #30
 80058d8:	f7ff ff07 	bl	80056ea <report_util_float_setting>
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 80058dc:	2200      	movs	r2, #0
 80058de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80058e0:	201f      	movs	r0, #31
 80058e2:	f7ff ff02 	bl	80056ea <report_util_float_setting>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 80058e6:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80058ea:	2020      	movs	r0, #32
 80058ec:	f3c1 0140 	ubfx	r1, r1, #1, #1
 80058f0:	f7ff fef0 	bl	80056d4 <report_util_uint8_setting>
  #else
    report_util_uint8_setting(32,0);
  #endif

	#ifdef ENABLE_ANALOG_OUTPUT
    report_util_float_setting(40,settings.analog_max,N_DECIMAL_SETTINGVALUE);
 80058f4:	2203      	movs	r2, #3
 80058f6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80058f8:	2028      	movs	r0, #40	; 0x28
 80058fa:	f7ff fef6 	bl	80056ea <report_util_float_setting>
 80058fe:	f04f 0900 	mov.w	r9, #0
	#endif

  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 8005902:	2564      	movs	r5, #100	; 0x64
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.eeacceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8005904:	f8df a060 	ldr.w	sl, [pc, #96]	; 8005968 <report_grbl_settings+0x174>
void report_grbl_settings() {
 8005908:	462c      	mov	r4, r5
 800590a:	f105 0803 	add.w	r8, r5, #3
 800590e:	4e15      	ldr	r6, [pc, #84]	; (8005964 <report_grbl_settings+0x170>)
 8005910:	fa5f f789 	uxtb.w	r7, r9
 8005914:	fa5f f888 	uxtb.w	r8, r8
      switch (set_idx) {
 8005918:	2f02      	cmp	r7, #2
 800591a:	d017      	beq.n	800594c <report_grbl_settings+0x158>
 800591c:	2f03      	cmp	r7, #3
 800591e:	d01c      	beq.n	800595a <report_grbl_settings+0x166>
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8005920:	2203      	movs	r2, #3
      switch (set_idx) {
 8005922:	2f01      	cmp	r7, #1
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8005924:	bf14      	ite	ne
 8005926:	6831      	ldrne	r1, [r6, #0]
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8005928:	68f1      	ldreq	r1, [r6, #12]
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 800592a:	4620      	mov	r0, r4
 800592c:	3401      	adds	r4, #1
 800592e:	b2e4      	uxtb	r4, r4
 8005930:	f7ff fedb 	bl	80056ea <report_util_float_setting>
    for (idx=0; idx<N_AXIS; idx++) {
 8005934:	4544      	cmp	r4, r8
 8005936:	f106 0604 	add.w	r6, r6, #4
 800593a:	d1ed      	bne.n	8005918 <report_grbl_settings+0x124>
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
 800593c:	350a      	adds	r5, #10
 800593e:	b2ed      	uxtb	r5, r5
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8005940:	2d8c      	cmp	r5, #140	; 0x8c
 8005942:	f109 0901 	add.w	r9, r9, #1
 8005946:	d1df      	bne.n	8005908 <report_grbl_settings+0x114>
 8005948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        case 2: report_util_float_setting(val+idx,settings.eeacceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 800594c:	4651      	mov	r1, sl
 800594e:	69b0      	ldr	r0, [r6, #24]
 8005950:	f7fb facc 	bl	8000eec <__aeabi_fdiv>
 8005954:	2203      	movs	r2, #3
 8005956:	4601      	mov	r1, r0
 8005958:	e7e7      	b.n	800592a <report_grbl_settings+0x136>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 800595a:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800595c:	463a      	mov	r2, r7
 800595e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005962:	e7e2      	b.n	800592a <report_grbl_settings+0x136>
 8005964:	20003478 	.word	0x20003478
 8005968:	45610000 	.word	0x45610000

0800596c <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 800596c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 800596e:	480b      	ldr	r0, [pc, #44]	; (800599c <report_probe_parameters+0x30>)
 8005970:	f7ff fa32 	bl	8004dd8 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8005974:	490a      	ldr	r1, [pc, #40]	; (80059a0 <report_probe_parameters+0x34>)
 8005976:	a801      	add	r0, sp, #4
 8005978:	f001 fd32 	bl	80073e0 <system_convert_array_steps_to_mpos>
  report_util_axis_values(print_position);
 800597c:	a801      	add	r0, sp, #4
 800597e:	f7ff fe89 	bl	8005694 <report_util_axis_values>
  serial_write(':');
 8005982:	203a      	movs	r0, #58	; 0x3a
 8005984:	f000 fad1 	bl	8005f2a <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8005988:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <report_probe_parameters+0x38>)
 800598a:	7958      	ldrb	r0, [r3, #5]
 800598c:	f7ff fa2d 	bl	8004dea <print_uint8_base10>
  report_util_feedback_line_feed();
 8005990:	f7ff fe78 	bl	8005684 <report_util_feedback_line_feed>
}
 8005994:	b005      	add	sp, #20
 8005996:	f85d fb04 	ldr.w	pc, [sp], #4
 800599a:	bf00      	nop
 800599c:	08009a61 	.word	0x08009a61
 80059a0:	20002e48 	.word	0x20002e48
 80059a4:	20002e30 	.word	0x20002e30

080059a8 <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 80059a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80059ac:	2500      	movs	r5, #0
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 80059ae:	4e23      	ldr	r6, [pc, #140]	; (8005a3c <report_ngc_parameters+0x94>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 80059b0:	4f23      	ldr	r7, [pc, #140]	; (8005a40 <report_ngc_parameters+0x98>)
      case 7: printPgmString(PSTR("30")); break;
 80059b2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8005a58 <report_ngc_parameters+0xb0>
 80059b6:	b2ec      	uxtb	r4, r5
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 80059b8:	a901      	add	r1, sp, #4
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 fc27 	bl	800620e <settings_read_coord_data>
 80059c0:	b950      	cbnz	r0, 80059d8 <report_ngc_parameters+0x30>
      printPgmString(PSTR("error:"));
 80059c2:	4820      	ldr	r0, [pc, #128]	; (8005a44 <report_ngc_parameters+0x9c>)
 80059c4:	f7ff fa08 	bl	8004dd8 <printString>
      print_uint8_base10(status_code);
 80059c8:	2007      	movs	r0, #7
 80059ca:	f7ff fa0e 	bl	8004dea <print_uint8_base10>
      report_util_line_feed();
 80059ce:	f7ff fe53 	bl	8005678 <report_util_line_feed>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
  printFloat_CoordValue(gc_state.tool_length_offset);
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 80059d2:	b004      	add	sp, #16
 80059d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printPgmString(PSTR("[G"));
 80059d8:	4630      	mov	r0, r6
 80059da:	f7ff f9fd 	bl	8004dd8 <printString>
    switch (coord_select) {
 80059de:	2c06      	cmp	r4, #6
 80059e0:	d007      	beq.n	80059f2 <report_ngc_parameters+0x4a>
 80059e2:	2c07      	cmp	r4, #7
 80059e4:	d027      	beq.n	8005a36 <report_ngc_parameters+0x8e>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 80059e6:	f104 0036 	add.w	r0, r4, #54	; 0x36
 80059ea:	b2c0      	uxtb	r0, r0
 80059ec:	f7ff f9fd 	bl	8004dea <print_uint8_base10>
 80059f0:	e002      	b.n	80059f8 <report_ngc_parameters+0x50>
      case 6: printPgmString(PSTR("28")); break;
 80059f2:	4638      	mov	r0, r7
      case 7: printPgmString(PSTR("30")); break;
 80059f4:	f7ff f9f0 	bl	8004dd8 <printString>
    serial_write(':');
 80059f8:	203a      	movs	r0, #58	; 0x3a
 80059fa:	f000 fa96 	bl	8005f2a <serial_write>
 80059fe:	3501      	adds	r5, #1
    report_util_axis_values(coord_data);
 8005a00:	a801      	add	r0, sp, #4
 8005a02:	f7ff fe47 	bl	8005694 <report_util_axis_values>
    report_util_feedback_line_feed();
 8005a06:	f7ff fe3d 	bl	8005684 <report_util_feedback_line_feed>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8005a0a:	2d08      	cmp	r5, #8
 8005a0c:	d1d3      	bne.n	80059b6 <report_ngc_parameters+0xe>
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8005a0e:	480e      	ldr	r0, [pc, #56]	; (8005a48 <report_ngc_parameters+0xa0>)
 8005a10:	f7ff f9e2 	bl	8004dd8 <printString>
  report_util_axis_values(gc_state.coord_offset);
 8005a14:	480d      	ldr	r0, [pc, #52]	; (8005a4c <report_ngc_parameters+0xa4>)
 8005a16:	f7ff fe3d 	bl	8005694 <report_util_axis_values>
  report_util_feedback_line_feed();
 8005a1a:	f7ff fe33 	bl	8005684 <report_util_feedback_line_feed>
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8005a1e:	480c      	ldr	r0, [pc, #48]	; (8005a50 <report_ngc_parameters+0xa8>)
 8005a20:	f7ff f9da 	bl	8004dd8 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <report_ngc_parameters+0xac>)
 8005a26:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8005a28:	f7ff fa6e 	bl	8004f08 <printFloat_CoordValue>
  report_util_feedback_line_feed();
 8005a2c:	f7ff fe2a 	bl	8005684 <report_util_feedback_line_feed>
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
 8005a30:	f7ff ff9c 	bl	800596c <report_probe_parameters>
 8005a34:	e7cd      	b.n	80059d2 <report_ngc_parameters+0x2a>
      case 7: printPgmString(PSTR("30")); break;
 8005a36:	4640      	mov	r0, r8
 8005a38:	e7dc      	b.n	80059f4 <report_ngc_parameters+0x4c>
 8005a3a:	bf00      	nop
 8005a3c:	08009a4c 	.word	0x08009a4c
 8005a40:	08009a4f 	.word	0x08009a4f
 8005a44:	08009acb 	.word	0x08009acb
 8005a48:	08009a55 	.word	0x08009a55
 8005a4c:	2000329c 	.word	0x2000329c
 8005a50:	08009a5b 	.word	0x08009a5b
 8005a54:	20003264 	.word	0x20003264
 8005a58:	08009a52 	.word	0x08009a52

08005a5c <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8005a5c:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8005a5e:	4c45      	ldr	r4, [pc, #276]	; (8005b74 <report_gcode_modes+0x118>)
  printPgmString(PSTR("[GC:G"));
 8005a60:	4845      	ldr	r0, [pc, #276]	; (8005b78 <report_gcode_modes+0x11c>)
 8005a62:	f7ff f9b9 	bl	8004dd8 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8005a66:	7820      	ldrb	r0, [r4, #0]
 8005a68:	288b      	cmp	r0, #139	; 0x8b
 8005a6a:	d905      	bls.n	8005a78 <report_gcode_modes+0x1c>
    printPgmString(PSTR("38."));
 8005a6c:	4843      	ldr	r0, [pc, #268]	; (8005b7c <report_gcode_modes+0x120>)
 8005a6e:	f7ff f9b3 	bl	8004dd8 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8005a72:	7820      	ldrb	r0, [r4, #0]
 8005a74:	3076      	adds	r0, #118	; 0x76
 8005a76:	b2c0      	uxtb	r0, r0
  } else {
    print_uint8_base10(gc_state.modal.motion);
 8005a78:	f7ff f9b7 	bl	8004dea <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005a7c:	4840      	ldr	r0, [pc, #256]	; (8005b80 <report_gcode_modes+0x124>)
 8005a7e:	f7ff f9ab 	bl	8004dd8 <printString>
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 8005a82:	79a0      	ldrb	r0, [r4, #6]
 8005a84:	3036      	adds	r0, #54	; 0x36
 8005a86:	b2c0      	uxtb	r0, r0
 8005a88:	f7ff f9af 	bl	8004dea <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005a8c:	483c      	ldr	r0, [pc, #240]	; (8005b80 <report_gcode_modes+0x124>)
 8005a8e:	f7ff f9a3 	bl	8004dd8 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 8005a92:	7920      	ldrb	r0, [r4, #4]
 8005a94:	3011      	adds	r0, #17
 8005a96:	b2c0      	uxtb	r0, r0
 8005a98:	f7ff f9a7 	bl	8004dea <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005a9c:	4838      	ldr	r0, [pc, #224]	; (8005b80 <report_gcode_modes+0x124>)
 8005a9e:	f7ff f99b 	bl	8004dd8 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 8005aa2:	78a0      	ldrb	r0, [r4, #2]
 8005aa4:	f1c0 0015 	rsb	r0, r0, #21
 8005aa8:	b2c0      	uxtb	r0, r0
 8005aaa:	f7ff f99e 	bl	8004dea <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005aae:	4834      	ldr	r0, [pc, #208]	; (8005b80 <report_gcode_modes+0x124>)
 8005ab0:	f7ff f992 	bl	8004dd8 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8005ab4:	78e0      	ldrb	r0, [r4, #3]
 8005ab6:	305a      	adds	r0, #90	; 0x5a
 8005ab8:	b2c0      	uxtb	r0, r0
 8005aba:	f7ff f996 	bl	8004dea <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005abe:	4830      	ldr	r0, [pc, #192]	; (8005b80 <report_gcode_modes+0x124>)
 8005ac0:	f7ff f98a 	bl	8004dd8 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8005ac4:	7860      	ldrb	r0, [r4, #1]
 8005ac6:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 8005aca:	b2c0      	uxtb	r0, r0
 8005acc:	f7ff f98d 	bl	8004dea <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8005ad0:	79e3      	ldrb	r3, [r4, #7]
 8005ad2:	b17b      	cbz	r3, 8005af4 <report_gcode_modes+0x98>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005ad4:	482b      	ldr	r0, [pc, #172]	; (8005b84 <report_gcode_modes+0x128>)
 8005ad6:	f7ff f97f 	bl	8004dd8 <printString>
    report_util_gcode_modes_M();
    switch (gc_state.modal.program_flow) {
 8005ada:	79e0      	ldrb	r0, [r4, #7]
 8005adc:	2803      	cmp	r0, #3
 8005ade:	d006      	beq.n	8005aee <report_gcode_modes+0x92>
 8005ae0:	281e      	cmp	r0, #30
 8005ae2:	d001      	beq.n	8005ae8 <report_gcode_modes+0x8c>
 8005ae4:	2802      	cmp	r0, #2
 8005ae6:	d105      	bne.n	8005af4 <report_gcode_modes+0x98>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
      // case PROGRAM_FLOW_OPTIONAL_STOP : serial_write('1'); break; // M1 is ignored and not supported.
      case PROGRAM_FLOW_COMPLETED_M2 : 
      case PROGRAM_FLOW_COMPLETED_M30 : 
        print_uint8_base10(gc_state.modal.program_flow);
 8005ae8:	f7ff f97f 	bl	8004dea <print_uint8_base10>
        break;
 8005aec:	e002      	b.n	8005af4 <report_gcode_modes+0x98>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 8005aee:	2030      	movs	r0, #48	; 0x30
 8005af0:	f000 fa1b 	bl	8005f2a <serial_write>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005af4:	4823      	ldr	r0, [pc, #140]	; (8005b84 <report_gcode_modes+0x128>)
 8005af6:	f7ff f96f 	bl	8004dd8 <printString>
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 8005afa:	7a63      	ldrb	r3, [r4, #9]
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d004      	beq.n	8005b0a <report_gcode_modes+0xae>
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d02f      	beq.n	8005b64 <report_gcode_modes+0x108>
 8005b04:	b923      	cbnz	r3, 8005b10 <report_gcode_modes+0xb4>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
    case SPINDLE_DISABLE : serial_write('5'); break;
 8005b06:	2035      	movs	r0, #53	; 0x35
 8005b08:	e000      	b.n	8005b0c <report_gcode_modes+0xb0>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 8005b0a:	2033      	movs	r0, #51	; 0x33
    case SPINDLE_DISABLE : serial_write('5'); break;
 8005b0c:	f000 fa0d 	bl	8005f2a <serial_write>
  }

  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8005b10:	7a23      	ldrb	r3, [r4, #8]
 8005b12:	b34b      	cbz	r3, 8005b68 <report_gcode_modes+0x10c>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8005b14:	061a      	lsls	r2, r3, #24
 8005b16:	d505      	bpl.n	8005b24 <report_gcode_modes+0xc8>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005b18:	481a      	ldr	r0, [pc, #104]	; (8005b84 <report_gcode_modes+0x128>)
 8005b1a:	f7ff f95d 	bl	8004dd8 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8005b1e:	2037      	movs	r0, #55	; 0x37
 8005b20:	f000 fa03 	bl	8005f2a <serial_write>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8005b24:	7a23      	ldrb	r3, [r4, #8]
 8005b26:	065b      	lsls	r3, r3, #25
 8005b28:	d505      	bpl.n	8005b36 <report_gcode_modes+0xda>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005b2a:	4816      	ldr	r0, [pc, #88]	; (8005b84 <report_gcode_modes+0x128>)
 8005b2c:	f7ff f954 	bl	8004dd8 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8005b30:	2038      	movs	r0, #56	; 0x38
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8005b32:	f000 f9fa 	bl	8005f2a <serial_write>
      report_util_gcode_modes_M();
      print_uint8_base10(56);
    }
  #endif
  
  printPgmString(PSTR(" T"));
 8005b36:	4814      	ldr	r0, [pc, #80]	; (8005b88 <report_gcode_modes+0x12c>)
 8005b38:	f7ff f94e 	bl	8004dd8 <printString>
  print_uint8_base10(gc_state.tool);
 8005b3c:	7e20      	ldrb	r0, [r4, #24]
 8005b3e:	f7ff f954 	bl	8004dea <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8005b42:	4812      	ldr	r0, [pc, #72]	; (8005b8c <report_gcode_modes+0x130>)
 8005b44:	f7ff f948 	bl	8004dd8 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 8005b48:	6960      	ldr	r0, [r4, #20]
 8005b4a:	f7ff f9fd 	bl	8004f48 <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 8005b4e:	4810      	ldr	r0, [pc, #64]	; (8005b90 <report_gcode_modes+0x134>)
 8005b50:	f7ff f942 	bl	8004dd8 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 8005b54:	6920      	ldr	r0, [r4, #16]
 8005b56:	2100      	movs	r1, #0
 8005b58:	f7ff f970 	bl	8004e3c <printFloat>
  #endif

  report_util_feedback_line_feed();
}
 8005b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_feedback_line_feed();
 8005b60:	f7ff bd90 	b.w	8005684 <report_util_feedback_line_feed>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 8005b64:	2034      	movs	r0, #52	; 0x34
 8005b66:	e7d1      	b.n	8005b0c <report_gcode_modes+0xb0>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005b68:	4806      	ldr	r0, [pc, #24]	; (8005b84 <report_gcode_modes+0x128>)
 8005b6a:	f7ff f935 	bl	8004dd8 <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8005b6e:	2039      	movs	r0, #57	; 0x39
 8005b70:	e7df      	b.n	8005b32 <report_gcode_modes+0xd6>
 8005b72:	bf00      	nop
 8005b74:	20003264 	.word	0x20003264
 8005b78:	080099c7 	.word	0x080099c7
 8005b7c:	080099cd 	.word	0x080099cd
 8005b80:	080099d1 	.word	0x080099d1
 8005b84:	080099d4 	.word	0x080099d4
 8005b88:	080099d7 	.word	0x080099d7
 8005b8c:	080099da 	.word	0x080099da
 8005b90:	080099dd 	.word	0x080099dd

08005b94 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4605      	mov	r5, r0
 8005b98:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 8005b9a:	4808      	ldr	r0, [pc, #32]	; (8005bbc <report_startup_line+0x28>)
 8005b9c:	f7ff f91c 	bl	8004dd8 <printString>
  print_uint8_base10(n);
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f7ff f922 	bl	8004dea <print_uint8_base10>
  serial_write('=');
 8005ba6:	203d      	movs	r0, #61	; 0x3d
 8005ba8:	f000 f9bf 	bl	8005f2a <serial_write>
  printString(line);
 8005bac:	4620      	mov	r0, r4
 8005bae:	f7ff f913 	bl	8004dd8 <printString>
  report_util_line_feed();
}
 8005bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  report_util_line_feed();
 8005bb6:	f7ff bd5f 	b.w	8005678 <report_util_line_feed>
 8005bba:	bf00      	nop
 8005bbc:	08009ac3 	.word	0x08009ac3

08005bc0 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	460c      	mov	r4, r1
  serial_write('>');
 8005bc6:	203e      	movs	r0, #62	; 0x3e
 8005bc8:	f000 f9af 	bl	8005f2a <serial_write>
  printString(line);
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f7ff f903 	bl	8004dd8 <printString>
  serial_write(':');
 8005bd2:	203a      	movs	r0, #58	; 0x3a
 8005bd4:	f000 f9a9 	bl	8005f2a <serial_write>
  report_status_message(status_code);
 8005bd8:	4620      	mov	r0, r4
}
 8005bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  report_status_message(status_code);
 8005bde:	f7ff bd91 	b.w	8005704 <report_status_message>
	...

08005be4 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 8005be4:	b510      	push	{r4, lr}
 8005be6:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 8005be8:	4811      	ldr	r0, [pc, #68]	; (8005c30 <report_build_info+0x4c>)
 8005bea:	f7ff f8f5 	bl	8004dd8 <printString>
  printString(line);
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f7ff f8f2 	bl	8004dd8 <printString>
  report_util_feedback_line_feed();
 8005bf4:	f7ff fd46 	bl	8005684 <report_util_feedback_line_feed>
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 8005bf8:	480e      	ldr	r0, [pc, #56]	; (8005c34 <report_build_info+0x50>)
 8005bfa:	f7ff f8ed 	bl	8004dd8 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 8005bfe:	2056      	movs	r0, #86	; 0x56
 8005c00:	f000 f993 	bl	8005f2a <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 8005c04:	204d      	movs	r0, #77	; 0x4d
 8005c06:	f000 f990 	bl	8005f2a <serial_write>
  #endif
  #ifdef HOMING_FORCE_SET_ORIGIN
    serial_write('Z');
  #endif
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    serial_write('H');
 8005c0a:	2048      	movs	r0, #72	; 0x48
 8005c0c:	f000 f98d 	bl	8005f2a <serial_write>
  #ifndef HOMING_INIT_LOCK
    serial_write('L');
  #endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
  serial_write(',');
 8005c10:	202c      	movs	r0, #44	; 0x2c
 8005c12:	f000 f98a 	bl	8005f2a <serial_write>
  print_uint8_base10(BLOCK_BUFFER_SIZE-1);
 8005c16:	20c7      	movs	r0, #199	; 0xc7
 8005c18:	f7ff f8e7 	bl	8004dea <print_uint8_base10>
  serial_write(',');
 8005c1c:	202c      	movs	r0, #44	; 0x2c
 8005c1e:	f000 f984 	bl	8005f2a <serial_write>
  print_uint8_base10(RX_BUFFER_SIZE);
 8005c22:	20fe      	movs	r0, #254	; 0xfe
 8005c24:	f7ff f8e1 	bl	8004dea <print_uint8_base10>

  report_util_feedback_line_feed();
}
 8005c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_feedback_line_feed();
 8005c2c:	f7ff bd2a 	b.w	8005684 <report_util_feedback_line_feed>
 8005c30:	0800990b 	.word	0x0800990b
 8005c34:	08009924 	.word	0x08009924

08005c38 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position,sys_position,sizeof(sys_position));
 8005c3c:	4a9c      	ldr	r2, [pc, #624]	; (8005eb0 <report_realtime_status+0x278>)
{
 8005c3e:	b08b      	sub	sp, #44	; 0x2c
  memcpy(current_position,sys_position,sizeof(sys_position));
 8005c40:	ab01      	add	r3, sp, #4
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,current_position);
 8005c42:	f10d 0910 	add.w	r9, sp, #16
  memcpy(current_position,sys_position,sizeof(sys_position));
 8005c46:	ca07      	ldmia	r2, {r0, r1, r2}

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8005c48:	4c9a      	ldr	r4, [pc, #616]	; (8005eb4 <report_realtime_status+0x27c>)
  memcpy(current_position,sys_position,sizeof(sys_position));
 8005c4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  system_convert_array_steps_to_mpos(print_position,current_position);
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4648      	mov	r0, r9
 8005c52:	f001 fbc5 	bl	80073e0 <system_convert_array_steps_to_mpos>
  serial_write('<');
 8005c56:	203c      	movs	r0, #60	; 0x3c
 8005c58:	f000 f967 	bl	8005f2a <serial_write>
  switch (sys.state) {
 8005c5c:	7823      	ldrb	r3, [r4, #0]
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d04f      	beq.n	8005d02 <report_realtime_status+0xca>
 8005c62:	d831      	bhi.n	8005cc8 <report_realtime_status+0x90>
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d052      	beq.n	8005d0e <report_realtime_status+0xd6>
 8005c68:	d347      	bcc.n	8005cfa <report_realtime_status+0xc2>
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d051      	beq.n	8005d12 <report_realtime_status+0xda>
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d04b      	beq.n	8005d0a <report_realtime_status+0xd2>
      break;
    case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8005c72:	4b91      	ldr	r3, [pc, #580]	; (8005eb8 <report_realtime_status+0x280>)
 8005c74:	f893 7037 	ldrb.w	r7, [r3, #55]	; 0x37
 8005c78:	4698      	mov	r8, r3
 8005c7a:	f017 0701 	ands.w	r7, r7, #1
 8005c7e:	d15a      	bne.n	8005d36 <report_realtime_status+0xfe>
      (sys.report_wco_counter == 0) ) {
    for (idx=0; idx< N_AXIS; idx++) {
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005c80:	2500      	movs	r5, #0
 8005c82:	4e8e      	ldr	r6, [pc, #568]	; (8005ebc <report_realtime_status+0x284>)
      wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
 8005c84:	f10d 0b1c 	add.w	fp, sp, #28
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005c88:	f8d6 a044 	ldr.w	sl, [r6, #68]	; 0x44
 8005c8c:	3628      	adds	r6, #40	; 0x28
 8005c8e:	3604      	adds	r6, #4
      wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
 8005c90:	68f1      	ldr	r1, [r6, #12]
 8005c92:	6830      	ldr	r0, [r6, #0]
 8005c94:	f7fa ff6e 	bl	8000b74 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005c98:	2d02      	cmp	r5, #2
      wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
 8005c9a:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005c9e:	d103      	bne.n	8005ca8 <report_realtime_status+0x70>
 8005ca0:	4651      	mov	r1, sl
 8005ca2:	f7fa ff67 	bl	8000b74 <__addsf3>
 8005ca6:	9009      	str	r0, [sp, #36]	; 0x24
      if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE)) {
 8005ca8:	b93f      	cbnz	r7, 8005cba <report_realtime_status+0x82>
        print_position[idx] -= wco[idx];
 8005caa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005cae:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8005cb2:	f7fa ff5d 	bl	8000b70 <__aeabi_fsub>
 8005cb6:	f849 0025 	str.w	r0, [r9, r5, lsl #2]
 8005cba:	3501      	adds	r5, #1
    for (idx=0; idx< N_AXIS; idx++) {
 8005cbc:	2d03      	cmp	r5, #3
 8005cbe:	d1e6      	bne.n	8005c8e <report_realtime_status+0x56>
      }
    }
  }

  // Report machine position
  if (bit_istrue(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE)) {
 8005cc0:	2f00      	cmp	r7, #0
 8005cc2:	d13b      	bne.n	8005d3c <report_realtime_status+0x104>
    printPgmString(PSTR("|MPos:"));
  } else {
    printPgmString(PSTR("|WPos:"));
 8005cc4:	487e      	ldr	r0, [pc, #504]	; (8005ec0 <report_realtime_status+0x288>)
 8005cc6:	e03a      	b.n	8005d3e <report_realtime_status+0x106>
  switch (sys.state) {
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d01c      	beq.n	8005d06 <report_realtime_status+0xce>
 8005ccc:	d80f      	bhi.n	8005cee <report_realtime_status+0xb6>
 8005cce:	2b10      	cmp	r3, #16
 8005cd0:	d1cf      	bne.n	8005c72 <report_realtime_status+0x3a>
      if (!(sys.suspend & SUSPEND_JOG_CANCEL))
 8005cd2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	dbcb      	blt.n	8005c72 <report_realtime_status+0x3a>
        printPgmString(PSTR("Hold:"));
 8005cda:	487a      	ldr	r0, [pc, #488]	; (8005ec4 <report_realtime_status+0x28c>)
 8005cdc:	f7ff f87c 	bl	8004dd8 <printString>
        if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 8005ce0:	78a3      	ldrb	r3, [r4, #2]
 8005ce2:	07db      	lsls	r3, r3, #31
 8005ce4:	d523      	bpl.n	8005d2e <report_realtime_status+0xf6>
 8005ce6:	2030      	movs	r0, #48	; 0x30
          serial_write('2'); // Retracting
 8005ce8:	f000 f91f 	bl	8005f2a <serial_write>
 8005cec:	e7c1      	b.n	8005c72 <report_realtime_status+0x3a>
  switch (sys.state) {
 8005cee:	2b40      	cmp	r3, #64	; 0x40
 8005cf0:	d011      	beq.n	8005d16 <report_realtime_status+0xde>
 8005cf2:	2b80      	cmp	r3, #128	; 0x80
 8005cf4:	d1bd      	bne.n	8005c72 <report_realtime_status+0x3a>
    case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8005cf6:	4874      	ldr	r0, [pc, #464]	; (8005ec8 <report_realtime_status+0x290>)
 8005cf8:	e000      	b.n	8005cfc <report_realtime_status+0xc4>
    case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 8005cfa:	4874      	ldr	r0, [pc, #464]	; (8005ecc <report_realtime_status+0x294>)
    case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8005cfc:	f7ff f86c 	bl	8004dd8 <printString>
 8005d00:	e7b7      	b.n	8005c72 <report_realtime_status+0x3a>
    case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 8005d02:	4873      	ldr	r0, [pc, #460]	; (8005ed0 <report_realtime_status+0x298>)
 8005d04:	e7fa      	b.n	8005cfc <report_realtime_status+0xc4>
    case STATE_JOG: printPgmString(PSTR("Jog")); break;
 8005d06:	4873      	ldr	r0, [pc, #460]	; (8005ed4 <report_realtime_status+0x29c>)
 8005d08:	e7f8      	b.n	8005cfc <report_realtime_status+0xc4>
    case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8005d0a:	4873      	ldr	r0, [pc, #460]	; (8005ed8 <report_realtime_status+0x2a0>)
 8005d0c:	e7f6      	b.n	8005cfc <report_realtime_status+0xc4>
    case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 8005d0e:	4873      	ldr	r0, [pc, #460]	; (8005edc <report_realtime_status+0x2a4>)
 8005d10:	e7f4      	b.n	8005cfc <report_realtime_status+0xc4>
    case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 8005d12:	4873      	ldr	r0, [pc, #460]	; (8005ee0 <report_realtime_status+0x2a8>)
 8005d14:	e7f2      	b.n	8005cfc <report_realtime_status+0xc4>
      printPgmString(PSTR("Door:"));
 8005d16:	4873      	ldr	r0, [pc, #460]	; (8005ee4 <report_realtime_status+0x2ac>)
 8005d18:	f7ff f85e 	bl	8004dd8 <printString>
      if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8005d1c:	78a3      	ldrb	r3, [r4, #2]
 8005d1e:	071f      	lsls	r7, r3, #28
 8005d20:	d501      	bpl.n	8005d26 <report_realtime_status+0xee>
        serial_write('3'); // Restoring
 8005d22:	2033      	movs	r0, #51	; 0x33
 8005d24:	e7e0      	b.n	8005ce8 <report_realtime_status+0xb0>
        if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005d26:	075e      	lsls	r6, r3, #29
 8005d28:	d503      	bpl.n	8005d32 <report_realtime_status+0xfa>
          if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 8005d2a:	069d      	lsls	r5, r3, #26
 8005d2c:	d5db      	bpl.n	8005ce6 <report_realtime_status+0xae>
        else { serial_write('1'); } // Actively holding
 8005d2e:	2031      	movs	r0, #49	; 0x31
 8005d30:	e7da      	b.n	8005ce8 <report_realtime_status+0xb0>
          serial_write('2'); // Retracting
 8005d32:	2032      	movs	r0, #50	; 0x32
 8005d34:	e7d8      	b.n	8005ce8 <report_realtime_status+0xb0>
  if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8005d36:	7b63      	ldrb	r3, [r4, #13]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0a1      	beq.n	8005c80 <report_realtime_status+0x48>
    printPgmString(PSTR("|MPos:"));
 8005d3c:	486a      	ldr	r0, [pc, #424]	; (8005ee8 <report_realtime_status+0x2b0>)
    printPgmString(PSTR("|WPos:"));
 8005d3e:	f7ff f84b 	bl	8004dd8 <printString>
  }
  report_util_axis_values(print_position);
 8005d42:	4648      	mov	r0, r9
 8005d44:	f7ff fca6 	bl	8005694 <report_util_axis_values>

  // Returns planner and serial read buffer states.
  #ifdef REPORT_FIELD_BUFFER_STATE
    if (bit_istrue(settings.status_report_mask,BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8005d48:	f898 3037 	ldrb.w	r3, [r8, #55]	; 0x37
 8005d4c:	0798      	lsls	r0, r3, #30
 8005d4e:	d50d      	bpl.n	8005d6c <report_realtime_status+0x134>
      printPgmString(PSTR("|Bf:"));
 8005d50:	4866      	ldr	r0, [pc, #408]	; (8005eec <report_realtime_status+0x2b4>)
 8005d52:	f7ff f841 	bl	8004dd8 <printString>
      print_uint8_base10(plan_get_block_buffer_available());
 8005d56:	f7ff f81d 	bl	8004d94 <plan_get_block_buffer_available>
 8005d5a:	f7ff f846 	bl	8004dea <print_uint8_base10>
      serial_write(',');
 8005d5e:	202c      	movs	r0, #44	; 0x2c
 8005d60:	f000 f8e3 	bl	8005f2a <serial_write>
      print_uint8_base10(serial_get_rx_buffer_available());
 8005d64:	f000 f8ce 	bl	8005f04 <serial_get_rx_buffer_available>
 8005d68:	f7ff f83f 	bl	8004dea <print_uint8_base10>
  #endif

  // Report realtime feed speed
  #ifdef REPORT_FIELD_CURRENT_FEED_SPEED
    #ifdef VARIABLE_SPINDLE
      printPgmString(PSTR("|FS:"));
 8005d6c:	4860      	ldr	r0, [pc, #384]	; (8005ef0 <report_realtime_status+0x2b8>)
 8005d6e:	f7ff f833 	bl	8004dd8 <printString>
      printFloat_RateValue(st_get_realtime_rate());
 8005d72:	f001 faa7 	bl	80072c4 <st_get_realtime_rate>
 8005d76:	f7ff f8e7 	bl	8004f48 <printFloat_RateValue>
      serial_write(',');
 8005d7a:	202c      	movs	r0, #44	; 0x2c
 8005d7c:	f000 f8d5 	bl	8005f2a <serial_write>
      printFloat(sys.spindle_speed,N_DECIMAL_RPMVALUE);
 8005d80:	2100      	movs	r1, #0
 8005d82:	6920      	ldr	r0, [r4, #16]
 8005d84:	f7ff f85a 	bl	8004e3c <printFloat>
      printFloat_RateValue(st_get_realtime_rate());
    #endif      
  #endif

  #ifdef REPORT_FIELD_PIN_STATE
    uint8_t lim_pin_state = limits_get_state();
 8005d88:	f7fd ff36 	bl	8003bf8 <limits_get_state>
 8005d8c:	4606      	mov	r6, r0
    uint8_t ctrl_pin_state = system_control_get_state();
 8005d8e:	f001 faa9 	bl	80072e4 <system_control_get_state>
 8005d92:	4605      	mov	r5, r0
    uint8_t prb_pin_state = probe_get_state();
 8005d94:	f7ff f910 	bl	8004fb8 <probe_get_state>
    if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8005d98:	ea46 0305 	orr.w	r3, r6, r5
 8005d9c:	4303      	orrs	r3, r0
 8005d9e:	f013 0fff 	tst.w	r3, #255	; 0xff
    uint8_t prb_pin_state = probe_get_state();
 8005da2:	4607      	mov	r7, r0
    if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8005da4:	d02b      	beq.n	8005dfe <report_realtime_status+0x1c6>
      printPgmString(PSTR("|Pn:"));
 8005da6:	4853      	ldr	r0, [pc, #332]	; (8005ef4 <report_realtime_status+0x2bc>)
 8005da8:	f7ff f816 	bl	8004dd8 <printString>
      if (prb_pin_state) { serial_write('P'); }
 8005dac:	b117      	cbz	r7, 8005db4 <report_realtime_status+0x17c>
 8005dae:	2050      	movs	r0, #80	; 0x50
 8005db0:	f000 f8bb 	bl	8005f2a <serial_write>
      if (lim_pin_state) {
 8005db4:	b176      	cbz	r6, 8005dd4 <report_realtime_status+0x19c>
        if (bit_istrue(lim_pin_state,bit(X_AXIS))) { serial_write('X'); }
 8005db6:	07f1      	lsls	r1, r6, #31
 8005db8:	d502      	bpl.n	8005dc0 <report_realtime_status+0x188>
 8005dba:	2058      	movs	r0, #88	; 0x58
 8005dbc:	f000 f8b5 	bl	8005f2a <serial_write>
        if (bit_istrue(lim_pin_state,bit(Y_AXIS))) { serial_write('Y'); }
 8005dc0:	07b2      	lsls	r2, r6, #30
 8005dc2:	d502      	bpl.n	8005dca <report_realtime_status+0x192>
 8005dc4:	2059      	movs	r0, #89	; 0x59
 8005dc6:	f000 f8b0 	bl	8005f2a <serial_write>
        if (bit_istrue(lim_pin_state,bit(Z_AXIS))) { serial_write('Z'); }
 8005dca:	0773      	lsls	r3, r6, #29
 8005dcc:	d502      	bpl.n	8005dd4 <report_realtime_status+0x19c>
 8005dce:	205a      	movs	r0, #90	; 0x5a
 8005dd0:	f000 f8ab 	bl	8005f2a <serial_write>
          if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
          if (bit_istrue(lim_pin_state, bit(B_AXIS))) { serial_write('B'); }
          if (bit_istrue(lim_pin_state, bit(C_AXIS))) { serial_write('C'); }
        #endif
      }
      if (ctrl_pin_state) {
 8005dd4:	b19d      	cbz	r5, 8005dfe <report_realtime_status+0x1c6>
        #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
          if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_SAFETY_DOOR)) { serial_write('D'); }
 8005dd6:	07ef      	lsls	r7, r5, #31
 8005dd8:	d502      	bpl.n	8005de0 <report_realtime_status+0x1a8>
 8005dda:	2044      	movs	r0, #68	; 0x44
 8005ddc:	f000 f8a5 	bl	8005f2a <serial_write>
        #endif
        if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8005de0:	07ae      	lsls	r6, r5, #30
 8005de2:	d502      	bpl.n	8005dea <report_realtime_status+0x1b2>
 8005de4:	2052      	movs	r0, #82	; 0x52
 8005de6:	f000 f8a0 	bl	8005f2a <serial_write>
        if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8005dea:	0768      	lsls	r0, r5, #29
 8005dec:	d502      	bpl.n	8005df4 <report_realtime_status+0x1bc>
 8005dee:	2048      	movs	r0, #72	; 0x48
 8005df0:	f000 f89b 	bl	8005f2a <serial_write>
        if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 8005df4:	0729      	lsls	r1, r5, #28
 8005df6:	d502      	bpl.n	8005dfe <report_realtime_status+0x1c6>
 8005df8:	2053      	movs	r0, #83	; 0x53
 8005dfa:	f000 f896 	bl	8005f2a <serial_write>
      }
    }
  #endif

  #ifdef REPORT_FIELD_WORK_COORD_OFFSET
    if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 8005dfe:	7b63      	ldrb	r3, [r4, #13]
 8005e00:	b16b      	cbz	r3, 8005e1e <report_realtime_status+0x1e6>
 8005e02:	3b01      	subs	r3, #1
 8005e04:	7363      	strb	r3, [r4, #13]
      report_util_axis_values(wco);
    }
  #endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 8005e06:	7b23      	ldrb	r3, [r4, #12]
 8005e08:	b1db      	cbz	r3, 8005e42 <report_realtime_status+0x20a>
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	7323      	strb	r3, [r4, #12]
        #endif
      }  
    }
  #endif

  serial_write('>');
 8005e0e:	203e      	movs	r0, #62	; 0x3e
 8005e10:	f000 f88b 	bl	8005f2a <serial_write>
  report_util_line_feed();
 8005e14:	f7ff fc30 	bl	8005678 <report_util_line_feed>
}
 8005e18:	b00b      	add	sp, #44	; 0x2c
 8005e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8005e1e:	7823      	ldrb	r3, [r4, #0]
 8005e20:	f013 0f7c 	tst.w	r3, #124	; 0x7c
        sys.report_wco_counter = (REPORT_WCO_REFRESH_BUSY_COUNT-1); // Reset counter for slow refresh
 8005e24:	bf14      	ite	ne
 8005e26:	231d      	movne	r3, #29
      } else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT-1); }
 8005e28:	2309      	moveq	r3, #9
 8005e2a:	7363      	strb	r3, [r4, #13]
      if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8005e2c:	7b23      	ldrb	r3, [r4, #12]
 8005e2e:	b90b      	cbnz	r3, 8005e34 <report_realtime_status+0x1fc>
 8005e30:	2301      	movs	r3, #1
 8005e32:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|WCO:"));
 8005e34:	4830      	ldr	r0, [pc, #192]	; (8005ef8 <report_realtime_status+0x2c0>)
 8005e36:	f7fe ffcf 	bl	8004dd8 <printString>
      report_util_axis_values(wco);
 8005e3a:	a807      	add	r0, sp, #28
 8005e3c:	f7ff fc2a 	bl	8005694 <report_util_axis_values>
 8005e40:	e7e1      	b.n	8005e06 <report_realtime_status+0x1ce>
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8005e42:	7823      	ldrb	r3, [r4, #0]
      printPgmString(PSTR("|Ov:"));
 8005e44:	482d      	ldr	r0, [pc, #180]	; (8005efc <report_realtime_status+0x2c4>)
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8005e46:	f013 0f7c 	tst.w	r3, #124	; 0x7c
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT-1); // Reset counter for slow refresh
 8005e4a:	bf14      	ite	ne
 8005e4c:	2313      	movne	r3, #19
      } else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT-1); }
 8005e4e:	2309      	moveq	r3, #9
 8005e50:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|Ov:"));
 8005e52:	f7fe ffc1 	bl	8004dd8 <printString>
      print_uint8_base10(sys.f_override);
 8005e56:	7a20      	ldrb	r0, [r4, #8]
 8005e58:	f7fe ffc7 	bl	8004dea <print_uint8_base10>
      serial_write(',');
 8005e5c:	202c      	movs	r0, #44	; 0x2c
 8005e5e:	f000 f864 	bl	8005f2a <serial_write>
      print_uint8_base10(sys.r_override);
 8005e62:	7a60      	ldrb	r0, [r4, #9]
 8005e64:	f7fe ffc1 	bl	8004dea <print_uint8_base10>
      serial_write(',');
 8005e68:	202c      	movs	r0, #44	; 0x2c
 8005e6a:	f000 f85e 	bl	8005f2a <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 8005e6e:	7aa0      	ldrb	r0, [r4, #10]
 8005e70:	f7fe ffbb 	bl	8004dea <print_uint8_base10>
      uint8_t sp_state = spindle_get_state();
 8005e74:	f000 fb5e 	bl	8006534 <spindle_get_state>
 8005e78:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 8005e7a:	f7fc fd99 	bl	80029b0 <coolant_get_state>
 8005e7e:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 8005e80:	b90d      	cbnz	r5, 8005e86 <report_realtime_status+0x24e>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d0c3      	beq.n	8005e0e <report_realtime_status+0x1d6>
        printPgmString(PSTR("|A:"));
 8005e86:	481e      	ldr	r0, [pc, #120]	; (8005f00 <report_realtime_status+0x2c8>)
 8005e88:	f7fe ffa6 	bl	8004dd8 <printString>
        if (sp_state) { // != SPINDLE_STATE_DISABLE
 8005e8c:	b12d      	cbz	r5, 8005e9a <report_realtime_status+0x262>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8005e8e:	2d01      	cmp	r5, #1
 8005e90:	bf0c      	ite	eq
 8005e92:	2053      	moveq	r0, #83	; 0x53
              else { serial_write('C'); } // CCW
 8005e94:	2043      	movne	r0, #67	; 0x43
 8005e96:	f000 f848 	bl	8005f2a <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8005e9a:	07e2      	lsls	r2, r4, #31
 8005e9c:	d502      	bpl.n	8005ea4 <report_realtime_status+0x26c>
 8005e9e:	2046      	movs	r0, #70	; 0x46
 8005ea0:	f000 f843 	bl	8005f2a <serial_write>
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 8005ea4:	07a3      	lsls	r3, r4, #30
 8005ea6:	d5b2      	bpl.n	8005e0e <report_realtime_status+0x1d6>
 8005ea8:	204d      	movs	r0, #77	; 0x4d
 8005eaa:	f000 f83e 	bl	8005f2a <serial_write>
 8005eae:	e7ae      	b.n	8005e0e <report_realtime_status+0x1d6>
 8005eb0:	20002e54 	.word	0x20002e54
 8005eb4:	20002e30 	.word	0x20002e30
 8005eb8:	20003478 	.word	0x20003478
 8005ebc:	20003264 	.word	0x20003264
 8005ec0:	08009a9e 	.word	0x08009a9e
 8005ec4:	08009a70 	.word	0x08009a70
 8005ec8:	08009a91 	.word	0x08009a91
 8005ecc:	08009a67 	.word	0x08009a67
 8005ed0:	08009a6c 	.word	0x08009a6c
 8005ed4:	08009a76 	.word	0x08009a76
 8005ed8:	08009a7a 	.word	0x08009a7a
 8005edc:	08009a7f 	.word	0x08009a7f
 8005ee0:	08009a85 	.word	0x08009a85
 8005ee4:	08009a8b 	.word	0x08009a8b
 8005ee8:	08009a97 	.word	0x08009a97
 8005eec:	08009aa5 	.word	0x08009aa5
 8005ef0:	08009aaa 	.word	0x08009aaa
 8005ef4:	08009aaf 	.word	0x08009aaf
 8005ef8:	08009ab4 	.word	0x08009ab4
 8005efc:	08009aba 	.word	0x08009aba
 8005f00:	08009abf 	.word	0x08009abf

08005f04 <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8005f06:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8005f08:	781b      	ldrb	r3, [r3, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8005f0a:	7812      	ldrb	r2, [r2, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8005f0c:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	bf94      	ite	ls
 8005f12:	1e98      	subls	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 8005f14:	f103 30ff 	addhi.w	r0, r3, #4294967295
 8005f18:	1a80      	subs	r0, r0, r2
 8005f1a:	b2c0      	uxtb	r0, r0
}
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	200029a9 	.word	0x200029a9
 8005f24:	200029a8 	.word	0x200029a8

08005f28 <serial_init>:
  if (serial_tx_buffer_head >= ttail) { return(serial_tx_buffer_head-ttail); }
  return (TX_RING_BUFFER - (ttail-serial_tx_buffer_head));
}

void serial_init()
{
 8005f28:	4770      	bx	lr

08005f2a <serial_write>:

// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data)
{
#ifdef STM32
	uart_sendch(data);
 8005f2a:	f001 bcf3 	b.w	8007914 <uart_sendch>
	...

08005f30 <serial_read>:
#endif

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8005f30:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <serial_read+0x24>)
  if (serial_rx_buffer_head == tail) {
 8005f32:	4909      	ldr	r1, [pc, #36]	; (8005f58 <serial_read+0x28>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8005f34:	7813      	ldrb	r3, [r2, #0]
  if (serial_rx_buffer_head == tail) {
 8005f36:	7809      	ldrb	r1, [r1, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8005f38:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head == tail) {
 8005f3a:	4299      	cmp	r1, r3
 8005f3c:	d008      	beq.n	8005f50 <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];
 8005f3e:	4907      	ldr	r1, [pc, #28]	; (8005f5c <serial_read+0x2c>)
 8005f40:	5cc8      	ldrb	r0, [r1, r3]

    tail++;
 8005f42:	3301      	adds	r3, #1
 8005f44:	b2db      	uxtb	r3, r3
    if (tail == RX_RING_BUFFER) { tail = 0; }
 8005f46:	2bfe      	cmp	r3, #254	; 0xfe
 8005f48:	bf08      	it	eq
 8005f4a:	2300      	moveq	r3, #0
    serial_rx_buffer_tail = tail;
 8005f4c:	7013      	strb	r3, [r2, #0]

    return data;
 8005f4e:	4770      	bx	lr
    return SERIAL_NO_DATA;
 8005f50:	20ff      	movs	r0, #255	; 0xff
  }
}
 8005f52:	4770      	bx	lr
 8005f54:	200029a9 	.word	0x200029a9
 8005f58:	200029a8 	.word	0x200029a8
 8005f5c:	2000337a 	.word	0x2000337a

08005f60 <HandleUartIT>:
void HandleUartIT(uint8_t data)
{
	uint8_t next_head;
  // Pick off realtime command characters directly from the serial stream. These characters are
  // not passed into the main buffer, but these set system state flag bits for realtime execution.
	switch (data) {
 8005f60:	2821      	cmp	r0, #33	; 0x21
{
 8005f62:	b410      	push	{r4}
	switch (data) {
 8005f64:	d025      	beq.n	8005fb2 <HandleUartIT+0x52>
 8005f66:	d817      	bhi.n	8005f98 <HandleUartIT+0x38>
 8005f68:	2818      	cmp	r0, #24
 8005f6a:	d01b      	beq.n	8005fa4 <HandleUartIT+0x44>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
    default :
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 8005f6c:	0602      	lsls	r2, r0, #24
 8005f6e:	d54e      	bpl.n	800600e <HandleUartIT+0xae>
        switch(data) {
 8005f70:	3884      	subs	r0, #132	; 0x84
 8005f72:	281d      	cmp	r0, #29
 8005f74:	d859      	bhi.n	800602a <HandleUartIT+0xca>
 8005f76:	e8df f000 	tbb	[pc, r0]
 8005f7a:	201e      	.short	0x201e
 8005f7c:	58585858 	.word	0x58585858
 8005f80:	58585858 	.word	0x58585858
 8005f84:	2a265858 	.word	0x2a265858
 8005f88:	32302e2c 	.word	0x32302e2c
 8005f8c:	38583634 	.word	0x38583634
 8005f90:	42403e3c 	.word	0x42403e3c
 8005f94:	48465844 	.word	0x48465844
	switch (data) {
 8005f98:	283f      	cmp	r0, #63	; 0x3f
 8005f9a:	d006      	beq.n	8005faa <HandleUartIT+0x4a>
 8005f9c:	287e      	cmp	r0, #126	; 0x7e
 8005f9e:	d1e5      	bne.n	8005f6c <HandleUartIT+0xc>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 8005fa0:	2002      	movs	r0, #2
 8005fa2:	e003      	b.n	8005fac <HandleUartIT+0x4c>
          serial_rx_buffer[serial_rx_buffer_head] = data;
          serial_rx_buffer_head = next_head;
        }
      }
  }
}
 8005fa4:	bc10      	pop	{r4}
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 8005fa6:	f7fe ba21 	b.w	80043ec <mc_reset>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 8005faa:	2001      	movs	r0, #1
}
 8005fac:	bc10      	pop	{r4}
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 8005fae:	f001 ba43 	b.w	8007438 <system_set_exec_state_flag>
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 8005fb2:	2008      	movs	r0, #8
 8005fb4:	e7fa      	b.n	8005fac <HandleUartIT+0x4c>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 8005fb6:	2020      	movs	r0, #32
 8005fb8:	e7f8      	b.n	8005fac <HandleUartIT+0x4c>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 8005fba:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <HandleUartIT+0xd0>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	069b      	lsls	r3, r3, #26
 8005fc0:	d533      	bpl.n	800602a <HandleUartIT+0xca>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 8005fc2:	2040      	movs	r0, #64	; 0x40
 8005fc4:	e7f2      	b.n	8005fac <HandleUartIT+0x4c>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 8005fc6:	2001      	movs	r0, #1
}
 8005fc8:	bc10      	pop	{r4}
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 8005fca:	f001 bbd3 	b.w	8007774 <system_set_exec_motion_override_flag>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 8005fce:	2002      	movs	r0, #2
 8005fd0:	e7fa      	b.n	8005fc8 <HandleUartIT+0x68>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 8005fd2:	2004      	movs	r0, #4
 8005fd4:	e7f8      	b.n	8005fc8 <HandleUartIT+0x68>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 8005fd6:	2008      	movs	r0, #8
 8005fd8:	e7f6      	b.n	8005fc8 <HandleUartIT+0x68>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 8005fda:	2010      	movs	r0, #16
 8005fdc:	e7f4      	b.n	8005fc8 <HandleUartIT+0x68>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 8005fde:	2020      	movs	r0, #32
 8005fe0:	e7f2      	b.n	8005fc8 <HandleUartIT+0x68>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 8005fe2:	2040      	movs	r0, #64	; 0x40
 8005fe4:	e7f0      	b.n	8005fc8 <HandleUartIT+0x68>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 8005fe6:	2080      	movs	r0, #128	; 0x80
 8005fe8:	e7ee      	b.n	8005fc8 <HandleUartIT+0x68>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 8005fea:	2001      	movs	r0, #1
}
 8005fec:	bc10      	pop	{r4}
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8005fee:	f001 bbcb 	b.w	8007788 <system_set_exec_accessory_override_flag>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 8005ff2:	2002      	movs	r0, #2
 8005ff4:	e7fa      	b.n	8005fec <HandleUartIT+0x8c>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 8005ff6:	2004      	movs	r0, #4
 8005ff8:	e7f8      	b.n	8005fec <HandleUartIT+0x8c>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 8005ffa:	2008      	movs	r0, #8
 8005ffc:	e7f6      	b.n	8005fec <HandleUartIT+0x8c>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 8005ffe:	2010      	movs	r0, #16
 8006000:	e7f4      	b.n	8005fec <HandleUartIT+0x8c>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 8006002:	2020      	movs	r0, #32
 8006004:	e7f2      	b.n	8005fec <HandleUartIT+0x8c>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 8006006:	2040      	movs	r0, #64	; 0x40
 8006008:	e7f0      	b.n	8005fec <HandleUartIT+0x8c>
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 800600a:	2080      	movs	r0, #128	; 0x80
 800600c:	e7ee      	b.n	8005fec <HandleUartIT+0x8c>
        next_head = serial_rx_buffer_head + 1;
 800600e:	4a09      	ldr	r2, [pc, #36]	; (8006034 <HandleUartIT+0xd4>)
        if (next_head != serial_rx_buffer_tail) {
 8006010:	4c09      	ldr	r4, [pc, #36]	; (8006038 <HandleUartIT+0xd8>)
        next_head = serial_rx_buffer_head + 1;
 8006012:	7811      	ldrb	r1, [r2, #0]
        if (next_head != serial_rx_buffer_tail) {
 8006014:	7824      	ldrb	r4, [r4, #0]
        next_head = serial_rx_buffer_head + 1;
 8006016:	1c4b      	adds	r3, r1, #1
 8006018:	b2db      	uxtb	r3, r3
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 800601a:	2bfe      	cmp	r3, #254	; 0xfe
 800601c:	bf08      	it	eq
 800601e:	2300      	moveq	r3, #0
        if (next_head != serial_rx_buffer_tail) {
 8006020:	42a3      	cmp	r3, r4
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8006022:	bf1e      	ittt	ne
 8006024:	4c05      	ldrne	r4, [pc, #20]	; (800603c <HandleUartIT+0xdc>)
          serial_rx_buffer_head = next_head;
 8006026:	7013      	strbne	r3, [r2, #0]
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8006028:	5460      	strbne	r0, [r4, r1]
}
 800602a:	bc10      	pop	{r4}
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	20002e30 	.word	0x20002e30
 8006034:	200029a8 	.word	0x200029a8
 8006038:	200029a9 	.word	0x200029a9
 800603c:	2000337a 	.word	0x2000337a

08006040 <serial_reset_read_buffer>:
}
#endif

void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 8006040:	4b02      	ldr	r3, [pc, #8]	; (800604c <serial_reset_read_buffer+0xc>)
 8006042:	781a      	ldrb	r2, [r3, #0]
 8006044:	4b02      	ldr	r3, [pc, #8]	; (8006050 <serial_reset_read_buffer+0x10>)
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	200029a8 	.word	0x200029a8
 8006050:	200029a9 	.word	0x200029a9

08006054 <settings_store_startup_line>:



// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4605      	mov	r5, r0
 8006058:	460c      	mov	r4, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 800605a:	f7ff fafb 	bl	8005654 <protocol_buffer_synchronize>
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 800605e:	2351      	movs	r3, #81	; 0x51
 8006060:	fb03 f005 	mul.w	r0, r3, r5
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8006064:	4621      	mov	r1, r4
}
 8006066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 800606a:	2250      	movs	r2, #80	; 0x50
 800606c:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006070:	f7fc bd58 	b.w	8002b24 <memcpy_to_eeprom_with_checksum>

08006074 <settings_store_build_info>:
// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8006074:	4601      	mov	r1, r0
 8006076:	2250      	movs	r2, #80	; 0x50
 8006078:	f240 30ae 	movw	r0, #942	; 0x3ae
 800607c:	f7fc bd52 	b.w	8002b24 <memcpy_to_eeprom_with_checksum>

08006080 <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4605      	mov	r5, r0
 8006084:	460c      	mov	r4, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
 8006086:	f7ff fae5 	bl	8005654 <protocol_buffer_synchronize>
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 800608a:	230d      	movs	r3, #13
 800608c:	fb03 f005 	mul.w	r0, r3, r5
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006090:	4621      	mov	r1, r4
}
 8006092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006096:	220c      	movs	r2, #12
 8006098:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800609c:	f7fc bd42 	b.w	8002b24 <memcpy_to_eeprom_with_checksum>

080060a0 <write_global_settings>:


// Method to store Grbl global settings struct and version number into EEPROM
// NOTE: This function can only be called in IDLE state.
void write_global_settings()
{
 80060a0:	b508      	push	{r3, lr}
  eeprom_put_char(0, SETTINGS_VERSION);
 80060a2:	210d      	movs	r1, #13
 80060a4:	2000      	movs	r0, #0
 80060a6:	f7fc fd37 	bl	8002b18 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
}
 80060aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 80060ae:	2260      	movs	r2, #96	; 0x60
 80060b0:	4901      	ldr	r1, [pc, #4]	; (80060b8 <write_global_settings+0x18>)
 80060b2:	2001      	movs	r0, #1
 80060b4:	f7fc bd36 	b.w	8002b24 <memcpy_to_eeprom_with_checksum>
 80060b8:	20003478 	.word	0x20003478

080060bc <settings_restore>:


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 80060bc:	b530      	push	{r4, r5, lr}
 80060be:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 80060c0:	07e8      	lsls	r0, r5, #31
void settings_restore(uint8_t restore_flag) {
 80060c2:	b085      	sub	sp, #20
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 80060c4:	d537      	bpl.n	8006136 <settings_restore+0x7a>
//    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    settings.fpulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 80060c6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80060ca:	4b33      	ldr	r3, [pc, #204]	; (8006198 <settings_restore+0xdc>)
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 80060cc:	2101      	movs	r1, #1
    settings.fpulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    settings.dir_invert_mask = DEFAULT_DIRECTION_INVERT_MASK;
 80060d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;

    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;

    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 80060da:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 80060de:	4a2f      	ldr	r2, [pc, #188]	; (800619c <settings_restore+0xe0>)
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 80060e0:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 80060e4:	64da      	str	r2, [r3, #76]	; 0x4c
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 80060e6:	4a2e      	ldr	r2, [pc, #184]	; (80061a0 <settings_restore+0xe4>)
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 80060e8:	f883 1037 	strb.w	r1, [r3, #55]	; 0x37
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 80060ec:	651a      	str	r2, [r3, #80]	; 0x50
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 80060ee:	22fa      	movs	r2, #250	; 0xfa
 80060f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 80060f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80060f8:	659a      	str	r2, [r3, #88]	; 0x58

    settings.analog_max = DEFAULT_ANALOG_MAX;
 80060fa:	4a2a      	ldr	r2, [pc, #168]	; (80061a4 <settings_restore+0xe8>)
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 80060fc:	492a      	ldr	r1, [pc, #168]	; (80061a8 <settings_restore+0xec>)
    settings.analog_max = DEFAULT_ANALOG_MAX;
 80060fe:	65da      	str	r2, [r3, #92]	; 0x5c
    if (DEFAULT_INVERT_ST_ENABLE) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
    if (DEFAULT_HARD_LIMIT_ENABLE) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
    if (DEFAULT_HOMING_ENABLE) { settings.flags |= BITFLAG_HOMING_ENABLE; }
    if (DEFAULT_SOFT_LIMIT_ENABLE) { settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE; }
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
    if (DEFAULT_INVERT_PROBE_PIN) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8006100:	228c      	movs	r2, #140	; 0x8c
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8006102:	6399      	str	r1, [r3, #56]	; 0x38
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8006104:	4929      	ldr	r1, [pc, #164]	; (80061ac <settings_restore+0xf0>)
    if (DEFAULT_INVERT_PROBE_PIN) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8006106:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 800610a:	63d9      	str	r1, [r3, #60]	; 0x3c
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 800610c:	4928      	ldr	r1, [pc, #160]	; (80061b0 <settings_restore+0xf4>)

    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 800610e:	4a29      	ldr	r2, [pc, #164]	; (80061b4 <settings_restore+0xf8>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8006110:	6419      	str	r1, [r3, #64]	; 0x40
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8006112:	2100      	movs	r1, #0
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8006114:	601a      	str	r2, [r3, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8006116:	605a      	str	r2, [r3, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8006118:	609a      	str	r2, [r3, #8]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 800611a:	60da      	str	r2, [r3, #12]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 800611c:	611a      	str	r2, [r3, #16]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 800611e:	615a      	str	r2, [r3, #20]
    settings.eeacceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8006120:	4a25      	ldr	r2, [pc, #148]	; (80061b8 <settings_restore+0xfc>)
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8006122:	6459      	str	r1, [r3, #68]	; 0x44
    settings.eeacceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8006124:	619a      	str	r2, [r3, #24]
    settings.eeacceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8006126:	61da      	str	r2, [r3, #28]
    settings.eeacceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8006128:	621a      	str	r2, [r3, #32]
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 800612a:	4a24      	ldr	r2, [pc, #144]	; (80061bc <settings_restore+0x100>)
 800612c:	625a      	str	r2, [r3, #36]	; 0x24
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 800612e:	629a      	str	r2, [r3, #40]	; 0x28
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8006130:	62da      	str	r2, [r3, #44]	; 0x2c
      settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
      settings.max_travel[B_AXIS] = (-DEFAULT_B_MAX_TRAVEL);
      settings.max_travel[C_AXIS] = (-DEFAULT_C_MAX_TRAVEL);
    #endif

    write_global_settings();
 8006132:	f7ff ffb5 	bl	80060a0 <write_global_settings>
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 8006136:	07a9      	lsls	r1, r5, #30
 8006138:	d50a      	bpl.n	8006150 <settings_restore+0x94>
    uint8_t idx;
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
 800613a:	2400      	movs	r4, #0
 800613c:	9401      	str	r4, [sp, #4]
 800613e:	9402      	str	r4, [sp, #8]
 8006140:	9403      	str	r4, [sp, #12]
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8006142:	b2e0      	uxtb	r0, r4
 8006144:	a901      	add	r1, sp, #4
 8006146:	3401      	adds	r4, #1
 8006148:	f7ff ff9a 	bl	8006080 <settings_write_coord_data>
 800614c:	2c08      	cmp	r4, #8
 800614e:	d1f8      	bne.n	8006142 <settings_restore+0x86>
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8006150:	076a      	lsls	r2, r5, #29
 8006152:	d513      	bpl.n	800617c <settings_restore+0xc0>
    #if N_STARTUP_LINE > 0
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8006154:	2100      	movs	r1, #0
 8006156:	f44f 7040 	mov.w	r0, #768	; 0x300
 800615a:	f7fc fcdd 	bl	8002b18 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 800615e:	2100      	movs	r1, #0
 8006160:	f240 3001 	movw	r0, #769	; 0x301
 8006164:	f7fc fcd8 	bl	8002b18 <eeprom_put_char>
    #endif
    #if N_STARTUP_LINE > 1
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8006168:	2100      	movs	r1, #0
 800616a:	f240 3051 	movw	r0, #849	; 0x351
 800616e:	f7fc fcd3 	bl	8002b18 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8006172:	2100      	movs	r1, #0
 8006174:	f240 3052 	movw	r0, #850	; 0x352
 8006178:	f7fc fcce 	bl	8002b18 <eeprom_put_char>
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 800617c:	072b      	lsls	r3, r5, #28
 800617e:	d509      	bpl.n	8006194 <settings_restore+0xd8>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8006180:	2100      	movs	r1, #0
 8006182:	f240 30ae 	movw	r0, #942	; 0x3ae
 8006186:	f7fc fcc7 	bl	8002b18 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 800618a:	2100      	movs	r1, #0
 800618c:	f240 30af 	movw	r0, #943	; 0x3af
 8006190:	f7fc fcc2 	bl	8002b18 <eeprom_put_char>
  }
}
 8006194:	b005      	add	sp, #20
 8006196:	bd30      	pop	{r4, r5, pc}
 8006198:	20003478 	.word	0x20003478
 800619c:	41c80000 	.word	0x41c80000
 80061a0:	43fa0000 	.word	0x43fa0000
 80061a4:	461c4000 	.word	0x461c4000
 80061a8:	3c23d70a 	.word	0x3c23d70a
 80061ac:	3b03126f 	.word	0x3b03126f
 80061b0:	459c4000 	.word	0x459c4000
 80061b4:	46c35000 	.word	0x46c35000
 80061b8:	4bdbba00 	.word	0x4bdbba00
 80061bc:	c3480000 	.word	0xc3480000

080061c0 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	460d      	mov	r5, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 80061c4:	2151      	movs	r1, #81	; 0x51
 80061c6:	4341      	muls	r1, r0
{
 80061c8:	4606      	mov	r6, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 80061ca:	2250      	movs	r2, #80	; 0x50
 80061cc:	f501 7140 	add.w	r1, r1, #768	; 0x300
 80061d0:	4628      	mov	r0, r5
 80061d2:	f7fc fcc1 	bl	8002b58 <memcpy_from_eeprom_with_checksum>
 80061d6:	4604      	mov	r4, r0
 80061d8:	b930      	cbnz	r0, 80061e8 <settings_read_startup_line+0x28>
    // Reset line with default value
    line[0] = 0; // Empty line
 80061da:	7028      	strb	r0, [r5, #0]
    settings_store_startup_line(n, line);
 80061dc:	4629      	mov	r1, r5
 80061de:	4630      	mov	r0, r6
 80061e0:	f7ff ff38 	bl	8006054 <settings_store_startup_line>
    return(false);
 80061e4:	4620      	mov	r0, r4
 80061e6:	bd70      	pop	{r4, r5, r6, pc}
  }
  return(true);
 80061e8:	2001      	movs	r0, #1
}
 80061ea:	bd70      	pop	{r4, r5, r6, pc}

080061ec <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 80061ec:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 80061ee:	2250      	movs	r2, #80	; 0x50
 80061f0:	f240 31ae 	movw	r1, #942	; 0x3ae
{
 80061f4:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 80061f6:	f7fc fcaf 	bl	8002b58 <memcpy_from_eeprom_with_checksum>
 80061fa:	4604      	mov	r4, r0
 80061fc:	b928      	cbnz	r0, 800620a <settings_read_build_info+0x1e>
    // Reset line with default value
    line[0] = 0; // Empty line
 80061fe:	7028      	strb	r0, [r5, #0]
    settings_store_build_info(line);
 8006200:	4628      	mov	r0, r5
 8006202:	f7ff ff37 	bl	8006074 <settings_store_build_info>
    return(false);
 8006206:	4620      	mov	r0, r4
 8006208:	bd38      	pop	{r3, r4, r5, pc}
  }
  return(true);
 800620a:	2001      	movs	r0, #1
}
 800620c:	bd38      	pop	{r3, r4, r5, pc}

0800620e <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 800620e:	b570      	push	{r4, r5, r6, lr}
 8006210:	460d      	mov	r5, r1
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8006212:	210d      	movs	r1, #13
 8006214:	4341      	muls	r1, r0
{
 8006216:	4606      	mov	r6, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 8006218:	220c      	movs	r2, #12
 800621a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800621e:	4628      	mov	r0, r5
 8006220:	f7fc fc9a 	bl	8002b58 <memcpy_from_eeprom_with_checksum>
 8006224:	4604      	mov	r4, r0
 8006226:	b948      	cbnz	r0, 800623c <settings_read_coord_data+0x2e>
    // Reset with default zero vector
    //clear_vector_float(coord_data);
		coord_data[X_AXIS] = 0.0f;
 8006228:	2300      	movs	r3, #0
    #if ( defined(STM32F1_6) || defined(STM32F4_6) )
      coord_data[A_AXIS] = 0.0f;
      coord_data[B_AXIS] = 0.0f;
      coord_data[C_AXIS] = 0.0f;
    #endif
    settings_write_coord_data(coord_select,coord_data);
 800622a:	4630      	mov	r0, r6
		coord_data[X_AXIS] = 0.0f;
 800622c:	602b      	str	r3, [r5, #0]
		coord_data[Y_AXIS] = 0.0f;
 800622e:	606b      	str	r3, [r5, #4]
		coord_data[Z_AXIS] = 0.0f;
 8006230:	60ab      	str	r3, [r5, #8]
    settings_write_coord_data(coord_select,coord_data);
 8006232:	4629      	mov	r1, r5
 8006234:	f7ff ff24 	bl	8006080 <settings_write_coord_data>
    return(false);
 8006238:	4620      	mov	r0, r4
 800623a:	bd70      	pop	{r4, r5, r6, pc}
  }
  return(true);
 800623c:	2001      	movs	r0, #1
}
 800623e:	bd70      	pop	{r4, r5, r6, pc}

08006240 <read_global_settings>:


// Reads Grbl global settings struct from EEPROM.
uint8_t read_global_settings() {
 8006240:	b508      	push	{r3, lr}
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
 8006242:	2000      	movs	r0, #0
 8006244:	f7fc fc62 	bl	8002b0c <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 8006248:	280d      	cmp	r0, #13
 800624a:	d108      	bne.n	800625e <read_global_settings+0x1e>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 800624c:	2260      	movs	r2, #96	; 0x60
 800624e:	2101      	movs	r1, #1
 8006250:	4804      	ldr	r0, [pc, #16]	; (8006264 <read_global_settings+0x24>)
 8006252:	f7fc fc81 	bl	8002b58 <memcpy_from_eeprom_with_checksum>
      return(false);
    }
  } else {
    return(false);
  }
  return(true);
 8006256:	3000      	adds	r0, #0
 8006258:	bf18      	it	ne
 800625a:	2001      	movne	r0, #1
 800625c:	bd08      	pop	{r3, pc}
    return(false);
 800625e:	2000      	movs	r0, #0
}
 8006260:	bd08      	pop	{r3, pc}
 8006262:	bf00      	nop
 8006264:	20003478 	.word	0x20003478

08006268 <settings_store_global_setting>:


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	460d      	mov	r5, r1
 800626c:	4604      	mov	r4, r0
  if (value < 0.0) { return(STATUS_NEGATIVE_VALUE); }
 800626e:	2100      	movs	r1, #0
 8006270:	4628      	mov	r0, r5
 8006272:	f7fa ff25 	bl	80010c0 <__aeabi_fcmplt>
 8006276:	2800      	cmp	r0, #0
 8006278:	f040 80f5 	bne.w	8006466 <settings_store_global_setting+0x1fe>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 800627c:	2c63      	cmp	r4, #99	; 0x63
 800627e:	d92f      	bls.n	80062e0 <settings_store_global_setting+0x78>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 8006280:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
        parameter -= AXIS_SETTINGS_INCREMENT;
 8006284:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8006286:	2b02      	cmp	r3, #2
 8006288:	b2c2      	uxtb	r2, r0
 800628a:	d820      	bhi.n	80062ce <settings_store_global_setting+0x66>
        switch (set_idx) {
 800628c:	2a02      	cmp	r2, #2
 800628e:	4e7a      	ldr	r6, [pc, #488]	; (8006478 <settings_store_global_setting+0x210>)
 8006290:	d00c      	beq.n	80062ac <settings_store_global_setting+0x44>
 8006292:	2a03      	cmp	r2, #3
 8006294:	d015      	beq.n	80062c2 <settings_store_global_setting+0x5a>
 8006296:	2a01      	cmp	r2, #1
            settings.max_rate[parameter] = value;
 8006298:	bf0a      	itet	eq
 800629a:	eb06 0383 	addeq.w	r3, r6, r3, lsl #2
            settings.steps_per_mm[parameter] = value;
 800629e:	f846 5023 	strne.w	r5, [r6, r3, lsl #2]
            settings.max_rate[parameter] = value;
 80062a2:	60dd      	streq	r5, [r3, #12]

      default:
        return(STATUS_INVALID_STATEMENT);
    }
  }
  write_global_settings();
 80062a4:	f7ff fefc 	bl	80060a0 <write_global_settings>
  return(STATUS_OK);
 80062a8:	2000      	movs	r0, #0
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
          case 2: settings.eeacceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 80062ac:	4973      	ldr	r1, [pc, #460]	; (800647c <settings_store_global_setting+0x214>)
 80062ae:	4628      	mov	r0, r5
 80062b0:	1d9c      	adds	r4, r3, #6
 80062b2:	f7fa fd67 	bl	8000d84 <__aeabi_fmul>
 80062b6:	4971      	ldr	r1, [pc, #452]	; (800647c <settings_store_global_setting+0x214>)
 80062b8:	f7fa fd64 	bl	8000d84 <__aeabi_fmul>
 80062bc:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 80062c0:	e7f0      	b.n	80062a4 <settings_store_global_setting+0x3c>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 80062c2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80062c6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80062ca:	625d      	str	r5, [r3, #36]	; 0x24
 80062cc:	e7ea      	b.n	80062a4 <settings_store_global_setting+0x3c>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 80062ce:	2b09      	cmp	r3, #9
 80062d0:	f240 80cb 	bls.w	800646a <settings_store_global_setting+0x202>
 80062d4:	3001      	adds	r0, #1
 80062d6:	2804      	cmp	r0, #4
 80062d8:	f000 80c7 	beq.w	800646a <settings_store_global_setting+0x202>
        parameter -= AXIS_SETTINGS_INCREMENT;
 80062dc:	3b0a      	subs	r3, #10
 80062de:	e7d1      	b.n	8006284 <settings_store_global_setting+0x1c>
    uint8_t int_value = trunc(value);
 80062e0:	4628      	mov	r0, r5
 80062e2:	f7fa f8a5 	bl	8000430 <__aeabi_f2d>
 80062e6:	f002 f94b 	bl	8008580 <trunc>
 80062ea:	f7fa fbcd 	bl	8000a88 <__aeabi_d2uiz>
 80062ee:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 80062f0:	2c28      	cmp	r4, #40	; 0x28
 80062f2:	f200 80ba 	bhi.w	800646a <settings_store_global_setting+0x202>
 80062f6:	e8df f004 	tbb	[pc, r4]
 80062fa:	1f15      	.short	0x1f15
 80062fc:	392d2923 	.word	0x392d2923
 8006300:	b8b8b843 	.word	0xb8b8b843
 8006304:	5c595652 	.word	0x5c595652
 8006308:	b8b8b8b8 	.word	0xb8b8b8b8
 800630c:	766ab8b8 	.word	0x766ab8b8
 8006310:	95928e84 	.word	0x95928e84
 8006314:	b8b89c98 	.word	0xb8b89c98
 8006318:	b8a7a49f 	.word	0xb8a7a49f
 800631c:	b8b8b8b8 	.word	0xb8b8b8b8
 8006320:	b8b8      	.short	0xb8b8
 8006322:	b1          	.byte	0xb1
 8006323:	00          	.byte	0x00
        if (value < STATUS_SETTING_STEP_PULSE_MIN_LIMIT) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8006324:	4956      	ldr	r1, [pc, #344]	; (8006480 <settings_store_global_setting+0x218>)
 8006326:	4628      	mov	r0, r5
 8006328:	f7fa feca 	bl	80010c0 <__aeabi_fcmplt>
 800632c:	2800      	cmp	r0, #0
 800632e:	f040 809e 	bne.w	800646e <settings_store_global_setting+0x206>
        settings.fpulse_microseconds = value; break;
 8006332:	4b51      	ldr	r3, [pc, #324]	; (8006478 <settings_store_global_setting+0x210>)
 8006334:	631d      	str	r5, [r3, #48]	; 0x30
 8006336:	e7b5      	b.n	80062a4 <settings_store_global_setting+0x3c>
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8006338:	4b4f      	ldr	r3, [pc, #316]	; (8006478 <settings_store_global_setting+0x210>)
 800633a:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
 800633e:	e7b1      	b.n	80062a4 <settings_store_global_setting+0x3c>
        settings.step_invert_mask = int_value;
 8006340:	4b4d      	ldr	r3, [pc, #308]	; (8006478 <settings_store_global_setting+0x210>)
 8006342:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8006346:	f000 fb57 	bl	80069f8 <st_generate_step_dir_invert_masks>
        break;
 800634a:	e7ab      	b.n	80062a4 <settings_store_global_setting+0x3c>
        settings.dir_invert_mask = int_value;
 800634c:	4b4a      	ldr	r3, [pc, #296]	; (8006478 <settings_store_global_setting+0x210>)
 800634e:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
 8006352:	e7f8      	b.n	8006346 <settings_store_global_setting+0xde>
 8006354:	4b48      	ldr	r3, [pc, #288]	; (8006478 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 8006356:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800635a:	b120      	cbz	r0, 8006366 <settings_store_global_setting+0xfe>
 800635c:	f042 0204 	orr.w	r2, r2, #4
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8006360:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006364:	e79e      	b.n	80062a4 <settings_store_global_setting+0x3c>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8006366:	f022 0204 	bic.w	r2, r2, #4
 800636a:	e7f9      	b.n	8006360 <settings_store_global_setting+0xf8>
 800636c:	4b42      	ldr	r3, [pc, #264]	; (8006478 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 800636e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006372:	b110      	cbz	r0, 800637a <settings_store_global_setting+0x112>
 8006374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006378:	e7f2      	b.n	8006360 <settings_store_global_setting+0xf8>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 800637a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637e:	e7ef      	b.n	8006360 <settings_store_global_setting+0xf8>
 8006380:	4b3d      	ldr	r3, [pc, #244]	; (8006478 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8006382:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006386:	b138      	cbz	r0, 8006398 <settings_store_global_setting+0x130>
 8006388:	f062 027f 	orn	r2, r2, #127	; 0x7f
        probe_configure_invert_mask(false);
 800638c:	2000      	movs	r0, #0
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 800638e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        probe_configure_invert_mask(false);
 8006392:	f7fe fdf7 	bl	8004f84 <probe_configure_invert_mask>
        break;
 8006396:	e785      	b.n	80062a4 <settings_store_global_setting+0x3c>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8006398:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800639c:	e7f6      	b.n	800638c <settings_store_global_setting+0x124>
      case 10: settings.status_report_mask = int_value; break;
 800639e:	4b36      	ldr	r3, [pc, #216]	; (8006478 <settings_store_global_setting+0x210>)
 80063a0:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37
 80063a4:	e77e      	b.n	80062a4 <settings_store_global_setting+0x3c>
      case 11: settings.junction_deviation = value; break;
 80063a6:	4b34      	ldr	r3, [pc, #208]	; (8006478 <settings_store_global_setting+0x210>)
 80063a8:	639d      	str	r5, [r3, #56]	; 0x38
 80063aa:	e77b      	b.n	80062a4 <settings_store_global_setting+0x3c>
      case 12: settings.arc_tolerance = value; break;
 80063ac:	4b32      	ldr	r3, [pc, #200]	; (8006478 <settings_store_global_setting+0x210>)
 80063ae:	63dd      	str	r5, [r3, #60]	; 0x3c
 80063b0:	e778      	b.n	80062a4 <settings_store_global_setting+0x3c>
 80063b2:	4b31      	ldr	r3, [pc, #196]	; (8006478 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 80063b4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80063b8:	b130      	cbz	r0, 80063c8 <settings_store_global_setting+0x160>
 80063ba:	f042 0201 	orr.w	r2, r2, #1
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 80063be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 80063c2:	f000 fff5 	bl	80073b0 <system_flag_wco_change>
        break;
 80063c6:	e76d      	b.n	80062a4 <settings_store_global_setting+0x3c>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	e7f7      	b.n	80063be <settings_store_global_setting+0x156>
 80063ce:	4b2a      	ldr	r3, [pc, #168]	; (8006478 <settings_store_global_setting+0x210>)
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 80063d0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
        if (int_value) {
 80063d4:	b120      	cbz	r0, 80063e0 <settings_store_global_setting+0x178>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 80063d6:	06d1      	lsls	r1, r2, #27
 80063d8:	d54b      	bpl.n	8006472 <settings_store_global_setting+0x20a>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 80063da:	f042 0220 	orr.w	r2, r2, #32
 80063de:	e7bf      	b.n	8006360 <settings_store_global_setting+0xf8>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 80063e0:	f022 0220 	bic.w	r2, r2, #32
 80063e4:	e7bc      	b.n	8006360 <settings_store_global_setting+0xf8>
 80063e6:	4b24      	ldr	r3, [pc, #144]	; (8006478 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 80063e8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80063ec:	b130      	cbz	r0, 80063fc <settings_store_global_setting+0x194>
 80063ee:	f042 0208 	orr.w	r2, r2, #8
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 80063f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 80063f6:	f7fd fbe7 	bl	8003bc8 <limits_init>
        break;
 80063fa:	e753      	b.n	80062a4 <settings_store_global_setting+0x3c>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 80063fc:	f022 0208 	bic.w	r2, r2, #8
 8006400:	e7f7      	b.n	80063f2 <settings_store_global_setting+0x18a>
 8006402:	4b1d      	ldr	r3, [pc, #116]	; (8006478 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 8006404:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006408:	b110      	cbz	r0, 8006410 <settings_store_global_setting+0x1a8>
 800640a:	f042 0210 	orr.w	r2, r2, #16
 800640e:	e7a7      	b.n	8006360 <settings_store_global_setting+0xf8>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8006410:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006414:	e7a4      	b.n	8006360 <settings_store_global_setting+0xf8>
      case 23: settings.homing_dir_mask = int_value; break;
 8006416:	4b18      	ldr	r3, [pc, #96]	; (8006478 <settings_store_global_setting+0x210>)
 8006418:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
 800641c:	e742      	b.n	80062a4 <settings_store_global_setting+0x3c>
      case 24: settings.homing_feed_rate = value; break;
 800641e:	4b16      	ldr	r3, [pc, #88]	; (8006478 <settings_store_global_setting+0x210>)
 8006420:	64dd      	str	r5, [r3, #76]	; 0x4c
 8006422:	e73f      	b.n	80062a4 <settings_store_global_setting+0x3c>
      case 25: settings.homing_seek_rate = value; break;
 8006424:	4b14      	ldr	r3, [pc, #80]	; (8006478 <settings_store_global_setting+0x210>)
 8006426:	651d      	str	r5, [r3, #80]	; 0x50
 8006428:	e73c      	b.n	80062a4 <settings_store_global_setting+0x3c>
      case 26: settings.homing_debounce_delay = int_value; break;
 800642a:	4b13      	ldr	r3, [pc, #76]	; (8006478 <settings_store_global_setting+0x210>)
 800642c:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
 8006430:	e738      	b.n	80062a4 <settings_store_global_setting+0x3c>
      case 27: settings.homing_pulloff = value; break;
 8006432:	4b11      	ldr	r3, [pc, #68]	; (8006478 <settings_store_global_setting+0x210>)
 8006434:	659d      	str	r5, [r3, #88]	; 0x58
 8006436:	e735      	b.n	80062a4 <settings_store_global_setting+0x3c>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8006438:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <settings_store_global_setting+0x210>)
 800643a:	641d      	str	r5, [r3, #64]	; 0x40
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 800643c:	f000 f888 	bl	8006550 <spindle_init>
 8006440:	e730      	b.n	80062a4 <settings_store_global_setting+0x3c>
 8006442:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <settings_store_global_setting+0x210>)
 8006444:	645d      	str	r5, [r3, #68]	; 0x44
 8006446:	e7f9      	b.n	800643c <settings_store_global_setting+0x1d4>
 8006448:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <settings_store_global_setting+0x210>)
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 800644a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800644e:	b110      	cbz	r0, 8006456 <settings_store_global_setting+0x1ee>
 8006450:	f042 0202 	orr.w	r2, r2, #2
 8006454:	e784      	b.n	8006360 <settings_store_global_setting+0xf8>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8006456:	f022 0202 	bic.w	r2, r2, #2
 800645a:	e781      	b.n	8006360 <settings_store_global_setting+0xf8>
      case 40: settings.analog_max = value; outputs_analog_init(); break; // Re-initialize analog outputs calibration
 800645c:	4b06      	ldr	r3, [pc, #24]	; (8006478 <settings_store_global_setting+0x210>)
 800645e:	65dd      	str	r5, [r3, #92]	; 0x5c
 8006460:	f001 fa3a 	bl	80078d8 <outputs_analog_init>
 8006464:	e71e      	b.n	80062a4 <settings_store_global_setting+0x3c>
  if (value < 0.0) { return(STATUS_NEGATIVE_VALUE); }
 8006466:	2004      	movs	r0, #4
 8006468:	bd70      	pop	{r4, r5, r6, pc}
        return(STATUS_INVALID_STATEMENT);
 800646a:	2003      	movs	r0, #3
 800646c:	bd70      	pop	{r4, r5, r6, pc}
        if (value < STATUS_SETTING_STEP_PULSE_MIN_LIMIT) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 800646e:	2006      	movs	r0, #6
 8006470:	bd70      	pop	{r4, r5, r6, pc}
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8006472:	200a      	movs	r0, #10
}
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	bf00      	nop
 8006478:	20003478 	.word	0x20003478
 800647c:	42700000 	.word	0x42700000
 8006480:	3c23d70a 	.word	0x3c23d70a

08006484 <acceleration_scaling>:


#ifdef ENABLE_ACCEL_SCALING
void acceleration_scaling(uint8_t axis_index, float *pQscale)
{
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
	float scale = *pQscale;
 8006486:	680d      	ldr	r5, [r1, #0]
{
 8006488:	4604      	mov	r4, r0

	protocol_buffer_synchronize();
 800648a:	f7ff f8e3 	bl	8005654 <protocol_buffer_synchronize>

	if (scale <= 0.0f) return;
 800648e:	2100      	movs	r1, #0
 8006490:	4628      	mov	r0, r5
 8006492:	f7fa fe1f 	bl	80010d4 <__aeabi_fcmple>
 8006496:	bb40      	cbnz	r0, 80064ea <acceleration_scaling+0x66>
	if (scale > 1.0f) scale = 1.0f;
 8006498:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800649c:	4628      	mov	r0, r5
 800649e:	f7fa fe2d 	bl	80010fc <__aeabi_fcmpgt>
 80064a2:	b108      	cbz	r0, 80064a8 <acceleration_scaling+0x24>
 80064a4:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000

	if (axis_index == 0xFF) //all axis
 80064a8:	2cff      	cmp	r4, #255	; 0xff
 80064aa:	d10e      	bne.n	80064ca <acceleration_scaling+0x46>
 80064ac:	2400      	movs	r4, #0
 80064ae:	4e0f      	ldr	r6, [pc, #60]	; (80064ec <acceleration_scaling+0x68>)
	{
	  for (i=0; i<N_AXIS; i++)
	  {
	  	adjustments.accel_scaling[i] = scale;
	  	adjustments.accel_adjusted[i] = settings.eeacceleration[i] * scale;
 80064b0:	4f0f      	ldr	r7, [pc, #60]	; (80064f0 <acceleration_scaling+0x6c>)
 80064b2:	19e3      	adds	r3, r4, r7
	  	adjustments.accel_scaling[i] = scale;
 80064b4:	f846 5f04 	str.w	r5, [r6, #4]!
	  	adjustments.accel_adjusted[i] = settings.eeacceleration[i] * scale;
 80064b8:	4629      	mov	r1, r5
 80064ba:	6998      	ldr	r0, [r3, #24]
 80064bc:	f7fa fc62 	bl	8000d84 <__aeabi_fmul>
 80064c0:	3404      	adds	r4, #4
	  for (i=0; i<N_AXIS; i++)
 80064c2:	2c0c      	cmp	r4, #12
	  	adjustments.accel_adjusted[i] = settings.eeacceleration[i] * scale;
 80064c4:	60f0      	str	r0, [r6, #12]
	  for (i=0; i<N_AXIS; i++)
 80064c6:	d1f4      	bne.n	80064b2 <acceleration_scaling+0x2e>
 80064c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  }
	}
	else if (axis_index < N_AXIS)
 80064ca:	2c02      	cmp	r4, #2
 80064cc:	d80d      	bhi.n	80064ea <acceleration_scaling+0x66>
	{
  	adjustments.accel_scaling[axis_index] = scale;
 80064ce:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <acceleration_scaling+0x70>)
  	adjustments.accel_adjusted[axis_index] = settings.eeacceleration[axis_index] * scale;
 80064d0:	1ca6      	adds	r6, r4, #2
  	adjustments.accel_scaling[axis_index] = scale;
 80064d2:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
  	adjustments.accel_adjusted[axis_index] = settings.eeacceleration[axis_index] * scale;
 80064d6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <acceleration_scaling+0x6c>)
 80064dc:	3406      	adds	r4, #6
 80064de:	4629      	mov	r1, r5
 80064e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80064e4:	f7fa fc4e 	bl	8000d84 <__aeabi_fmul>
 80064e8:	6070      	str	r0, [r6, #4]
 80064ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ec:	200034d4 	.word	0x200034d4
 80064f0:	20003478 	.word	0x20003478
 80064f4:	200034d8 	.word	0x200034d8

080064f8 <settings_init>:
#endif



// Initialize the config subsystem
void settings_init() {
 80064f8:	b508      	push	{r3, lr}
  if(!read_global_settings()) {
 80064fa:	f7ff fea1 	bl	8006240 <read_global_settings>
 80064fe:	b938      	cbnz	r0, 8006510 <settings_init+0x18>
    report_status_message(STATUS_SETTING_READ_FAIL);
 8006500:	2007      	movs	r0, #7
 8006502:	f7ff f8ff 	bl	8005704 <report_status_message>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
 8006506:	20ff      	movs	r0, #255	; 0xff
 8006508:	f7ff fdd8 	bl	80060bc <settings_restore>
    report_grbl_settings();
 800650c:	f7ff f972 	bl	80057f4 <report_grbl_settings>
  }
#ifdef ENABLE_ACCEL_SCALING
  uint8_t i;
  for (i=0; i<N_AXIS; i++)
  {
  	adjustments.accel_scaling[i] = 1.0f;
 8006510:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  	adjustments.accel_adjusted[i] = settings.eeacceleration[i];
 8006514:	4a05      	ldr	r2, [pc, #20]	; (800652c <settings_init+0x34>)
  	adjustments.accel_scaling[i] = 1.0f;
 8006516:	4b06      	ldr	r3, [pc, #24]	; (8006530 <settings_init+0x38>)
  	adjustments.accel_adjusted[i] = settings.eeacceleration[i];
 8006518:	6990      	ldr	r0, [r2, #24]
  	adjustments.accel_scaling[i] = 1.0f;
 800651a:	6019      	str	r1, [r3, #0]
  	adjustments.accel_adjusted[i] = settings.eeacceleration[i];
 800651c:	60d8      	str	r0, [r3, #12]
 800651e:	69d0      	ldr	r0, [r2, #28]
 8006520:	6a12      	ldr	r2, [r2, #32]
  	adjustments.accel_scaling[i] = 1.0f;
 8006522:	6059      	str	r1, [r3, #4]
  	adjustments.accel_adjusted[i] = settings.eeacceleration[i];
 8006524:	6118      	str	r0, [r3, #16]
  	adjustments.accel_scaling[i] = 1.0f;
 8006526:	6099      	str	r1, [r3, #8]
  	adjustments.accel_adjusted[i] = settings.eeacceleration[i];
 8006528:	615a      	str	r2, [r3, #20]
 800652a:	bd08      	pop	{r3, pc}
 800652c:	20003478 	.word	0x20003478
 8006530:	200034d8 	.word	0x200034d8

08006534 <spindle_get_state>:
 8006534:	4b01      	ldr	r3, [pc, #4]	; (800653c <spindle_get_state+0x8>)
    }
	#endif
#endif

	return(SPINDLE_STATE_DISABLE);
}
 8006536:	2001      	movs	r0, #1
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	4770      	bx	lr
 800653c:	40010800 	.word	0x40010800

08006540 <spindle_stop>:
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006540:	4a02      	ldr	r2, [pc, #8]	; (800654c <spindle_stop+0xc>)
 8006542:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006544:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006548:	6453      	str	r3, [r2, #68]	; 0x44
 800654a:	4770      	bx	lr
 800654c:	40012c00 	.word	0x40012c00

08006550 <spindle_init>:
{
 8006550:	b508      	push	{r3, lr}
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8006552:	4b0e      	ldr	r3, [pc, #56]	; (800658c <spindle_init+0x3c>)
 8006554:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006556:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006558:	f7fa fb0a 	bl	8000b70 <__aeabi_fsub>
 800655c:	4601      	mov	r1, r0
 800655e:	480c      	ldr	r0, [pc, #48]	; (8006590 <spindle_init+0x40>)
 8006560:	f7fa fcc4 	bl	8000eec <__aeabi_fdiv>
 8006564:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <spindle_init+0x44>)
 8006566:	6018      	str	r0, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <spindle_init+0x48>)
 800656a:	6a1a      	ldr	r2, [r3, #32]
 800656c:	f042 0201 	orr.w	r2, r2, #1
 8006570:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006578:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	f042 0201 	orr.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  spindle_stop();
 8006586:	f7ff bfdb 	b.w	8006540 <spindle_stop>
 800658a:	bf00      	nop
 800658c:	20003478 	.word	0x20003478
 8006590:	45e0f000 	.word	0x45e0f000
 8006594:	200029ac 	.word	0x200029ac
 8006598:	40012c00 	.word	0x40012c00

0800659c <spindle_set_speed>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <spindle_set_speed+0x18>)
 800659e:	6358      	str	r0, [r3, #52]	; 0x34
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80065a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        #else
          SetSpindleEnablebit();
        #endif
      }
    #else
      if (pwm_value == SPINDLE_PWM_OFF_VALUE)
 80065a2:	b918      	cbnz	r0, 80065ac <spindle_set_speed+0x10>
 80065a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80065a8:	645a      	str	r2, [r3, #68]	; 0x44
 80065aa:	4770      	bx	lr
 80065ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065b0:	e7fa      	b.n	80065a8 <spindle_set_speed+0xc>
 80065b2:	bf00      	nop
 80065b4:	40012c00 	.word	0x40012c00

080065b8 <spindle_compute_pwm_value>:
    
  #else 
  
    // Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
    SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm)
    {
 80065b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    	SPINDLE_PWM_TYPE pwm_value;
      rpm *= (0.010*sys.spindle_speed_ovr); // Scale by spindle speed override value.
      // Calculate PWM register value based on rpm max/min settings and programmed rpm.
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80065bc:	4b2a      	ldr	r3, [pc, #168]	; (8006668 <spindle_compute_pwm_value+0xb0>)
    {
 80065be:	4605      	mov	r5, r0
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80065c0:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 80065c2:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 80065c4:	4630      	mov	r0, r6
 80065c6:	4639      	mov	r1, r7
 80065c8:	f7fa fd8e 	bl	80010e8 <__aeabi_fcmpge>
 80065cc:	4c27      	ldr	r4, [pc, #156]	; (800666c <spindle_compute_pwm_value+0xb4>)
 80065ce:	b9c8      	cbnz	r0, 8006604 <spindle_compute_pwm_value+0x4c>
      rpm *= (0.010*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80065d0:	7aa0      	ldrb	r0, [r4, #10]
 80065d2:	f7f9 ff1b 	bl	800040c <__aeabi_i2d>
 80065d6:	a322      	add	r3, pc, #136	; (adr r3, 8006660 <spindle_compute_pwm_value+0xa8>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	f7f9 ff7c 	bl	80004d8 <__aeabi_dmul>
 80065e0:	4680      	mov	r8, r0
 80065e2:	4628      	mov	r0, r5
 80065e4:	4689      	mov	r9, r1
 80065e6:	f7f9 ff23 	bl	8000430 <__aeabi_f2d>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4640      	mov	r0, r8
 80065f0:	4649      	mov	r1, r9
 80065f2:	f7f9 ff71 	bl	80004d8 <__aeabi_dmul>
 80065f6:	f7fa fa67 	bl	8000ac8 <__aeabi_d2f>
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80065fa:	4639      	mov	r1, r7
      rpm *= (0.010*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80065fc:	4605      	mov	r5, r0
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80065fe:	f7fa fd73 	bl	80010e8 <__aeabi_fcmpge>
 8006602:	b120      	cbz	r0, 800660e <spindle_compute_pwm_value+0x56>
        // No PWM range possible. Set simple on/off spindle control pin state.
        sys.spindle_speed = settings.rpm_max;
 8006604:	6127      	str	r7, [r4, #16]
        pwm_value = SPINDLE_PWM_MAX_VALUE;
 8006606:	f641 401f 	movw	r0, #7199	; 0x1c1f
 800660a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      } else if (rpm <= settings.rpm_min) {
 800660e:	4631      	mov	r1, r6
 8006610:	4628      	mov	r0, r5
 8006612:	f7fa fd5f 	bl	80010d4 <__aeabi_fcmple>
 8006616:	b168      	cbz	r0, 8006634 <spindle_compute_pwm_value+0x7c>
        if (rpm == 0.0) { // S0 disables spindle
 8006618:	2700      	movs	r7, #0
 800661a:	4628      	mov	r0, r5
 800661c:	4639      	mov	r1, r7
 800661e:	f7fa fd45 	bl	80010ac <__aeabi_fcmpeq>
 8006622:	b118      	cbz	r0, 800662c <spindle_compute_pwm_value+0x74>
          sys.spindle_speed = 0.0;
 8006624:	6127      	str	r7, [r4, #16]
          pwm_value = SPINDLE_PWM_OFF_VALUE;
 8006626:	2000      	movs	r0, #0
 8006628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        } else { // Set minimum PWM output
          sys.spindle_speed = settings.rpm_min;
 800662c:	6126      	str	r6, [r4, #16]
          pwm_value = SPINDLE_PWM_MIN_VALUE;
 800662e:	2001      	movs	r0, #1
 8006630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }
      } else { 
        // Compute intermediate PWM value with linear spindle speed model.
        // NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
        sys.spindle_speed = rpm;
        pwm_value = (SPINDLE_PWM_TYPE)floor((rpm-settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006634:	4631      	mov	r1, r6
        sys.spindle_speed = rpm;
 8006636:	6125      	str	r5, [r4, #16]
        pwm_value = (SPINDLE_PWM_TYPE)floor((rpm-settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006638:	4628      	mov	r0, r5
 800663a:	f7fa fa99 	bl	8000b70 <__aeabi_fsub>
 800663e:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <spindle_compute_pwm_value+0xb8>)
 8006640:	6819      	ldr	r1, [r3, #0]
 8006642:	f7fa fb9f 	bl	8000d84 <__aeabi_fmul>
 8006646:	f7f9 fef3 	bl	8000430 <__aeabi_f2d>
 800664a:	f001 fe8d 	bl	8008368 <floor>
 800664e:	f7fa fa1b 	bl	8000a88 <__aeabi_d2uiz>
 8006652:	3001      	adds	r0, #1
 8006654:	b280      	uxth	r0, r0
      }
      return(pwm_value);
    }
 8006656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665a:	bf00      	nop
 800665c:	f3af 8000 	nop.w
 8006660:	47ae147b 	.word	0x47ae147b
 8006664:	3f847ae1 	.word	0x3f847ae1
 8006668:	20003478 	.word	0x20003478
 800666c:	20002e30 	.word	0x20002e30
 8006670:	200029ac 	.word	0x200029ac

08006674 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8006674:	b570      	push	{r4, r5, r6, lr}
  if (sys.abort) { return; } // Block during abort.
 8006676:	4c12      	ldr	r4, [pc, #72]	; (80066c0 <spindle_set_state+0x4c>)
{
 8006678:	4605      	mov	r5, r0
  if (sys.abort) { return; } // Block during abort.
 800667a:	7863      	ldrb	r3, [r4, #1]
{
 800667c:	460e      	mov	r6, r1
  if (sys.abort) { return; } // Block during abort.
 800667e:	b933      	cbnz	r3, 800668e <spindle_set_state+0x1a>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8006680:	b930      	cbnz	r0, 8006690 <spindle_set_state+0x1c>
  
    #ifdef VARIABLE_SPINDLE
      sys.spindle_speed = 0.0;
 8006682:	2300      	movs	r3, #0
 8006684:	6123      	str	r3, [r4, #16]
    #endif
    spindle_stop();
 8006686:	f7ff ff5b 	bl	8006540 <spindle_stop>
      #endif    
    #endif
  
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 800668a:	2300      	movs	r3, #0
 800668c:	7323      	strb	r3, [r4, #12]
 800668e:	bd70      	pop	{r4, r5, r6, pc}
      if (state == SPINDLE_ENABLE_CW) {
 8006690:	2d10      	cmp	r5, #16
        ResetSpindleDirectionBit();
 8006692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006696:	480b      	ldr	r0, [pc, #44]	; (80066c4 <spindle_set_state+0x50>)
      if (state == SPINDLE_ENABLE_CW) {
 8006698:	d10f      	bne.n	80066ba <spindle_set_state+0x46>
        ResetSpindleDirectionBit();
 800669a:	f001 f96d 	bl	8007978 <GPIO_ResetBits>
      if (settings.flags & BITFLAG_LASER_MODE) { 
 800669e:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <spindle_set_state+0x54>)
 80066a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80066a4:	079b      	lsls	r3, r3, #30
 80066a6:	d502      	bpl.n	80066ae <spindle_set_state+0x3a>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 80066a8:	2d20      	cmp	r5, #32
 80066aa:	bf08      	it	eq
 80066ac:	2600      	moveq	r6, #0
      spindle_set_speed(spindle_compute_pwm_value(rpm));
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7ff ff82 	bl	80065b8 <spindle_compute_pwm_value>
 80066b4:	f7ff ff72 	bl	800659c <spindle_set_speed>
 80066b8:	e7e7      	b.n	800668a <spindle_set_state+0x16>
        SetSpindleDirectionBit();
 80066ba:	f001 f960 	bl	800797e <GPIO_SetBits>
 80066be:	e7ee      	b.n	800669e <spindle_set_state+0x2a>
 80066c0:	20002e30 	.word	0x20002e30
 80066c4:	40010800 	.word	0x40010800
 80066c8:	20003478 	.word	0x20003478

080066cc <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 80066cc:	b538      	push	{r3, r4, r5, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 80066ce:	4b07      	ldr	r3, [pc, #28]	; (80066ec <spindle_sync+0x20>)
  {
 80066d0:	4604      	mov	r4, r0
    if (sys.state == STATE_CHECK_MODE) { return; }
 80066d2:	781b      	ldrb	r3, [r3, #0]
  {
 80066d4:	460d      	mov	r5, r1
    if (sys.state == STATE_CHECK_MODE) { return; }
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d007      	beq.n	80066ea <spindle_sync+0x1e>
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 80066da:	f7fe ffbb 	bl	8005654 <protocol_buffer_synchronize>
    spindle_set_state(state,rpm);
 80066de:	4629      	mov	r1, r5
 80066e0:	4620      	mov	r0, r4
  }
 80066e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spindle_set_state(state,rpm);
 80066e6:	f7ff bfc5 	b.w	8006674 <spindle_set_state>
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	20002e30 	.word	0x20002e30

080066f0 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 80066f0:	b538      	push	{r3, r4, r5, lr}
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE))
 80066f2:	4c1a      	ldr	r4, [pc, #104]	; (800675c <st_wake_up+0x6c>)
  {
    SetStepperDisableBit();
 80066f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE))
 80066f8:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
    SetStepperDisableBit();
 80066fc:	4818      	ldr	r0, [pc, #96]	; (8006760 <st_wake_up+0x70>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE))
 80066fe:	0753      	lsls	r3, r2, #29
 8006700:	d529      	bpl.n	8006756 <st_wake_up+0x66>
    SetStepperDisableBit();
 8006702:	f001 f93c 	bl	800797e <GPIO_SetBits>
  {
    ResetStepperDisableBit();
  }

  // Initialize stepper output bits to ensure first ISR call does not step.
  st.step_outbits = step_port_invert_mask;
 8006706:	4b17      	ldr	r3, [pc, #92]	; (8006764 <st_wake_up+0x74>)
 8006708:	4d17      	ldr	r5, [pc, #92]	; (8006768 <st_wake_up+0x78>)
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	836b      	strh	r3, [r5, #26]
    OCR0A = -(((settings.pulse_microseconds)*TICKS_PER_MICROSECOND) >> 3);
  #else // Normal operation
    #ifdef STM32
			#ifdef STM32F1
//      st.step_pulse_time = (settings.pulse_microseconds)*uTICKS_PER_MICROSECOND;
    		st.step_pulse_time = (settings.fpulse_microseconds)*uTICKS_PER_MICROSECOND;
 800670e:	4b17      	ldr	r3, [pc, #92]	; (800676c <st_wake_up+0x7c>)
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	f7fa fadf 	bl	8000cd4 <__aeabi_ui2f>
 8006716:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006718:	f7fa fb34 	bl	8000d84 <__aeabi_fmul>
 800671c:	f7fa fd34 	bl	8001188 <__aeabi_f2uiz>
  WRITE_REG(TIMx->ARR, AutoReload);
 8006720:	4b13      	ldr	r3, [pc, #76]	; (8006770 <st_wake_up+0x80>)
 8006722:	b2c0      	uxtb	r0, r0
 8006724:	7668      	strb	r0, [r5, #25]
  // Enable Stepper Driver Interrupt
  #ifdef STM32
//    Step_IT_Start(&st);
    	//-- Reset Timer
      //TIM5->ARR = st.step_pulse_time - 1;
      LL_TIM_SetAutoReload(STEP_RESET_TIMER, st.step_pulse_time - 1);
 8006726:	3801      	subs	r0, #1
 8006728:	62d8      	str	r0, [r3, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800672a:	695a      	ldr	r2, [r3, #20]
 800672c:	f042 0201 	orr.w	r2, r2, #1
 8006730:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006732:	f06f 0201 	mvn.w	r2, #1
 8006736:	611a      	str	r2, [r3, #16]
      LL_TIM_GenerateEvent_UPDATE(STEP_RESET_TIMER);
      LL_TIM_ClearFlag_UPDATE(STEP_RESET_TIMER);

      //TIM4->ARR = st.exec_segment->cycles_per_tick - 1;
      LL_TIM_SetAutoReload(STEP_SET_TIMER,st.exec_segment->cycles_per_tick - 1);
 8006738:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800673a:	885a      	ldrh	r2, [r3, #2]
  WRITE_REG(TIMx->ARR, AutoReload);
 800673c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006740:	3a01      	subs	r2, #1
 8006742:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	615a      	str	r2, [r3, #20]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800674c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006750:	4b08      	ldr	r3, [pc, #32]	; (8006774 <st_wake_up+0x84>)
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	bd38      	pop	{r3, r4, r5, pc}
    ResetStepperDisableBit();
 8006756:	f001 f90f 	bl	8007978 <GPIO_ResetBits>
 800675a:	e7d4      	b.n	8006706 <st_wake_up+0x16>
 800675c:	20003478 	.word	0x20003478
 8006760:	40011000 	.word	0x40011000
 8006764:	20002d9c 	.word	0x20002d9c
 8006768:	20002af4 	.word	0x20002af4
 800676c:	20002da4 	.word	0x20002da4
 8006770:	40000400 	.word	0x40000400
 8006774:	e000e100 	.word	0xe000e100

08006778 <st_go_idle>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800677c:	4b17      	ldr	r3, [pc, #92]	; (80067dc <st_go_idle+0x64>)
}


// Stepper shutdown
void st_go_idle()
{
 800677e:	b510      	push	{r4, lr}
 8006780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	Step_Set_DisableIRQ();
#elif ATMEGA328P
  TIMSK1 &= ~(1<<OCIE1A); // Disable Timer1 interrupt
  TCCR1B = (TCCR1B & ~((1<<CS12) | (1<<CS11))) | (1<<CS10); // Reset clock to no prescaling.
#endif
  busy = false;
 8006784:	2200      	movs	r2, #0

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8006786:	4c16      	ldr	r4, [pc, #88]	; (80067e0 <st_go_idle+0x68>)
  busy = false;
 8006788:	4b16      	ldr	r3, [pc, #88]	; (80067e4 <st_go_idle+0x6c>)
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800678a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  busy = false;
 800678e:	701a      	strb	r2, [r3, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8006790:	28ff      	cmp	r0, #255	; 0xff
 8006792:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <st_go_idle+0x70>)
 8006794:	d107      	bne.n	80067a6 <st_go_idle+0x2e>
 8006796:	4b15      	ldr	r3, [pc, #84]	; (80067ec <st_go_idle+0x74>)
 8006798:	7819      	ldrb	r1, [r3, #0]
 800679a:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 800679e:	b911      	cbnz	r1, 80067a6 <st_go_idle+0x2e>
 80067a0:	7811      	ldrb	r1, [r2, #0]
 80067a2:	2980      	cmp	r1, #128	; 0x80
 80067a4:	d105      	bne.n	80067b2 <st_go_idle+0x3a>
 80067a6:	7813      	ldrb	r3, [r2, #0]
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d010      	beq.n	80067ce <st_go_idle+0x56>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
 80067ac:	f7fd ff02 	bl	80045b4 <delay_ms>
    pin_state = true; // Override. Disable steppers.
 80067b0:	2301      	movs	r3, #1
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80067b2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  if (pin_state)
  {
    SetStepperDisableBit();
 80067b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80067ba:	0752      	lsls	r2, r2, #29
 80067bc:	bf48      	it	mi
 80067be:	f083 0301 	eormi.w	r3, r3, #1
    SetStepperDisableBit();
 80067c2:	480b      	ldr	r0, [pc, #44]	; (80067f0 <st_go_idle+0x78>)
  if (pin_state)
 80067c4:	b12b      	cbz	r3, 80067d2 <st_go_idle+0x5a>
  }
  else
  {
    ResetStepperDisableBit();
  }
}
 80067c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SetStepperDisableBit();
 80067ca:	f001 b8d8 	b.w	800797e <GPIO_SetBits>
  bool pin_state = false; // Keep enabled.
 80067ce:	2300      	movs	r3, #0
 80067d0:	e7ef      	b.n	80067b2 <st_go_idle+0x3a>
}
 80067d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ResetStepperDisableBit();
 80067d6:	f001 b8cf 	b.w	8007978 <GPIO_ResetBits>
 80067da:	bf00      	nop
 80067dc:	e000e100 	.word	0xe000e100
 80067e0:	20003478 	.word	0x20003478
 80067e4:	200029b0 	.word	0x200029b0
 80067e8:	20002e30 	.word	0x20002e30
 80067ec:	20002e60 	.word	0x20002e60
 80067f0:	40011000 	.word	0x40011000

080067f4 <HandleStepSetIT>:
// int8 variables and update position counters only when a segment completes. This can get complicated
// with probing and homing cycles that require true real-time positions.

#ifdef STM32
void HandleStepSetIT(void)
{
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (busy) { return; } // The busy-flag is used to avoid reentering this interrupt
 80067f6:	4d6a      	ldr	r5, [pc, #424]	; (80069a0 <HandleStepSetIT+0x1ac>)
 80067f8:	782b      	ldrb	r3, [r5, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 80c2 	bne.w	8006984 <HandleStepSetIT+0x190>
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8006800:	4a68      	ldr	r2, [pc, #416]	; (80069a4 <HandleStepSetIT+0x1b0>)

  // Set the direction pins a couple of nanoseconds before we step the steppers
  GPIO_Write(DIR_GPIO_Port, (GPIO_ReadOutputData(DIR_GPIO_Port) & ~DIR_MASK) | (st.dir_outbits & DIR_MASK));
 8006802:	4e69      	ldr	r6, [pc, #420]	; (80069a8 <HandleStepSetIT+0x1b4>)
 8006804:	68d1      	ldr	r1, [r2, #12]
 8006806:	8bb3      	ldrh	r3, [r6, #28]
 8006808:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 800680c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006810:	430b      	orrs	r3, r1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006812:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(GPIOx->ODR, PortValue);
 8006816:	60d3      	str	r3, [r2, #12]
 8006818:	4b64      	ldr	r3, [pc, #400]	; (80069ac <HandleStepSetIT+0x1b8>)
  NVIC_EnableIRQ(STEP_RESET_IRQ);

  busy = true;

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 800681a:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800681c:	6119      	str	r1, [r3, #16]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800681e:	68d3      	ldr	r3, [r2, #12]
    GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | st.step_outbits);
 8006820:	8b71      	ldrh	r1, [r6, #26]
 8006822:	f023 0307 	bic.w	r3, r3, #7
 8006826:	430b      	orrs	r3, r1
  WRITE_REG(GPIOx->ODR, PortValue);
 8006828:	60d3      	str	r3, [r2, #12]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800682a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800682e:	4b60      	ldr	r3, [pc, #384]	; (80069b0 <HandleStepSetIT+0x1bc>)
 8006830:	4634      	mov	r4, r6
 8006832:	601a      	str	r2, [r3, #0]
  busy = true;
 8006834:	2301      	movs	r3, #1
 8006836:	702b      	strb	r3, [r5, #0]
  if (st.exec_segment == NULL) {
 8006838:	2f00      	cmp	r7, #0
 800683a:	d13c      	bne.n	80068b6 <HandleStepSetIT+0xc2>
    // Anything in the buffer? If so, load and initialize next step segment.
    if (segment_buffer_head != segment_buffer_tail) {
 800683c:	4b5d      	ldr	r3, [pc, #372]	; (80069b4 <HandleStepSetIT+0x1c0>)
 800683e:	495e      	ldr	r1, [pc, #376]	; (80069b8 <HandleStepSetIT+0x1c4>)
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	7809      	ldrb	r1, [r1, #0]
 8006844:	4291      	cmp	r1, r2
 8006846:	f000 809e 	beq.w	8006986 <HandleStepSetIT+0x192>
        #endif
			*/
      //Step_Set_IT_segment_timing_init(&st);
    	//__HAL_TIM_SET_AUTORELOAD(STEP_SET_TIMER,st.exec_segment->cycles_per_tick - 1);
      //TIM4->ARR = st.exec_segment->cycles_per_tick - 1;
      STEP_SET_TIMER->ARR = st.exec_segment->cycles_per_tick - 1;
 800684a:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 800684e:	781a      	ldrb	r2, [r3, #0]
 8006850:	495a      	ldr	r1, [pc, #360]	; (80069bc <HandleStepSetIT+0x1c8>)
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	00d6      	lsls	r6, r2, #3
 8006856:	1988      	adds	r0, r1, r6
      STEP_SET_TIMER->ARR = st.exec_segment->cycles_per_tick - 1;
 8006858:	8843      	ldrh	r3, [r0, #2]
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 800685a:	6360      	str	r0, [r4, #52]	; 0x34
      STEP_SET_TIMER->ARR = st.exec_segment->cycles_per_tick - 1;
 800685c:	3b01      	subs	r3, #1
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
        //TIM4->PSC = st.exec_segment->prescaler;
      	STEP_SET_TIMER->PSC = st.exec_segment->prescaler;
      #endif


      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8006860:	f831 3032 	ldrh.w	r3, [r1, r2, lsl #3]
      // If the new segment starts a new planner block, initialize stepper variables and counters.
      // NOTE: When the segment data index changes, this indicates a new planner block.
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8006864:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8006868:	85a3      	strh	r3, [r4, #44]	; 0x2c
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 800686a:	7903      	ldrb	r3, [r0, #4]
 800686c:	429a      	cmp	r2, r3
 800686e:	d00e      	beq.n	800688e <HandleStepSetIT+0x9a>
        st.exec_block_index = st.exec_segment->st_block_index;
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8006870:	2014      	movs	r0, #20
 8006872:	4a53      	ldr	r2, [pc, #332]	; (80069c0 <HandleStepSetIT+0x1cc>)
        st.exec_block_index = st.exec_segment->st_block_index;
 8006874:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8006878:	fb00 2303 	mla	r3, r0, r3, r2
 800687c:	6323      	str	r3, [r4, #48]	; 0x30

        // Initialize Bresenham line and distance counters
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = st.counter_c = (st.exec_block->step_event_count >> 1);
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	085b      	lsrs	r3, r3, #1
 8006882:	6163      	str	r3, [r4, #20]
 8006884:	6123      	str	r3, [r4, #16]
 8006886:	60e3      	str	r3, [r4, #12]
 8006888:	60a3      	str	r3, [r4, #8]
 800688a:	6063      	str	r3, [r4, #4]
 800688c:	6023      	str	r3, [r4, #0]
      }
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 800688e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006890:	4b4c      	ldr	r3, [pc, #304]	; (80069c4 <HandleStepSetIT+0x1d0>)
 8006892:	7c02      	ldrb	r2, [r0, #16]
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	405a      	eors	r2, r3

      #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
        // With AMASS enabled, adjust Bresenham axis increment counters according to AMASS level.
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8006898:	198b      	adds	r3, r1, r6
 800689a:	7959      	ldrb	r1, [r3, #5]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 800689c:	83a2      	strh	r2, [r4, #28]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800689e:	6802      	ldr	r2, [r0, #0]
 80068a0:	40ca      	lsrs	r2, r1
 80068a2:	6222      	str	r2, [r4, #32]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80068a4:	6842      	ldr	r2, [r0, #4]
 80068a6:	40ca      	lsrs	r2, r1
 80068a8:	6262      	str	r2, [r4, #36]	; 0x24
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80068aa:	6882      	ldr	r2, [r0, #8]
        #endif
      #endif

      #ifdef VARIABLE_SPINDLE
        // Set real-time spindle output as segment is loaded, just prior to the first step.
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80068ac:	88d8      	ldrh	r0, [r3, #6]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80068ae:	40ca      	lsrs	r2, r1
 80068b0:	62a2      	str	r2, [r4, #40]	; 0x28
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80068b2:	f7ff fe73 	bl	800659c <spindle_set_speed>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 80068b6:	4b44      	ldr	r3, [pc, #272]	; (80069c8 <HandleStepSetIT+0x1d4>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HandleStepSetIT+0xce>
 80068be:	f7fe fb89 	bl	8004fd4 <probe_state_monitor>

  // Reset step out bits.
  st.step_outbits = 0;
 80068c2:	2300      	movs	r3, #0
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 80068c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    st.counter_x += st.steps[X_AXIS];
 80068c6:	6822      	ldr	r2, [r4, #0]
  st.step_outbits = 0;
 80068c8:	8363      	strh	r3, [r4, #26]
    st.counter_x += st.steps[X_AXIS];
 80068ca:	6a23      	ldr	r3, [r4, #32]
  if (st.counter_x > st.exec_block->step_event_count) {
 80068cc:	68c1      	ldr	r1, [r0, #12]
    st.counter_x += st.steps[X_AXIS];
 80068ce:	441a      	add	r2, r3
  if (st.counter_x > st.exec_block->step_event_count) {
 80068d0:	428a      	cmp	r2, r1
    st.counter_x += st.steps[X_AXIS];
 80068d2:	6022      	str	r2, [r4, #0]
  if (st.counter_x > st.exec_block->step_event_count) {
 80068d4:	d90d      	bls.n	80068f2 <HandleStepSetIT+0xfe>
    st.step_outbits |= STEP_X_Pin;
 80068d6:	2301      	movs	r3, #1
    st.counter_x -= st.exec_block->step_event_count;
 80068d8:	1a52      	subs	r2, r2, r1
    st.step_outbits |= STEP_X_Pin;
 80068da:	8363      	strh	r3, [r4, #26]
    if (st.exec_block->direction_bits & DIR_X_Pin) { sys_position[X_AXIS]--; }
 80068dc:	7c03      	ldrb	r3, [r0, #16]
    st.counter_x -= st.exec_block->step_event_count;
 80068de:	6022      	str	r2, [r4, #0]
 80068e0:	4a3a      	ldr	r2, [pc, #232]	; (80069cc <HandleStepSetIT+0x1d8>)
    if (st.exec_block->direction_bits & DIR_X_Pin) { sys_position[X_AXIS]--; }
 80068e2:	f013 0f08 	tst.w	r3, #8
 80068e6:	6813      	ldr	r3, [r2, #0]
 80068e8:	bf14      	ite	ne
 80068ea:	f103 33ff 	addne.w	r3, r3, #4294967295
    else { sys_position[X_AXIS]++; }
 80068ee:	3301      	addeq	r3, #1
 80068f0:	6013      	str	r3, [r2, #0]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 80068f2:	6862      	ldr	r2, [r4, #4]
 80068f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f6:	441a      	add	r2, r3
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 80068f8:	4291      	cmp	r1, r2
    st.counter_y += st.steps[Y_AXIS];
 80068fa:	6062      	str	r2, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 80068fc:	d20f      	bcs.n	800691e <HandleStepSetIT+0x12a>
    st.step_outbits |= STEP_Y_Pin;
 80068fe:	8b63      	ldrh	r3, [r4, #26]
    st.counter_y -= st.exec_block->step_event_count;
 8006900:	1a52      	subs	r2, r2, r1
    st.step_outbits |= STEP_Y_Pin;
 8006902:	f043 0302 	orr.w	r3, r3, #2
 8006906:	8363      	strh	r3, [r4, #26]
    if (st.exec_block->direction_bits & DIR_Y_Pin) { sys_position[Y_AXIS]--; }
 8006908:	7c03      	ldrb	r3, [r0, #16]
    st.counter_y -= st.exec_block->step_event_count;
 800690a:	6062      	str	r2, [r4, #4]
 800690c:	4a2f      	ldr	r2, [pc, #188]	; (80069cc <HandleStepSetIT+0x1d8>)
    if (st.exec_block->direction_bits & DIR_Y_Pin) { sys_position[Y_AXIS]--; }
 800690e:	f013 0f10 	tst.w	r3, #16
 8006912:	6853      	ldr	r3, [r2, #4]
 8006914:	bf14      	ite	ne
 8006916:	f103 33ff 	addne.w	r3, r3, #4294967295
    else { sys_position[Y_AXIS]++; }
 800691a:	3301      	addeq	r3, #1
 800691c:	6053      	str	r3, [r2, #4]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 800691e:	68a3      	ldr	r3, [r4, #8]
 8006920:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006922:	4413      	add	r3, r2
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 8006924:	4299      	cmp	r1, r3
    st.counter_z += st.steps[Z_AXIS];
 8006926:	60a3      	str	r3, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 8006928:	d20f      	bcs.n	800694a <HandleStepSetIT+0x156>
    st.step_outbits |= STEP_Z_Pin;
 800692a:	8b62      	ldrh	r2, [r4, #26]
    st.counter_z -= st.exec_block->step_event_count;
 800692c:	1a5b      	subs	r3, r3, r1
    st.step_outbits |= STEP_Z_Pin;
 800692e:	f042 0204 	orr.w	r2, r2, #4
 8006932:	8362      	strh	r2, [r4, #26]
    st.counter_z -= st.exec_block->step_event_count;
 8006934:	60a3      	str	r3, [r4, #8]
    if (st.exec_block->direction_bits & DIR_Z_Pin) { sys_position[Z_AXIS]--; }
 8006936:	7c03      	ldrb	r3, [r0, #16]
 8006938:	f013 0f20 	tst.w	r3, #32
 800693c:	4b23      	ldr	r3, [pc, #140]	; (80069cc <HandleStepSetIT+0x1d8>)
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	bf14      	ite	ne
 8006942:	f102 32ff 	addne.w	r2, r2, #4294967295
    else { sys_position[Z_AXIS]++; }
 8006946:	3201      	addeq	r2, #1
 8006948:	609a      	str	r2, [r3, #8]
    else { sys_position[C_AXIS]++; }
  }
#endif

  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 800694a:	4a21      	ldr	r2, [pc, #132]	; (80069d0 <HandleStepSetIT+0x1dc>)
 800694c:	7813      	ldrb	r3, [r2, #0]
 800694e:	2b04      	cmp	r3, #4
 8006950:	bf01      	itttt	eq
 8006952:	8b63      	ldrheq	r3, [r4, #26]
 8006954:	88d2      	ldrheq	r2, [r2, #6]
 8006956:	4013      	andeq	r3, r2
 8006958:	8363      	strheq	r3, [r4, #26]

  st.step_count--; // Decrement step events count
 800695a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800695c:	3b01      	subs	r3, #1
 800695e:	b29b      	uxth	r3, r3
 8006960:	85a3      	strh	r3, [r4, #44]	; 0x2c
  if (st.step_count == 0) {
 8006962:	b943      	cbnz	r3, 8006976 <HandleStepSetIT+0x182>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;

    //if ( ++segment_buffer_tail == SEGMENT_BUFFER_SIZE) { segment_buffer_tail = 0; }
  	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8006964:	4a13      	ldr	r2, [pc, #76]	; (80069b4 <HandleStepSetIT+0x1c0>)
    st.exec_segment = NULL;
 8006966:	6363      	str	r3, [r4, #52]	; 0x34
  	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8006968:	7813      	ldrb	r3, [r2, #0]
 800696a:	3301      	adds	r3, #1
 800696c:	b2db      	uxtb	r3, r3
  	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
  		segment_tail_next = 0;
 800696e:	2b20      	cmp	r3, #32
 8006970:	bf08      	it	eq
 8006972:	2300      	moveq	r3, #0
  	segment_buffer_tail = segment_tail_next;
 8006974:	7013      	strb	r3, [r2, #0]
  }




  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8006976:	4a17      	ldr	r2, [pc, #92]	; (80069d4 <HandleStepSetIT+0x1e0>)
 8006978:	8b63      	ldrh	r3, [r4, #26]
 800697a:	8812      	ldrh	r2, [r2, #0]
 800697c:	4053      	eors	r3, r2
 800697e:	8363      	strh	r3, [r4, #26]
  busy = false;
 8006980:	2300      	movs	r3, #0
 8006982:	702b      	strb	r3, [r5, #0]
 8006984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      st_go_idle();
 8006986:	f7ff fef7 	bl	8006778 <st_go_idle>
        if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 800698a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800698c:	7c5b      	ldrb	r3, [r3, #17]
 800698e:	b113      	cbz	r3, 8006996 <HandleStepSetIT+0x1a2>
 8006990:	4638      	mov	r0, r7
 8006992:	f7ff fe03 	bl	800659c <spindle_set_speed>


}
 8006996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 800699a:	2004      	movs	r0, #4
 800699c:	f000 bd4c 	b.w	8007438 <system_set_exec_state_flag>
 80069a0:	200029b0 	.word	0x200029b0
 80069a4:	40010800 	.word	0x40010800
 80069a8:	20002af4 	.word	0x20002af4
 80069ac:	40000400 	.word	0x40000400
 80069b0:	e000e100 	.word	0xe000e100
 80069b4:	20002af1 	.word	0x20002af1
 80069b8:	20002af0 	.word	0x20002af0
 80069bc:	200029f0 	.word	0x200029f0
 80069c0:	20002b2c 	.word	0x20002b2c
 80069c4:	200029b2 	.word	0x200029b2
 80069c8:	20002e46 	.word	0x20002e46
 80069cc:	20002e54 	.word	0x20002e54
 80069d0:	20002e30 	.word	0x20002e30
 80069d4:	20002d9c 	.word	0x20002d9c

080069d8 <HandleStepResetIT>:
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80069d8:	4905      	ldr	r1, [pc, #20]	; (80069f0 <HandleStepResetIT+0x18>)
// completing one step cycle.

void HandleStepResetIT()
{
//	Step_Reset_IT_Disable();
  GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80069da:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <HandleStepResetIT+0x1c>)
 80069dc:	68ca      	ldr	r2, [r1, #12]
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	f022 0207 	bic.w	r2, r2, #7
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	4313      	orrs	r3, r2
  WRITE_REG(GPIOx->ODR, PortValue);
 80069ea:	60cb      	str	r3, [r1, #12]
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40010800 	.word	0x40010800
 80069f4:	20002d9c 	.word	0x20002d9c

080069f8 <st_generate_step_dir_invert_masks>:

// Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
void st_generate_step_dir_invert_masks()
{
  uint8_t idx;
  step_port_invert_mask = 0;
 80069f8:	2300      	movs	r3, #0
{
 80069fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    #ifdef STM32
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80069fe:	4817      	ldr	r0, [pc, #92]	; (8006a5c <st_generate_step_dir_invert_masks+0x64>)
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006a00:	461d      	mov	r5, r3
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006a02:	f890 7034 	ldrb.w	r7, [r0, #52]	; 0x34
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006a06:	f890 e035 	ldrb.w	lr, [r0, #53]	; 0x35
 8006a0a:	461e      	mov	r6, r3
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	461c      	mov	r4, r3
  step_port_invert_mask = 0;
 8006a10:	4913      	ldr	r1, [pc, #76]	; (8006a60 <st_generate_step_dir_invert_masks+0x68>)
  dir_port_invert_mask = 0;
 8006a12:	4a14      	ldr	r2, [pc, #80]	; (8006a64 <st_generate_step_dir_invert_masks+0x6c>)
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006a14:	f8df c050 	ldr.w	ip, [pc, #80]	; 8006a68 <st_generate_step_dir_invert_masks+0x70>
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006a18:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8006a6c <st_generate_step_dir_invert_masks+0x74>
  step_port_invert_mask = 0;
 8006a1c:	800b      	strh	r3, [r1, #0]
  dir_port_invert_mask = 0;
 8006a1e:	8013      	strh	r3, [r2, #0]
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006a20:	fa47 f903 	asr.w	r9, r7, r3
 8006a24:	f019 0f01 	tst.w	r9, #1
 8006a28:	bf18      	it	ne
 8006a2a:	f83c 6013 	ldrhne.w	r6, [ip, r3, lsl #1]
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006a2e:	fa4e f903 	asr.w	r9, lr, r3
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006a32:	bf1c      	itt	ne
 8006a34:	4334      	orrne	r4, r6
 8006a36:	2601      	movne	r6, #1
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006a38:	f019 0f01 	tst.w	r9, #1
 8006a3c:	bf18      	it	ne
 8006a3e:	f838 5013 	ldrhne.w	r5, [r8, r3, lsl #1]
 8006a42:	f103 0301 	add.w	r3, r3, #1
 8006a46:	bf1c      	itt	ne
 8006a48:	4328      	orrne	r0, r5
 8006a4a:	2501      	movne	r5, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d1e7      	bne.n	8006a20 <st_generate_step_dir_invert_masks+0x28>
 8006a50:	b106      	cbz	r6, 8006a54 <st_generate_step_dir_invert_masks+0x5c>
 8006a52:	800c      	strh	r4, [r1, #0]
 8006a54:	b105      	cbz	r5, 8006a58 <st_generate_step_dir_invert_masks+0x60>
 8006a56:	8010      	strh	r0, [r2, #0]
 8006a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a5c:	20003478 	.word	0x20003478
 8006a60:	20002d9c 	.word	0x20002d9c
 8006a64:	200029b2 	.word	0x200029b2
 8006a68:	08009ae6 	.word	0x08009ae6
 8006a6c:	08009ada 	.word	0x08009ada

08006a70 <st_reset>:
}


// Reset and clear stepper subsystem variables
void st_reset()
{
 8006a70:	b538      	push	{r3, r4, r5, lr}
  // Initialize stepper driver idle state.
  st_go_idle();

  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 8006a72:	2538      	movs	r5, #56	; 0x38
  memset(&st, 0, sizeof(stepper_t));
 8006a74:	4c17      	ldr	r4, [pc, #92]	; (8006ad4 <st_reset+0x64>)
  st_go_idle();
 8006a76:	f7ff fe7f 	bl	8006778 <st_go_idle>
  memset(&prep, 0, sizeof(st_prep_t));
 8006a7a:	462a      	mov	r2, r5
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4816      	ldr	r0, [pc, #88]	; (8006ad8 <st_reset+0x68>)
 8006a80:	f000 ffb9 	bl	80079f6 <memset>
  memset(&st, 0, sizeof(stepper_t));
 8006a84:	462a      	mov	r2, r5
 8006a86:	2100      	movs	r1, #0
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 ffb4 	bl	80079f6 <memset>
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8006a8e:	2300      	movs	r3, #0
  segment_buffer_tail = 0;
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 8006a90:	2101      	movs	r1, #1
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8006a92:	4a12      	ldr	r2, [pc, #72]	; (8006adc <st_reset+0x6c>)
 8006a94:	6013      	str	r3, [r2, #0]
  segment_buffer_tail = 0;
 8006a96:	4a12      	ldr	r2, [pc, #72]	; (8006ae0 <st_reset+0x70>)
 8006a98:	7013      	strb	r3, [r2, #0]
  segment_buffer_head = 0; // empty = tail
 8006a9a:	4a12      	ldr	r2, [pc, #72]	; (8006ae4 <st_reset+0x74>)
 8006a9c:	7013      	strb	r3, [r2, #0]
  segment_next_head = 1;
 8006a9e:	4a12      	ldr	r2, [pc, #72]	; (8006ae8 <st_reset+0x78>)
 8006aa0:	7011      	strb	r1, [r2, #0]
  busy = false;
 8006aa2:	4a12      	ldr	r2, [pc, #72]	; (8006aec <st_reset+0x7c>)
 8006aa4:	7013      	strb	r3, [r2, #0]

  st_generate_step_dir_invert_masks();
 8006aa6:	f7ff ffa7 	bl	80069f8 <st_generate_step_dir_invert_masks>
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8006aaa:	4911      	ldr	r1, [pc, #68]	; (8006af0 <st_reset+0x80>)
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8006aac:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <st_reset+0x84>)

  // Initialize step and direction port pins.
#ifdef STM32
  GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8006aae:	4a12      	ldr	r2, [pc, #72]	; (8006af8 <st_reset+0x88>)
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8006ab0:	8818      	ldrh	r0, [r3, #0]
  GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8006ab2:	8812      	ldrh	r2, [r2, #0]
 8006ab4:	68cb      	ldr	r3, [r1, #12]
 8006ab6:	f002 0207 	and.w	r2, r2, #7
 8006aba:	f023 0307 	bic.w	r3, r3, #7
 8006abe:	431a      	orrs	r2, r3
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8006ac0:	83a0      	strh	r0, [r4, #28]
  WRITE_REG(GPIOx->ODR, PortValue);
 8006ac2:	60ca      	str	r2, [r1, #12]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8006ac4:	68cb      	ldr	r3, [r1, #12]
  GPIO_Write(DIR_GPIO_Port, (GPIO_ReadOutputData(DIR_GPIO_Port) & ~DIR_MASK) | (dir_port_invert_mask & DIR_MASK));
 8006ac6:	4028      	ands	r0, r5
 8006ac8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006acc:	4303      	orrs	r3, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8006ace:	60cb      	str	r3, [r1, #12]
 8006ad0:	bd38      	pop	{r3, r4, r5, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20002af4 	.word	0x20002af4
 8006ad8:	200029b8 	.word	0x200029b8
 8006adc:	200029b4 	.word	0x200029b4
 8006ae0:	20002af1 	.word	0x20002af1
 8006ae4:	20002af0 	.word	0x20002af0
 8006ae8:	20002af2 	.word	0x20002af2
 8006aec:	200029b0 	.word	0x200029b0
 8006af0:	40010800 	.word	0x40010800
 8006af4:	200029b2 	.word	0x200029b2
 8006af8:	20002d9c 	.word	0x20002d9c

08006afc <stepper_init>:
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006b10:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006b14:	f042 0201 	orr.w	r2, r2, #1
 8006b18:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006b1c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006b20:	f042 0201 	orr.w	r2, r2, #1
 8006b24:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b2c:	4b03      	ldr	r3, [pc, #12]	; (8006b3c <stepper_init+0x40>)
 8006b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006b32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006b3a:	4770      	bx	lr
 8006b3c:	e000e100 	.word	0xe000e100

08006b40 <st_update_plan_block_parameters>:
}


// Called by planner_recalculate() when the executing block is updated by the new plan.
void st_update_plan_block_parameters()
{
 8006b40:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL) { // Ignore if at start of a new block.
 8006b42:	4c08      	ldr	r4, [pc, #32]	; (8006b64 <st_update_plan_block_parameters+0x24>)
 8006b44:	6825      	ldr	r5, [r4, #0]
 8006b46:	b15d      	cbz	r5, 8006b60 <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8006b48:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <st_update_plan_block_parameters+0x28>)
 8006b4a:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8006b4c:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8006b54:	4608      	mov	r0, r1
 8006b56:	f7fa f915 	bl	8000d84 <__aeabi_fmul>
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8006b5a:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8006b5c:	6168      	str	r0, [r5, #20]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	bd38      	pop	{r3, r4, r5, pc}
 8006b62:	bf00      	nop
 8006b64:	200029b4 	.word	0x200029b4
 8006b68:	200029b8 	.word	0x200029b8
 8006b6c:	00000000 	.word	0x00000000

08006b70 <st_prep_buffer>:
   longer than the time it takes the stepper algorithm to empty it before refilling it.
   Currently, the segment buffer conservatively holds roughly up to 40-50 msec of steps.
   NOTE: Computation units are in steps, millimeters, and minutes.
*/
void st_prep_buffer()
{
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
	if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8006b74:	4b9f      	ldr	r3, [pc, #636]	; (8006df4 <st_prep_buffer+0x284>)
{
 8006b76:	b08d      	sub	sp, #52	; 0x34
	if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8006b78:	791b      	ldrb	r3, [r3, #4]
 8006b7a:	07dd      	lsls	r5, r3, #31
 8006b7c:	f100 8133 	bmi.w	8006de6 <st_prep_buffer+0x276>
 8006b80:	f04f 0b00 	mov.w	fp, #0

	while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8006b84:	4b9c      	ldr	r3, [pc, #624]	; (8006df8 <st_prep_buffer+0x288>)
 8006b86:	4a9d      	ldr	r2, [pc, #628]	; (8006dfc <st_prep_buffer+0x28c>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	7812      	ldrb	r2, [r2, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	f000 812a 	beq.w	8006de6 <st_prep_buffer+0x276>

		// Determine if we need to load a new planner block or if the block needs to be recomputed.
		if (pl_block == NULL) {
 8006b92:	4d9b      	ldr	r5, [pc, #620]	; (8006e00 <st_prep_buffer+0x290>)
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d14c      	bne.n	8006c34 <st_prep_buffer+0xc4>

			// Query planner for a queued block
			if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8006b9a:	4b96      	ldr	r3, [pc, #600]	; (8006df4 <st_prep_buffer+0x284>)
 8006b9c:	791b      	ldrb	r3, [r3, #4]
 8006b9e:	075c      	lsls	r4, r3, #29
 8006ba0:	f140 8124 	bpl.w	8006dec <st_prep_buffer+0x27c>
 8006ba4:	f7fd fe84 	bl	80048b0 <plan_get_system_motion_block>
			else { pl_block = plan_get_current_block(); }
 8006ba8:	6028      	str	r0, [r5, #0]
			if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8006baa:	682e      	ldr	r6, [r5, #0]
 8006bac:	2e00      	cmp	r6, #0
 8006bae:	f000 811a 	beq.w	8006de6 <st_prep_buffer+0x276>

			// Check if we need to only recompute the velocity profile or load a new block.
			if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 8006bb2:	4c94      	ldr	r4, [pc, #592]	; (8006e04 <st_prep_buffer+0x294>)
 8006bb4:	7867      	ldrb	r7, [r4, #1]
 8006bb6:	07f8      	lsls	r0, r7, #31
 8006bb8:	f140 812e 	bpl.w	8006e18 <st_prep_buffer+0x2a8>

				#ifdef PARKING_ENABLE
					if (prep.recalculate_flag & PREP_FLAG_PARKING) { prep.recalculate_flag &= ~(PREP_FLAG_RECALCULATE); }
					else { prep.recalculate_flag = false; }
				#else
					prep.recalculate_flag = false;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	7063      	strb	r3, [r4, #1]
			 speeds, or recompute the profile of a partially-completed planner block if the
			 planner has updated it. For a commanded forced-deceleration, such as from a feed
			 hold, override the planner velocities and decelerate to the target exit speed.
			*/
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
			float inv_2_accel = 0.5f/pl_block->pbacceleration;
 8006bc0:	f8d5 9000 	ldr.w	r9, [r5]
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8006bc4:	f8c4 b018 	str.w	fp, [r4, #24]
			float inv_2_accel = 0.5f/pl_block->pbacceleration;
 8006bc8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8006bcc:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	f7fa f98b 	bl	8000eec <__aeabi_fdiv>
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8006bd6:	4b87      	ldr	r3, [pc, #540]	; (8006df4 <st_prep_buffer+0x284>)
			float inv_2_accel = 0.5f/pl_block->pbacceleration;
 8006bd8:	4680      	mov	r8, r0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8006bda:	791b      	ldrb	r3, [r3, #4]
 8006bdc:	f8d9 6020 	ldr.w	r6, [r9, #32]
 8006be0:	f013 0202 	ands.w	r2, r3, #2
 8006be4:	f000 8177 	beq.w	8006ed6 <st_prep_buffer+0x366>
				// Compute velocity profile parameters for a feed hold in-progress. This profile overrides
				// the planner block profile, enforcing a deceleration to zero speed.
				prep.ramp_type = RAMP_DECEL;
 8006be8:	2302      	movs	r3, #2
 8006bea:	7523      	strb	r3, [r4, #20]
				// Compute decelerate distance relative to end of block.
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8006bec:	f8d9 8014 	ldr.w	r8, [r9, #20]
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	f7fa f8c7 	bl	8000d84 <__aeabi_fmul>
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f7f9 ffb9 	bl	8000b70 <__aeabi_fsub>
				if (decel_dist < 0.0f) {
 8006bfe:	4659      	mov	r1, fp
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8006c00:	4681      	mov	r9, r0
				if (decel_dist < 0.0f) {
 8006c02:	f7fa fa5d 	bl	80010c0 <__aeabi_fcmplt>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f000 8160 	beq.w	8006ecc <st_prep_buffer+0x35c>
					// Deceleration through entire planner block. End of feed hold is not in this block.
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->pbacceleration*pl_block->millimeters);
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	4638      	mov	r0, r7
 8006c10:	f7f9 ffb0 	bl	8000b74 <__addsf3>
 8006c14:	4631      	mov	r1, r6
 8006c16:	f7fa f8b5 	bl	8000d84 <__aeabi_fmul>
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	f7f9 ffa7 	bl	8000b70 <__aeabi_fsub>
 8006c22:	f001 fddf 	bl	80087e4 <sqrtf>
 8006c26:	6260      	str	r0, [r4, #36]	; 0x24
					prep.maximum_speed = prep.exit_speed;
				}
			}

			#ifdef VARIABLE_SPINDLE
				bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8006c28:	4b72      	ldr	r3, [pc, #456]	; (8006df4 <st_prep_buffer+0x284>)
 8006c2a:	4a72      	ldr	r2, [pc, #456]	; (8006df4 <st_prep_buffer+0x284>)
 8006c2c:	791b      	ldrb	r3, [r3, #4]
 8006c2e:	f043 0308 	orr.w	r3, r3, #8
 8006c32:	7113      	strb	r3, [r2, #4]
			#endif
		}

		// Initialize new segment
		segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8006c34:	4b74      	ldr	r3, [pc, #464]	; (8006e08 <st_prep_buffer+0x298>)

		// Set new segment to point to the current segment data block.
		prep_segment->st_block_index = prep.st_block_index;
 8006c36:	4c73      	ldr	r4, [pc, #460]	; (8006e04 <st_prep_buffer+0x294>)
		segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8006c38:	781b      	ldrb	r3, [r3, #0]
		float dt = 0.0f; // Initialize segment time
		float time_var = dt_max; // Time worker variable
		float mm_var; // mm-Distance worker variable
		float speed_var; // Speed worker variable
		float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
		float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8006c3a:	6921      	ldr	r1, [r4, #16]
		segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8006c3c:	9305      	str	r3, [sp, #20]
		prep_segment->st_block_index = prep.st_block_index;
 8006c3e:	9a05      	ldr	r2, [sp, #20]
 8006c40:	4b72      	ldr	r3, [pc, #456]	; (8006e0c <st_prep_buffer+0x29c>)
 8006c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c46:	7822      	ldrb	r2, [r4, #0]
 8006c48:	711a      	strb	r2, [r3, #4]
		float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 8006c4a:	682b      	ldr	r3, [r5, #0]
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
		float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8006c50:	4618      	mov	r0, r3
		float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 8006c52:	9306      	str	r3, [sp, #24]
		float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8006c54:	f7f9 ff8c 	bl	8000b70 <__aeabi_fsub>
		if (minimum_mm < 0.0f) { minimum_mm = 0.0f; }
 8006c58:	4659      	mov	r1, fp
		float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8006c5a:	9009      	str	r0, [sp, #36]	; 0x24
		if (minimum_mm < 0.0f) { minimum_mm = 0.0f; }
 8006c5c:	f7fa fa30 	bl	80010c0 <__aeabi_fcmplt>
 8006c60:	b108      	cbz	r0, 8006c66 <st_prep_buffer+0xf6>
 8006c62:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
			switch (prep.ramp_type) {
				case RAMP_DECEL_OVERRIDE:
					speed_var = pl_block->pbacceleration*time_var;
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
						// Cruise or cruise-deceleration types only for deceleration override.
						mm_remaining = prep.accelerate_until;
 8006c66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8006c68:	f8d4 a020 	ldr.w	sl, [r4, #32]
						mm_remaining = prep.accelerate_until;
 8006c6c:	9302      	str	r3, [sp, #8]
				case RAMP_CRUISE:
					// NOTE: mm_var used to retain the last mm_remaining for incomplete segment time_var calculations.
					// NOTE: If maximum_speed*time_var value is too low, round-off can cause mm_var to not change. To
					//   prevent this, simply enforce a minimum speed threshold in the planner.
					mm_var = mm_remaining - prep.maximum_speed*time_var;
					if (mm_var < prep.decelerate_after) { // End of cruise.
 8006c6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c70:	9802      	ldr	r0, [sp, #8]
 8006c72:	9307      	str	r3, [sp, #28]
					// NOTE: mm_var used as a misc worker variable to prevent errors when near zero speed.
					speed_var = pl_block->pbacceleration*time_var; // Used as delta speed (mm/min)
					if (prep.current_speed > speed_var) { // Check if at or below zero speed.
						// Compute distance from end of segment to end of block.
						mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
						if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8006c74:	69a3      	ldr	r3, [r4, #24]
 8006c76:	9907      	ldr	r1, [sp, #28]
 8006c78:	9308      	str	r3, [sp, #32]
							prep.current_speed -= speed_var;
							break; // Segment complete. Exit switch-case statement. Continue do-while loop.
						}
					}
					// Otherwise, at end of block or end of forced-deceleration.
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8006c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c7c:	69e5      	ldr	r5, [r4, #28]
 8006c7e:	f894 8014 	ldrb.w	r8, [r4, #20]
 8006c82:	930a      	str	r3, [sp, #40]	; 0x28
 8006c84:	f7fa fa12 	bl	80010ac <__aeabi_fcmpeq>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f000 81cd 	beq.w	8007028 <st_prep_buffer+0x4b8>
 8006c8e:	f04f 0302 	mov.w	r3, #2
 8006c92:	2700      	movs	r7, #0
 8006c94:	4e5e      	ldr	r6, [pc, #376]	; (8006e10 <st_prep_buffer+0x2a0>)
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8006c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c9e:	9703      	str	r7, [sp, #12]
 8006ca0:	f8cd b000 	str.w	fp, [sp]
 8006ca4:	9604      	str	r6, [sp, #16]
			switch (prep.ramp_type) {
 8006ca6:	f1b8 0f01 	cmp.w	r8, #1
 8006caa:	f000 8218 	beq.w	80070de <st_prep_buffer+0x56e>
					speed_var = pl_block->pbacceleration*time_var;
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	69d9      	ldr	r1, [r3, #28]
			switch (prep.ramp_type) {
 8006cb4:	f0c0 81d3 	bcc.w	800705e <st_prep_buffer+0x4ee>
 8006cb8:	f1b8 0f03 	cmp.w	r8, #3
 8006cbc:	f040 822c 	bne.w	8007118 <st_prep_buffer+0x5a8>
					speed_var = pl_block->pbacceleration*time_var;
 8006cc0:	f7fa f860 	bl	8000d84 <__aeabi_fmul>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8006cc4:	4651      	mov	r1, sl
					speed_var = pl_block->pbacceleration*time_var;
 8006cc6:	4607      	mov	r7, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8006cc8:	4628      	mov	r0, r5
 8006cca:	f7f9 ff51 	bl	8000b70 <__aeabi_fsub>
 8006cce:	4601      	mov	r1, r0
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	f7fa fa09 	bl	80010e8 <__aeabi_fcmpge>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f000 81ab 	beq.w	8007032 <st_prep_buffer+0x4c2>
						time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8006cdc:	9902      	ldr	r1, [sp, #8]
 8006cde:	9806      	ldr	r0, [sp, #24]
 8006ce0:	f7f9 ff46 	bl	8000b70 <__aeabi_fsub>
 8006ce4:	4601      	mov	r1, r0
 8006ce6:	f7f9 ff45 	bl	8000b74 <__addsf3>
 8006cea:	4629      	mov	r1, r5
 8006cec:	4604      	mov	r4, r0
 8006cee:	4650      	mov	r0, sl
 8006cf0:	f7f9 ff40 	bl	8000b74 <__addsf3>
 8006cf4:	4601      	mov	r1, r0
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f7fa f8f8 	bl	8000eec <__aeabi_fdiv>
 8006cfc:	2701      	movs	r7, #1
 8006cfe:	4606      	mov	r6, r0
						prep.current_speed = prep.maximum_speed;
 8006d00:	4655      	mov	r5, sl
						prep.ramp_type = RAMP_CRUISE;
 8006d02:	46b8      	mov	r8, r7
						mm_remaining = prep.accelerate_until;
 8006d04:	9c02      	ldr	r4, [sp, #8]
 8006d06:	9703      	str	r7, [sp, #12]
					mm_remaining = prep.mm_complete;
					prep.current_speed = prep.exit_speed;
			}
			dt += time_var; // Add computed ramp time to total segment time.
 8006d08:	4631      	mov	r1, r6
 8006d0a:	9800      	ldr	r0, [sp, #0]
 8006d0c:	f7f9 ff32 	bl	8000b74 <__addsf3>
 8006d10:	9000      	str	r0, [sp, #0]
			if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8006d12:	4601      	mov	r1, r0
 8006d14:	9804      	ldr	r0, [sp, #16]
 8006d16:	f7fa f9f1 	bl	80010fc <__aeabi_fcmpgt>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	f000 822d 	beq.w	800717a <st_prep_buffer+0x60a>
 8006d20:	9900      	ldr	r1, [sp, #0]
 8006d22:	9804      	ldr	r0, [sp, #16]
			else {
				if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
					// Increase segment time to ensure at least one step in segment. Override and loop
					// through distance calculations until minimum_mm or mm_complete.
					dt_max += DT_SEGMENT;
					time_var = dt_max - dt;
 8006d24:	f7f9 ff24 	bl	8000b70 <__aeabi_fsub>
				} else {
					break; // **Complete** Exit loop. Segment execution time maxed.
				}
			}
		} while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8006d28:	9908      	ldr	r1, [sp, #32]
					time_var = dt_max - dt;
 8006d2a:	4606      	mov	r6, r0
		} while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f7fa f9e5 	bl	80010fc <__aeabi_fcmpgt>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	f040 817b 	bne.w	800702e <st_prep_buffer+0x4be>
 8006d38:	9a03      	ldr	r2, [sp, #12]
 8006d3a:	4b32      	ldr	r3, [pc, #200]	; (8006e04 <st_prep_buffer+0x294>)
 8006d3c:	b10a      	cbz	r2, 8006d42 <st_prep_buffer+0x1d2>
 8006d3e:	f883 8014 	strb.w	r8, [r3, #20]
 8006d42:	b107      	cbz	r7, 8006d46 <st_prep_buffer+0x1d6>
 8006d44:	61dd      	str	r5, [r3, #28]
		#ifdef VARIABLE_SPINDLE
			/* -----------------------------------------------------------------------------------
				Compute spindle speed PWM output for step segment
			*/

			if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8006d46:	4b33      	ldr	r3, [pc, #204]	; (8006e14 <st_prep_buffer+0x2a4>)
 8006d48:	4f2a      	ldr	r7, [pc, #168]	; (8006df4 <st_prep_buffer+0x284>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4d2d      	ldr	r5, [pc, #180]	; (8006e04 <st_prep_buffer+0x294>)
 8006d4e:	7c5a      	ldrb	r2, [r3, #17]
 8006d50:	b912      	cbnz	r2, 8006d58 <st_prep_buffer+0x1e8>
 8006d52:	793b      	ldrb	r3, [r7, #4]
 8006d54:	0718      	lsls	r0, r3, #28
 8006d56:	d519      	bpl.n	8006d8c <st_prep_buffer+0x21c>
				if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8006d58:	9b01      	ldr	r3, [sp, #4]
 8006d5a:	7c5b      	ldrb	r3, [r3, #17]
 8006d5c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 8006d60:	f000 821f 	beq.w	80071a2 <st_prep_buffer+0x632>
					float rpm = pl_block->spindle_speed;
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	6b1e      	ldr	r6, [r3, #48]	; 0x30
					// NOTE: Feed and rapid overrides are independent of PWM value and do not alter laser power/rate.
					if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8006d68:	b142      	cbz	r2, 8006d7c <st_prep_buffer+0x20c>
 8006d6a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8006d6c:	69e8      	ldr	r0, [r5, #28]
 8006d6e:	f7fa f809 	bl	8000d84 <__aeabi_fmul>
 8006d72:	4601      	mov	r1, r0
 8006d74:	4630      	mov	r0, r6
 8006d76:	f7fa f805 	bl	8000d84 <__aeabi_fmul>
 8006d7a:	4606      	mov	r6, r0
					// If current_speed is zero, then may need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE)
					// but this would be instantaneous only and during a motion. May not matter at all.
					prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7ff fc1b 	bl	80065b8 <spindle_compute_pwm_value>
 8006d82:	86a8      	strh	r0, [r5, #52]	; 0x34
				} else {
					sys.spindle_speed = 0.0f;
					prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
				}
				bit_false(sys.step_control,STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006d84:	793b      	ldrb	r3, [r7, #4]
 8006d86:	f023 0308 	bic.w	r3, r3, #8
 8006d8a:	713b      	strb	r3, [r7, #4]
			}
			prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8006d8c:	9a05      	ldr	r2, [sp, #20]
 8006d8e:	4b1f      	ldr	r3, [pc, #124]	; (8006e0c <st_prep_buffer+0x29c>)
 8006d90:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8006d92:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8006d96:	eb03 0208 	add.w	r2, r3, r8
 8006d9a:	80d1      	strh	r1, [r2, #6]
			 However, since floats have only 7.2 significant digits, long moves with extremely
			 high step counts can exceed the precision of floats, which can lead to lost steps.
			 Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
			 supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
		*/
		float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	68e9      	ldr	r1, [r5, #12]
			prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8006da0:	9303      	str	r3, [sp, #12]
		float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8006da2:	f7f9 ffef 	bl	8000d84 <__aeabi_fmul>
 8006da6:	9001      	str	r0, [sp, #4]
		float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8006da8:	f001 fc1c 	bl	80085e4 <ceilf>
 8006dac:	4682      	mov	sl, r0
		float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8006dae:	68a8      	ldr	r0, [r5, #8]
 8006db0:	f001 fc18 	bl	80085e4 <ceilf>
		prep_segment->n_step = (uint16_t)(last_n_steps_remaining-n_steps_remaining); // Compute number of steps to execute.
 8006db4:	4651      	mov	r1, sl
		float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8006db6:	9002      	str	r0, [sp, #8]
		prep_segment->n_step = (uint16_t)(last_n_steps_remaining-n_steps_remaining); // Compute number of steps to execute.
 8006db8:	f7f9 feda 	bl	8000b70 <__aeabi_fsub>
 8006dbc:	f7fa f9e4 	bl	8001188 <__aeabi_f2uiz>
 8006dc0:	9b05      	ldr	r3, [sp, #20]
 8006dc2:	fa1f f980 	uxth.w	r9, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	9b03      	ldr	r3, [sp, #12]
 8006dca:	f823 9032 	strh.w	r9, [r3, r2, lsl #3]
 8006dce:	461e      	mov	r6, r3

		// Bail if we are at the end of a feed hold and don't have a step to execute.
		if (prep_segment->n_step == 0) {
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	f040 81e9 	bne.w	80071aa <st_prep_buffer+0x63a>
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 8006dd8:	793a      	ldrb	r2, [r7, #4]
 8006dda:	0791      	lsls	r1, r2, #30
 8006ddc:	f140 81e5 	bpl.w	80071aa <st_prep_buffer+0x63a>
				// Less than one step to decelerate to zero speed, but already very close. AMASS
				// requires full steps to execute. So, just bail.
				bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 8006de0:	f042 0201 	orr.w	r2, r2, #1
 8006de4:	713a      	strb	r2, [r7, #4]
				plan_discard_current_block();
			}
		}

	}
}
 8006de6:	b00d      	add	sp, #52	; 0x34
 8006de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else { pl_block = plan_get_current_block(); }
 8006dec:	f7fd fd6c 	bl	80048c8 <plan_get_current_block>
 8006df0:	e6da      	b.n	8006ba8 <st_prep_buffer+0x38>
 8006df2:	bf00      	nop
 8006df4:	20002e30 	.word	0x20002e30
 8006df8:	20002af1 	.word	0x20002af1
 8006dfc:	20002af2 	.word	0x20002af2
 8006e00:	200029b4 	.word	0x200029b4
 8006e04:	200029b8 	.word	0x200029b8
 8006e08:	20002af0 	.word	0x20002af0
 8006e0c:	200029f0 	.word	0x200029f0
 8006e10:	365fb23b 	.word	0x365fb23b
 8006e14:	20002d98 	.word	0x20002d98
  block_index++;
 8006e18:	7823      	ldrb	r3, [r4, #0]
				st_prep_block = &st_block_buffer[prep.st_block_index];
 8006e1a:	2214      	movs	r2, #20
  block_index++;
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	b2db      	uxtb	r3, r3
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8006e20:	2b1f      	cmp	r3, #31
 8006e22:	bf08      	it	eq
 8006e24:	2300      	moveq	r3, #0
				prep.st_block_index = st_next_block_index(prep.st_block_index);
 8006e26:	7023      	strb	r3, [r4, #0]
				st_prep_block = &st_block_buffer[prep.st_block_index];
 8006e28:	4353      	muls	r3, r2
 8006e2a:	49a4      	ldr	r1, [pc, #656]	; (80070bc <st_prep_buffer+0x54c>)
 8006e2c:	4aa4      	ldr	r2, [pc, #656]	; (80070c0 <st_prep_buffer+0x550>)
 8006e2e:	eb01 0803 	add.w	r8, r1, r3
 8006e32:	f8c2 8000 	str.w	r8, [r2]
				st_prep_block->direction_bits = pl_block->direction_bits;
 8006e36:	7c32      	ldrb	r2, [r6, #16]
					st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8006e38:	68f0      	ldr	r0, [r6, #12]
				st_prep_block->direction_bits = pl_block->direction_bits;
 8006e3a:	f888 2010 	strb.w	r2, [r8, #16]
					for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8006e3e:	6832      	ldr	r2, [r6, #0]
 8006e40:	00d2      	lsls	r2, r2, #3
 8006e42:	50ca      	str	r2, [r1, r3]
 8006e44:	6873      	ldr	r3, [r6, #4]
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	f8c8 3004 	str.w	r3, [r8, #4]
 8006e4c:	68b3      	ldr	r3, [r6, #8]
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	f8c8 3008 	str.w	r3, [r8, #8]
					st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8006e54:	00c3      	lsls	r3, r0, #3
 8006e56:	f8c8 300c 	str.w	r3, [r8, #12]
				prep.steps_remaining = (float)pl_block->step_event_count;
 8006e5a:	f7f9 ff3b 	bl	8000cd4 <__aeabi_ui2f>
				prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8006e5e:	6a31      	ldr	r1, [r6, #32]
				prep.steps_remaining = (float)pl_block->step_event_count;
 8006e60:	60a0      	str	r0, [r4, #8]
				prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8006e62:	f7fa f843 	bl	8000eec <__aeabi_fdiv>
 8006e66:	4601      	mov	r1, r0
 8006e68:	60e0      	str	r0, [r4, #12]
				prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8006e6a:	4896      	ldr	r0, [pc, #600]	; (80070c4 <st_prep_buffer+0x554>)
 8006e6c:	f7fa f83e 	bl	8000eec <__aeabi_fdiv>
				if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8006e70:	4b95      	ldr	r3, [pc, #596]	; (80070c8 <st_prep_buffer+0x558>)
				prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8006e72:	6120      	str	r0, [r4, #16]
				if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8006e74:	791b      	ldrb	r3, [r3, #4]
				prep.dt_remainder = 0.0f; // Reset for new segment block
 8006e76:	f8c4 b004 	str.w	fp, [r4, #4]
				if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8006e7a:	0799      	lsls	r1, r3, #30
 8006e7c:	d401      	bmi.n	8006e82 <st_prep_buffer+0x312>
 8006e7e:	073a      	lsls	r2, r7, #28
 8006e80:	d51f      	bpl.n	8006ec2 <st_prep_buffer+0x352>
					prep.current_speed = prep.exit_speed;
 8006e82:	6a61      	ldr	r1, [r4, #36]	; 0x24
					prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8006e84:	f027 0708 	bic.w	r7, r7, #8
					prep.current_speed = prep.exit_speed;
 8006e88:	61e1      	str	r1, [r4, #28]
					pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8006e8a:	4608      	mov	r0, r1
 8006e8c:	f7f9 ff7a 	bl	8000d84 <__aeabi_fmul>
					prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8006e90:	7067      	strb	r7, [r4, #1]
					pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8006e92:	6170      	str	r0, [r6, #20]
					st_prep_block->is_pwm_rate_adjusted = false;
 8006e94:	2300      	movs	r3, #0
 8006e96:	f888 3011 	strb.w	r3, [r8, #17]
					if (settings.flags & BITFLAG_LASER_MODE) {
 8006e9a:	4b8c      	ldr	r3, [pc, #560]	; (80070cc <st_prep_buffer+0x55c>)
 8006e9c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006ea0:	079b      	lsls	r3, r3, #30
 8006ea2:	f57f ae8d 	bpl.w	8006bc0 <st_prep_buffer+0x50>
						if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8006ea6:	7c73      	ldrb	r3, [r6, #17]
 8006ea8:	069f      	lsls	r7, r3, #26
 8006eaa:	f57f ae89 	bpl.w	8006bc0 <st_prep_buffer+0x50>
							prep.inv_rate = 1.0f/pl_block->programmed_rate;
 8006eae:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8006eb0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006eb4:	f7fa f81a 	bl	8000eec <__aeabi_fdiv>
							st_prep_block->is_pwm_rate_adjusted = true;
 8006eb8:	2301      	movs	r3, #1
							prep.inv_rate = 1.0f/pl_block->programmed_rate;
 8006eba:	6320      	str	r0, [r4, #48]	; 0x30
							st_prep_block->is_pwm_rate_adjusted = true;
 8006ebc:	f888 3011 	strb.w	r3, [r8, #17]
 8006ec0:	e67e      	b.n	8006bc0 <st_prep_buffer+0x50>
					prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8006ec2:	6970      	ldr	r0, [r6, #20]
 8006ec4:	f001 fc8e 	bl	80087e4 <sqrtf>
 8006ec8:	61e0      	str	r0, [r4, #28]
 8006eca:	e7e3      	b.n	8006e94 <st_prep_buffer+0x324>
					prep.mm_complete = decel_dist; // End of feed hold.
 8006ecc:	f8c4 9018 	str.w	r9, [r4, #24]
					prep.exit_speed = 0.0f;
 8006ed0:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
 8006ed4:	e6a8      	b.n	8006c28 <st_prep_buffer+0xb8>
				prep.accelerate_until = pl_block->millimeters;
 8006ed6:	62a6      	str	r6, [r4, #40]	; 0x28
				if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8006ed8:	075e      	lsls	r6, r3, #29
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8006eda:	7522      	strb	r2, [r4, #20]
				if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8006edc:	d53b      	bpl.n	8006f56 <st_prep_buffer+0x3e6>
					prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 8006ede:	46da      	mov	sl, fp
 8006ee0:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
				nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8006ee4:	6828      	ldr	r0, [r5, #0]
 8006ee6:	f7fd fd27 	bl	8004938 <plan_compute_profile_nominal_speed>
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8006eea:	4601      	mov	r1, r0
				nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8006eec:	9002      	str	r0, [sp, #8]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8006eee:	f7f9 ff49 	bl	8000d84 <__aeabi_fmul>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8006ef2:	682b      	ldr	r3, [r5, #0]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8006ef4:	4681      	mov	r9, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	9b00      	ldr	r3, [sp, #0]
 8006efe:	695e      	ldr	r6, [r3, #20]
				if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8006f00:	4631      	mov	r1, r6
 8006f02:	f7fa f8dd 	bl	80010c0 <__aeabi_fcmplt>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d039      	beq.n	8006f7e <st_prep_buffer+0x40e>
					prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f7f9 fe2f 	bl	8000b70 <__aeabi_fsub>
 8006f12:	4641      	mov	r1, r8
 8006f14:	f7f9 ff36 	bl	8000d84 <__aeabi_fmul>
 8006f18:	4601      	mov	r1, r0
 8006f1a:	9801      	ldr	r0, [sp, #4]
 8006f1c:	f7f9 fe28 	bl	8000b70 <__aeabi_fsub>
					if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8006f20:	4659      	mov	r1, fp
					prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8006f22:	62a0      	str	r0, [r4, #40]	; 0x28
					if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8006f24:	f7fa f8d6 	bl	80010d4 <__aeabi_fcmple>
 8006f28:	b1e0      	cbz	r0, 8006f64 <st_prep_buffer+0x3f4>
						prep.ramp_type = RAMP_DECEL;
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	7523      	strb	r3, [r4, #20]
						prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->pbacceleration*pl_block->millimeters);
 8006f2e:	9b00      	ldr	r3, [sp, #0]
 8006f30:	69d9      	ldr	r1, [r3, #28]
 8006f32:	4608      	mov	r0, r1
 8006f34:	f7f9 fe1e 	bl	8000b74 <__addsf3>
 8006f38:	9901      	ldr	r1, [sp, #4]
 8006f3a:	f7f9 ff23 	bl	8000d84 <__aeabi_fmul>
 8006f3e:	4601      	mov	r1, r0
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7f9 fe15 	bl	8000b70 <__aeabi_fsub>
 8006f46:	f001 fc4d 	bl	80087e4 <sqrtf>
						prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8006f4a:	7863      	ldrb	r3, [r4, #1]
						prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->pbacceleration*pl_block->millimeters);
 8006f4c:	6260      	str	r0, [r4, #36]	; 0x24
						prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8006f4e:	f043 0308 	orr.w	r3, r3, #8
 8006f52:	7063      	strb	r3, [r4, #1]
 8006f54:	e668      	b.n	8006c28 <st_prep_buffer+0xb8>
					exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 8006f56:	f7fd fcc9 	bl	80048ec <plan_get_exec_block_exit_speed_sqr>
 8006f5a:	4682      	mov	sl, r0
					prep.exit_speed = sqrtf(exit_speed_sqr);
 8006f5c:	f001 fc42 	bl	80087e4 <sqrtf>
 8006f60:	6260      	str	r0, [r4, #36]	; 0x24
 8006f62:	e7bf      	b.n	8006ee4 <st_prep_buffer+0x374>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8006f64:	4651      	mov	r1, sl
 8006f66:	4648      	mov	r0, r9
 8006f68:	f7f9 fe02 	bl	8000b70 <__aeabi_fsub>
 8006f6c:	4641      	mov	r1, r8
 8006f6e:	f7f9 ff09 	bl	8000d84 <__aeabi_fmul>
						prep.maximum_speed = nominal_speed;
 8006f72:	9b02      	ldr	r3, [sp, #8]
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8006f74:	62e0      	str	r0, [r4, #44]	; 0x2c
						prep.maximum_speed = nominal_speed;
 8006f76:	6223      	str	r3, [r4, #32]
						prep.ramp_type = RAMP_DECEL_OVERRIDE;
 8006f78:	2303      	movs	r3, #3
						prep.ramp_type = RAMP_DECEL;
 8006f7a:	7523      	strb	r3, [r4, #20]
 8006f7c:	e654      	b.n	8006c28 <st_prep_buffer+0xb8>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8006f7e:	4651      	mov	r1, sl
 8006f80:	4630      	mov	r0, r6
 8006f82:	f7f9 fdf5 	bl	8000b70 <__aeabi_fsub>
 8006f86:	4641      	mov	r1, r8
 8006f88:	f7f9 fefc 	bl	8000d84 <__aeabi_fmul>
 8006f8c:	9901      	ldr	r1, [sp, #4]
 8006f8e:	f7f9 fdf1 	bl	8000b74 <__addsf3>
				float intersect_distance =
 8006f92:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006f96:	f7f9 fef5 	bl	8000d84 <__aeabi_fmul>
				} else if (intersect_distance > 0.0f) {
 8006f9a:	4659      	mov	r1, fp
				float intersect_distance =
 8006f9c:	4607      	mov	r7, r0
				} else if (intersect_distance > 0.0f) {
 8006f9e:	f7fa f8ad 	bl	80010fc <__aeabi_fcmpgt>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d03b      	beq.n	800701e <st_prep_buffer+0x4ae>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	9801      	ldr	r0, [sp, #4]
 8006faa:	f7fa f8a7 	bl	80010fc <__aeabi_fcmpgt>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d033      	beq.n	800701a <st_prep_buffer+0x4aa>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 8006fb2:	4651      	mov	r1, sl
 8006fb4:	4648      	mov	r0, r9
 8006fb6:	f7f9 fddb 	bl	8000b70 <__aeabi_fsub>
 8006fba:	4641      	mov	r1, r8
 8006fbc:	f7f9 fee2 	bl	8000d84 <__aeabi_fmul>
 8006fc0:	4601      	mov	r1, r0
 8006fc2:	62e0      	str	r0, [r4, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	f7fa f899 	bl	80010fc <__aeabi_fcmpgt>
 8006fca:	b1a8      	cbz	r0, 8006ff8 <st_prep_buffer+0x488>
							prep.maximum_speed = nominal_speed;
 8006fcc:	9b02      	ldr	r3, [sp, #8]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8006fce:	4631      	mov	r1, r6
							prep.maximum_speed = nominal_speed;
 8006fd0:	6223      	str	r3, [r4, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8006fd2:	4648      	mov	r0, r9
 8006fd4:	f7fa f86a 	bl	80010ac <__aeabi_fcmpeq>
 8006fd8:	b108      	cbz	r0, 8006fde <st_prep_buffer+0x46e>
								prep.ramp_type = RAMP_CRUISE;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e7cd      	b.n	8006f7a <st_prep_buffer+0x40a>
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4648      	mov	r0, r9
 8006fe2:	f7f9 fdc5 	bl	8000b70 <__aeabi_fsub>
 8006fe6:	4641      	mov	r1, r8
 8006fe8:	f7f9 fecc 	bl	8000d84 <__aeabi_fmul>
 8006fec:	4601      	mov	r1, r0
 8006fee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006ff0:	f7f9 fdbe 	bl	8000b70 <__aeabi_fsub>
 8006ff4:	62a0      	str	r0, [r4, #40]	; 0x28
 8006ff6:	e617      	b.n	8006c28 <st_prep_buffer+0xb8>
							prep.maximum_speed = sqrtf(2.0f*pl_block->pbacceleration*intersect_distance+exit_speed_sqr);
 8006ff8:	9b00      	ldr	r3, [sp, #0]
							prep.accelerate_until = intersect_distance;
 8006ffa:	62a7      	str	r7, [r4, #40]	; 0x28
							prep.maximum_speed = sqrtf(2.0f*pl_block->pbacceleration*intersect_distance+exit_speed_sqr);
 8006ffc:	69d9      	ldr	r1, [r3, #28]
							prep.decelerate_after = intersect_distance;
 8006ffe:	62e7      	str	r7, [r4, #44]	; 0x2c
							prep.maximum_speed = sqrtf(2.0f*pl_block->pbacceleration*intersect_distance+exit_speed_sqr);
 8007000:	4608      	mov	r0, r1
 8007002:	f7f9 fdb7 	bl	8000b74 <__addsf3>
 8007006:	4639      	mov	r1, r7
 8007008:	f7f9 febc 	bl	8000d84 <__aeabi_fmul>
 800700c:	4651      	mov	r1, sl
 800700e:	f7f9 fdb1 	bl	8000b74 <__addsf3>
 8007012:	f001 fbe7 	bl	80087e4 <sqrtf>
 8007016:	6220      	str	r0, [r4, #32]
 8007018:	e606      	b.n	8006c28 <st_prep_buffer+0xb8>
						prep.ramp_type = RAMP_DECEL;
 800701a:	2302      	movs	r3, #2
 800701c:	e7ad      	b.n	8006f7a <st_prep_buffer+0x40a>
					prep.maximum_speed = prep.exit_speed;
 800701e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					prep.accelerate_until = 0.0f;
 8007020:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
					prep.maximum_speed = prep.exit_speed;
 8007024:	6223      	str	r3, [r4, #32]
 8007026:	e5ff      	b.n	8006c28 <st_prep_buffer+0xb8>
 8007028:	f04f 0301 	mov.w	r3, #1
 800702c:	e631      	b.n	8006c92 <st_prep_buffer+0x122>
 800702e:	46a1      	mov	r9, r4
 8007030:	e639      	b.n	8006ca6 <st_prep_buffer+0x136>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8007032:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007036:	4638      	mov	r0, r7
 8007038:	f7f9 fea4 	bl	8000d84 <__aeabi_fmul>
 800703c:	4601      	mov	r1, r0
 800703e:	4628      	mov	r0, r5
 8007040:	f7f9 fd96 	bl	8000b70 <__aeabi_fsub>
 8007044:	4631      	mov	r1, r6
 8007046:	f7f9 fe9d 	bl	8000d84 <__aeabi_fmul>
 800704a:	4601      	mov	r1, r0
 800704c:	4648      	mov	r0, r9
 800704e:	f7f9 fd8f 	bl	8000b70 <__aeabi_fsub>
 8007052:	4604      	mov	r4, r0
							prep.current_speed -= speed_var;
 8007054:	4639      	mov	r1, r7
 8007056:	4628      	mov	r0, r5
 8007058:	f7f9 fd8a 	bl	8000b70 <__aeabi_fsub>
 800705c:	e03c      	b.n	80070d8 <st_prep_buffer+0x568>
					speed_var = pl_block->pbacceleration*time_var;
 800705e:	f7f9 fe91 	bl	8000d84 <__aeabi_fmul>
					mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8007062:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
					speed_var = pl_block->pbacceleration*time_var;
 8007066:	4607      	mov	r7, r0
					mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8007068:	f7f9 fe8c 	bl	8000d84 <__aeabi_fmul>
 800706c:	4629      	mov	r1, r5
 800706e:	f7f9 fd81 	bl	8000b74 <__addsf3>
 8007072:	4631      	mov	r1, r6
 8007074:	f7f9 fe86 	bl	8000d84 <__aeabi_fmul>
 8007078:	4601      	mov	r1, r0
 800707a:	4648      	mov	r0, r9
 800707c:	f7f9 fd78 	bl	8000b70 <__aeabi_fsub>
 8007080:	4604      	mov	r4, r0
					if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8007082:	4601      	mov	r1, r0
 8007084:	9802      	ldr	r0, [sp, #8]
 8007086:	f7fa f839 	bl	80010fc <__aeabi_fcmpgt>
 800708a:	b308      	cbz	r0, 80070d0 <st_prep_buffer+0x560>
						time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 800708c:	9902      	ldr	r1, [sp, #8]
 800708e:	9806      	ldr	r0, [sp, #24]
 8007090:	f7f9 fd6e 	bl	8000b70 <__aeabi_fsub>
 8007094:	4601      	mov	r1, r0
 8007096:	f7f9 fd6d 	bl	8000b74 <__addsf3>
 800709a:	4629      	mov	r1, r5
 800709c:	4604      	mov	r4, r0
 800709e:	4650      	mov	r0, sl
 80070a0:	f7f9 fd68 	bl	8000b74 <__addsf3>
 80070a4:	4601      	mov	r1, r0
 80070a6:	4620      	mov	r0, r4
 80070a8:	f7f9 ff20 	bl	8000eec <__aeabi_fdiv>
 80070ac:	2701      	movs	r7, #1
 80070ae:	4606      	mov	r6, r0
						prep.current_speed = prep.maximum_speed;
 80070b0:	4655      	mov	r5, sl
 80070b2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
						mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 80070b6:	9c02      	ldr	r4, [sp, #8]
 80070b8:	9703      	str	r7, [sp, #12]
 80070ba:	e625      	b.n	8006d08 <st_prep_buffer+0x198>
 80070bc:	20002b2c 	.word	0x20002b2c
 80070c0:	20002d98 	.word	0x20002d98
 80070c4:	3fa00000 	.word	0x3fa00000
 80070c8:	20002e30 	.word	0x20002e30
 80070cc:	20003478 	.word	0x20003478
						prep.current_speed += speed_var;
 80070d0:	4639      	mov	r1, r7
 80070d2:	4628      	mov	r0, r5
 80070d4:	f7f9 fd4e 	bl	8000b74 <__addsf3>
							prep.current_speed -= speed_var;
 80070d8:	4605      	mov	r5, r0
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 80070da:	2701      	movs	r7, #1
 80070dc:	e614      	b.n	8006d08 <st_prep_buffer+0x198>
					mm_var = mm_remaining - prep.maximum_speed*time_var;
 80070de:	4651      	mov	r1, sl
 80070e0:	4630      	mov	r0, r6
 80070e2:	f7f9 fe4f 	bl	8000d84 <__aeabi_fmul>
 80070e6:	4601      	mov	r1, r0
 80070e8:	4648      	mov	r0, r9
 80070ea:	f7f9 fd41 	bl	8000b70 <__aeabi_fsub>
					if (mm_var < prep.decelerate_after) { // End of cruise.
 80070ee:	9907      	ldr	r1, [sp, #28]
					mm_var = mm_remaining - prep.maximum_speed*time_var;
 80070f0:	4604      	mov	r4, r0
					if (mm_var < prep.decelerate_after) { // End of cruise.
 80070f2:	f7f9 ffe5 	bl	80010c0 <__aeabi_fcmplt>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f43f ae06 	beq.w	8006d08 <st_prep_buffer+0x198>
						time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 80070fc:	9907      	ldr	r1, [sp, #28]
 80070fe:	4648      	mov	r0, r9
 8007100:	f7f9 fd36 	bl	8000b70 <__aeabi_fsub>
 8007104:	4651      	mov	r1, sl
 8007106:	f7f9 fef1 	bl	8000eec <__aeabi_fdiv>
 800710a:	f8cd 800c 	str.w	r8, [sp, #12]
 800710e:	4606      	mov	r6, r0
						mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 8007110:	9c07      	ldr	r4, [sp, #28]
						prep.ramp_type = RAMP_DECEL;
 8007112:	f04f 0802 	mov.w	r8, #2
 8007116:	e5f7      	b.n	8006d08 <st_prep_buffer+0x198>
					speed_var = pl_block->pbacceleration*time_var; // Used as delta speed (mm/min)
 8007118:	f7f9 fe34 	bl	8000d84 <__aeabi_fmul>
					if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 800711c:	4629      	mov	r1, r5
					speed_var = pl_block->pbacceleration*time_var; // Used as delta speed (mm/min)
 800711e:	4607      	mov	r7, r0
					if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8007120:	f7f9 ffce 	bl	80010c0 <__aeabi_fcmplt>
 8007124:	b1a8      	cbz	r0, 8007152 <st_prep_buffer+0x5e2>
						mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8007126:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800712a:	4638      	mov	r0, r7
 800712c:	f7f9 fe2a 	bl	8000d84 <__aeabi_fmul>
 8007130:	4601      	mov	r1, r0
 8007132:	4628      	mov	r0, r5
 8007134:	f7f9 fd1c 	bl	8000b70 <__aeabi_fsub>
 8007138:	4631      	mov	r1, r6
 800713a:	f7f9 fe23 	bl	8000d84 <__aeabi_fmul>
 800713e:	4601      	mov	r1, r0
 8007140:	4648      	mov	r0, r9
 8007142:	f7f9 fd15 	bl	8000b70 <__aeabi_fsub>
						if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007146:	9908      	ldr	r1, [sp, #32]
						mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8007148:	4604      	mov	r4, r0
						if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 800714a:	f7f9 ffd7 	bl	80010fc <__aeabi_fcmpgt>
 800714e:	2800      	cmp	r0, #0
 8007150:	d180      	bne.n	8007054 <st_prep_buffer+0x4e4>
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007152:	9908      	ldr	r1, [sp, #32]
 8007154:	4648      	mov	r0, r9
 8007156:	f7f9 fd0b 	bl	8000b70 <__aeabi_fsub>
 800715a:	4601      	mov	r1, r0
 800715c:	f7f9 fd0a 	bl	8000b74 <__addsf3>
 8007160:	4629      	mov	r1, r5
 8007162:	4604      	mov	r4, r0
 8007164:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007166:	f7f9 fd05 	bl	8000b74 <__addsf3>
 800716a:	4601      	mov	r1, r0
 800716c:	4620      	mov	r0, r4
 800716e:	f7f9 febd 	bl	8000eec <__aeabi_fdiv>
					prep.current_speed = prep.exit_speed;
 8007172:	9d0a      	ldr	r5, [sp, #40]	; 0x28
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007174:	4606      	mov	r6, r0
					mm_remaining = prep.mm_complete;
 8007176:	9c08      	ldr	r4, [sp, #32]
 8007178:	e7af      	b.n	80070da <st_prep_buffer+0x56a>
				if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 800717a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800717c:	4620      	mov	r0, r4
 800717e:	f7f9 ffbd 	bl	80010fc <__aeabi_fcmpgt>
 8007182:	2800      	cmp	r0, #0
 8007184:	f43f add8 	beq.w	8006d38 <st_prep_buffer+0x1c8>
					dt_max += DT_SEGMENT;
 8007188:	9804      	ldr	r0, [sp, #16]
 800718a:	f7f9 f951 	bl	8000430 <__aeabi_f2d>
 800718e:	a346      	add	r3, pc, #280	; (adr r3, 80072a8 <st_prep_buffer+0x738>)
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	f7f8 ffee 	bl	8000174 <__adddf3>
 8007198:	f7f9 fc96 	bl	8000ac8 <__aeabi_d2f>
					time_var = dt_max - dt;
 800719c:	9900      	ldr	r1, [sp, #0]
					dt_max += DT_SEGMENT;
 800719e:	9004      	str	r0, [sp, #16]
 80071a0:	e5c0      	b.n	8006d24 <st_prep_buffer+0x1b4>
					sys.spindle_speed = 0.0f;
 80071a2:	f8c7 b010 	str.w	fp, [r7, #16]
					prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 80071a6:	86ab      	strh	r3, [r5, #52]	; 0x34
 80071a8:	e5ec      	b.n	8006d84 <st_prep_buffer+0x214>
		dt += prep.dt_remainder; // Apply previous segment partial step execute time
 80071aa:	9800      	ldr	r0, [sp, #0]
 80071ac:	6869      	ldr	r1, [r5, #4]
 80071ae:	9303      	str	r3, [sp, #12]
 80071b0:	f7f9 fce0 	bl	8000b74 <__addsf3>
		float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 80071b4:	9901      	ldr	r1, [sp, #4]
		dt += prep.dt_remainder; // Apply previous segment partial step execute time
 80071b6:	9000      	str	r0, [sp, #0]
		float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 80071b8:	9802      	ldr	r0, [sp, #8]
 80071ba:	f7f9 fcd9 	bl	8000b70 <__aeabi_fsub>
 80071be:	9a00      	ldr	r2, [sp, #0]
 80071c0:	4601      	mov	r1, r0
 80071c2:	4610      	mov	r0, r2
 80071c4:	f7f9 fe92 	bl	8000eec <__aeabi_fdiv>
		uint32_t cycles = (uint32_t)ceilf(fTICKS_PER_MINUTE*inv_rate); // (cycles/step)
 80071c8:	4a39      	ldr	r2, [pc, #228]	; (80072b0 <st_prep_buffer+0x740>)
		float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 80071ca:	9000      	str	r0, [sp, #0]
		uint32_t cycles = (uint32_t)ceilf(fTICKS_PER_MINUTE*inv_rate); // (cycles/step)
 80071cc:	6811      	ldr	r1, [r2, #0]
 80071ce:	f7f9 fdd9 	bl	8000d84 <__aeabi_fmul>
 80071d2:	f001 fa07 	bl	80085e4 <ceilf>
 80071d6:	f7f9 ffd7 	bl	8001188 <__aeabi_f2uiz>
			if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 80071da:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80071de:	4a35      	ldr	r2, [pc, #212]	; (80072b4 <st_prep_buffer+0x744>)
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	fbb2 f1f1 	udiv	r1, r2, r1
 80071e8:	4288      	cmp	r0, r1
 80071ea:	d235      	bcs.n	8007258 <st_prep_buffer+0x6e8>
 80071ec:	2200      	movs	r2, #0
 80071ee:	eb06 0308 	add.w	r3, r6, r8
 80071f2:	715a      	strb	r2, [r3, #5]
			if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 80071f4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
			else { prep_segment->cycles_per_tick = 0xffff; } // Just set the slowest speed possible.
 80071f8:	bf28      	it	cs
 80071fa:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
		segment_buffer_head = segment_next_head;
 80071fe:	4a2e      	ldr	r2, [pc, #184]	; (80072b8 <st_prep_buffer+0x748>)
			if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 8007200:	4446      	add	r6, r8
			else { prep_segment->cycles_per_tick = 0xffff; } // Just set the slowest speed possible.
 8007202:	bf28      	it	cs
 8007204:	8073      	strhcs	r3, [r6, #2]
		segment_buffer_head = segment_next_head;
 8007206:	492d      	ldr	r1, [pc, #180]	; (80072bc <st_prep_buffer+0x74c>)
 8007208:	7813      	ldrb	r3, [r2, #0]
			if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 800720a:	bf38      	it	cc
 800720c:	8070      	strhcc	r0, [r6, #2]
		segment_buffer_head = segment_next_head;
 800720e:	700b      	strb	r3, [r1, #0]
		if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007210:	3301      	adds	r3, #1
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b20      	cmp	r3, #32
 8007216:	bf08      	it	eq
 8007218:	2300      	moveq	r3, #0
		pl_block->millimeters = mm_remaining;
 800721a:	4e29      	ldr	r6, [pc, #164]	; (80072c0 <st_prep_buffer+0x750>)
		if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 800721c:	7013      	strb	r3, [r2, #0]
		pl_block->millimeters = mm_remaining;
 800721e:	6833      	ldr	r3, [r6, #0]
		prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007220:	9901      	ldr	r1, [sp, #4]
		pl_block->millimeters = mm_remaining;
 8007222:	621c      	str	r4, [r3, #32]
		prep.steps_remaining = n_steps_remaining;
 8007224:	f8c5 a008 	str.w	sl, [r5, #8]
		prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007228:	4650      	mov	r0, sl
 800722a:	f7f9 fca1 	bl	8000b70 <__aeabi_fsub>
 800722e:	9900      	ldr	r1, [sp, #0]
 8007230:	f7f9 fda8 	bl	8000d84 <__aeabi_fmul>
		if (mm_remaining == prep.mm_complete) {
 8007234:	69a9      	ldr	r1, [r5, #24]
		prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007236:	6068      	str	r0, [r5, #4]
		if (mm_remaining == prep.mm_complete) {
 8007238:	4620      	mov	r0, r4
 800723a:	f7f9 ff37 	bl	80010ac <__aeabi_fcmpeq>
 800723e:	2800      	cmp	r0, #0
 8007240:	f43f aca0 	beq.w	8006b84 <st_prep_buffer+0x14>
			if (mm_remaining > 0.0f) { // At end of forced-termination.
 8007244:	4659      	mov	r1, fp
 8007246:	4620      	mov	r0, r4
 8007248:	f7f9 ff58 	bl	80010fc <__aeabi_fcmpgt>
				bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 800724c:	793b      	ldrb	r3, [r7, #4]
			if (mm_remaining > 0.0f) { // At end of forced-termination.
 800724e:	b318      	cbz	r0, 8007298 <st_prep_buffer+0x728>
					bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 8007250:	f043 0301 	orr.w	r3, r3, #1
 8007254:	713b      	strb	r3, [r7, #4]
					return;
 8007256:	e5c6      	b.n	8006de6 <st_prep_buffer+0x276>
				if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 8007258:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800725c:	fbb2 f1f1 	udiv	r1, r2, r1
 8007260:	4288      	cmp	r0, r1
 8007262:	d20d      	bcs.n	8007280 <st_prep_buffer+0x710>
 8007264:	2101      	movs	r1, #1
 8007266:	eb06 0208 	add.w	r2, r6, r8
				else { prep_segment->amass_level = 3; }
 800726a:	7151      	strb	r1, [r2, #5]
				cycles >>= prep_segment->amass_level;
 800726c:	eb06 0208 	add.w	r2, r6, r8
 8007270:	7952      	ldrb	r2, [r2, #5]
				prep_segment->n_step <<= prep_segment->amass_level;
 8007272:	fa09 f902 	lsl.w	r9, r9, r2
				cycles >>= prep_segment->amass_level;
 8007276:	40d0      	lsrs	r0, r2
				prep_segment->n_step <<= prep_segment->amass_level;
 8007278:	9a05      	ldr	r2, [sp, #20]
 800727a:	f823 9032 	strh.w	r9, [r3, r2, lsl #3]
 800727e:	e7b9      	b.n	80071f4 <st_prep_buffer+0x684>
				else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 8007280:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007284:	fbb2 f2f1 	udiv	r2, r2, r1
 8007288:	4290      	cmp	r0, r2
 800728a:	bf38      	it	cc
 800728c:	2102      	movcc	r1, #2
 800728e:	eb06 0208 	add.w	r2, r6, r8
				else { prep_segment->amass_level = 3; }
 8007292:	bf28      	it	cs
 8007294:	2103      	movcs	r1, #3
 8007296:	e7e8      	b.n	800726a <st_prep_buffer+0x6fa>
				if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8007298:	f013 0204 	ands.w	r2, r3, #4
 800729c:	d1d8      	bne.n	8007250 <st_prep_buffer+0x6e0>
				pl_block = NULL; // Set pointer to indicate check and load next planner block.
 800729e:	6032      	str	r2, [r6, #0]
				plan_discard_current_block();
 80072a0:	f7fd faec 	bl	800487c <plan_discard_current_block>
 80072a4:	e46e      	b.n	8006b84 <st_prep_buffer+0x14>
 80072a6:	bf00      	nop
 80072a8:	612f3696 	.word	0x612f3696
 80072ac:	3ecbf647 	.word	0x3ecbf647
 80072b0:	20002da0 	.word	0x20002da0
 80072b4:	20000008 	.word	0x20000008
 80072b8:	20002af2 	.word	0x20002af2
 80072bc:	20002af0 	.word	0x20002af0
 80072c0:	200029b4 	.word	0x200029b4

080072c4 <st_get_realtime_rate>:
// however is not exactly the current speed, but the speed computed in the last step segment
// in the segment buffer. It will always be behind by up to the number of segment blocks (-1)
// divided by the ACCELERATION TICKS PER SECOND in seconds.
float st_get_realtime_rate()
{
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 80072c4:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <st_get_realtime_rate+0x14>)
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 80072cc:	bf1a      	itte	ne
 80072ce:	4b03      	ldrne	r3, [pc, #12]	; (80072dc <st_get_realtime_rate+0x18>)
 80072d0:	69d8      	ldrne	r0, [r3, #28]
  }
  return 0.0f;
 80072d2:	2000      	moveq	r0, #0
}
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20002e30 	.word	0x20002e30
 80072dc:	200029b8 	.word	0x200029b8

080072e0 <system_init>:
*/

#include "grbl.h"

void system_init()
{
 80072e0:	4770      	bx	lr
	...

080072e4 <system_control_get_state>:
  return (READ_REG(GPIOx->IDR));
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <system_control_get_state+0x2c>)
 80072e6:	689a      	ldr	r2, [r3, #8]
#endif

  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 80072e8:	b290      	uxth	r0, r2
 80072ea:	b180      	cbz	r0, 800730e <system_control_get_state+0x2a>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,CON_SAFETY_DOOR_Pin)) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
 80072ec:	4603      	mov	r3, r0
 80072ee:	f080 0010 	eor.w	r0, r0, #16
  uint8_t control_state = 0;
 80072f2:	f3c0 1000 	ubfx	r0, r0, #4, #1
    #endif
    if (bit_isfalse(pin,CON_RESET_Pin)) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80072f6:	0711      	lsls	r1, r2, #28
 80072f8:	bf58      	it	pl
 80072fa:	f040 0002 	orrpl.w	r0, r0, #2
    if (bit_isfalse(pin,CON_FEED_HOLD_Pin)) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80072fe:	079a      	lsls	r2, r3, #30
 8007300:	bf58      	it	pl
 8007302:	f040 0004 	orrpl.w	r0, r0, #4
    if (bit_isfalse(pin,CON_CYCLE_START_Pin)) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8007306:	07db      	lsls	r3, r3, #31
 8007308:	bf58      	it	pl
 800730a:	f040 0008 	orrpl.w	r0, r0, #8
  }
  return(control_state);
}
 800730e:	4770      	bx	lr
 8007310:	40010c00 	.word	0x40010c00

08007314 <HandleControlIT>:
// only the realtime command execute variable to have the main program execute these when
// its ready. This works exactly like the character-based realtime commands when picked off
// directly from the incoming serial data stream.
#ifdef STM32
  void HandleControlIT(uint16_t Control_Pin)
  {
 8007314:	b510      	push	{r4, lr}
 8007316:	4604      	mov	r4, r0
    uint8_t pin = system_control_get_state();
 8007318:	f7ff ffe4 	bl	80072e4 <system_control_get_state>
    switch (Control_Pin)
 800731c:	2c02      	cmp	r4, #2
 800731e:	d008      	beq.n	8007332 <HandleControlIT+0x1e>
 8007320:	d802      	bhi.n	8007328 <HandleControlIT+0x14>
 8007322:	2c01      	cmp	r4, #1
 8007324:	d00d      	beq.n	8007342 <HandleControlIT+0x2e>
 8007326:	bd10      	pop	{r4, pc}
 8007328:	2c08      	cmp	r4, #8
 800732a:	d011      	beq.n	8007350 <HandleControlIT+0x3c>
 800732c:	2c10      	cmp	r4, #16
 800732e:	d015      	beq.n	800735c <HandleControlIT+0x48>
 8007330:	bd10      	pop	{r4, pc}
    {
    case CON_FEED_HOLD_Pin:
      if (bit_istrue(pin, CONTROL_PIN_INDEX_FEED_HOLD))
 8007332:	0740      	lsls	r0, r0, #29
 8007334:	d504      	bpl.n	8007340 <HandleControlIT+0x2c>
        bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 8007336:	4a0d      	ldr	r2, [pc, #52]	; (800736c <HandleControlIT+0x58>)
 8007338:	7813      	ldrb	r3, [r2, #0]
 800733a:	f043 0308 	orr.w	r3, r3, #8
      if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET))
        mc_reset();
      break;
    case CON_SAFETY_DOOR_Pin:
      if (bit_istrue(pin, CONTROL_PIN_INDEX_SAFETY_DOOR))
        bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 800733e:	7013      	strb	r3, [r2, #0]
 8007340:	bd10      	pop	{r4, pc}
      if (bit_istrue(pin, CONTROL_PIN_INDEX_CYCLE_START))
 8007342:	0701      	lsls	r1, r0, #28
 8007344:	d5fc      	bpl.n	8007340 <HandleControlIT+0x2c>
        bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 8007346:	4a09      	ldr	r2, [pc, #36]	; (800736c <HandleControlIT+0x58>)
 8007348:	7813      	ldrb	r3, [r2, #0]
 800734a:	f043 0302 	orr.w	r3, r3, #2
 800734e:	e7f6      	b.n	800733e <HandleControlIT+0x2a>
      if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET))
 8007350:	0782      	lsls	r2, r0, #30
 8007352:	d5f5      	bpl.n	8007340 <HandleControlIT+0x2c>
      break;
    }
  }
 8007354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mc_reset();
 8007358:	f7fd b848 	b.w	80043ec <mc_reset>
      if (bit_istrue(pin, CONTROL_PIN_INDEX_SAFETY_DOOR))
 800735c:	07c3      	lsls	r3, r0, #31
 800735e:	d5ef      	bpl.n	8007340 <HandleControlIT+0x2c>
        bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8007360:	4a02      	ldr	r2, [pc, #8]	; (800736c <HandleControlIT+0x58>)
 8007362:	7813      	ldrb	r3, [r2, #0]
 8007364:	f043 0320 	orr.w	r3, r3, #32
 8007368:	e7e9      	b.n	800733e <HandleControlIT+0x2a>
 800736a:	bf00      	nop
 800736c:	20002e45 	.word	0x20002e45

08007370 <system_check_safety_door_ajar>:
  }
#endif

// Returns if safety door is ajar(T) or closed(F), based on pin state.
uint8_t system_check_safety_door_ajar()
{
 8007370:	b508      	push	{r3, lr}
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
 8007372:	f7ff ffb7 	bl	80072e4 <system_control_get_state>
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8007376:	f000 0001 	and.w	r0, r0, #1
 800737a:	bd08      	pop	{r3, pc}

0800737c <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4604      	mov	r4, r0
 8007380:	2500      	movs	r5, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 8007382:	4621      	mov	r1, r4
 8007384:	b2e8      	uxtb	r0, r5
 8007386:	f7fe ff1b 	bl	80061c0 <settings_read_startup_line>
 800738a:	b940      	cbnz	r0, 800739e <system_execute_startup+0x22>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 800738c:	2107      	movs	r1, #7
      line[0] = 0;
 800738e:	7020      	strb	r0, [r4, #0]
    } else {
      if (line[0] != 0) {
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
 8007390:	4620      	mov	r0, r4
 8007392:	f7fe fc15 	bl	8005bc0 <report_execute_startup_message>
 8007396:	3501      	adds	r5, #1
  for (n=0; n < N_STARTUP_LINE; n++) {
 8007398:	2d02      	cmp	r5, #2
 800739a:	d1f2      	bne.n	8007382 <system_execute_startup+0x6>
      }
    }
  }
}
 800739c:	bd38      	pop	{r3, r4, r5, pc}
      if (line[0] != 0) {
 800739e:	7823      	ldrb	r3, [r4, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0f8      	beq.n	8007396 <system_execute_startup+0x1a>
        uint8_t status_code = gc_execute_line(line);
 80073a4:	4620      	mov	r0, r4
 80073a6:	f7fb fc13 	bl	8002bd0 <gc_execute_line>
        report_execute_startup_message(line,status_code);
 80073aa:	4601      	mov	r1, r0
 80073ac:	e7f0      	b.n	8007390 <system_execute_startup+0x14>
	...

080073b0 <system_flag_wco_change>:
}



void system_flag_wco_change()
{
 80073b0:	b508      	push	{r3, lr}
  #ifdef FORCE_BUFFER_SYNC_DURING_WCO_CHANGE
    protocol_buffer_synchronize();
 80073b2:	f7fe f94f 	bl	8005654 <protocol_buffer_synchronize>
  #endif
  sys.report_wco_counter = 0;
 80073b6:	2200      	movs	r2, #0
 80073b8:	4b01      	ldr	r3, [pc, #4]	; (80073c0 <system_flag_wco_change+0x10>)
 80073ba:	735a      	strb	r2, [r3, #13]
 80073bc:	bd08      	pop	{r3, pc}
 80073be:	bf00      	nop
 80073c0:	20002e30 	.word	0x20002e30

080073c4 <system_convert_axis_steps_to_mpos>:

// Returns machine position of axis 'idx'. Must be sent a 'step' array.
// NOTE: If motor steps and machine position are not in the same coordinate frame, this function
//   serves as a central place to compute the transformation.
float system_convert_axis_steps_to_mpos(int32_t *steps, uint8_t idx)
{
 80073c4:	b510      	push	{r4, lr}
 80073c6:	460c      	mov	r4, r1
      pos = (float)system_convert_corexy_to_y_axis_steps(steps) / settings.steps_per_mm[idx];
    } else {
      pos = steps[idx]/settings.steps_per_mm[idx];
    }
  #else
    pos = steps[idx]/settings.steps_per_mm[idx];
 80073c8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80073cc:	f7f9 fc86 	bl	8000cdc <__aeabi_i2f>
 80073d0:	4b02      	ldr	r3, [pc, #8]	; (80073dc <system_convert_axis_steps_to_mpos+0x18>)
 80073d2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80073d6:	f7f9 fd89 	bl	8000eec <__aeabi_fdiv>
  #endif
  return(pos);
}
 80073da:	bd10      	pop	{r4, pc}
 80073dc:	20003478 	.word	0x20003478

080073e0 <system_convert_array_steps_to_mpos>:


void system_convert_array_steps_to_mpos(float *position, int32_t *steps)
{
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	4605      	mov	r5, r0
 80073e4:	460e      	mov	r6, r1
 80073e6:	2400      	movs	r4, #0
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80073e8:	b2e1      	uxtb	r1, r4
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7ff ffea 	bl	80073c4 <system_convert_axis_steps_to_mpos>
 80073f0:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80073f4:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 80073f6:	2c03      	cmp	r4, #3
 80073f8:	d1f6      	bne.n	80073e8 <system_convert_array_steps_to_mpos+0x8>
  }
  return;
}
 80073fa:	bd70      	pop	{r4, r5, r6, pc}

080073fc <system_check_travel_limits>:
#endif


// Checks and reports if target array exceeds machine travel limits.
uint8_t system_check_travel_limits(float *target)
{
 80073fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      } else {
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
      }
    #else
      // NOTE: max_travel is stored as negative
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8007400:	f04f 0800 	mov.w	r8, #0
 8007404:	4e0b      	ldr	r6, [pc, #44]	; (8007434 <system_check_travel_limits+0x38>)
 8007406:	1f05      	subs	r5, r0, #4
 8007408:	f100 0408 	add.w	r4, r0, #8
 800740c:	f855 7f04 	ldr.w	r7, [r5, #4]!
 8007410:	4641      	mov	r1, r8
 8007412:	4638      	mov	r0, r7
 8007414:	f7f9 fe72 	bl	80010fc <__aeabi_fcmpgt>
 8007418:	b948      	cbnz	r0, 800742e <system_check_travel_limits+0x32>
 800741a:	f856 1f04 	ldr.w	r1, [r6, #4]!
 800741e:	4638      	mov	r0, r7
 8007420:	f7f9 fe4e 	bl	80010c0 <__aeabi_fcmplt>
 8007424:	b918      	cbnz	r0, 800742e <system_check_travel_limits+0x32>
  for (idx=0; idx<N_AXIS; idx++) {
 8007426:	42a5      	cmp	r5, r4
 8007428:	d1f0      	bne.n	800740c <system_check_travel_limits+0x10>
 800742a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800742e:	2001      	movs	r0, #1
    #endif
  }
  return(false);
}
 8007430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007434:	20003498 	.word	0x20003498

08007438 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007438:	b672      	cpsid	i
// Special handlers for setting and clearing Grbl's real-time execution flags.
void system_set_exec_state_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_state |= (mask);
 800743a:	4a03      	ldr	r2, [pc, #12]	; (8007448 <system_set_exec_state_flag+0x10>)
 800743c:	7813      	ldrb	r3, [r2, #0]
 800743e:	4318      	orrs	r0, r3
 8007440:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007442:	b662      	cpsie	i
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	20002e45 	.word	0x20002e45

0800744c <system_execute_line>:
{
 800744c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t char_counter = 1;
 800744e:	2301      	movs	r3, #1
  switch( line[char_counter] ) {
 8007450:	7844      	ldrb	r4, [r0, #1]
{
 8007452:	4605      	mov	r5, r0
  switch( line[char_counter] ) {
 8007454:	2c43      	cmp	r4, #67	; 0x43
  uint8_t char_counter = 1;
 8007456:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 800745a:	d003      	beq.n	8007464 <system_execute_line+0x18>
 800745c:	d80b      	bhi.n	8007476 <system_execute_line+0x2a>
 800745e:	b184      	cbz	r4, 8007482 <system_execute_line+0x36>
 8007460:	2c24      	cmp	r4, #36	; 0x24
 8007462:	d154      	bne.n	800750e <system_execute_line+0xc2>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8007464:	78ad      	ldrb	r5, [r5, #2]
 8007466:	b9d5      	cbnz	r5, 800749e <system_execute_line+0x52>
      switch( line[1] ) {
 8007468:	2c43      	cmp	r4, #67	; 0x43
 800746a:	d038      	beq.n	80074de <system_execute_line+0x92>
 800746c:	d81d      	bhi.n	80074aa <system_execute_line+0x5e>
 800746e:	2c24      	cmp	r4, #36	; 0x24
 8007470:	d029      	beq.n	80074c6 <system_execute_line+0x7a>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8007472:	2400      	movs	r4, #0
          break;
 8007474:	e007      	b.n	8007486 <system_execute_line+0x3a>
  switch( line[char_counter] ) {
 8007476:	2c4a      	cmp	r4, #74	; 0x4a
 8007478:	d008      	beq.n	800748c <system_execute_line+0x40>
 800747a:	2c58      	cmp	r4, #88	; 0x58
 800747c:	d0f2      	beq.n	8007464 <system_execute_line+0x18>
 800747e:	2c47      	cmp	r4, #71	; 0x47
 8007480:	e7ef      	b.n	8007462 <system_execute_line+0x16>
    case 0 : report_grbl_help(); break;
 8007482:	f7fe f9b1 	bl	80057e8 <report_grbl_help>
}
 8007486:	4620      	mov	r0, r4
 8007488:	b004      	add	sp, #16
 800748a:	bd70      	pop	{r4, r5, r6, pc}
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 800748c:	4ba8      	ldr	r3, [pc, #672]	; (8007730 <system_execute_line+0x2e4>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8007494:	f040 8149 	bne.w	800772a <system_execute_line+0x2de>
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 8007498:	7883      	ldrb	r3, [r0, #2]
 800749a:	2b3d      	cmp	r3, #61	; 0x3d
 800749c:	d001      	beq.n	80074a2 <system_execute_line+0x56>
            default: return(STATUS_INVALID_STATEMENT);
 800749e:	2403      	movs	r4, #3
 80074a0:	e7f1      	b.n	8007486 <system_execute_line+0x3a>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 80074a2:	f7fb fb95 	bl	8002bd0 <gc_execute_line>
            return(settings_store_global_setting((uint8_t)parameter, value));
 80074a6:	4604      	mov	r4, r0
 80074a8:	e7ed      	b.n	8007486 <system_execute_line+0x3a>
      switch( line[1] ) {
 80074aa:	2c47      	cmp	r4, #71	; 0x47
 80074ac:	d014      	beq.n	80074d8 <system_execute_line+0x8c>
 80074ae:	2c58      	cmp	r4, #88	; 0x58
 80074b0:	d1df      	bne.n	8007472 <system_execute_line+0x26>
          if (sys.state == STATE_ALARM) {
 80074b2:	4d9f      	ldr	r5, [pc, #636]	; (8007730 <system_execute_line+0x2e4>)
 80074b4:	782b      	ldrb	r3, [r5, #0]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d1db      	bne.n	8007472 <system_execute_line+0x26>
            if (system_check_safety_door_ajar()) { return(STATUS_CHECK_DOOR); }
 80074ba:	f7ff ff59 	bl	8007370 <system_check_safety_door_ajar>
 80074be:	4604      	mov	r4, r0
 80074c0:	b300      	cbz	r0, 8007504 <system_execute_line+0xb8>
 80074c2:	240d      	movs	r4, #13
 80074c4:	e7df      	b.n	8007486 <system_execute_line+0x3a>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 80074c6:	4b9a      	ldr	r3, [pc, #616]	; (8007730 <system_execute_line+0x2e4>)
 80074c8:	781c      	ldrb	r4, [r3, #0]
 80074ca:	f014 0418 	ands.w	r4, r4, #24
 80074ce:	f040 812c 	bne.w	800772a <system_execute_line+0x2de>
          else { report_grbl_settings(); }
 80074d2:	f7fe f98f 	bl	80057f4 <report_grbl_settings>
          break;
 80074d6:	e7d6      	b.n	8007486 <system_execute_line+0x3a>
          report_gcode_modes();
 80074d8:	f7fe fac0 	bl	8005a5c <report_gcode_modes>
 80074dc:	e7c9      	b.n	8007472 <system_execute_line+0x26>
          if ( sys.state == STATE_CHECK_MODE ) {
 80074de:	4b94      	ldr	r3, [pc, #592]	; (8007730 <system_execute_line+0x2e4>)
 80074e0:	781c      	ldrb	r4, [r3, #0]
 80074e2:	2c02      	cmp	r4, #2
 80074e4:	d105      	bne.n	80074f2 <system_execute_line+0xa6>
            mc_reset();
 80074e6:	f7fc ff81 	bl	80043ec <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 80074ea:	2005      	movs	r0, #5
 80074ec:	f7fe f932 	bl	8005754 <report_feedback_message>
 80074f0:	e7bf      	b.n	8007472 <system_execute_line+0x26>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 80074f2:	2c00      	cmp	r4, #0
 80074f4:	f040 8119 	bne.w	800772a <system_execute_line+0x2de>
            sys.state = STATE_CHECK_MODE;
 80074f8:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 80074fa:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 80074fc:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 80074fe:	f7fe f929 	bl	8005754 <report_feedback_message>
 8007502:	e7c0      	b.n	8007486 <system_execute_line+0x3a>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 8007504:	2003      	movs	r0, #3
 8007506:	f7fe f925 	bl	8005754 <report_feedback_message>
            sys.state = STATE_IDLE;
 800750a:	702c      	strb	r4, [r5, #0]
 800750c:	e7bb      	b.n	8007486 <system_execute_line+0x3a>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 800750e:	4e88      	ldr	r6, [pc, #544]	; (8007730 <system_execute_line+0x2e4>)
 8007510:	7833      	ldrb	r3, [r6, #0]
 8007512:	2b01      	cmp	r3, #1
 8007514:	f200 8109 	bhi.w	800772a <system_execute_line+0x2de>
      switch( line[1] ) {
 8007518:	2c49      	cmp	r4, #73	; 0x49
 800751a:	d068      	beq.n	80075ee <system_execute_line+0x1a2>
 800751c:	d805      	bhi.n	800752a <system_execute_line+0xde>
 800751e:	2c23      	cmp	r4, #35	; 0x23
 8007520:	d01f      	beq.n	8007562 <system_execute_line+0x116>
 8007522:	2c48      	cmp	r4, #72	; 0x48
 8007524:	d023      	beq.n	800756e <system_execute_line+0x122>
  uint8_t helper_var = 0; // Helper variable
 8007526:	2400      	movs	r4, #0
 8007528:	e0ac      	b.n	8007684 <system_execute_line+0x238>
      switch( line[1] ) {
 800752a:	2c52      	cmp	r4, #82	; 0x52
 800752c:	d07d      	beq.n	800762a <system_execute_line+0x1de>
 800752e:	2c53      	cmp	r4, #83	; 0x53
 8007530:	d04d      	beq.n	80075ce <system_execute_line+0x182>
 8007532:	2c4e      	cmp	r4, #78	; 0x4e
 8007534:	d1f7      	bne.n	8007526 <system_execute_line+0xda>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 8007536:	2202      	movs	r2, #2
 8007538:	78ac      	ldrb	r4, [r5, #2]
 800753a:	f88d 2007 	strb.w	r2, [sp, #7]
 800753e:	2c00      	cmp	r4, #0
 8007540:	f040 809d 	bne.w	800767e <system_execute_line+0x232>
 8007544:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 8007546:	4629      	mov	r1, r5
 8007548:	4630      	mov	r0, r6
 800754a:	f7fe fe39 	bl	80061c0 <settings_read_startup_line>
 800754e:	2800      	cmp	r0, #0
 8007550:	f040 8090 	bne.w	8007674 <system_execute_line+0x228>
                report_status_message(STATUS_SETTING_READ_FAIL);
 8007554:	2007      	movs	r0, #7
 8007556:	f7fe f8d5 	bl	8005704 <report_status_message>
 800755a:	3401      	adds	r4, #1
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 800755c:	2c02      	cmp	r4, #2
 800755e:	d088      	beq.n	8007472 <system_execute_line+0x26>
 8007560:	e7f0      	b.n	8007544 <system_execute_line+0xf8>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8007562:	78ac      	ldrb	r4, [r5, #2]
 8007564:	2c00      	cmp	r4, #0
 8007566:	d19a      	bne.n	800749e <system_execute_line+0x52>
          else { report_ngc_parameters(); }
 8007568:	f7fe fa1e 	bl	80059a8 <report_ngc_parameters>
          break;
 800756c:	e78b      	b.n	8007486 <system_execute_line+0x3a>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 800756e:	4b71      	ldr	r3, [pc, #452]	; (8007734 <system_execute_line+0x2e8>)
 8007570:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007574:	06db      	lsls	r3, r3, #27
 8007576:	f140 80d6 	bpl.w	8007726 <system_execute_line+0x2da>
          if (system_check_safety_door_ajar()) { return(STATUS_CHECK_DOOR); } // Block if safety door is ajar.
 800757a:	f7ff fef9 	bl	8007370 <system_check_safety_door_ajar>
 800757e:	2800      	cmp	r0, #0
 8007580:	d19f      	bne.n	80074c2 <system_execute_line+0x76>
          sys.state = STATE_HOMING; // Set system state variable
 8007582:	2304      	movs	r3, #4
 8007584:	7033      	strb	r3, [r6, #0]
          if (line[2] == 0) {
 8007586:	78ab      	ldrb	r3, [r5, #2]
 8007588:	b983      	cbnz	r3, 80075ac <system_execute_line+0x160>
                case 'Z': mc_homing_cycle(HOMING_CYCLE_Z); break;
 800758a:	f7fc fea3 	bl	80042d4 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 800758e:	7874      	ldrb	r4, [r6, #1]
 8007590:	2c00      	cmp	r4, #0
 8007592:	f47f af6e 	bne.w	8007472 <system_execute_line+0x26>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 8007596:	7034      	strb	r4, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 8007598:	f7ff f8ee 	bl	8006778 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 800759c:	78ab      	ldrb	r3, [r5, #2]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f47f af67 	bne.w	8007472 <system_execute_line+0x26>
 80075a4:	4628      	mov	r0, r5
 80075a6:	f7ff fee9 	bl	800737c <system_execute_startup>
 80075aa:	e76c      	b.n	8007486 <system_execute_line+0x3a>
            } else if (line[3] == 0) {
 80075ac:	78ea      	ldrb	r2, [r5, #3]
 80075ae:	2a00      	cmp	r2, #0
 80075b0:	f47f af75 	bne.w	800749e <system_execute_line+0x52>
              switch (line[2]) {
 80075b4:	2b59      	cmp	r3, #89	; 0x59
 80075b6:	d006      	beq.n	80075c6 <system_execute_line+0x17a>
 80075b8:	2b5a      	cmp	r3, #90	; 0x5a
 80075ba:	d006      	beq.n	80075ca <system_execute_line+0x17e>
 80075bc:	2b58      	cmp	r3, #88	; 0x58
 80075be:	f47f af6e 	bne.w	800749e <system_execute_line+0x52>
                case 'X': mc_homing_cycle(HOMING_CYCLE_X); break;
 80075c2:	2001      	movs	r0, #1
 80075c4:	e7e1      	b.n	800758a <system_execute_line+0x13e>
                case 'Y': mc_homing_cycle(HOMING_CYCLE_Y); break;
 80075c6:	2002      	movs	r0, #2
 80075c8:	e7df      	b.n	800758a <system_execute_line+0x13e>
                case 'Z': mc_homing_cycle(HOMING_CYCLE_Z); break;
 80075ca:	2004      	movs	r0, #4
 80075cc:	e7dd      	b.n	800758a <system_execute_line+0x13e>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 80075ce:	78ab      	ldrb	r3, [r5, #2]
 80075d0:	2b4c      	cmp	r3, #76	; 0x4c
 80075d2:	f47f af64 	bne.w	800749e <system_execute_line+0x52>
 80075d6:	78eb      	ldrb	r3, [r5, #3]
 80075d8:	2b50      	cmp	r3, #80	; 0x50
 80075da:	f47f af60 	bne.w	800749e <system_execute_line+0x52>
 80075de:	792c      	ldrb	r4, [r5, #4]
 80075e0:	2c00      	cmp	r4, #0
 80075e2:	f47f af5c 	bne.w	800749e <system_execute_line+0x52>
          system_set_exec_state_flag(EXEC_SLEEP); // Set to execute sleep mode immediately
 80075e6:	2080      	movs	r0, #128	; 0x80
 80075e8:	f7ff ff26 	bl	8007438 <system_set_exec_state_flag>
          break;
 80075ec:	e74b      	b.n	8007486 <system_execute_line+0x3a>
          if ( line[++char_counter] == 0 ) {
 80075ee:	2302      	movs	r3, #2
 80075f0:	78ac      	ldrb	r4, [r5, #2]
 80075f2:	f88d 3007 	strb.w	r3, [sp, #7]
 80075f6:	b934      	cbnz	r4, 8007606 <system_execute_line+0x1ba>
            settings_read_build_info(line);
 80075f8:	4628      	mov	r0, r5
 80075fa:	f7fe fdf7 	bl	80061ec <settings_read_build_info>
            report_build_info(line);
 80075fe:	4628      	mov	r0, r5
 8007600:	f7fe faf0 	bl	8005be4 <report_build_info>
 8007604:	e73f      	b.n	8007486 <system_execute_line+0x3a>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8007606:	2c3d      	cmp	r4, #61	; 0x3d
 8007608:	f47f af49 	bne.w	800749e <system_execute_line+0x52>
 800760c:	2303      	movs	r3, #3
                line[char_counter-helper_var] = line[char_counter];
 800760e:	5cec      	ldrb	r4, [r5, r3]
 8007610:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 8007612:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 8007614:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2c00      	cmp	r4, #0
 800761c:	d1f7      	bne.n	800760e <system_execute_line+0x1c2>
              settings_store_build_info(line);
 800761e:	4628      	mov	r0, r5
 8007620:	f88d 3007 	strb.w	r3, [sp, #7]
 8007624:	f7fe fd26 	bl	8006074 <settings_store_build_info>
 8007628:	e72d      	b.n	8007486 <system_execute_line+0x3a>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 800762a:	78ab      	ldrb	r3, [r5, #2]
 800762c:	2b53      	cmp	r3, #83	; 0x53
 800762e:	f47f af36 	bne.w	800749e <system_execute_line+0x52>
 8007632:	78eb      	ldrb	r3, [r5, #3]
 8007634:	2b54      	cmp	r3, #84	; 0x54
 8007636:	f47f af32 	bne.w	800749e <system_execute_line+0x52>
 800763a:	792b      	ldrb	r3, [r5, #4]
 800763c:	2b3d      	cmp	r3, #61	; 0x3d
 800763e:	f47f af2e 	bne.w	800749e <system_execute_line+0x52>
 8007642:	79ab      	ldrb	r3, [r5, #6]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f47f af2a 	bne.w	800749e <system_execute_line+0x52>
          switch (line[5]) {
 800764a:	796b      	ldrb	r3, [r5, #5]
 800764c:	2b24      	cmp	r3, #36	; 0x24
 800764e:	d006      	beq.n	800765e <system_execute_line+0x212>
 8007650:	2b2a      	cmp	r3, #42	; 0x2a
 8007652:	d00d      	beq.n	8007670 <system_execute_line+0x224>
 8007654:	2b23      	cmp	r3, #35	; 0x23
 8007656:	f47f af22 	bne.w	800749e <system_execute_line+0x52>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 800765a:	2002      	movs	r0, #2
 800765c:	e000      	b.n	8007660 <system_execute_line+0x214>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 800765e:	2001      	movs	r0, #1
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 8007660:	f7fe fd2c 	bl	80060bc <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 8007664:	2009      	movs	r0, #9
 8007666:	f7fe f875 	bl	8005754 <report_feedback_message>
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 800766a:	f7fc febf 	bl	80043ec <mc_reset>
 800766e:	e700      	b.n	8007472 <system_execute_line+0x26>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 8007670:	20ff      	movs	r0, #255	; 0xff
 8007672:	e7f5      	b.n	8007660 <system_execute_line+0x214>
                report_startup_line(helper_var,line);
 8007674:	4629      	mov	r1, r5
 8007676:	4630      	mov	r0, r6
 8007678:	f7fe fa8c 	bl	8005b94 <report_startup_line>
 800767c:	e76d      	b.n	800755a <system_execute_line+0x10e>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 800767e:	2b00      	cmp	r3, #0
 8007680:	d153      	bne.n	800772a <system_execute_line+0x2de>
            helper_var = true;  // Set helper_var to flag storing method.
 8007682:	2401      	movs	r4, #1
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8007684:	aa02      	add	r2, sp, #8
 8007686:	f10d 0107 	add.w	r1, sp, #7
 800768a:	4628      	mov	r0, r5
 800768c:	f7fc fed8 	bl	8004440 <read_float>
 8007690:	b908      	cbnz	r0, 8007696 <system_execute_line+0x24a>
 8007692:	2402      	movs	r4, #2
 8007694:	e6f7      	b.n	8007486 <system_execute_line+0x3a>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8007696:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	5ceb      	ldrb	r3, [r5, r3]
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	2b3d      	cmp	r3, #61	; 0x3d
 80076a2:	f88d 2007 	strb.w	r2, [sp, #7]
 80076a6:	f47f aefa 	bne.w	800749e <system_execute_line+0x52>
          if (helper_var) { // Store startup line
 80076aa:	b1f4      	cbz	r4, 80076ea <system_execute_line+0x29e>
 80076ac:	4613      	mov	r3, r2
              line[char_counter-helper_var] = line[char_counter];
 80076ae:	5cec      	ldrb	r4, [r5, r3]
 80076b0:	1a98      	subs	r0, r3, r2
 80076b2:	18e9      	adds	r1, r5, r3
 80076b4:	542c      	strb	r4, [r5, r0]
            } while (line[char_counter++] != 0);
 80076b6:	7809      	ldrb	r1, [r1, #0]
 80076b8:	3301      	adds	r3, #1
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2900      	cmp	r1, #0
 80076be:	d1f6      	bne.n	80076ae <system_execute_line+0x262>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 80076c0:	4628      	mov	r0, r5
 80076c2:	f88d 3007 	strb.w	r3, [sp, #7]
 80076c6:	f7fb fa83 	bl	8002bd0 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 80076ca:	4604      	mov	r4, r0
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f47f aeda 	bne.w	8007486 <system_execute_line+0x3a>
              helper_var = trunc(parameter); // Set helper_var to int value of parameter
 80076d2:	9802      	ldr	r0, [sp, #8]
 80076d4:	f7f8 feac 	bl	8000430 <__aeabi_f2d>
 80076d8:	f000 ff52 	bl	8008580 <trunc>
 80076dc:	f7f9 f9d4 	bl	8000a88 <__aeabi_d2uiz>
              settings_store_startup_line(helper_var,line);
 80076e0:	4629      	mov	r1, r5
 80076e2:	b2c0      	uxtb	r0, r0
 80076e4:	f7fe fcb6 	bl	8006054 <settings_store_startup_line>
 80076e8:	e6cd      	b.n	8007486 <system_execute_line+0x3a>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 80076ea:	aa03      	add	r2, sp, #12
 80076ec:	f10d 0107 	add.w	r1, sp, #7
 80076f0:	4628      	mov	r0, r5
 80076f2:	f7fc fea5 	bl	8004440 <read_float>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d0cb      	beq.n	8007692 <system_execute_line+0x246>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 80076fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80076fe:	5ceb      	ldrb	r3, [r5, r3]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f47f aecc 	bne.w	800749e <system_execute_line+0x52>
 8007706:	9c02      	ldr	r4, [sp, #8]
 8007708:	490b      	ldr	r1, [pc, #44]	; (8007738 <system_execute_line+0x2ec>)
 800770a:	4620      	mov	r0, r4
 800770c:	f7f9 fcf6 	bl	80010fc <__aeabi_fcmpgt>
 8007710:	2800      	cmp	r0, #0
 8007712:	f47f aec4 	bne.w	800749e <system_execute_line+0x52>
            return(settings_store_global_setting((uint8_t)parameter, value));
 8007716:	4620      	mov	r0, r4
 8007718:	f7f9 fd36 	bl	8001188 <__aeabi_f2uiz>
 800771c:	9903      	ldr	r1, [sp, #12]
 800771e:	b2c0      	uxtb	r0, r0
 8007720:	f7fe fda2 	bl	8006268 <settings_store_global_setting>
 8007724:	e6bf      	b.n	80074a6 <system_execute_line+0x5a>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8007726:	2405      	movs	r4, #5
 8007728:	e6ad      	b.n	8007486 <system_execute_line+0x3a>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 800772a:	2408      	movs	r4, #8
 800772c:	e6ab      	b.n	8007486 <system_execute_line+0x3a>
 800772e:	bf00      	nop
 8007730:	20002e30 	.word	0x20002e30
 8007734:	20003478 	.word	0x20003478
 8007738:	437f0000 	.word	0x437f0000

0800773c <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 800773c:	b672      	cpsid	i

void system_clear_exec_state_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 800773e:	4a03      	ldr	r2, [pc, #12]	; (800774c <system_clear_exec_state_flag+0x10>)
 8007740:	7813      	ldrb	r3, [r2, #0]
 8007742:	ea23 0000 	bic.w	r0, r3, r0
 8007746:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007748:	b662      	cpsie	i
 800774a:	4770      	bx	lr
 800774c:	20002e45 	.word	0x20002e45

08007750 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007750:	b672      	cpsid	i

void system_set_exec_alarm(uint8_t code)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_alarm |= (code);
 8007752:	4a03      	ldr	r2, [pc, #12]	; (8007760 <system_set_exec_alarm+0x10>)
 8007754:	7813      	ldrb	r3, [r2, #0]
 8007756:	4318      	orrs	r0, r3
 8007758:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800775a:	b662      	cpsie	i
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	20002e60 	.word	0x20002e60

08007764 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007764:	b672      	cpsid	i

void system_clear_exec_alarm()
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_alarm = 0;
 8007766:	2200      	movs	r2, #0
 8007768:	4b01      	ldr	r3, [pc, #4]	; (8007770 <system_clear_exec_alarm+0xc>)
 800776a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800776c:	b662      	cpsie	i
 800776e:	4770      	bx	lr
 8007770:	20002e60 	.word	0x20002e60

08007774 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007774:	b672      	cpsid	i

void system_set_exec_motion_override_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 8007776:	4a03      	ldr	r2, [pc, #12]	; (8007784 <system_set_exec_motion_override_flag+0x10>)
 8007778:	7813      	ldrb	r3, [r2, #0]
 800777a:	4318      	orrs	r0, r3
 800777c:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800777e:	b662      	cpsie	i
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20002e2c 	.word	0x20002e2c

08007788 <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007788:	b672      	cpsid	i

void system_set_exec_accessory_override_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 800778a:	4a03      	ldr	r2, [pc, #12]	; (8007798 <system_set_exec_accessory_override_flag+0x10>)
 800778c:	7813      	ldrb	r3, [r2, #0]
 800778e:	4318      	orrs	r0, r3
 8007790:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007792:	b662      	cpsie	i
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	20002e44 	.word	0x20002e44

0800779c <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i" : : : "memory");
 800779c:	b672      	cpsid	i

void system_clear_exec_motion_overrides()
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 800779e:	2200      	movs	r2, #0
 80077a0:	4b01      	ldr	r3, [pc, #4]	; (80077a8 <system_clear_exec_motion_overrides+0xc>)
 80077a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80077a4:	b662      	cpsie	i
 80077a6:	4770      	bx	lr
 80077a8:	20002e2c 	.word	0x20002e2c

080077ac <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i" : : : "memory");
 80077ac:	b672      	cpsid	i

void system_clear_exec_accessory_overrides()
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 80077ae:	2200      	movs	r2, #0
 80077b0:	4b01      	ldr	r3, [pc, #4]	; (80077b8 <system_clear_exec_accessory_overrides+0xc>)
 80077b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80077b4:	b662      	cpsie	i
 80077b6:	4770      	bx	lr
 80077b8:	20002e44 	.word	0x20002e44

080077bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80077bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80077be:	e003      	b.n	80077c8 <LoopCopyDataInit>

080077c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80077c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80077c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80077c6:	3104      	adds	r1, #4

080077c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80077c8:	480a      	ldr	r0, [pc, #40]	; (80077f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80077ca:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80077cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80077ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80077d0:	d3f6      	bcc.n	80077c0 <CopyDataInit>
  ldr r2, =_sbss
 80077d2:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80077d4:	e002      	b.n	80077dc <LoopFillZerobss>

080077d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80077d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80077d8:	f842 3b04 	str.w	r3, [r2], #4

080077dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80077dc:	4b08      	ldr	r3, [pc, #32]	; (8007800 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80077de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80077e0:	d3f9      	bcc.n	80077d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80077e2:	f7fa ff65 	bl	80026b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80077e6:	f000 f8d3 	bl	8007990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80077ea:	f7fa fde9 	bl	80023c0 <main>
  bx lr
 80077ee:	4770      	bx	lr
  ldr r3, =_sidata
 80077f0:	08009f34 	.word	0x08009f34
  ldr r0, =_sdata
 80077f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80077f8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80077fc:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8007800:	20003568 	.word	0x20003568

08007804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007804:	e7fe      	b.n	8007804 <ADC1_2_IRQHandler>
	...

08007808 <outputs_digital_reset>:

}

// Reset outputs
void outputs_digital_reset()
{
 8007808:	b510      	push	{r4, lr}
  uint8_t i;
  for (i = 0; i < N_OUTPUTS_DIG; i++)
    GPIO_ResetBits(AUX_GPIO_Port, outputs_pin_mask[i]);
 800780a:	4c0a      	ldr	r4, [pc, #40]	; (8007834 <outputs_digital_reset+0x2c>)
 800780c:	2140      	movs	r1, #64	; 0x40
 800780e:	4620      	mov	r0, r4
 8007810:	f000 f8b2 	bl	8007978 <GPIO_ResetBits>
 8007814:	4620      	mov	r0, r4
 8007816:	2180      	movs	r1, #128	; 0x80
 8007818:	f000 f8ae 	bl	8007978 <GPIO_ResetBits>
 800781c:	4620      	mov	r0, r4
 800781e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007822:	f000 f8a9 	bl	8007978 <GPIO_ResetBits>
 8007826:	4620      	mov	r0, r4
}
 8007828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GPIO_ResetBits(AUX_GPIO_Port, outputs_pin_mask[i]);
 800782c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007830:	f000 b8a2 	b.w	8007978 <GPIO_ResetBits>
 8007834:	40010c00 	.word	0x40010c00

08007838 <inoutputs_init>:
  outputs_digital_reset();
 8007838:	f7ff bfe6 	b.w	8007808 <outputs_digital_reset>

0800783c <outputs_digital_set>:
// Set outputs
void outputs_digital_set()
{
 800783c:	b510      	push	{r4, lr}
  uint8_t i;
  for (i = 0; i < N_OUTPUTS_DIG; i++)
    GPIO_SetBits(AUX_GPIO_Port, outputs_pin_mask[i]);
 800783e:	4c0a      	ldr	r4, [pc, #40]	; (8007868 <outputs_digital_set+0x2c>)
 8007840:	2140      	movs	r1, #64	; 0x40
 8007842:	4620      	mov	r0, r4
 8007844:	f000 f89b 	bl	800797e <GPIO_SetBits>
 8007848:	4620      	mov	r0, r4
 800784a:	2180      	movs	r1, #128	; 0x80
 800784c:	f000 f897 	bl	800797e <GPIO_SetBits>
 8007850:	4620      	mov	r0, r4
 8007852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007856:	f000 f892 	bl	800797e <GPIO_SetBits>
 800785a:	4620      	mov	r0, r4
}
 800785c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GPIO_SetBits(AUX_GPIO_Port, outputs_pin_mask[i]);
 8007860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007864:	f000 b88b 	b.w	800797e <GPIO_SetBits>
 8007868:	40010c00 	.word	0x40010c00

0800786c <outputs_set_digital>:
  return outputs_state;
}

void outputs_set_digital(uint8_t bit_index, uint8_t OnOff)
{
  if (bit_index < N_OUTPUTS_DIG)
 800786c:	2803      	cmp	r0, #3
 800786e:	d80b      	bhi.n	8007888 <outputs_set_digital+0x1c>
 8007870:	4b06      	ldr	r3, [pc, #24]	; (800788c <outputs_set_digital+0x20>)
    {
    if (OnOff)
 8007872:	b121      	cbz	r1, 800787e <outputs_set_digital+0x12>
      GPIO_SetBits(AUX_GPIO_Port, outputs_pin_mask[bit_index]);
 8007874:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8007878:	4805      	ldr	r0, [pc, #20]	; (8007890 <outputs_set_digital+0x24>)
 800787a:	f000 b880 	b.w	800797e <GPIO_SetBits>
    else
      GPIO_ResetBits(AUX_GPIO_Port, outputs_pin_mask[bit_index]);
 800787e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8007882:	4803      	ldr	r0, [pc, #12]	; (8007890 <outputs_set_digital+0x24>)
 8007884:	f000 b878 	b.w	8007978 <GPIO_ResetBits>
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	08009ad2 	.word	0x08009ad2
 8007890:	40010c00 	.word	0x40010c00

08007894 <outputs_digital_action>:
    }
}

void outputs_digital_action(uint8_t bit_index, uint8_t Action)
{
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4605      	mov	r5, r0
 8007898:	460c      	mov	r4, r1
  protocol_buffer_synchronize();
 800789a:	f7fd fedb 	bl	8005654 <protocol_buffer_synchronize>
  if (bit_index == 0xFF)
 800789e:	2dff      	cmp	r5, #255	; 0xff
 80078a0:	d10b      	bne.n	80078ba <outputs_digital_action+0x26>
    {
    if (Action == DIGITAL_CONTROL_ON)
 80078a2:	2c01      	cmp	r4, #1
 80078a4:	d103      	bne.n	80078ae <outputs_digital_action+0x1a>
      outputs_set_digital(bit_index, 1);
    else if (Action == DIGITAL_CONTROL_OFF)
      outputs_set_digital(bit_index, 0);
    }

}
 80078a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      outputs_digital_set();
 80078aa:	f7ff bfc7 	b.w	800783c <outputs_digital_set>
    else if (Action == DIGITAL_CONTROL_OFF)
 80078ae:	2c02      	cmp	r4, #2
 80078b0:	d111      	bne.n	80078d6 <outputs_digital_action+0x42>
}
 80078b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      outputs_digital_reset();
 80078b6:	f7ff bfa7 	b.w	8007808 <outputs_digital_reset>
  else if (bit_index < N_OUTPUTS_DIG)
 80078ba:	2d03      	cmp	r5, #3
 80078bc:	d80b      	bhi.n	80078d6 <outputs_digital_action+0x42>
    if (Action == DIGITAL_CONTROL_ON)
 80078be:	2c01      	cmp	r4, #1
 80078c0:	d105      	bne.n	80078ce <outputs_digital_action+0x3a>
      outputs_set_digital(bit_index, 1);
 80078c2:	4621      	mov	r1, r4
      outputs_set_digital(bit_index, 0);
 80078c4:	4628      	mov	r0, r5
}
 80078c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      outputs_set_digital(bit_index, 0);
 80078ca:	f7ff bfcf 	b.w	800786c <outputs_set_digital>
    else if (Action == DIGITAL_CONTROL_OFF)
 80078ce:	2c02      	cmp	r4, #2
 80078d0:	d101      	bne.n	80078d6 <outputs_digital_action+0x42>
      outputs_set_digital(bit_index, 0);
 80078d2:	2100      	movs	r1, #0
 80078d4:	e7f6      	b.n	80078c4 <outputs_digital_action+0x30>
 80078d6:	bd38      	pop	{r3, r4, r5, pc}

080078d8 <outputs_analog_init>:
 80078d8:	4770      	bx	lr

080078da <outputs_analog_action>:
void outputs_set_analog(uint8_t channel, uint16_t value)
  {}
uint16_t outputs_compute_pwm_value(float Val)
  {return (0);}
void outputs_analog_action (uint8_t Echannel, float *pQval)
  {}
 80078da:	4770      	bx	lr

080078dc <wait_on_input_action>:
void inputs_digital_init()
  {}
void wait_on_input_action (uint8_t bit_index, uint8_t Mode,float *pTimeoutS)
  {}
 80078dc:	4770      	bx	lr
	...

080078e0 <timing_init>:
char pDbgVal16[17];


//-------------------------------------------------------------------
void timing_init()
{
 80078e0:	b508      	push	{r3, lr}
	uTICKS_PER_MICROSECOND = SystemCoreClock/1000000;
 80078e2:	4b07      	ldr	r3, [pc, #28]	; (8007900 <timing_init+0x20>)
 80078e4:	4a07      	ldr	r2, [pc, #28]	; (8007904 <timing_init+0x24>)
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	4b07      	ldr	r3, [pc, #28]	; (8007908 <timing_init+0x28>)
 80078ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80078ee:	6013      	str	r3, [r2, #0]
	fTICKS_PER_MINUTE = SystemCoreClock*60.0f;
 80078f0:	f7f9 f9f0 	bl	8000cd4 <__aeabi_ui2f>
 80078f4:	4905      	ldr	r1, [pc, #20]	; (800790c <timing_init+0x2c>)
 80078f6:	f7f9 fa45 	bl	8000d84 <__aeabi_fmul>
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <timing_init+0x30>)
 80078fc:	6018      	str	r0, [r3, #0]
 80078fe:	bd08      	pop	{r3, pc}
 8007900:	20000008 	.word	0x20000008
 8007904:	20002da4 	.word	0x20002da4
 8007908:	000f4240 	.word	0x000f4240
 800790c:	42700000 	.word	0x42700000
 8007910:	20002da0 	.word	0x20002da0

08007914 <uart_sendch>:
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8007914:	4b02      	ldr	r3, [pc, #8]	; (8007920 <uart_sendch+0xc>)
 8007916:	6058      	str	r0, [r3, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007918:	681a      	ldr	r2, [r3, #0]
}

void uart_sendch(uint8_t uC)
{
	LL_USART_TransmitData8(USART1, uC);
	while (!(LL_USART_IsActiveFlag_TXE(USART1)))
 800791a:	0612      	lsls	r2, r2, #24
 800791c:	d5fc      	bpl.n	8007918 <uart_sendch+0x4>
		; // sit till empty
}
 800791e:	4770      	bx	lr
 8007920:	40013800 	.word	0x40013800

08007924 <uart_sendstr>:
{
 8007924:	b508      	push	{r3, lr}
 8007926:	1e41      	subs	r1, r0, #1
	while (*pStr)
 8007928:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800792c:	b900      	cbnz	r0, 8007930 <uart_sendstr+0xc>
}
 800792e:	bd08      	pop	{r3, pc}
		uart_sendch(*pStr++);
 8007930:	f7ff fff0 	bl	8007914 <uart_sendch>
 8007934:	e7f8      	b.n	8007928 <uart_sendstr+0x4>
	...

08007938 <uart_init>:
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007938:	4a0b      	ldr	r2, [pc, #44]	; (8007968 <uart_init+0x30>)
{
 800793a:	b510      	push	{r4, lr}
 800793c:	68d3      	ldr	r3, [r2, #12]
  memset (pDbgStr,0,80);
 800793e:	4c0b      	ldr	r4, [pc, #44]	; (800796c <uart_init+0x34>)
 8007940:	f043 0320 	orr.w	r3, r3, #32
 8007944:	60d3      	str	r3, [r2, #12]
 8007946:	2100      	movs	r1, #0
 8007948:	2250      	movs	r2, #80	; 0x50
 800794a:	4620      	mov	r0, r4
 800794c:	f000 f853 	bl	80079f6 <memset>
  sprintf(pDbgStr,"\r\nSysClk:%ld\r\n",SystemCoreClock);    //-- Clock check for Overclocking case
 8007950:	4b07      	ldr	r3, [pc, #28]	; (8007970 <uart_init+0x38>)
 8007952:	4620      	mov	r0, r4
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4907      	ldr	r1, [pc, #28]	; (8007974 <uart_init+0x3c>)
 8007958:	f000 f856 	bl	8007a08 <siprintf>
  uart_sendstr(pDbgStr);
 800795c:	4620      	mov	r0, r4
}
 800795e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  uart_sendstr(pDbgStr);
 8007962:	f7ff bfdf 	b.w	8007924 <uart_sendstr>
 8007966:	bf00      	nop
 8007968:	40013800 	.word	0x40013800
 800796c:	200034f0 	.word	0x200034f0
 8007970:	20000008 	.word	0x20000008
 8007974:	08009aec 	.word	0x08009aec

08007978 <GPIO_ResetBits>:

//------------------------------------------------------------------------
//-- Pin based calls, need to use HAL since LL pins and HAL pins are incompatible for F1
void GPIO_ResetBits (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8007978:	2200      	movs	r2, #0
 800797a:	f7f9 be9b 	b.w	80016b4 <HAL_GPIO_WritePin>

0800797e <GPIO_SetBits>:
}
void GPIO_SetBits	(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800797e:	2201      	movs	r2, #1
 8007980:	f7f9 be98 	b.w	80016b4 <HAL_GPIO_WritePin>

08007984 <__errno>:
 8007984:	4b01      	ldr	r3, [pc, #4]	; (800798c <__errno+0x8>)
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	2000000c 	.word	0x2000000c

08007990 <__libc_init_array>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	2500      	movs	r5, #0
 8007994:	4e0c      	ldr	r6, [pc, #48]	; (80079c8 <__libc_init_array+0x38>)
 8007996:	4c0d      	ldr	r4, [pc, #52]	; (80079cc <__libc_init_array+0x3c>)
 8007998:	1ba4      	subs	r4, r4, r6
 800799a:	10a4      	asrs	r4, r4, #2
 800799c:	42a5      	cmp	r5, r4
 800799e:	d109      	bne.n	80079b4 <__libc_init_array+0x24>
 80079a0:	f001 ff90 	bl	80098c4 <_init>
 80079a4:	2500      	movs	r5, #0
 80079a6:	4e0a      	ldr	r6, [pc, #40]	; (80079d0 <__libc_init_array+0x40>)
 80079a8:	4c0a      	ldr	r4, [pc, #40]	; (80079d4 <__libc_init_array+0x44>)
 80079aa:	1ba4      	subs	r4, r4, r6
 80079ac:	10a4      	asrs	r4, r4, #2
 80079ae:	42a5      	cmp	r5, r4
 80079b0:	d105      	bne.n	80079be <__libc_init_array+0x2e>
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079b8:	4798      	blx	r3
 80079ba:	3501      	adds	r5, #1
 80079bc:	e7ee      	b.n	800799c <__libc_init_array+0xc>
 80079be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079c2:	4798      	blx	r3
 80079c4:	3501      	adds	r5, #1
 80079c6:	e7f2      	b.n	80079ae <__libc_init_array+0x1e>
 80079c8:	08009f2c 	.word	0x08009f2c
 80079cc:	08009f2c 	.word	0x08009f2c
 80079d0:	08009f2c 	.word	0x08009f2c
 80079d4:	08009f30 	.word	0x08009f30

080079d8 <memcmp>:
 80079d8:	b510      	push	{r4, lr}
 80079da:	3901      	subs	r1, #1
 80079dc:	4402      	add	r2, r0
 80079de:	4290      	cmp	r0, r2
 80079e0:	d101      	bne.n	80079e6 <memcmp+0xe>
 80079e2:	2000      	movs	r0, #0
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80079ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80079ee:	42a3      	cmp	r3, r4
 80079f0:	d0f5      	beq.n	80079de <memcmp+0x6>
 80079f2:	1b18      	subs	r0, r3, r4
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <memset>:
 80079f6:	4603      	mov	r3, r0
 80079f8:	4402      	add	r2, r0
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d100      	bne.n	8007a00 <memset+0xa>
 80079fe:	4770      	bx	lr
 8007a00:	f803 1b01 	strb.w	r1, [r3], #1
 8007a04:	e7f9      	b.n	80079fa <memset+0x4>
	...

08007a08 <siprintf>:
 8007a08:	b40e      	push	{r1, r2, r3}
 8007a0a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007a0e:	b500      	push	{lr}
 8007a10:	b09c      	sub	sp, #112	; 0x70
 8007a12:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007a16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a1a:	9104      	str	r1, [sp, #16]
 8007a1c:	9107      	str	r1, [sp, #28]
 8007a1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007a22:	ab1d      	add	r3, sp, #116	; 0x74
 8007a24:	9002      	str	r0, [sp, #8]
 8007a26:	9006      	str	r0, [sp, #24]
 8007a28:	4808      	ldr	r0, [pc, #32]	; (8007a4c <siprintf+0x44>)
 8007a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007a32:	6800      	ldr	r0, [r0, #0]
 8007a34:	a902      	add	r1, sp, #8
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	f000 f866 	bl	8007b08 <_svfiprintf_r>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	9b02      	ldr	r3, [sp, #8]
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	b01c      	add	sp, #112	; 0x70
 8007a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a48:	b003      	add	sp, #12
 8007a4a:	4770      	bx	lr
 8007a4c:	2000000c 	.word	0x2000000c

08007a50 <__ssputs_r>:
 8007a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a54:	688e      	ldr	r6, [r1, #8]
 8007a56:	4682      	mov	sl, r0
 8007a58:	429e      	cmp	r6, r3
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	4691      	mov	r9, r2
 8007a5e:	4698      	mov	r8, r3
 8007a60:	d835      	bhi.n	8007ace <__ssputs_r+0x7e>
 8007a62:	898a      	ldrh	r2, [r1, #12]
 8007a64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a68:	d031      	beq.n	8007ace <__ssputs_r+0x7e>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	6825      	ldr	r5, [r4, #0]
 8007a6e:	6909      	ldr	r1, [r1, #16]
 8007a70:	1a6f      	subs	r7, r5, r1
 8007a72:	6965      	ldr	r5, [r4, #20]
 8007a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a78:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a7c:	f108 0301 	add.w	r3, r8, #1
 8007a80:	443b      	add	r3, r7
 8007a82:	429d      	cmp	r5, r3
 8007a84:	bf38      	it	cc
 8007a86:	461d      	movcc	r5, r3
 8007a88:	0553      	lsls	r3, r2, #21
 8007a8a:	d531      	bpl.n	8007af0 <__ssputs_r+0xa0>
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	f000 fb47 	bl	8008120 <_malloc_r>
 8007a92:	4606      	mov	r6, r0
 8007a94:	b950      	cbnz	r0, 8007aac <__ssputs_r+0x5c>
 8007a96:	230c      	movs	r3, #12
 8007a98:	f8ca 3000 	str.w	r3, [sl]
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aa6:	81a3      	strh	r3, [r4, #12]
 8007aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aac:	463a      	mov	r2, r7
 8007aae:	6921      	ldr	r1, [r4, #16]
 8007ab0:	f000 fac4 	bl	800803c <memcpy>
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007abe:	81a3      	strh	r3, [r4, #12]
 8007ac0:	6126      	str	r6, [r4, #16]
 8007ac2:	443e      	add	r6, r7
 8007ac4:	6026      	str	r6, [r4, #0]
 8007ac6:	4646      	mov	r6, r8
 8007ac8:	6165      	str	r5, [r4, #20]
 8007aca:	1bed      	subs	r5, r5, r7
 8007acc:	60a5      	str	r5, [r4, #8]
 8007ace:	4546      	cmp	r6, r8
 8007ad0:	bf28      	it	cs
 8007ad2:	4646      	movcs	r6, r8
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	4632      	mov	r2, r6
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	f000 faba 	bl	8008052 <memmove>
 8007ade:	68a3      	ldr	r3, [r4, #8]
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	1b9b      	subs	r3, r3, r6
 8007ae4:	60a3      	str	r3, [r4, #8]
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	441e      	add	r6, r3
 8007aea:	6026      	str	r6, [r4, #0]
 8007aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af0:	462a      	mov	r2, r5
 8007af2:	f000 fb73 	bl	80081dc <_realloc_r>
 8007af6:	4606      	mov	r6, r0
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d1e1      	bne.n	8007ac0 <__ssputs_r+0x70>
 8007afc:	6921      	ldr	r1, [r4, #16]
 8007afe:	4650      	mov	r0, sl
 8007b00:	f000 fac2 	bl	8008088 <_free_r>
 8007b04:	e7c7      	b.n	8007a96 <__ssputs_r+0x46>
	...

08007b08 <_svfiprintf_r>:
 8007b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	b09d      	sub	sp, #116	; 0x74
 8007b0e:	9303      	str	r3, [sp, #12]
 8007b10:	898b      	ldrh	r3, [r1, #12]
 8007b12:	4680      	mov	r8, r0
 8007b14:	061c      	lsls	r4, r3, #24
 8007b16:	460d      	mov	r5, r1
 8007b18:	4616      	mov	r6, r2
 8007b1a:	d50f      	bpl.n	8007b3c <_svfiprintf_r+0x34>
 8007b1c:	690b      	ldr	r3, [r1, #16]
 8007b1e:	b96b      	cbnz	r3, 8007b3c <_svfiprintf_r+0x34>
 8007b20:	2140      	movs	r1, #64	; 0x40
 8007b22:	f000 fafd 	bl	8008120 <_malloc_r>
 8007b26:	6028      	str	r0, [r5, #0]
 8007b28:	6128      	str	r0, [r5, #16]
 8007b2a:	b928      	cbnz	r0, 8007b38 <_svfiprintf_r+0x30>
 8007b2c:	230c      	movs	r3, #12
 8007b2e:	f8c8 3000 	str.w	r3, [r8]
 8007b32:	f04f 30ff 	mov.w	r0, #4294967295
 8007b36:	e0c4      	b.n	8007cc2 <_svfiprintf_r+0x1ba>
 8007b38:	2340      	movs	r3, #64	; 0x40
 8007b3a:	616b      	str	r3, [r5, #20]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b40:	2320      	movs	r3, #32
 8007b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b46:	2330      	movs	r3, #48	; 0x30
 8007b48:	f04f 0b01 	mov.w	fp, #1
 8007b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b50:	4637      	mov	r7, r6
 8007b52:	463c      	mov	r4, r7
 8007b54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d13c      	bne.n	8007bd6 <_svfiprintf_r+0xce>
 8007b5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007b60:	d00b      	beq.n	8007b7a <_svfiprintf_r+0x72>
 8007b62:	4653      	mov	r3, sl
 8007b64:	4632      	mov	r2, r6
 8007b66:	4629      	mov	r1, r5
 8007b68:	4640      	mov	r0, r8
 8007b6a:	f7ff ff71 	bl	8007a50 <__ssputs_r>
 8007b6e:	3001      	adds	r0, #1
 8007b70:	f000 80a2 	beq.w	8007cb8 <_svfiprintf_r+0x1b0>
 8007b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b76:	4453      	add	r3, sl
 8007b78:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7a:	783b      	ldrb	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 809b 	beq.w	8007cb8 <_svfiprintf_r+0x1b0>
 8007b82:	2300      	movs	r3, #0
 8007b84:	f04f 32ff 	mov.w	r2, #4294967295
 8007b88:	9304      	str	r3, [sp, #16]
 8007b8a:	9307      	str	r3, [sp, #28]
 8007b8c:	9205      	str	r2, [sp, #20]
 8007b8e:	9306      	str	r3, [sp, #24]
 8007b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b94:	931a      	str	r3, [sp, #104]	; 0x68
 8007b96:	2205      	movs	r2, #5
 8007b98:	7821      	ldrb	r1, [r4, #0]
 8007b9a:	4850      	ldr	r0, [pc, #320]	; (8007cdc <_svfiprintf_r+0x1d4>)
 8007b9c:	f000 fa40 	bl	8008020 <memchr>
 8007ba0:	1c67      	adds	r7, r4, #1
 8007ba2:	9b04      	ldr	r3, [sp, #16]
 8007ba4:	b9d8      	cbnz	r0, 8007bde <_svfiprintf_r+0xd6>
 8007ba6:	06d9      	lsls	r1, r3, #27
 8007ba8:	bf44      	itt	mi
 8007baa:	2220      	movmi	r2, #32
 8007bac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007bb0:	071a      	lsls	r2, r3, #28
 8007bb2:	bf44      	itt	mi
 8007bb4:	222b      	movmi	r2, #43	; 0x2b
 8007bb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007bba:	7822      	ldrb	r2, [r4, #0]
 8007bbc:	2a2a      	cmp	r2, #42	; 0x2a
 8007bbe:	d016      	beq.n	8007bee <_svfiprintf_r+0xe6>
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	200a      	movs	r0, #10
 8007bc4:	9a07      	ldr	r2, [sp, #28]
 8007bc6:	4627      	mov	r7, r4
 8007bc8:	783b      	ldrb	r3, [r7, #0]
 8007bca:	3401      	adds	r4, #1
 8007bcc:	3b30      	subs	r3, #48	; 0x30
 8007bce:	2b09      	cmp	r3, #9
 8007bd0:	d950      	bls.n	8007c74 <_svfiprintf_r+0x16c>
 8007bd2:	b1c9      	cbz	r1, 8007c08 <_svfiprintf_r+0x100>
 8007bd4:	e011      	b.n	8007bfa <_svfiprintf_r+0xf2>
 8007bd6:	2b25      	cmp	r3, #37	; 0x25
 8007bd8:	d0c0      	beq.n	8007b5c <_svfiprintf_r+0x54>
 8007bda:	4627      	mov	r7, r4
 8007bdc:	e7b9      	b.n	8007b52 <_svfiprintf_r+0x4a>
 8007bde:	4a3f      	ldr	r2, [pc, #252]	; (8007cdc <_svfiprintf_r+0x1d4>)
 8007be0:	463c      	mov	r4, r7
 8007be2:	1a80      	subs	r0, r0, r2
 8007be4:	fa0b f000 	lsl.w	r0, fp, r0
 8007be8:	4318      	orrs	r0, r3
 8007bea:	9004      	str	r0, [sp, #16]
 8007bec:	e7d3      	b.n	8007b96 <_svfiprintf_r+0x8e>
 8007bee:	9a03      	ldr	r2, [sp, #12]
 8007bf0:	1d11      	adds	r1, r2, #4
 8007bf2:	6812      	ldr	r2, [r2, #0]
 8007bf4:	9103      	str	r1, [sp, #12]
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	db01      	blt.n	8007bfe <_svfiprintf_r+0xf6>
 8007bfa:	9207      	str	r2, [sp, #28]
 8007bfc:	e004      	b.n	8007c08 <_svfiprintf_r+0x100>
 8007bfe:	4252      	negs	r2, r2
 8007c00:	f043 0302 	orr.w	r3, r3, #2
 8007c04:	9207      	str	r2, [sp, #28]
 8007c06:	9304      	str	r3, [sp, #16]
 8007c08:	783b      	ldrb	r3, [r7, #0]
 8007c0a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c0c:	d10d      	bne.n	8007c2a <_svfiprintf_r+0x122>
 8007c0e:	787b      	ldrb	r3, [r7, #1]
 8007c10:	1c79      	adds	r1, r7, #1
 8007c12:	2b2a      	cmp	r3, #42	; 0x2a
 8007c14:	d132      	bne.n	8007c7c <_svfiprintf_r+0x174>
 8007c16:	9b03      	ldr	r3, [sp, #12]
 8007c18:	3702      	adds	r7, #2
 8007c1a:	1d1a      	adds	r2, r3, #4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	9203      	str	r2, [sp, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	bfb8      	it	lt
 8007c24:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c28:	9305      	str	r3, [sp, #20]
 8007c2a:	4c2d      	ldr	r4, [pc, #180]	; (8007ce0 <_svfiprintf_r+0x1d8>)
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	7839      	ldrb	r1, [r7, #0]
 8007c30:	4620      	mov	r0, r4
 8007c32:	f000 f9f5 	bl	8008020 <memchr>
 8007c36:	b138      	cbz	r0, 8007c48 <_svfiprintf_r+0x140>
 8007c38:	2340      	movs	r3, #64	; 0x40
 8007c3a:	1b00      	subs	r0, r0, r4
 8007c3c:	fa03 f000 	lsl.w	r0, r3, r0
 8007c40:	9b04      	ldr	r3, [sp, #16]
 8007c42:	3701      	adds	r7, #1
 8007c44:	4303      	orrs	r3, r0
 8007c46:	9304      	str	r3, [sp, #16]
 8007c48:	7839      	ldrb	r1, [r7, #0]
 8007c4a:	2206      	movs	r2, #6
 8007c4c:	4825      	ldr	r0, [pc, #148]	; (8007ce4 <_svfiprintf_r+0x1dc>)
 8007c4e:	1c7e      	adds	r6, r7, #1
 8007c50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c54:	f000 f9e4 	bl	8008020 <memchr>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d035      	beq.n	8007cc8 <_svfiprintf_r+0x1c0>
 8007c5c:	4b22      	ldr	r3, [pc, #136]	; (8007ce8 <_svfiprintf_r+0x1e0>)
 8007c5e:	b9fb      	cbnz	r3, 8007ca0 <_svfiprintf_r+0x198>
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	3307      	adds	r3, #7
 8007c64:	f023 0307 	bic.w	r3, r3, #7
 8007c68:	3308      	adds	r3, #8
 8007c6a:	9303      	str	r3, [sp, #12]
 8007c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6e:	444b      	add	r3, r9
 8007c70:	9309      	str	r3, [sp, #36]	; 0x24
 8007c72:	e76d      	b.n	8007b50 <_svfiprintf_r+0x48>
 8007c74:	fb00 3202 	mla	r2, r0, r2, r3
 8007c78:	2101      	movs	r1, #1
 8007c7a:	e7a4      	b.n	8007bc6 <_svfiprintf_r+0xbe>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	240a      	movs	r4, #10
 8007c80:	4618      	mov	r0, r3
 8007c82:	9305      	str	r3, [sp, #20]
 8007c84:	460f      	mov	r7, r1
 8007c86:	783a      	ldrb	r2, [r7, #0]
 8007c88:	3101      	adds	r1, #1
 8007c8a:	3a30      	subs	r2, #48	; 0x30
 8007c8c:	2a09      	cmp	r2, #9
 8007c8e:	d903      	bls.n	8007c98 <_svfiprintf_r+0x190>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0ca      	beq.n	8007c2a <_svfiprintf_r+0x122>
 8007c94:	9005      	str	r0, [sp, #20]
 8007c96:	e7c8      	b.n	8007c2a <_svfiprintf_r+0x122>
 8007c98:	fb04 2000 	mla	r0, r4, r0, r2
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e7f1      	b.n	8007c84 <_svfiprintf_r+0x17c>
 8007ca0:	ab03      	add	r3, sp, #12
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	462a      	mov	r2, r5
 8007ca6:	4b11      	ldr	r3, [pc, #68]	; (8007cec <_svfiprintf_r+0x1e4>)
 8007ca8:	a904      	add	r1, sp, #16
 8007caa:	4640      	mov	r0, r8
 8007cac:	f3af 8000 	nop.w
 8007cb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007cb4:	4681      	mov	r9, r0
 8007cb6:	d1d9      	bne.n	8007c6c <_svfiprintf_r+0x164>
 8007cb8:	89ab      	ldrh	r3, [r5, #12]
 8007cba:	065b      	lsls	r3, r3, #25
 8007cbc:	f53f af39 	bmi.w	8007b32 <_svfiprintf_r+0x2a>
 8007cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cc2:	b01d      	add	sp, #116	; 0x74
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc8:	ab03      	add	r3, sp, #12
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	462a      	mov	r2, r5
 8007cce:	4b07      	ldr	r3, [pc, #28]	; (8007cec <_svfiprintf_r+0x1e4>)
 8007cd0:	a904      	add	r1, sp, #16
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	f000 f884 	bl	8007de0 <_printf_i>
 8007cd8:	e7ea      	b.n	8007cb0 <_svfiprintf_r+0x1a8>
 8007cda:	bf00      	nop
 8007cdc:	08009afb 	.word	0x08009afb
 8007ce0:	08009b01 	.word	0x08009b01
 8007ce4:	08009b05 	.word	0x08009b05
 8007ce8:	00000000 	.word	0x00000000
 8007cec:	08007a51 	.word	0x08007a51

08007cf0 <_printf_common>:
 8007cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf4:	4691      	mov	r9, r2
 8007cf6:	461f      	mov	r7, r3
 8007cf8:	688a      	ldr	r2, [r1, #8]
 8007cfa:	690b      	ldr	r3, [r1, #16]
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	bfb8      	it	lt
 8007d02:	4613      	movlt	r3, r2
 8007d04:	f8c9 3000 	str.w	r3, [r9]
 8007d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d12:	b112      	cbz	r2, 8007d1a <_printf_common+0x2a>
 8007d14:	3301      	adds	r3, #1
 8007d16:	f8c9 3000 	str.w	r3, [r9]
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	0699      	lsls	r1, r3, #26
 8007d1e:	bf42      	ittt	mi
 8007d20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007d24:	3302      	addmi	r3, #2
 8007d26:	f8c9 3000 	strmi.w	r3, [r9]
 8007d2a:	6825      	ldr	r5, [r4, #0]
 8007d2c:	f015 0506 	ands.w	r5, r5, #6
 8007d30:	d107      	bne.n	8007d42 <_printf_common+0x52>
 8007d32:	f104 0a19 	add.w	sl, r4, #25
 8007d36:	68e3      	ldr	r3, [r4, #12]
 8007d38:	f8d9 2000 	ldr.w	r2, [r9]
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	429d      	cmp	r5, r3
 8007d40:	db2a      	blt.n	8007d98 <_printf_common+0xa8>
 8007d42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007d46:	6822      	ldr	r2, [r4, #0]
 8007d48:	3300      	adds	r3, #0
 8007d4a:	bf18      	it	ne
 8007d4c:	2301      	movne	r3, #1
 8007d4e:	0692      	lsls	r2, r2, #26
 8007d50:	d42f      	bmi.n	8007db2 <_printf_common+0xc2>
 8007d52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d56:	4639      	mov	r1, r7
 8007d58:	4630      	mov	r0, r6
 8007d5a:	47c0      	blx	r8
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d022      	beq.n	8007da6 <_printf_common+0xb6>
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	68e5      	ldr	r5, [r4, #12]
 8007d64:	f003 0306 	and.w	r3, r3, #6
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	bf18      	it	ne
 8007d6c:	2500      	movne	r5, #0
 8007d6e:	f8d9 2000 	ldr.w	r2, [r9]
 8007d72:	f04f 0900 	mov.w	r9, #0
 8007d76:	bf08      	it	eq
 8007d78:	1aad      	subeq	r5, r5, r2
 8007d7a:	68a3      	ldr	r3, [r4, #8]
 8007d7c:	6922      	ldr	r2, [r4, #16]
 8007d7e:	bf08      	it	eq
 8007d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d84:	4293      	cmp	r3, r2
 8007d86:	bfc4      	itt	gt
 8007d88:	1a9b      	subgt	r3, r3, r2
 8007d8a:	18ed      	addgt	r5, r5, r3
 8007d8c:	341a      	adds	r4, #26
 8007d8e:	454d      	cmp	r5, r9
 8007d90:	d11b      	bne.n	8007dca <_printf_common+0xda>
 8007d92:	2000      	movs	r0, #0
 8007d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4652      	mov	r2, sl
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	4630      	mov	r0, r6
 8007da0:	47c0      	blx	r8
 8007da2:	3001      	adds	r0, #1
 8007da4:	d103      	bne.n	8007dae <_printf_common+0xbe>
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dae:	3501      	adds	r5, #1
 8007db0:	e7c1      	b.n	8007d36 <_printf_common+0x46>
 8007db2:	2030      	movs	r0, #48	; 0x30
 8007db4:	18e1      	adds	r1, r4, r3
 8007db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dc0:	4422      	add	r2, r4
 8007dc2:	3302      	adds	r3, #2
 8007dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dc8:	e7c3      	b.n	8007d52 <_printf_common+0x62>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	4622      	mov	r2, r4
 8007dce:	4639      	mov	r1, r7
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	47c0      	blx	r8
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	d0e6      	beq.n	8007da6 <_printf_common+0xb6>
 8007dd8:	f109 0901 	add.w	r9, r9, #1
 8007ddc:	e7d7      	b.n	8007d8e <_printf_common+0x9e>
	...

08007de0 <_printf_i>:
 8007de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007de4:	4617      	mov	r7, r2
 8007de6:	7e0a      	ldrb	r2, [r1, #24]
 8007de8:	b085      	sub	sp, #20
 8007dea:	2a6e      	cmp	r2, #110	; 0x6e
 8007dec:	4698      	mov	r8, r3
 8007dee:	4606      	mov	r6, r0
 8007df0:	460c      	mov	r4, r1
 8007df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007df4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007df8:	f000 80bc 	beq.w	8007f74 <_printf_i+0x194>
 8007dfc:	d81a      	bhi.n	8007e34 <_printf_i+0x54>
 8007dfe:	2a63      	cmp	r2, #99	; 0x63
 8007e00:	d02e      	beq.n	8007e60 <_printf_i+0x80>
 8007e02:	d80a      	bhi.n	8007e1a <_printf_i+0x3a>
 8007e04:	2a00      	cmp	r2, #0
 8007e06:	f000 80c8 	beq.w	8007f9a <_printf_i+0x1ba>
 8007e0a:	2a58      	cmp	r2, #88	; 0x58
 8007e0c:	f000 808a 	beq.w	8007f24 <_printf_i+0x144>
 8007e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007e18:	e02a      	b.n	8007e70 <_printf_i+0x90>
 8007e1a:	2a64      	cmp	r2, #100	; 0x64
 8007e1c:	d001      	beq.n	8007e22 <_printf_i+0x42>
 8007e1e:	2a69      	cmp	r2, #105	; 0x69
 8007e20:	d1f6      	bne.n	8007e10 <_printf_i+0x30>
 8007e22:	6821      	ldr	r1, [r4, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007e2a:	d023      	beq.n	8007e74 <_printf_i+0x94>
 8007e2c:	1d11      	adds	r1, r2, #4
 8007e2e:	6019      	str	r1, [r3, #0]
 8007e30:	6813      	ldr	r3, [r2, #0]
 8007e32:	e027      	b.n	8007e84 <_printf_i+0xa4>
 8007e34:	2a73      	cmp	r2, #115	; 0x73
 8007e36:	f000 80b4 	beq.w	8007fa2 <_printf_i+0x1c2>
 8007e3a:	d808      	bhi.n	8007e4e <_printf_i+0x6e>
 8007e3c:	2a6f      	cmp	r2, #111	; 0x6f
 8007e3e:	d02a      	beq.n	8007e96 <_printf_i+0xb6>
 8007e40:	2a70      	cmp	r2, #112	; 0x70
 8007e42:	d1e5      	bne.n	8007e10 <_printf_i+0x30>
 8007e44:	680a      	ldr	r2, [r1, #0]
 8007e46:	f042 0220 	orr.w	r2, r2, #32
 8007e4a:	600a      	str	r2, [r1, #0]
 8007e4c:	e003      	b.n	8007e56 <_printf_i+0x76>
 8007e4e:	2a75      	cmp	r2, #117	; 0x75
 8007e50:	d021      	beq.n	8007e96 <_printf_i+0xb6>
 8007e52:	2a78      	cmp	r2, #120	; 0x78
 8007e54:	d1dc      	bne.n	8007e10 <_printf_i+0x30>
 8007e56:	2278      	movs	r2, #120	; 0x78
 8007e58:	496f      	ldr	r1, [pc, #444]	; (8008018 <_printf_i+0x238>)
 8007e5a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007e5e:	e064      	b.n	8007f2a <_printf_i+0x14a>
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007e66:	1d11      	adds	r1, r2, #4
 8007e68:	6019      	str	r1, [r3, #0]
 8007e6a:	6813      	ldr	r3, [r2, #0]
 8007e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e70:	2301      	movs	r3, #1
 8007e72:	e0a3      	b.n	8007fbc <_printf_i+0x1dc>
 8007e74:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007e78:	f102 0104 	add.w	r1, r2, #4
 8007e7c:	6019      	str	r1, [r3, #0]
 8007e7e:	d0d7      	beq.n	8007e30 <_printf_i+0x50>
 8007e80:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	da03      	bge.n	8007e90 <_printf_i+0xb0>
 8007e88:	222d      	movs	r2, #45	; 0x2d
 8007e8a:	425b      	negs	r3, r3
 8007e8c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007e90:	4962      	ldr	r1, [pc, #392]	; (800801c <_printf_i+0x23c>)
 8007e92:	220a      	movs	r2, #10
 8007e94:	e017      	b.n	8007ec6 <_printf_i+0xe6>
 8007e96:	6820      	ldr	r0, [r4, #0]
 8007e98:	6819      	ldr	r1, [r3, #0]
 8007e9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007e9e:	d003      	beq.n	8007ea8 <_printf_i+0xc8>
 8007ea0:	1d08      	adds	r0, r1, #4
 8007ea2:	6018      	str	r0, [r3, #0]
 8007ea4:	680b      	ldr	r3, [r1, #0]
 8007ea6:	e006      	b.n	8007eb6 <_printf_i+0xd6>
 8007ea8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007eac:	f101 0004 	add.w	r0, r1, #4
 8007eb0:	6018      	str	r0, [r3, #0]
 8007eb2:	d0f7      	beq.n	8007ea4 <_printf_i+0xc4>
 8007eb4:	880b      	ldrh	r3, [r1, #0]
 8007eb6:	2a6f      	cmp	r2, #111	; 0x6f
 8007eb8:	bf14      	ite	ne
 8007eba:	220a      	movne	r2, #10
 8007ebc:	2208      	moveq	r2, #8
 8007ebe:	4957      	ldr	r1, [pc, #348]	; (800801c <_printf_i+0x23c>)
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007ec6:	6865      	ldr	r5, [r4, #4]
 8007ec8:	2d00      	cmp	r5, #0
 8007eca:	60a5      	str	r5, [r4, #8]
 8007ecc:	f2c0 809c 	blt.w	8008008 <_printf_i+0x228>
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	f020 0004 	bic.w	r0, r0, #4
 8007ed6:	6020      	str	r0, [r4, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d13f      	bne.n	8007f5c <_printf_i+0x17c>
 8007edc:	2d00      	cmp	r5, #0
 8007ede:	f040 8095 	bne.w	800800c <_printf_i+0x22c>
 8007ee2:	4675      	mov	r5, lr
 8007ee4:	2a08      	cmp	r2, #8
 8007ee6:	d10b      	bne.n	8007f00 <_printf_i+0x120>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	07da      	lsls	r2, r3, #31
 8007eec:	d508      	bpl.n	8007f00 <_printf_i+0x120>
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	6862      	ldr	r2, [r4, #4]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	bfde      	ittt	le
 8007ef6:	2330      	movle	r3, #48	; 0x30
 8007ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f00:	ebae 0305 	sub.w	r3, lr, r5
 8007f04:	6123      	str	r3, [r4, #16]
 8007f06:	f8cd 8000 	str.w	r8, [sp]
 8007f0a:	463b      	mov	r3, r7
 8007f0c:	aa03      	add	r2, sp, #12
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7ff feed 	bl	8007cf0 <_printf_common>
 8007f16:	3001      	adds	r0, #1
 8007f18:	d155      	bne.n	8007fc6 <_printf_i+0x1e6>
 8007f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1e:	b005      	add	sp, #20
 8007f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f24:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007f28:	493c      	ldr	r1, [pc, #240]	; (800801c <_printf_i+0x23c>)
 8007f2a:	6822      	ldr	r2, [r4, #0]
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007f32:	f100 0504 	add.w	r5, r0, #4
 8007f36:	601d      	str	r5, [r3, #0]
 8007f38:	d001      	beq.n	8007f3e <_printf_i+0x15e>
 8007f3a:	6803      	ldr	r3, [r0, #0]
 8007f3c:	e002      	b.n	8007f44 <_printf_i+0x164>
 8007f3e:	0655      	lsls	r5, r2, #25
 8007f40:	d5fb      	bpl.n	8007f3a <_printf_i+0x15a>
 8007f42:	8803      	ldrh	r3, [r0, #0]
 8007f44:	07d0      	lsls	r0, r2, #31
 8007f46:	bf44      	itt	mi
 8007f48:	f042 0220 	orrmi.w	r2, r2, #32
 8007f4c:	6022      	strmi	r2, [r4, #0]
 8007f4e:	b91b      	cbnz	r3, 8007f58 <_printf_i+0x178>
 8007f50:	6822      	ldr	r2, [r4, #0]
 8007f52:	f022 0220 	bic.w	r2, r2, #32
 8007f56:	6022      	str	r2, [r4, #0]
 8007f58:	2210      	movs	r2, #16
 8007f5a:	e7b1      	b.n	8007ec0 <_printf_i+0xe0>
 8007f5c:	4675      	mov	r5, lr
 8007f5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f62:	fb02 3310 	mls	r3, r2, r0, r3
 8007f66:	5ccb      	ldrb	r3, [r1, r3]
 8007f68:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d1f5      	bne.n	8007f5e <_printf_i+0x17e>
 8007f72:	e7b7      	b.n	8007ee4 <_printf_i+0x104>
 8007f74:	6808      	ldr	r0, [r1, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007f7c:	6949      	ldr	r1, [r1, #20]
 8007f7e:	d004      	beq.n	8007f8a <_printf_i+0x1aa>
 8007f80:	1d10      	adds	r0, r2, #4
 8007f82:	6018      	str	r0, [r3, #0]
 8007f84:	6813      	ldr	r3, [r2, #0]
 8007f86:	6019      	str	r1, [r3, #0]
 8007f88:	e007      	b.n	8007f9a <_printf_i+0x1ba>
 8007f8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f8e:	f102 0004 	add.w	r0, r2, #4
 8007f92:	6018      	str	r0, [r3, #0]
 8007f94:	6813      	ldr	r3, [r2, #0]
 8007f96:	d0f6      	beq.n	8007f86 <_printf_i+0x1a6>
 8007f98:	8019      	strh	r1, [r3, #0]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4675      	mov	r5, lr
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	e7b1      	b.n	8007f06 <_printf_i+0x126>
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	1d11      	adds	r1, r2, #4
 8007fa6:	6019      	str	r1, [r3, #0]
 8007fa8:	6815      	ldr	r5, [r2, #0]
 8007faa:	2100      	movs	r1, #0
 8007fac:	6862      	ldr	r2, [r4, #4]
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f000 f836 	bl	8008020 <memchr>
 8007fb4:	b108      	cbz	r0, 8007fba <_printf_i+0x1da>
 8007fb6:	1b40      	subs	r0, r0, r5
 8007fb8:	6060      	str	r0, [r4, #4]
 8007fba:	6863      	ldr	r3, [r4, #4]
 8007fbc:	6123      	str	r3, [r4, #16]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc4:	e79f      	b.n	8007f06 <_printf_i+0x126>
 8007fc6:	6923      	ldr	r3, [r4, #16]
 8007fc8:	462a      	mov	r2, r5
 8007fca:	4639      	mov	r1, r7
 8007fcc:	4630      	mov	r0, r6
 8007fce:	47c0      	blx	r8
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d0a2      	beq.n	8007f1a <_printf_i+0x13a>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	079b      	lsls	r3, r3, #30
 8007fd8:	d507      	bpl.n	8007fea <_printf_i+0x20a>
 8007fda:	2500      	movs	r5, #0
 8007fdc:	f104 0919 	add.w	r9, r4, #25
 8007fe0:	68e3      	ldr	r3, [r4, #12]
 8007fe2:	9a03      	ldr	r2, [sp, #12]
 8007fe4:	1a9b      	subs	r3, r3, r2
 8007fe6:	429d      	cmp	r5, r3
 8007fe8:	db05      	blt.n	8007ff6 <_printf_i+0x216>
 8007fea:	68e0      	ldr	r0, [r4, #12]
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	4298      	cmp	r0, r3
 8007ff0:	bfb8      	it	lt
 8007ff2:	4618      	movlt	r0, r3
 8007ff4:	e793      	b.n	8007f1e <_printf_i+0x13e>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	464a      	mov	r2, r9
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	47c0      	blx	r8
 8008000:	3001      	adds	r0, #1
 8008002:	d08a      	beq.n	8007f1a <_printf_i+0x13a>
 8008004:	3501      	adds	r5, #1
 8008006:	e7eb      	b.n	8007fe0 <_printf_i+0x200>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1a7      	bne.n	8007f5c <_printf_i+0x17c>
 800800c:	780b      	ldrb	r3, [r1, #0]
 800800e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008012:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008016:	e765      	b.n	8007ee4 <_printf_i+0x104>
 8008018:	08009b1d 	.word	0x08009b1d
 800801c:	08009b0c 	.word	0x08009b0c

08008020 <memchr>:
 8008020:	b510      	push	{r4, lr}
 8008022:	b2c9      	uxtb	r1, r1
 8008024:	4402      	add	r2, r0
 8008026:	4290      	cmp	r0, r2
 8008028:	4603      	mov	r3, r0
 800802a:	d101      	bne.n	8008030 <memchr+0x10>
 800802c:	2000      	movs	r0, #0
 800802e:	bd10      	pop	{r4, pc}
 8008030:	781c      	ldrb	r4, [r3, #0]
 8008032:	3001      	adds	r0, #1
 8008034:	428c      	cmp	r4, r1
 8008036:	d1f6      	bne.n	8008026 <memchr+0x6>
 8008038:	4618      	mov	r0, r3
 800803a:	bd10      	pop	{r4, pc}

0800803c <memcpy>:
 800803c:	b510      	push	{r4, lr}
 800803e:	1e43      	subs	r3, r0, #1
 8008040:	440a      	add	r2, r1
 8008042:	4291      	cmp	r1, r2
 8008044:	d100      	bne.n	8008048 <memcpy+0xc>
 8008046:	bd10      	pop	{r4, pc}
 8008048:	f811 4b01 	ldrb.w	r4, [r1], #1
 800804c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008050:	e7f7      	b.n	8008042 <memcpy+0x6>

08008052 <memmove>:
 8008052:	4288      	cmp	r0, r1
 8008054:	b510      	push	{r4, lr}
 8008056:	eb01 0302 	add.w	r3, r1, r2
 800805a:	d803      	bhi.n	8008064 <memmove+0x12>
 800805c:	1e42      	subs	r2, r0, #1
 800805e:	4299      	cmp	r1, r3
 8008060:	d10c      	bne.n	800807c <memmove+0x2a>
 8008062:	bd10      	pop	{r4, pc}
 8008064:	4298      	cmp	r0, r3
 8008066:	d2f9      	bcs.n	800805c <memmove+0xa>
 8008068:	1881      	adds	r1, r0, r2
 800806a:	1ad2      	subs	r2, r2, r3
 800806c:	42d3      	cmn	r3, r2
 800806e:	d100      	bne.n	8008072 <memmove+0x20>
 8008070:	bd10      	pop	{r4, pc}
 8008072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008076:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800807a:	e7f7      	b.n	800806c <memmove+0x1a>
 800807c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008080:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008084:	e7eb      	b.n	800805e <memmove+0xc>
	...

08008088 <_free_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4605      	mov	r5, r0
 800808c:	2900      	cmp	r1, #0
 800808e:	d043      	beq.n	8008118 <_free_r+0x90>
 8008090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008094:	1f0c      	subs	r4, r1, #4
 8008096:	2b00      	cmp	r3, #0
 8008098:	bfb8      	it	lt
 800809a:	18e4      	addlt	r4, r4, r3
 800809c:	f000 f8d4 	bl	8008248 <__malloc_lock>
 80080a0:	4a1e      	ldr	r2, [pc, #120]	; (800811c <_free_r+0x94>)
 80080a2:	6813      	ldr	r3, [r2, #0]
 80080a4:	4610      	mov	r0, r2
 80080a6:	b933      	cbnz	r3, 80080b6 <_free_r+0x2e>
 80080a8:	6063      	str	r3, [r4, #4]
 80080aa:	6014      	str	r4, [r2, #0]
 80080ac:	4628      	mov	r0, r5
 80080ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080b2:	f000 b8ca 	b.w	800824a <__malloc_unlock>
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	d90b      	bls.n	80080d2 <_free_r+0x4a>
 80080ba:	6821      	ldr	r1, [r4, #0]
 80080bc:	1862      	adds	r2, r4, r1
 80080be:	4293      	cmp	r3, r2
 80080c0:	bf01      	itttt	eq
 80080c2:	681a      	ldreq	r2, [r3, #0]
 80080c4:	685b      	ldreq	r3, [r3, #4]
 80080c6:	1852      	addeq	r2, r2, r1
 80080c8:	6022      	streq	r2, [r4, #0]
 80080ca:	6063      	str	r3, [r4, #4]
 80080cc:	6004      	str	r4, [r0, #0]
 80080ce:	e7ed      	b.n	80080ac <_free_r+0x24>
 80080d0:	4613      	mov	r3, r2
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	b10a      	cbz	r2, 80080da <_free_r+0x52>
 80080d6:	42a2      	cmp	r2, r4
 80080d8:	d9fa      	bls.n	80080d0 <_free_r+0x48>
 80080da:	6819      	ldr	r1, [r3, #0]
 80080dc:	1858      	adds	r0, r3, r1
 80080de:	42a0      	cmp	r0, r4
 80080e0:	d10b      	bne.n	80080fa <_free_r+0x72>
 80080e2:	6820      	ldr	r0, [r4, #0]
 80080e4:	4401      	add	r1, r0
 80080e6:	1858      	adds	r0, r3, r1
 80080e8:	4282      	cmp	r2, r0
 80080ea:	6019      	str	r1, [r3, #0]
 80080ec:	d1de      	bne.n	80080ac <_free_r+0x24>
 80080ee:	6810      	ldr	r0, [r2, #0]
 80080f0:	6852      	ldr	r2, [r2, #4]
 80080f2:	4401      	add	r1, r0
 80080f4:	6019      	str	r1, [r3, #0]
 80080f6:	605a      	str	r2, [r3, #4]
 80080f8:	e7d8      	b.n	80080ac <_free_r+0x24>
 80080fa:	d902      	bls.n	8008102 <_free_r+0x7a>
 80080fc:	230c      	movs	r3, #12
 80080fe:	602b      	str	r3, [r5, #0]
 8008100:	e7d4      	b.n	80080ac <_free_r+0x24>
 8008102:	6820      	ldr	r0, [r4, #0]
 8008104:	1821      	adds	r1, r4, r0
 8008106:	428a      	cmp	r2, r1
 8008108:	bf01      	itttt	eq
 800810a:	6811      	ldreq	r1, [r2, #0]
 800810c:	6852      	ldreq	r2, [r2, #4]
 800810e:	1809      	addeq	r1, r1, r0
 8008110:	6021      	streq	r1, [r4, #0]
 8008112:	6062      	str	r2, [r4, #4]
 8008114:	605c      	str	r4, [r3, #4]
 8008116:	e7c9      	b.n	80080ac <_free_r+0x24>
 8008118:	bd38      	pop	{r3, r4, r5, pc}
 800811a:	bf00      	nop
 800811c:	20002da8 	.word	0x20002da8

08008120 <_malloc_r>:
 8008120:	b570      	push	{r4, r5, r6, lr}
 8008122:	1ccd      	adds	r5, r1, #3
 8008124:	f025 0503 	bic.w	r5, r5, #3
 8008128:	3508      	adds	r5, #8
 800812a:	2d0c      	cmp	r5, #12
 800812c:	bf38      	it	cc
 800812e:	250c      	movcc	r5, #12
 8008130:	2d00      	cmp	r5, #0
 8008132:	4606      	mov	r6, r0
 8008134:	db01      	blt.n	800813a <_malloc_r+0x1a>
 8008136:	42a9      	cmp	r1, r5
 8008138:	d903      	bls.n	8008142 <_malloc_r+0x22>
 800813a:	230c      	movs	r3, #12
 800813c:	6033      	str	r3, [r6, #0]
 800813e:	2000      	movs	r0, #0
 8008140:	bd70      	pop	{r4, r5, r6, pc}
 8008142:	f000 f881 	bl	8008248 <__malloc_lock>
 8008146:	4a23      	ldr	r2, [pc, #140]	; (80081d4 <_malloc_r+0xb4>)
 8008148:	6814      	ldr	r4, [r2, #0]
 800814a:	4621      	mov	r1, r4
 800814c:	b991      	cbnz	r1, 8008174 <_malloc_r+0x54>
 800814e:	4c22      	ldr	r4, [pc, #136]	; (80081d8 <_malloc_r+0xb8>)
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	b91b      	cbnz	r3, 800815c <_malloc_r+0x3c>
 8008154:	4630      	mov	r0, r6
 8008156:	f000 f867 	bl	8008228 <_sbrk_r>
 800815a:	6020      	str	r0, [r4, #0]
 800815c:	4629      	mov	r1, r5
 800815e:	4630      	mov	r0, r6
 8008160:	f000 f862 	bl	8008228 <_sbrk_r>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d126      	bne.n	80081b6 <_malloc_r+0x96>
 8008168:	230c      	movs	r3, #12
 800816a:	4630      	mov	r0, r6
 800816c:	6033      	str	r3, [r6, #0]
 800816e:	f000 f86c 	bl	800824a <__malloc_unlock>
 8008172:	e7e4      	b.n	800813e <_malloc_r+0x1e>
 8008174:	680b      	ldr	r3, [r1, #0]
 8008176:	1b5b      	subs	r3, r3, r5
 8008178:	d41a      	bmi.n	80081b0 <_malloc_r+0x90>
 800817a:	2b0b      	cmp	r3, #11
 800817c:	d90f      	bls.n	800819e <_malloc_r+0x7e>
 800817e:	600b      	str	r3, [r1, #0]
 8008180:	18cc      	adds	r4, r1, r3
 8008182:	50cd      	str	r5, [r1, r3]
 8008184:	4630      	mov	r0, r6
 8008186:	f000 f860 	bl	800824a <__malloc_unlock>
 800818a:	f104 000b 	add.w	r0, r4, #11
 800818e:	1d23      	adds	r3, r4, #4
 8008190:	f020 0007 	bic.w	r0, r0, #7
 8008194:	1ac3      	subs	r3, r0, r3
 8008196:	d01b      	beq.n	80081d0 <_malloc_r+0xb0>
 8008198:	425a      	negs	r2, r3
 800819a:	50e2      	str	r2, [r4, r3]
 800819c:	bd70      	pop	{r4, r5, r6, pc}
 800819e:	428c      	cmp	r4, r1
 80081a0:	bf0b      	itete	eq
 80081a2:	6863      	ldreq	r3, [r4, #4]
 80081a4:	684b      	ldrne	r3, [r1, #4]
 80081a6:	6013      	streq	r3, [r2, #0]
 80081a8:	6063      	strne	r3, [r4, #4]
 80081aa:	bf18      	it	ne
 80081ac:	460c      	movne	r4, r1
 80081ae:	e7e9      	b.n	8008184 <_malloc_r+0x64>
 80081b0:	460c      	mov	r4, r1
 80081b2:	6849      	ldr	r1, [r1, #4]
 80081b4:	e7ca      	b.n	800814c <_malloc_r+0x2c>
 80081b6:	1cc4      	adds	r4, r0, #3
 80081b8:	f024 0403 	bic.w	r4, r4, #3
 80081bc:	42a0      	cmp	r0, r4
 80081be:	d005      	beq.n	80081cc <_malloc_r+0xac>
 80081c0:	1a21      	subs	r1, r4, r0
 80081c2:	4630      	mov	r0, r6
 80081c4:	f000 f830 	bl	8008228 <_sbrk_r>
 80081c8:	3001      	adds	r0, #1
 80081ca:	d0cd      	beq.n	8008168 <_malloc_r+0x48>
 80081cc:	6025      	str	r5, [r4, #0]
 80081ce:	e7d9      	b.n	8008184 <_malloc_r+0x64>
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	bf00      	nop
 80081d4:	20002da8 	.word	0x20002da8
 80081d8:	20002dac 	.word	0x20002dac

080081dc <_realloc_r>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	4607      	mov	r7, r0
 80081e0:	4614      	mov	r4, r2
 80081e2:	460e      	mov	r6, r1
 80081e4:	b921      	cbnz	r1, 80081f0 <_realloc_r+0x14>
 80081e6:	4611      	mov	r1, r2
 80081e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80081ec:	f7ff bf98 	b.w	8008120 <_malloc_r>
 80081f0:	b922      	cbnz	r2, 80081fc <_realloc_r+0x20>
 80081f2:	f7ff ff49 	bl	8008088 <_free_r>
 80081f6:	4625      	mov	r5, r4
 80081f8:	4628      	mov	r0, r5
 80081fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081fc:	f000 f826 	bl	800824c <_malloc_usable_size_r>
 8008200:	4284      	cmp	r4, r0
 8008202:	d90f      	bls.n	8008224 <_realloc_r+0x48>
 8008204:	4621      	mov	r1, r4
 8008206:	4638      	mov	r0, r7
 8008208:	f7ff ff8a 	bl	8008120 <_malloc_r>
 800820c:	4605      	mov	r5, r0
 800820e:	2800      	cmp	r0, #0
 8008210:	d0f2      	beq.n	80081f8 <_realloc_r+0x1c>
 8008212:	4631      	mov	r1, r6
 8008214:	4622      	mov	r2, r4
 8008216:	f7ff ff11 	bl	800803c <memcpy>
 800821a:	4631      	mov	r1, r6
 800821c:	4638      	mov	r0, r7
 800821e:	f7ff ff33 	bl	8008088 <_free_r>
 8008222:	e7e9      	b.n	80081f8 <_realloc_r+0x1c>
 8008224:	4635      	mov	r5, r6
 8008226:	e7e7      	b.n	80081f8 <_realloc_r+0x1c>

08008228 <_sbrk_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	2300      	movs	r3, #0
 800822c:	4c05      	ldr	r4, [pc, #20]	; (8008244 <_sbrk_r+0x1c>)
 800822e:	4605      	mov	r5, r0
 8008230:	4608      	mov	r0, r1
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	f7fa fa22 	bl	800267c <_sbrk>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d102      	bne.n	8008242 <_sbrk_r+0x1a>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	b103      	cbz	r3, 8008242 <_sbrk_r+0x1a>
 8008240:	602b      	str	r3, [r5, #0]
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	20003564 	.word	0x20003564

08008248 <__malloc_lock>:
 8008248:	4770      	bx	lr

0800824a <__malloc_unlock>:
 800824a:	4770      	bx	lr

0800824c <_malloc_usable_size_r>:
 800824c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008250:	2800      	cmp	r0, #0
 8008252:	f1a0 0004 	sub.w	r0, r0, #4
 8008256:	bfbc      	itt	lt
 8008258:	580b      	ldrlt	r3, [r1, r0]
 800825a:	18c0      	addlt	r0, r0, r3
 800825c:	4770      	bx	lr
	...

08008260 <ceil>:
 8008260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008264:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008268:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800826c:	2e13      	cmp	r6, #19
 800826e:	4607      	mov	r7, r0
 8008270:	460b      	mov	r3, r1
 8008272:	460c      	mov	r4, r1
 8008274:	4605      	mov	r5, r0
 8008276:	dc31      	bgt.n	80082dc <ceil+0x7c>
 8008278:	2e00      	cmp	r6, #0
 800827a:	da12      	bge.n	80082a2 <ceil+0x42>
 800827c:	a336      	add	r3, pc, #216	; (adr r3, 8008358 <ceil+0xf8>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	f7f7 ff77 	bl	8000174 <__adddf3>
 8008286:	2200      	movs	r2, #0
 8008288:	2300      	movs	r3, #0
 800828a:	f7f8 fbb5 	bl	80009f8 <__aeabi_dcmpgt>
 800828e:	b128      	cbz	r0, 800829c <ceil+0x3c>
 8008290:	2c00      	cmp	r4, #0
 8008292:	db58      	blt.n	8008346 <ceil+0xe6>
 8008294:	433c      	orrs	r4, r7
 8008296:	d05a      	beq.n	800834e <ceil+0xee>
 8008298:	2500      	movs	r5, #0
 800829a:	4c31      	ldr	r4, [pc, #196]	; (8008360 <ceil+0x100>)
 800829c:	4623      	mov	r3, r4
 800829e:	462f      	mov	r7, r5
 80082a0:	e027      	b.n	80082f2 <ceil+0x92>
 80082a2:	4a30      	ldr	r2, [pc, #192]	; (8008364 <ceil+0x104>)
 80082a4:	fa42 f806 	asr.w	r8, r2, r6
 80082a8:	ea01 0208 	and.w	r2, r1, r8
 80082ac:	4302      	orrs	r2, r0
 80082ae:	d020      	beq.n	80082f2 <ceil+0x92>
 80082b0:	a329      	add	r3, pc, #164	; (adr r3, 8008358 <ceil+0xf8>)
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f7f7 ff5d 	bl	8000174 <__adddf3>
 80082ba:	2200      	movs	r2, #0
 80082bc:	2300      	movs	r3, #0
 80082be:	f7f8 fb9b 	bl	80009f8 <__aeabi_dcmpgt>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d0ea      	beq.n	800829c <ceil+0x3c>
 80082c6:	2c00      	cmp	r4, #0
 80082c8:	bfc2      	ittt	gt
 80082ca:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80082ce:	fa43 f606 	asrgt.w	r6, r3, r6
 80082d2:	19a4      	addgt	r4, r4, r6
 80082d4:	ea24 0408 	bic.w	r4, r4, r8
 80082d8:	2500      	movs	r5, #0
 80082da:	e7df      	b.n	800829c <ceil+0x3c>
 80082dc:	2e33      	cmp	r6, #51	; 0x33
 80082de:	dd0c      	ble.n	80082fa <ceil+0x9a>
 80082e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80082e4:	d105      	bne.n	80082f2 <ceil+0x92>
 80082e6:	460b      	mov	r3, r1
 80082e8:	4602      	mov	r2, r0
 80082ea:	f7f7 ff43 	bl	8000174 <__adddf3>
 80082ee:	4607      	mov	r7, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4638      	mov	r0, r7
 80082f4:	4619      	mov	r1, r3
 80082f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082fa:	f04f 32ff 	mov.w	r2, #4294967295
 80082fe:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008302:	fa22 f808 	lsr.w	r8, r2, r8
 8008306:	ea10 0f08 	tst.w	r0, r8
 800830a:	d0f2      	beq.n	80082f2 <ceil+0x92>
 800830c:	a312      	add	r3, pc, #72	; (adr r3, 8008358 <ceil+0xf8>)
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	f7f7 ff2f 	bl	8000174 <__adddf3>
 8008316:	2200      	movs	r2, #0
 8008318:	2300      	movs	r3, #0
 800831a:	f7f8 fb6d 	bl	80009f8 <__aeabi_dcmpgt>
 800831e:	2800      	cmp	r0, #0
 8008320:	d0bc      	beq.n	800829c <ceil+0x3c>
 8008322:	2c00      	cmp	r4, #0
 8008324:	dd02      	ble.n	800832c <ceil+0xcc>
 8008326:	2e14      	cmp	r6, #20
 8008328:	d103      	bne.n	8008332 <ceil+0xd2>
 800832a:	3401      	adds	r4, #1
 800832c:	ea25 0508 	bic.w	r5, r5, r8
 8008330:	e7b4      	b.n	800829c <ceil+0x3c>
 8008332:	2301      	movs	r3, #1
 8008334:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008338:	fa03 f606 	lsl.w	r6, r3, r6
 800833c:	4435      	add	r5, r6
 800833e:	42af      	cmp	r7, r5
 8008340:	bf88      	it	hi
 8008342:	18e4      	addhi	r4, r4, r3
 8008344:	e7f2      	b.n	800832c <ceil+0xcc>
 8008346:	2500      	movs	r5, #0
 8008348:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800834c:	e7a6      	b.n	800829c <ceil+0x3c>
 800834e:	4625      	mov	r5, r4
 8008350:	e7a4      	b.n	800829c <ceil+0x3c>
 8008352:	bf00      	nop
 8008354:	f3af 8000 	nop.w
 8008358:	8800759c 	.word	0x8800759c
 800835c:	7e37e43c 	.word	0x7e37e43c
 8008360:	3ff00000 	.word	0x3ff00000
 8008364:	000fffff 	.word	0x000fffff

08008368 <floor>:
 8008368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800836c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008370:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008374:	2e13      	cmp	r6, #19
 8008376:	4607      	mov	r7, r0
 8008378:	460b      	mov	r3, r1
 800837a:	460c      	mov	r4, r1
 800837c:	4605      	mov	r5, r0
 800837e:	dc35      	bgt.n	80083ec <floor+0x84>
 8008380:	2e00      	cmp	r6, #0
 8008382:	da16      	bge.n	80083b2 <floor+0x4a>
 8008384:	a336      	add	r3, pc, #216	; (adr r3, 8008460 <floor+0xf8>)
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	f7f7 fef3 	bl	8000174 <__adddf3>
 800838e:	2200      	movs	r2, #0
 8008390:	2300      	movs	r3, #0
 8008392:	f7f8 fb31 	bl	80009f8 <__aeabi_dcmpgt>
 8008396:	b148      	cbz	r0, 80083ac <floor+0x44>
 8008398:	2c00      	cmp	r4, #0
 800839a:	da5c      	bge.n	8008456 <floor+0xee>
 800839c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80083a0:	433b      	orrs	r3, r7
 80083a2:	4b31      	ldr	r3, [pc, #196]	; (8008468 <floor+0x100>)
 80083a4:	f04f 0500 	mov.w	r5, #0
 80083a8:	bf18      	it	ne
 80083aa:	461c      	movne	r4, r3
 80083ac:	4623      	mov	r3, r4
 80083ae:	462f      	mov	r7, r5
 80083b0:	e027      	b.n	8008402 <floor+0x9a>
 80083b2:	4a2e      	ldr	r2, [pc, #184]	; (800846c <floor+0x104>)
 80083b4:	fa42 f806 	asr.w	r8, r2, r6
 80083b8:	ea01 0208 	and.w	r2, r1, r8
 80083bc:	4302      	orrs	r2, r0
 80083be:	d020      	beq.n	8008402 <floor+0x9a>
 80083c0:	a327      	add	r3, pc, #156	; (adr r3, 8008460 <floor+0xf8>)
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f7f7 fed5 	bl	8000174 <__adddf3>
 80083ca:	2200      	movs	r2, #0
 80083cc:	2300      	movs	r3, #0
 80083ce:	f7f8 fb13 	bl	80009f8 <__aeabi_dcmpgt>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d0ea      	beq.n	80083ac <floor+0x44>
 80083d6:	2c00      	cmp	r4, #0
 80083d8:	bfbe      	ittt	lt
 80083da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80083de:	fa43 f606 	asrlt.w	r6, r3, r6
 80083e2:	19a4      	addlt	r4, r4, r6
 80083e4:	ea24 0408 	bic.w	r4, r4, r8
 80083e8:	2500      	movs	r5, #0
 80083ea:	e7df      	b.n	80083ac <floor+0x44>
 80083ec:	2e33      	cmp	r6, #51	; 0x33
 80083ee:	dd0c      	ble.n	800840a <floor+0xa2>
 80083f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80083f4:	d105      	bne.n	8008402 <floor+0x9a>
 80083f6:	460b      	mov	r3, r1
 80083f8:	4602      	mov	r2, r0
 80083fa:	f7f7 febb 	bl	8000174 <__adddf3>
 80083fe:	4607      	mov	r7, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4638      	mov	r0, r7
 8008404:	4619      	mov	r1, r3
 8008406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800840a:	f04f 32ff 	mov.w	r2, #4294967295
 800840e:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008412:	fa22 f808 	lsr.w	r8, r2, r8
 8008416:	ea10 0f08 	tst.w	r0, r8
 800841a:	d0f2      	beq.n	8008402 <floor+0x9a>
 800841c:	a310      	add	r3, pc, #64	; (adr r3, 8008460 <floor+0xf8>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7f7 fea7 	bl	8000174 <__adddf3>
 8008426:	2200      	movs	r2, #0
 8008428:	2300      	movs	r3, #0
 800842a:	f7f8 fae5 	bl	80009f8 <__aeabi_dcmpgt>
 800842e:	2800      	cmp	r0, #0
 8008430:	d0bc      	beq.n	80083ac <floor+0x44>
 8008432:	2c00      	cmp	r4, #0
 8008434:	da02      	bge.n	800843c <floor+0xd4>
 8008436:	2e14      	cmp	r6, #20
 8008438:	d103      	bne.n	8008442 <floor+0xda>
 800843a:	3401      	adds	r4, #1
 800843c:	ea25 0508 	bic.w	r5, r5, r8
 8008440:	e7b4      	b.n	80083ac <floor+0x44>
 8008442:	2301      	movs	r3, #1
 8008444:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008448:	fa03 f606 	lsl.w	r6, r3, r6
 800844c:	4435      	add	r5, r6
 800844e:	42af      	cmp	r7, r5
 8008450:	bf88      	it	hi
 8008452:	18e4      	addhi	r4, r4, r3
 8008454:	e7f2      	b.n	800843c <floor+0xd4>
 8008456:	2500      	movs	r5, #0
 8008458:	462c      	mov	r4, r5
 800845a:	e7a7      	b.n	80083ac <floor+0x44>
 800845c:	f3af 8000 	nop.w
 8008460:	8800759c 	.word	0x8800759c
 8008464:	7e37e43c 	.word	0x7e37e43c
 8008468:	bff00000 	.word	0xbff00000
 800846c:	000fffff 	.word	0x000fffff

08008470 <lround>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	460d      	mov	r5, r1
 8008474:	2d00      	cmp	r5, #0
 8008476:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800847a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800847e:	bfb4      	ite	lt
 8008480:	f04f 34ff 	movlt.w	r4, #4294967295
 8008484:	2401      	movge	r4, #1
 8008486:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800848a:	2e13      	cmp	r6, #19
 800848c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8008490:	dc0f      	bgt.n	80084b2 <lround+0x42>
 8008492:	2e00      	cmp	r6, #0
 8008494:	da04      	bge.n	80084a0 <lround+0x30>
 8008496:	3601      	adds	r6, #1
 8008498:	bf18      	it	ne
 800849a:	2400      	movne	r4, #0
 800849c:	4620      	mov	r0, r4
 800849e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80084a4:	4133      	asrs	r3, r6
 80084a6:	442b      	add	r3, r5
 80084a8:	f1c6 0614 	rsb	r6, r6, #20
 80084ac:	40f3      	lsrs	r3, r6
 80084ae:	435c      	muls	r4, r3
 80084b0:	e7f4      	b.n	800849c <lround+0x2c>
 80084b2:	2e1e      	cmp	r6, #30
 80084b4:	d81a      	bhi.n	80084ec <lround+0x7c>
 80084b6:	2e33      	cmp	r6, #51	; 0x33
 80084b8:	f2a3 4113 	subw	r1, r3, #1043	; 0x413
 80084bc:	dd06      	ble.n	80084cc <lround+0x5c>
 80084be:	f2a3 4333 	subw	r3, r3, #1075	; 0x433
 80084c2:	408d      	lsls	r5, r1
 80084c4:	fa00 f303 	lsl.w	r3, r0, r3
 80084c8:	432b      	orrs	r3, r5
 80084ca:	e7f0      	b.n	80084ae <lround+0x3e>
 80084cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084d0:	40ca      	lsrs	r2, r1
 80084d2:	1812      	adds	r2, r2, r0
 80084d4:	f1c6 0334 	rsb	r3, r6, #52	; 0x34
 80084d8:	bf28      	it	cs
 80084da:	3501      	addcs	r5, #1
 80084dc:	2b20      	cmp	r3, #32
 80084de:	fa05 f501 	lsl.w	r5, r5, r1
 80084e2:	bf14      	ite	ne
 80084e4:	fa22 f303 	lsrne.w	r3, r2, r3
 80084e8:	2300      	moveq	r3, #0
 80084ea:	e7ed      	b.n	80084c8 <lround+0x58>
 80084ec:	f7f8 faa4 	bl	8000a38 <__aeabi_d2iz>
 80084f0:	4604      	mov	r4, r0
 80084f2:	e7d3      	b.n	800849c <lround+0x2c>

080084f4 <round>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80084fa:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80084fe:	2c13      	cmp	r4, #19
 8008500:	4606      	mov	r6, r0
 8008502:	460d      	mov	r5, r1
 8008504:	460b      	mov	r3, r1
 8008506:	468e      	mov	lr, r1
 8008508:	dc17      	bgt.n	800853a <round+0x46>
 800850a:	2c00      	cmp	r4, #0
 800850c:	da09      	bge.n	8008522 <round+0x2e>
 800850e:	3401      	adds	r4, #1
 8008510:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008514:	d103      	bne.n	800851e <round+0x2a>
 8008516:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800851a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800851e:	2200      	movs	r2, #0
 8008520:	e029      	b.n	8008576 <round+0x82>
 8008522:	4916      	ldr	r1, [pc, #88]	; (800857c <round+0x88>)
 8008524:	4121      	asrs	r1, r4
 8008526:	420d      	tst	r5, r1
 8008528:	d100      	bne.n	800852c <round+0x38>
 800852a:	b188      	cbz	r0, 8008550 <round+0x5c>
 800852c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008530:	4123      	asrs	r3, r4
 8008532:	4473      	add	r3, lr
 8008534:	ea23 0301 	bic.w	r3, r3, r1
 8008538:	e7f1      	b.n	800851e <round+0x2a>
 800853a:	2c33      	cmp	r4, #51	; 0x33
 800853c:	dd0b      	ble.n	8008556 <round+0x62>
 800853e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008542:	d105      	bne.n	8008550 <round+0x5c>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	f7f7 fe14 	bl	8000174 <__adddf3>
 800854c:	4606      	mov	r6, r0
 800854e:	460d      	mov	r5, r1
 8008550:	4630      	mov	r0, r6
 8008552:	4629      	mov	r1, r5
 8008554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008556:	f04f 30ff 	mov.w	r0, #4294967295
 800855a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800855e:	40f8      	lsrs	r0, r7
 8008560:	4206      	tst	r6, r0
 8008562:	d0f5      	beq.n	8008550 <round+0x5c>
 8008564:	2101      	movs	r1, #1
 8008566:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800856a:	40a1      	lsls	r1, r4
 800856c:	198a      	adds	r2, r1, r6
 800856e:	bf28      	it	cs
 8008570:	3301      	addcs	r3, #1
 8008572:	ea22 0200 	bic.w	r2, r2, r0
 8008576:	4619      	mov	r1, r3
 8008578:	4610      	mov	r0, r2
 800857a:	e7e7      	b.n	800854c <round+0x58>
 800857c:	000fffff 	.word	0x000fffff

08008580 <trunc>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8008586:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800858a:	2a13      	cmp	r2, #19
 800858c:	4604      	mov	r4, r0
 800858e:	460b      	mov	r3, r1
 8008590:	dc11      	bgt.n	80085b6 <trunc+0x36>
 8008592:	2a00      	cmp	r2, #0
 8008594:	da04      	bge.n	80085a0 <trunc+0x20>
 8008596:	2200      	movs	r2, #0
 8008598:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800859c:	4614      	mov	r4, r2
 800859e:	e007      	b.n	80085b0 <trunc+0x30>
 80085a0:	2000      	movs	r0, #0
 80085a2:	4b0f      	ldr	r3, [pc, #60]	; (80085e0 <trunc+0x60>)
 80085a4:	fa43 f202 	asr.w	r2, r3, r2
 80085a8:	ea21 0102 	bic.w	r1, r1, r2
 80085ac:	4604      	mov	r4, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4620      	mov	r0, r4
 80085b2:	4619      	mov	r1, r3
 80085b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b6:	2a33      	cmp	r2, #51	; 0x33
 80085b8:	dd07      	ble.n	80085ca <trunc+0x4a>
 80085ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80085be:	d1f7      	bne.n	80085b0 <trunc+0x30>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	f7f7 fdd6 	bl	8000174 <__adddf3>
 80085c8:	e7f0      	b.n	80085ac <trunc+0x2c>
 80085ca:	460b      	mov	r3, r1
 80085cc:	f04f 31ff 	mov.w	r1, #4294967295
 80085d0:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80085d4:	fa21 f505 	lsr.w	r5, r1, r5
 80085d8:	ea20 0205 	bic.w	r2, r0, r5
 80085dc:	e7de      	b.n	800859c <trunc+0x1c>
 80085de:	bf00      	nop
 80085e0:	000fffff 	.word	0x000fffff

080085e4 <ceilf>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80085ea:	0df5      	lsrs	r5, r6, #23
 80085ec:	3d7f      	subs	r5, #127	; 0x7f
 80085ee:	2d16      	cmp	r5, #22
 80085f0:	4601      	mov	r1, r0
 80085f2:	4604      	mov	r4, r0
 80085f4:	dc26      	bgt.n	8008644 <ceilf+0x60>
 80085f6:	2d00      	cmp	r5, #0
 80085f8:	da0e      	bge.n	8008618 <ceilf+0x34>
 80085fa:	4918      	ldr	r1, [pc, #96]	; (800865c <ceilf+0x78>)
 80085fc:	f7f8 faba 	bl	8000b74 <__addsf3>
 8008600:	2100      	movs	r1, #0
 8008602:	f7f8 fd7b 	bl	80010fc <__aeabi_fcmpgt>
 8008606:	b128      	cbz	r0, 8008614 <ceilf+0x30>
 8008608:	2c00      	cmp	r4, #0
 800860a:	db23      	blt.n	8008654 <ceilf+0x70>
 800860c:	2e00      	cmp	r6, #0
 800860e:	bf18      	it	ne
 8008610:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8008614:	4621      	mov	r1, r4
 8008616:	e01b      	b.n	8008650 <ceilf+0x6c>
 8008618:	4e11      	ldr	r6, [pc, #68]	; (8008660 <ceilf+0x7c>)
 800861a:	412e      	asrs	r6, r5
 800861c:	4230      	tst	r0, r6
 800861e:	d017      	beq.n	8008650 <ceilf+0x6c>
 8008620:	490e      	ldr	r1, [pc, #56]	; (800865c <ceilf+0x78>)
 8008622:	f7f8 faa7 	bl	8000b74 <__addsf3>
 8008626:	2100      	movs	r1, #0
 8008628:	f7f8 fd68 	bl	80010fc <__aeabi_fcmpgt>
 800862c:	2800      	cmp	r0, #0
 800862e:	d0f1      	beq.n	8008614 <ceilf+0x30>
 8008630:	2c00      	cmp	r4, #0
 8008632:	bfc2      	ittt	gt
 8008634:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8008638:	fa43 f505 	asrgt.w	r5, r3, r5
 800863c:	1964      	addgt	r4, r4, r5
 800863e:	ea24 0406 	bic.w	r4, r4, r6
 8008642:	e7e7      	b.n	8008614 <ceilf+0x30>
 8008644:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008648:	d302      	bcc.n	8008650 <ceilf+0x6c>
 800864a:	f7f8 fa93 	bl	8000b74 <__addsf3>
 800864e:	4601      	mov	r1, r0
 8008650:	4608      	mov	r0, r1
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008658:	e7dc      	b.n	8008614 <ceilf+0x30>
 800865a:	bf00      	nop
 800865c:	7149f2ca 	.word	0x7149f2ca
 8008660:	007fffff 	.word	0x007fffff

08008664 <cosf>:
 8008664:	b507      	push	{r0, r1, r2, lr}
 8008666:	4a18      	ldr	r2, [pc, #96]	; (80086c8 <cosf+0x64>)
 8008668:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800866c:	4293      	cmp	r3, r2
 800866e:	4601      	mov	r1, r0
 8008670:	dc03      	bgt.n	800867a <cosf+0x16>
 8008672:	2100      	movs	r1, #0
 8008674:	f000 fbe6 	bl	8008e44 <__kernel_cosf>
 8008678:	e004      	b.n	8008684 <cosf+0x20>
 800867a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800867e:	db04      	blt.n	800868a <cosf+0x26>
 8008680:	f7f8 fa76 	bl	8000b70 <__aeabi_fsub>
 8008684:	b003      	add	sp, #12
 8008686:	f85d fb04 	ldr.w	pc, [sp], #4
 800868a:	4669      	mov	r1, sp
 800868c:	f000 fa30 	bl	8008af0 <__ieee754_rem_pio2f>
 8008690:	f000 0203 	and.w	r2, r0, #3
 8008694:	2a01      	cmp	r2, #1
 8008696:	d005      	beq.n	80086a4 <cosf+0x40>
 8008698:	2a02      	cmp	r2, #2
 800869a:	d00a      	beq.n	80086b2 <cosf+0x4e>
 800869c:	b972      	cbnz	r2, 80086bc <cosf+0x58>
 800869e:	9901      	ldr	r1, [sp, #4]
 80086a0:	9800      	ldr	r0, [sp, #0]
 80086a2:	e7e7      	b.n	8008674 <cosf+0x10>
 80086a4:	9901      	ldr	r1, [sp, #4]
 80086a6:	9800      	ldr	r0, [sp, #0]
 80086a8:	f000 feee 	bl	8009488 <__kernel_sinf>
 80086ac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80086b0:	e7e8      	b.n	8008684 <cosf+0x20>
 80086b2:	9901      	ldr	r1, [sp, #4]
 80086b4:	9800      	ldr	r0, [sp, #0]
 80086b6:	f000 fbc5 	bl	8008e44 <__kernel_cosf>
 80086ba:	e7f7      	b.n	80086ac <cosf+0x48>
 80086bc:	2201      	movs	r2, #1
 80086be:	9901      	ldr	r1, [sp, #4]
 80086c0:	9800      	ldr	r0, [sp, #0]
 80086c2:	f000 fee1 	bl	8009488 <__kernel_sinf>
 80086c6:	e7dd      	b.n	8008684 <cosf+0x20>
 80086c8:	3f490fd8 	.word	0x3f490fd8

080086cc <sinf>:
 80086cc:	b507      	push	{r0, r1, r2, lr}
 80086ce:	4a19      	ldr	r2, [pc, #100]	; (8008734 <sinf+0x68>)
 80086d0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80086d4:	4293      	cmp	r3, r2
 80086d6:	4601      	mov	r1, r0
 80086d8:	dc04      	bgt.n	80086e4 <sinf+0x18>
 80086da:	2200      	movs	r2, #0
 80086dc:	2100      	movs	r1, #0
 80086de:	f000 fed3 	bl	8009488 <__kernel_sinf>
 80086e2:	e004      	b.n	80086ee <sinf+0x22>
 80086e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80086e8:	db04      	blt.n	80086f4 <sinf+0x28>
 80086ea:	f7f8 fa41 	bl	8000b70 <__aeabi_fsub>
 80086ee:	b003      	add	sp, #12
 80086f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80086f4:	4669      	mov	r1, sp
 80086f6:	f000 f9fb 	bl	8008af0 <__ieee754_rem_pio2f>
 80086fa:	f000 0003 	and.w	r0, r0, #3
 80086fe:	2801      	cmp	r0, #1
 8008700:	d006      	beq.n	8008710 <sinf+0x44>
 8008702:	2802      	cmp	r0, #2
 8008704:	d009      	beq.n	800871a <sinf+0x4e>
 8008706:	b980      	cbnz	r0, 800872a <sinf+0x5e>
 8008708:	2201      	movs	r2, #1
 800870a:	9901      	ldr	r1, [sp, #4]
 800870c:	9800      	ldr	r0, [sp, #0]
 800870e:	e7e6      	b.n	80086de <sinf+0x12>
 8008710:	9901      	ldr	r1, [sp, #4]
 8008712:	9800      	ldr	r0, [sp, #0]
 8008714:	f000 fb96 	bl	8008e44 <__kernel_cosf>
 8008718:	e7e9      	b.n	80086ee <sinf+0x22>
 800871a:	2201      	movs	r2, #1
 800871c:	9901      	ldr	r1, [sp, #4]
 800871e:	9800      	ldr	r0, [sp, #0]
 8008720:	f000 feb2 	bl	8009488 <__kernel_sinf>
 8008724:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008728:	e7e1      	b.n	80086ee <sinf+0x22>
 800872a:	9901      	ldr	r1, [sp, #4]
 800872c:	9800      	ldr	r0, [sp, #0]
 800872e:	f000 fb89 	bl	8008e44 <__kernel_cosf>
 8008732:	e7f7      	b.n	8008724 <sinf+0x58>
 8008734:	3f490fd8 	.word	0x3f490fd8

08008738 <sqrt>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	b08b      	sub	sp, #44	; 0x2c
 800873e:	4604      	mov	r4, r0
 8008740:	460d      	mov	r5, r1
 8008742:	f000 f899 	bl	8008878 <__ieee754_sqrt>
 8008746:	4b24      	ldr	r3, [pc, #144]	; (80087d8 <sqrt+0xa0>)
 8008748:	4680      	mov	r8, r0
 800874a:	f993 a000 	ldrsb.w	sl, [r3]
 800874e:	4689      	mov	r9, r1
 8008750:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008754:	d02b      	beq.n	80087ae <sqrt+0x76>
 8008756:	4622      	mov	r2, r4
 8008758:	462b      	mov	r3, r5
 800875a:	4620      	mov	r0, r4
 800875c:	4629      	mov	r1, r5
 800875e:	f7f8 f955 	bl	8000a0c <__aeabi_dcmpun>
 8008762:	4683      	mov	fp, r0
 8008764:	bb18      	cbnz	r0, 80087ae <sqrt+0x76>
 8008766:	2600      	movs	r6, #0
 8008768:	2700      	movs	r7, #0
 800876a:	4632      	mov	r2, r6
 800876c:	463b      	mov	r3, r7
 800876e:	4620      	mov	r0, r4
 8008770:	4629      	mov	r1, r5
 8008772:	f7f8 f923 	bl	80009bc <__aeabi_dcmplt>
 8008776:	b1d0      	cbz	r0, 80087ae <sqrt+0x76>
 8008778:	2301      	movs	r3, #1
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	4b17      	ldr	r3, [pc, #92]	; (80087dc <sqrt+0xa4>)
 800877e:	f8cd b020 	str.w	fp, [sp, #32]
 8008782:	9301      	str	r3, [sp, #4]
 8008784:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008788:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800878c:	f1ba 0f00 	cmp.w	sl, #0
 8008790:	d112      	bne.n	80087b8 <sqrt+0x80>
 8008792:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008796:	4668      	mov	r0, sp
 8008798:	f000 feec 	bl	8009574 <matherr>
 800879c:	b1b8      	cbz	r0, 80087ce <sqrt+0x96>
 800879e:	9b08      	ldr	r3, [sp, #32]
 80087a0:	b11b      	cbz	r3, 80087aa <sqrt+0x72>
 80087a2:	f7ff f8ef 	bl	8007984 <__errno>
 80087a6:	9b08      	ldr	r3, [sp, #32]
 80087a8:	6003      	str	r3, [r0, #0]
 80087aa:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	b00b      	add	sp, #44	; 0x2c
 80087b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b8:	4632      	mov	r2, r6
 80087ba:	463b      	mov	r3, r7
 80087bc:	4630      	mov	r0, r6
 80087be:	4639      	mov	r1, r7
 80087c0:	f7f7 ffb4 	bl	800072c <__aeabi_ddiv>
 80087c4:	f1ba 0f02 	cmp.w	sl, #2
 80087c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80087cc:	d1e3      	bne.n	8008796 <sqrt+0x5e>
 80087ce:	f7ff f8d9 	bl	8007984 <__errno>
 80087d2:	2321      	movs	r3, #33	; 0x21
 80087d4:	6003      	str	r3, [r0, #0]
 80087d6:	e7e2      	b.n	800879e <sqrt+0x66>
 80087d8:	20000070 	.word	0x20000070
 80087dc:	08009b2e 	.word	0x08009b2e

080087e0 <atan2f>:
 80087e0:	f000 b8f6 	b.w	80089d0 <__ieee754_atan2f>

080087e4 <sqrtf>:
 80087e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e6:	b08b      	sub	sp, #44	; 0x2c
 80087e8:	4604      	mov	r4, r0
 80087ea:	f000 fad9 	bl	8008da0 <__ieee754_sqrtf>
 80087ee:	4b20      	ldr	r3, [pc, #128]	; (8008870 <sqrtf+0x8c>)
 80087f0:	4606      	mov	r6, r0
 80087f2:	f993 5000 	ldrsb.w	r5, [r3]
 80087f6:	1c6b      	adds	r3, r5, #1
 80087f8:	d02a      	beq.n	8008850 <sqrtf+0x6c>
 80087fa:	4621      	mov	r1, r4
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7f8 fc87 	bl	8001110 <__aeabi_fcmpun>
 8008802:	4607      	mov	r7, r0
 8008804:	bb20      	cbnz	r0, 8008850 <sqrtf+0x6c>
 8008806:	2100      	movs	r1, #0
 8008808:	4620      	mov	r0, r4
 800880a:	f7f8 fc59 	bl	80010c0 <__aeabi_fcmplt>
 800880e:	b1f8      	cbz	r0, 8008850 <sqrtf+0x6c>
 8008810:	2301      	movs	r3, #1
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4b17      	ldr	r3, [pc, #92]	; (8008874 <sqrtf+0x90>)
 8008816:	4620      	mov	r0, r4
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	9708      	str	r7, [sp, #32]
 800881c:	f7f7 fe08 	bl	8000430 <__aeabi_f2d>
 8008820:	2200      	movs	r2, #0
 8008822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008826:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800882a:	2300      	movs	r3, #0
 800882c:	b99d      	cbnz	r5, 8008856 <sqrtf+0x72>
 800882e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008832:	4668      	mov	r0, sp
 8008834:	f000 fe9e 	bl	8009574 <matherr>
 8008838:	b1a8      	cbz	r0, 8008866 <sqrtf+0x82>
 800883a:	9b08      	ldr	r3, [sp, #32]
 800883c:	b11b      	cbz	r3, 8008846 <sqrtf+0x62>
 800883e:	f7ff f8a1 	bl	8007984 <__errno>
 8008842:	9b08      	ldr	r3, [sp, #32]
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800884a:	f7f8 f93d 	bl	8000ac8 <__aeabi_d2f>
 800884e:	4606      	mov	r6, r0
 8008850:	4630      	mov	r0, r6
 8008852:	b00b      	add	sp, #44	; 0x2c
 8008854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008856:	4610      	mov	r0, r2
 8008858:	4619      	mov	r1, r3
 800885a:	f7f7 ff67 	bl	800072c <__aeabi_ddiv>
 800885e:	2d02      	cmp	r5, #2
 8008860:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008864:	d1e5      	bne.n	8008832 <sqrtf+0x4e>
 8008866:	f7ff f88d 	bl	8007984 <__errno>
 800886a:	2321      	movs	r3, #33	; 0x21
 800886c:	6003      	str	r3, [r0, #0]
 800886e:	e7e4      	b.n	800883a <sqrtf+0x56>
 8008870:	20000070 	.word	0x20000070
 8008874:	08009b33 	.word	0x08009b33

08008878 <__ieee754_sqrt>:
 8008878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800887c:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80089cc <__ieee754_sqrt+0x154>
 8008880:	4606      	mov	r6, r0
 8008882:	ea3e 0e01 	bics.w	lr, lr, r1
 8008886:	460d      	mov	r5, r1
 8008888:	4607      	mov	r7, r0
 800888a:	460a      	mov	r2, r1
 800888c:	460c      	mov	r4, r1
 800888e:	4603      	mov	r3, r0
 8008890:	d10f      	bne.n	80088b2 <__ieee754_sqrt+0x3a>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	f7f7 fe1f 	bl	80004d8 <__aeabi_dmul>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	4630      	mov	r0, r6
 80088a0:	4629      	mov	r1, r5
 80088a2:	f7f7 fc67 	bl	8000174 <__adddf3>
 80088a6:	4606      	mov	r6, r0
 80088a8:	460d      	mov	r5, r1
 80088aa:	4630      	mov	r0, r6
 80088ac:	4629      	mov	r1, r5
 80088ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b2:	2900      	cmp	r1, #0
 80088b4:	dc0e      	bgt.n	80088d4 <__ieee754_sqrt+0x5c>
 80088b6:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 80088ba:	ea5e 0707 	orrs.w	r7, lr, r7
 80088be:	d0f4      	beq.n	80088aa <__ieee754_sqrt+0x32>
 80088c0:	b141      	cbz	r1, 80088d4 <__ieee754_sqrt+0x5c>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	f7f7 fc53 	bl	8000170 <__aeabi_dsub>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	f7f7 ff2d 	bl	800072c <__aeabi_ddiv>
 80088d2:	e7e8      	b.n	80088a6 <__ieee754_sqrt+0x2e>
 80088d4:	1512      	asrs	r2, r2, #20
 80088d6:	d10c      	bne.n	80088f2 <__ieee754_sqrt+0x7a>
 80088d8:	2c00      	cmp	r4, #0
 80088da:	d06e      	beq.n	80089ba <__ieee754_sqrt+0x142>
 80088dc:	2100      	movs	r1, #0
 80088de:	02e6      	lsls	r6, r4, #11
 80088e0:	d56f      	bpl.n	80089c2 <__ieee754_sqrt+0x14a>
 80088e2:	1e48      	subs	r0, r1, #1
 80088e4:	1a12      	subs	r2, r2, r0
 80088e6:	f1c1 0020 	rsb	r0, r1, #32
 80088ea:	fa23 f000 	lsr.w	r0, r3, r0
 80088ee:	4304      	orrs	r4, r0
 80088f0:	408b      	lsls	r3, r1
 80088f2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80088f6:	07d5      	lsls	r5, r2, #31
 80088f8:	f04f 0500 	mov.w	r5, #0
 80088fc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008900:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008904:	bf42      	ittt	mi
 8008906:	0064      	lslmi	r4, r4, #1
 8008908:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 800890c:	005b      	lslmi	r3, r3, #1
 800890e:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8008912:	1050      	asrs	r0, r2, #1
 8008914:	4421      	add	r1, r4
 8008916:	2216      	movs	r2, #22
 8008918:	462c      	mov	r4, r5
 800891a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	19a7      	adds	r7, r4, r6
 8008922:	428f      	cmp	r7, r1
 8008924:	bfde      	ittt	le
 8008926:	1bc9      	suble	r1, r1, r7
 8008928:	19bc      	addle	r4, r7, r6
 800892a:	19ad      	addle	r5, r5, r6
 800892c:	0049      	lsls	r1, r1, #1
 800892e:	3a01      	subs	r2, #1
 8008930:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008934:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008938:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800893c:	d1f0      	bne.n	8008920 <__ieee754_sqrt+0xa8>
 800893e:	f04f 0e20 	mov.w	lr, #32
 8008942:	4694      	mov	ip, r2
 8008944:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008948:	42a1      	cmp	r1, r4
 800894a:	eb06 070c 	add.w	r7, r6, ip
 800894e:	dc02      	bgt.n	8008956 <__ieee754_sqrt+0xde>
 8008950:	d112      	bne.n	8008978 <__ieee754_sqrt+0x100>
 8008952:	429f      	cmp	r7, r3
 8008954:	d810      	bhi.n	8008978 <__ieee754_sqrt+0x100>
 8008956:	2f00      	cmp	r7, #0
 8008958:	eb07 0c06 	add.w	ip, r7, r6
 800895c:	da34      	bge.n	80089c8 <__ieee754_sqrt+0x150>
 800895e:	f1bc 0f00 	cmp.w	ip, #0
 8008962:	db31      	blt.n	80089c8 <__ieee754_sqrt+0x150>
 8008964:	f104 0801 	add.w	r8, r4, #1
 8008968:	1b09      	subs	r1, r1, r4
 800896a:	4644      	mov	r4, r8
 800896c:	429f      	cmp	r7, r3
 800896e:	bf88      	it	hi
 8008970:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008974:	1bdb      	subs	r3, r3, r7
 8008976:	4432      	add	r2, r6
 8008978:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 800897c:	f1be 0e01 	subs.w	lr, lr, #1
 8008980:	4439      	add	r1, r7
 8008982:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008986:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800898a:	d1dd      	bne.n	8008948 <__ieee754_sqrt+0xd0>
 800898c:	430b      	orrs	r3, r1
 800898e:	d006      	beq.n	800899e <__ieee754_sqrt+0x126>
 8008990:	1c54      	adds	r4, r2, #1
 8008992:	bf0b      	itete	eq
 8008994:	4672      	moveq	r2, lr
 8008996:	3201      	addne	r2, #1
 8008998:	3501      	addeq	r5, #1
 800899a:	f022 0201 	bicne.w	r2, r2, #1
 800899e:	106b      	asrs	r3, r5, #1
 80089a0:	0852      	lsrs	r2, r2, #1
 80089a2:	07e9      	lsls	r1, r5, #31
 80089a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80089a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80089ac:	bf48      	it	mi
 80089ae:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80089b2:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 80089b6:	4616      	mov	r6, r2
 80089b8:	e777      	b.n	80088aa <__ieee754_sqrt+0x32>
 80089ba:	0adc      	lsrs	r4, r3, #11
 80089bc:	3a15      	subs	r2, #21
 80089be:	055b      	lsls	r3, r3, #21
 80089c0:	e78a      	b.n	80088d8 <__ieee754_sqrt+0x60>
 80089c2:	0064      	lsls	r4, r4, #1
 80089c4:	3101      	adds	r1, #1
 80089c6:	e78a      	b.n	80088de <__ieee754_sqrt+0x66>
 80089c8:	46a0      	mov	r8, r4
 80089ca:	e7cd      	b.n	8008968 <__ieee754_sqrt+0xf0>
 80089cc:	7ff00000 	.word	0x7ff00000

080089d0 <__ieee754_atan2f>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80089d6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80089da:	4603      	mov	r3, r0
 80089dc:	dc05      	bgt.n	80089ea <__ieee754_atan2f+0x1a>
 80089de:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80089e2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80089e6:	4607      	mov	r7, r0
 80089e8:	dd04      	ble.n	80089f4 <__ieee754_atan2f+0x24>
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7f8 f8c2 	bl	8000b74 <__addsf3>
 80089f0:	4603      	mov	r3, r0
 80089f2:	e010      	b.n	8008a16 <__ieee754_atan2f+0x46>
 80089f4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80089f8:	d103      	bne.n	8008a02 <__ieee754_atan2f+0x32>
 80089fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089fe:	f000 bdbb 	b.w	8009578 <atanf>
 8008a02:	178c      	asrs	r4, r1, #30
 8008a04:	f004 0402 	and.w	r4, r4, #2
 8008a08:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008a0c:	b92a      	cbnz	r2, 8008a1a <__ieee754_atan2f+0x4a>
 8008a0e:	2c02      	cmp	r4, #2
 8008a10:	d023      	beq.n	8008a5a <__ieee754_atan2f+0x8a>
 8008a12:	2c03      	cmp	r4, #3
 8008a14:	d023      	beq.n	8008a5e <__ieee754_atan2f+0x8e>
 8008a16:	4618      	mov	r0, r3
 8008a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a1a:	b91e      	cbnz	r6, 8008a24 <__ieee754_atan2f+0x54>
 8008a1c:	2f00      	cmp	r7, #0
 8008a1e:	da53      	bge.n	8008ac8 <__ieee754_atan2f+0xf8>
 8008a20:	4b2a      	ldr	r3, [pc, #168]	; (8008acc <__ieee754_atan2f+0xfc>)
 8008a22:	e7f8      	b.n	8008a16 <__ieee754_atan2f+0x46>
 8008a24:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008a28:	d11b      	bne.n	8008a62 <__ieee754_atan2f+0x92>
 8008a2a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008a2e:	d10b      	bne.n	8008a48 <__ieee754_atan2f+0x78>
 8008a30:	2c02      	cmp	r4, #2
 8008a32:	d005      	beq.n	8008a40 <__ieee754_atan2f+0x70>
 8008a34:	2c03      	cmp	r4, #3
 8008a36:	d005      	beq.n	8008a44 <__ieee754_atan2f+0x74>
 8008a38:	2c01      	cmp	r4, #1
 8008a3a:	d141      	bne.n	8008ac0 <__ieee754_atan2f+0xf0>
 8008a3c:	4b24      	ldr	r3, [pc, #144]	; (8008ad0 <__ieee754_atan2f+0x100>)
 8008a3e:	e7ea      	b.n	8008a16 <__ieee754_atan2f+0x46>
 8008a40:	4b24      	ldr	r3, [pc, #144]	; (8008ad4 <__ieee754_atan2f+0x104>)
 8008a42:	e7e8      	b.n	8008a16 <__ieee754_atan2f+0x46>
 8008a44:	4b24      	ldr	r3, [pc, #144]	; (8008ad8 <__ieee754_atan2f+0x108>)
 8008a46:	e7e6      	b.n	8008a16 <__ieee754_atan2f+0x46>
 8008a48:	2c02      	cmp	r4, #2
 8008a4a:	d006      	beq.n	8008a5a <__ieee754_atan2f+0x8a>
 8008a4c:	2c03      	cmp	r4, #3
 8008a4e:	d006      	beq.n	8008a5e <__ieee754_atan2f+0x8e>
 8008a50:	2c01      	cmp	r4, #1
 8008a52:	d137      	bne.n	8008ac4 <__ieee754_atan2f+0xf4>
 8008a54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a58:	e7dd      	b.n	8008a16 <__ieee754_atan2f+0x46>
 8008a5a:	4b20      	ldr	r3, [pc, #128]	; (8008adc <__ieee754_atan2f+0x10c>)
 8008a5c:	e7db      	b.n	8008a16 <__ieee754_atan2f+0x46>
 8008a5e:	4b20      	ldr	r3, [pc, #128]	; (8008ae0 <__ieee754_atan2f+0x110>)
 8008a60:	e7d9      	b.n	8008a16 <__ieee754_atan2f+0x46>
 8008a62:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008a66:	d0d9      	beq.n	8008a1c <__ieee754_atan2f+0x4c>
 8008a68:	1b92      	subs	r2, r2, r6
 8008a6a:	15d2      	asrs	r2, r2, #23
 8008a6c:	2a3c      	cmp	r2, #60	; 0x3c
 8008a6e:	dc17      	bgt.n	8008aa0 <__ieee754_atan2f+0xd0>
 8008a70:	2900      	cmp	r1, #0
 8008a72:	da01      	bge.n	8008a78 <__ieee754_atan2f+0xa8>
 8008a74:	323c      	adds	r2, #60	; 0x3c
 8008a76:	db15      	blt.n	8008aa4 <__ieee754_atan2f+0xd4>
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7f8 fa37 	bl	8000eec <__aeabi_fdiv>
 8008a7e:	f000 fe8b 	bl	8009798 <fabsf>
 8008a82:	f000 fd79 	bl	8009578 <atanf>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2c01      	cmp	r4, #1
 8008a8a:	d00d      	beq.n	8008aa8 <__ieee754_atan2f+0xd8>
 8008a8c:	2c02      	cmp	r4, #2
 8008a8e:	d00e      	beq.n	8008aae <__ieee754_atan2f+0xde>
 8008a90:	2c00      	cmp	r4, #0
 8008a92:	d0c0      	beq.n	8008a16 <__ieee754_atan2f+0x46>
 8008a94:	4913      	ldr	r1, [pc, #76]	; (8008ae4 <__ieee754_atan2f+0x114>)
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f8 f86c 	bl	8000b74 <__addsf3>
 8008a9c:	490f      	ldr	r1, [pc, #60]	; (8008adc <__ieee754_atan2f+0x10c>)
 8008a9e:	e00c      	b.n	8008aba <__ieee754_atan2f+0xea>
 8008aa0:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <__ieee754_atan2f+0x118>)
 8008aa2:	e7f1      	b.n	8008a88 <__ieee754_atan2f+0xb8>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e7ef      	b.n	8008a88 <__ieee754_atan2f+0xb8>
 8008aa8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008aac:	e7b3      	b.n	8008a16 <__ieee754_atan2f+0x46>
 8008aae:	490d      	ldr	r1, [pc, #52]	; (8008ae4 <__ieee754_atan2f+0x114>)
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7f8 f85f 	bl	8000b74 <__addsf3>
 8008ab6:	4601      	mov	r1, r0
 8008ab8:	4808      	ldr	r0, [pc, #32]	; (8008adc <__ieee754_atan2f+0x10c>)
 8008aba:	f7f8 f859 	bl	8000b70 <__aeabi_fsub>
 8008abe:	e797      	b.n	80089f0 <__ieee754_atan2f+0x20>
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <__ieee754_atan2f+0x11c>)
 8008ac2:	e7a8      	b.n	8008a16 <__ieee754_atan2f+0x46>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e7a6      	b.n	8008a16 <__ieee754_atan2f+0x46>
 8008ac8:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <__ieee754_atan2f+0x118>)
 8008aca:	e7a4      	b.n	8008a16 <__ieee754_atan2f+0x46>
 8008acc:	bfc90fdb 	.word	0xbfc90fdb
 8008ad0:	bf490fdb 	.word	0xbf490fdb
 8008ad4:	4016cbe4 	.word	0x4016cbe4
 8008ad8:	c016cbe4 	.word	0xc016cbe4
 8008adc:	40490fdb 	.word	0x40490fdb
 8008ae0:	c0490fdb 	.word	0xc0490fdb
 8008ae4:	33bbbd2e 	.word	0x33bbbd2e
 8008ae8:	3fc90fdb 	.word	0x3fc90fdb
 8008aec:	3f490fdb 	.word	0x3f490fdb

08008af0 <__ieee754_rem_pio2f>:
 8008af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af4:	4a9d      	ldr	r2, [pc, #628]	; (8008d6c <__ieee754_rem_pio2f+0x27c>)
 8008af6:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8008afa:	4295      	cmp	r5, r2
 8008afc:	b087      	sub	sp, #28
 8008afe:	460c      	mov	r4, r1
 8008b00:	4607      	mov	r7, r0
 8008b02:	dc04      	bgt.n	8008b0e <__ieee754_rem_pio2f+0x1e>
 8008b04:	2300      	movs	r3, #0
 8008b06:	6020      	str	r0, [r4, #0]
 8008b08:	604b      	str	r3, [r1, #4]
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	e01a      	b.n	8008b44 <__ieee754_rem_pio2f+0x54>
 8008b0e:	4a98      	ldr	r2, [pc, #608]	; (8008d70 <__ieee754_rem_pio2f+0x280>)
 8008b10:	4295      	cmp	r5, r2
 8008b12:	dc4b      	bgt.n	8008bac <__ieee754_rem_pio2f+0xbc>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	4997      	ldr	r1, [pc, #604]	; (8008d74 <__ieee754_rem_pio2f+0x284>)
 8008b18:	f025 050f 	bic.w	r5, r5, #15
 8008b1c:	4e96      	ldr	r6, [pc, #600]	; (8008d78 <__ieee754_rem_pio2f+0x288>)
 8008b1e:	dd23      	ble.n	8008b68 <__ieee754_rem_pio2f+0x78>
 8008b20:	f7f8 f826 	bl	8000b70 <__aeabi_fsub>
 8008b24:	42b5      	cmp	r5, r6
 8008b26:	4607      	mov	r7, r0
 8008b28:	d010      	beq.n	8008b4c <__ieee754_rem_pio2f+0x5c>
 8008b2a:	4994      	ldr	r1, [pc, #592]	; (8008d7c <__ieee754_rem_pio2f+0x28c>)
 8008b2c:	f7f8 f820 	bl	8000b70 <__aeabi_fsub>
 8008b30:	4601      	mov	r1, r0
 8008b32:	6020      	str	r0, [r4, #0]
 8008b34:	4638      	mov	r0, r7
 8008b36:	f7f8 f81b 	bl	8000b70 <__aeabi_fsub>
 8008b3a:	4990      	ldr	r1, [pc, #576]	; (8008d7c <__ieee754_rem_pio2f+0x28c>)
 8008b3c:	f7f8 f818 	bl	8000b70 <__aeabi_fsub>
 8008b40:	2601      	movs	r6, #1
 8008b42:	6060      	str	r0, [r4, #4]
 8008b44:	4630      	mov	r0, r6
 8008b46:	b007      	add	sp, #28
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4c:	498c      	ldr	r1, [pc, #560]	; (8008d80 <__ieee754_rem_pio2f+0x290>)
 8008b4e:	f7f8 f80f 	bl	8000b70 <__aeabi_fsub>
 8008b52:	498c      	ldr	r1, [pc, #560]	; (8008d84 <__ieee754_rem_pio2f+0x294>)
 8008b54:	4605      	mov	r5, r0
 8008b56:	f7f8 f80b 	bl	8000b70 <__aeabi_fsub>
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	6020      	str	r0, [r4, #0]
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f7f8 f806 	bl	8000b70 <__aeabi_fsub>
 8008b64:	4987      	ldr	r1, [pc, #540]	; (8008d84 <__ieee754_rem_pio2f+0x294>)
 8008b66:	e7e9      	b.n	8008b3c <__ieee754_rem_pio2f+0x4c>
 8008b68:	f7f8 f804 	bl	8000b74 <__addsf3>
 8008b6c:	42b5      	cmp	r5, r6
 8008b6e:	4607      	mov	r7, r0
 8008b70:	d00e      	beq.n	8008b90 <__ieee754_rem_pio2f+0xa0>
 8008b72:	4982      	ldr	r1, [pc, #520]	; (8008d7c <__ieee754_rem_pio2f+0x28c>)
 8008b74:	f7f7 fffe 	bl	8000b74 <__addsf3>
 8008b78:	4601      	mov	r1, r0
 8008b7a:	6020      	str	r0, [r4, #0]
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f7f7 fff7 	bl	8000b70 <__aeabi_fsub>
 8008b82:	497e      	ldr	r1, [pc, #504]	; (8008d7c <__ieee754_rem_pio2f+0x28c>)
 8008b84:	f7f7 fff6 	bl	8000b74 <__addsf3>
 8008b88:	f04f 36ff 	mov.w	r6, #4294967295
 8008b8c:	6060      	str	r0, [r4, #4]
 8008b8e:	e7d9      	b.n	8008b44 <__ieee754_rem_pio2f+0x54>
 8008b90:	497b      	ldr	r1, [pc, #492]	; (8008d80 <__ieee754_rem_pio2f+0x290>)
 8008b92:	f7f7 ffef 	bl	8000b74 <__addsf3>
 8008b96:	497b      	ldr	r1, [pc, #492]	; (8008d84 <__ieee754_rem_pio2f+0x294>)
 8008b98:	4605      	mov	r5, r0
 8008b9a:	f7f7 ffeb 	bl	8000b74 <__addsf3>
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	6020      	str	r0, [r4, #0]
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f7f7 ffe4 	bl	8000b70 <__aeabi_fsub>
 8008ba8:	4976      	ldr	r1, [pc, #472]	; (8008d84 <__ieee754_rem_pio2f+0x294>)
 8008baa:	e7eb      	b.n	8008b84 <__ieee754_rem_pio2f+0x94>
 8008bac:	4a76      	ldr	r2, [pc, #472]	; (8008d88 <__ieee754_rem_pio2f+0x298>)
 8008bae:	4295      	cmp	r5, r2
 8008bb0:	f300 808c 	bgt.w	8008ccc <__ieee754_rem_pio2f+0x1dc>
 8008bb4:	f000 fdf0 	bl	8009798 <fabsf>
 8008bb8:	4974      	ldr	r1, [pc, #464]	; (8008d8c <__ieee754_rem_pio2f+0x29c>)
 8008bba:	4680      	mov	r8, r0
 8008bbc:	f7f8 f8e2 	bl	8000d84 <__aeabi_fmul>
 8008bc0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008bc4:	f7f7 ffd6 	bl	8000b74 <__addsf3>
 8008bc8:	f7f8 fab8 	bl	800113c <__aeabi_f2iz>
 8008bcc:	4606      	mov	r6, r0
 8008bce:	f7f8 f885 	bl	8000cdc <__aeabi_i2f>
 8008bd2:	4968      	ldr	r1, [pc, #416]	; (8008d74 <__ieee754_rem_pio2f+0x284>)
 8008bd4:	4682      	mov	sl, r0
 8008bd6:	f7f8 f8d5 	bl	8000d84 <__aeabi_fmul>
 8008bda:	4601      	mov	r1, r0
 8008bdc:	4640      	mov	r0, r8
 8008bde:	f7f7 ffc7 	bl	8000b70 <__aeabi_fsub>
 8008be2:	4966      	ldr	r1, [pc, #408]	; (8008d7c <__ieee754_rem_pio2f+0x28c>)
 8008be4:	4680      	mov	r8, r0
 8008be6:	4650      	mov	r0, sl
 8008be8:	f7f8 f8cc 	bl	8000d84 <__aeabi_fmul>
 8008bec:	2e1f      	cmp	r6, #31
 8008bee:	4681      	mov	r9, r0
 8008bf0:	dc0c      	bgt.n	8008c0c <__ieee754_rem_pio2f+0x11c>
 8008bf2:	4a67      	ldr	r2, [pc, #412]	; (8008d90 <__ieee754_rem_pio2f+0x2a0>)
 8008bf4:	1e71      	subs	r1, r6, #1
 8008bf6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008bfa:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d004      	beq.n	8008c0c <__ieee754_rem_pio2f+0x11c>
 8008c02:	4649      	mov	r1, r9
 8008c04:	4640      	mov	r0, r8
 8008c06:	f7f7 ffb3 	bl	8000b70 <__aeabi_fsub>
 8008c0a:	e009      	b.n	8008c20 <__ieee754_rem_pio2f+0x130>
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	4640      	mov	r0, r8
 8008c10:	f7f7 ffae 	bl	8000b70 <__aeabi_fsub>
 8008c14:	15ed      	asrs	r5, r5, #23
 8008c16:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008c1a:	1aeb      	subs	r3, r5, r3
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	dc01      	bgt.n	8008c24 <__ieee754_rem_pio2f+0x134>
 8008c20:	6020      	str	r0, [r4, #0]
 8008c22:	e024      	b.n	8008c6e <__ieee754_rem_pio2f+0x17e>
 8008c24:	4956      	ldr	r1, [pc, #344]	; (8008d80 <__ieee754_rem_pio2f+0x290>)
 8008c26:	4650      	mov	r0, sl
 8008c28:	f7f8 f8ac 	bl	8000d84 <__aeabi_fmul>
 8008c2c:	4681      	mov	r9, r0
 8008c2e:	4601      	mov	r1, r0
 8008c30:	4640      	mov	r0, r8
 8008c32:	f7f7 ff9d 	bl	8000b70 <__aeabi_fsub>
 8008c36:	4601      	mov	r1, r0
 8008c38:	4683      	mov	fp, r0
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	f7f7 ff98 	bl	8000b70 <__aeabi_fsub>
 8008c40:	4649      	mov	r1, r9
 8008c42:	f7f7 ff95 	bl	8000b70 <__aeabi_fsub>
 8008c46:	4680      	mov	r8, r0
 8008c48:	494e      	ldr	r1, [pc, #312]	; (8008d84 <__ieee754_rem_pio2f+0x294>)
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	f7f8 f89a 	bl	8000d84 <__aeabi_fmul>
 8008c50:	4641      	mov	r1, r8
 8008c52:	f7f7 ff8d 	bl	8000b70 <__aeabi_fsub>
 8008c56:	4601      	mov	r1, r0
 8008c58:	4681      	mov	r9, r0
 8008c5a:	4658      	mov	r0, fp
 8008c5c:	f7f7 ff88 	bl	8000b70 <__aeabi_fsub>
 8008c60:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008c64:	1aed      	subs	r5, r5, r3
 8008c66:	2d19      	cmp	r5, #25
 8008c68:	dc15      	bgt.n	8008c96 <__ieee754_rem_pio2f+0x1a6>
 8008c6a:	46d8      	mov	r8, fp
 8008c6c:	6020      	str	r0, [r4, #0]
 8008c6e:	6825      	ldr	r5, [r4, #0]
 8008c70:	4640      	mov	r0, r8
 8008c72:	4629      	mov	r1, r5
 8008c74:	f7f7 ff7c 	bl	8000b70 <__aeabi_fsub>
 8008c78:	4649      	mov	r1, r9
 8008c7a:	f7f7 ff79 	bl	8000b70 <__aeabi_fsub>
 8008c7e:	2f00      	cmp	r7, #0
 8008c80:	6060      	str	r0, [r4, #4]
 8008c82:	f6bf af5f 	bge.w	8008b44 <__ieee754_rem_pio2f+0x54>
 8008c86:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8008c8a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008c8e:	6025      	str	r5, [r4, #0]
 8008c90:	6060      	str	r0, [r4, #4]
 8008c92:	4276      	negs	r6, r6
 8008c94:	e756      	b.n	8008b44 <__ieee754_rem_pio2f+0x54>
 8008c96:	493f      	ldr	r1, [pc, #252]	; (8008d94 <__ieee754_rem_pio2f+0x2a4>)
 8008c98:	4650      	mov	r0, sl
 8008c9a:	f7f8 f873 	bl	8000d84 <__aeabi_fmul>
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	4658      	mov	r0, fp
 8008ca4:	f7f7 ff64 	bl	8000b70 <__aeabi_fsub>
 8008ca8:	4601      	mov	r1, r0
 8008caa:	4680      	mov	r8, r0
 8008cac:	4658      	mov	r0, fp
 8008cae:	f7f7 ff5f 	bl	8000b70 <__aeabi_fsub>
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	f7f7 ff5c 	bl	8000b70 <__aeabi_fsub>
 8008cb8:	4605      	mov	r5, r0
 8008cba:	4937      	ldr	r1, [pc, #220]	; (8008d98 <__ieee754_rem_pio2f+0x2a8>)
 8008cbc:	4650      	mov	r0, sl
 8008cbe:	f7f8 f861 	bl	8000d84 <__aeabi_fmul>
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	f7f7 ff54 	bl	8000b70 <__aeabi_fsub>
 8008cc8:	4681      	mov	r9, r0
 8008cca:	e79a      	b.n	8008c02 <__ieee754_rem_pio2f+0x112>
 8008ccc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008cd0:	db05      	blt.n	8008cde <__ieee754_rem_pio2f+0x1ee>
 8008cd2:	4601      	mov	r1, r0
 8008cd4:	f7f7 ff4c 	bl	8000b70 <__aeabi_fsub>
 8008cd8:	6060      	str	r0, [r4, #4]
 8008cda:	6020      	str	r0, [r4, #0]
 8008cdc:	e715      	b.n	8008b0a <__ieee754_rem_pio2f+0x1a>
 8008cde:	15ee      	asrs	r6, r5, #23
 8008ce0:	3e86      	subs	r6, #134	; 0x86
 8008ce2:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f7f8 fa28 	bl	800113c <__aeabi_f2iz>
 8008cec:	f7f7 fff6 	bl	8000cdc <__aeabi_i2f>
 8008cf0:	4601      	mov	r1, r0
 8008cf2:	9003      	str	r0, [sp, #12]
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f7f7 ff3b 	bl	8000b70 <__aeabi_fsub>
 8008cfa:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008cfe:	f7f8 f841 	bl	8000d84 <__aeabi_fmul>
 8008d02:	4680      	mov	r8, r0
 8008d04:	f7f8 fa1a 	bl	800113c <__aeabi_f2iz>
 8008d08:	f7f7 ffe8 	bl	8000cdc <__aeabi_i2f>
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	9004      	str	r0, [sp, #16]
 8008d10:	4605      	mov	r5, r0
 8008d12:	4640      	mov	r0, r8
 8008d14:	f7f7 ff2c 	bl	8000b70 <__aeabi_fsub>
 8008d18:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008d1c:	f7f8 f832 	bl	8000d84 <__aeabi_fmul>
 8008d20:	2100      	movs	r1, #0
 8008d22:	9005      	str	r0, [sp, #20]
 8008d24:	f7f8 f9c2 	bl	80010ac <__aeabi_fcmpeq>
 8008d28:	b1e8      	cbz	r0, 8008d66 <__ieee754_rem_pio2f+0x276>
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	f7f8 f9bd 	bl	80010ac <__aeabi_fcmpeq>
 8008d32:	2800      	cmp	r0, #0
 8008d34:	bf14      	ite	ne
 8008d36:	2301      	movne	r3, #1
 8008d38:	2302      	moveq	r3, #2
 8008d3a:	4a18      	ldr	r2, [pc, #96]	; (8008d9c <__ieee754_rem_pio2f+0x2ac>)
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	9201      	str	r2, [sp, #4]
 8008d40:	2202      	movs	r2, #2
 8008d42:	a803      	add	r0, sp, #12
 8008d44:	9200      	str	r2, [sp, #0]
 8008d46:	4632      	mov	r2, r6
 8008d48:	f000 f910 	bl	8008f6c <__kernel_rem_pio2f>
 8008d4c:	2f00      	cmp	r7, #0
 8008d4e:	4606      	mov	r6, r0
 8008d50:	f6bf aef8 	bge.w	8008b44 <__ieee754_rem_pio2f+0x54>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d5a:	6023      	str	r3, [r4, #0]
 8008d5c:	6863      	ldr	r3, [r4, #4]
 8008d5e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d62:	6063      	str	r3, [r4, #4]
 8008d64:	e795      	b.n	8008c92 <__ieee754_rem_pio2f+0x1a2>
 8008d66:	2303      	movs	r3, #3
 8008d68:	e7e7      	b.n	8008d3a <__ieee754_rem_pio2f+0x24a>
 8008d6a:	bf00      	nop
 8008d6c:	3f490fd8 	.word	0x3f490fd8
 8008d70:	4016cbe3 	.word	0x4016cbe3
 8008d74:	3fc90f80 	.word	0x3fc90f80
 8008d78:	3fc90fd0 	.word	0x3fc90fd0
 8008d7c:	37354443 	.word	0x37354443
 8008d80:	37354400 	.word	0x37354400
 8008d84:	2e85a308 	.word	0x2e85a308
 8008d88:	43490f80 	.word	0x43490f80
 8008d8c:	3f22f984 	.word	0x3f22f984
 8008d90:	08009b3c 	.word	0x08009b3c
 8008d94:	2e85a300 	.word	0x2e85a300
 8008d98:	248d3132 	.word	0x248d3132
 8008d9c:	08009bbc 	.word	0x08009bbc

08008da0 <__ieee754_sqrtf>:
 8008da0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008da4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008da8:	b570      	push	{r4, r5, r6, lr}
 8008daa:	4603      	mov	r3, r0
 8008dac:	4604      	mov	r4, r0
 8008dae:	d309      	bcc.n	8008dc4 <__ieee754_sqrtf+0x24>
 8008db0:	4601      	mov	r1, r0
 8008db2:	f7f7 ffe7 	bl	8000d84 <__aeabi_fmul>
 8008db6:	4601      	mov	r1, r0
 8008db8:	4620      	mov	r0, r4
 8008dba:	f7f7 fedb 	bl	8000b74 <__addsf3>
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	2a00      	cmp	r2, #0
 8008dc6:	d0fb      	beq.n	8008dc0 <__ieee754_sqrtf+0x20>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	da06      	bge.n	8008dda <__ieee754_sqrtf+0x3a>
 8008dcc:	4601      	mov	r1, r0
 8008dce:	f7f7 fecf 	bl	8000b70 <__aeabi_fsub>
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	f7f8 f88a 	bl	8000eec <__aeabi_fdiv>
 8008dd8:	e7f1      	b.n	8008dbe <__ieee754_sqrtf+0x1e>
 8008dda:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008dde:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8008de2:	d204      	bcs.n	8008dee <__ieee754_sqrtf+0x4e>
 8008de4:	2200      	movs	r2, #0
 8008de6:	0219      	lsls	r1, r3, #8
 8008de8:	d529      	bpl.n	8008e3e <__ieee754_sqrtf+0x9e>
 8008dea:	3a01      	subs	r2, #1
 8008dec:	1aa4      	subs	r4, r4, r2
 8008dee:	3c7f      	subs	r4, #127	; 0x7f
 8008df0:	07e2      	lsls	r2, r4, #31
 8008df2:	f04f 0200 	mov.w	r2, #0
 8008df6:	ea4f 0164 	mov.w	r1, r4, asr #1
 8008dfa:	4616      	mov	r6, r2
 8008dfc:	f04f 0419 	mov.w	r4, #25
 8008e00:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8008e04:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008e08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e0c:	bf48      	it	mi
 8008e0e:	005b      	lslmi	r3, r3, #1
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	1835      	adds	r5, r6, r0
 8008e14:	429d      	cmp	r5, r3
 8008e16:	bfde      	ittt	le
 8008e18:	182e      	addle	r6, r5, r0
 8008e1a:	1b5b      	suble	r3, r3, r5
 8008e1c:	1812      	addle	r2, r2, r0
 8008e1e:	3c01      	subs	r4, #1
 8008e20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e24:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008e28:	d1f3      	bne.n	8008e12 <__ieee754_sqrtf+0x72>
 8008e2a:	b113      	cbz	r3, 8008e32 <__ieee754_sqrtf+0x92>
 8008e2c:	3201      	adds	r2, #1
 8008e2e:	f022 0201 	bic.w	r2, r2, #1
 8008e32:	1054      	asrs	r4, r2, #1
 8008e34:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008e38:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8008e3c:	e7c0      	b.n	8008dc0 <__ieee754_sqrtf+0x20>
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	3201      	adds	r2, #1
 8008e42:	e7d0      	b.n	8008de6 <__ieee754_sqrtf+0x46>

08008e44 <__kernel_cosf>:
 8008e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e48:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8008e4c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8008e50:	4606      	mov	r6, r0
 8008e52:	460f      	mov	r7, r1
 8008e54:	da03      	bge.n	8008e5e <__kernel_cosf+0x1a>
 8008e56:	f7f8 f971 	bl	800113c <__aeabi_f2iz>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d070      	beq.n	8008f40 <__kernel_cosf+0xfc>
 8008e5e:	4631      	mov	r1, r6
 8008e60:	4630      	mov	r0, r6
 8008e62:	f7f7 ff8f 	bl	8000d84 <__aeabi_fmul>
 8008e66:	4605      	mov	r5, r0
 8008e68:	4937      	ldr	r1, [pc, #220]	; (8008f48 <__kernel_cosf+0x104>)
 8008e6a:	f7f7 ff8b 	bl	8000d84 <__aeabi_fmul>
 8008e6e:	4937      	ldr	r1, [pc, #220]	; (8008f4c <__kernel_cosf+0x108>)
 8008e70:	f7f7 fe80 	bl	8000b74 <__addsf3>
 8008e74:	4629      	mov	r1, r5
 8008e76:	f7f7 ff85 	bl	8000d84 <__aeabi_fmul>
 8008e7a:	4935      	ldr	r1, [pc, #212]	; (8008f50 <__kernel_cosf+0x10c>)
 8008e7c:	f7f7 fe78 	bl	8000b70 <__aeabi_fsub>
 8008e80:	4629      	mov	r1, r5
 8008e82:	f7f7 ff7f 	bl	8000d84 <__aeabi_fmul>
 8008e86:	4933      	ldr	r1, [pc, #204]	; (8008f54 <__kernel_cosf+0x110>)
 8008e88:	f7f7 fe74 	bl	8000b74 <__addsf3>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	f7f7 ff79 	bl	8000d84 <__aeabi_fmul>
 8008e92:	4931      	ldr	r1, [pc, #196]	; (8008f58 <__kernel_cosf+0x114>)
 8008e94:	f7f7 fe6c 	bl	8000b70 <__aeabi_fsub>
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7f7 ff73 	bl	8000d84 <__aeabi_fmul>
 8008e9e:	492f      	ldr	r1, [pc, #188]	; (8008f5c <__kernel_cosf+0x118>)
 8008ea0:	f7f7 fe68 	bl	8000b74 <__addsf3>
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	f7f7 ff6d 	bl	8000d84 <__aeabi_fmul>
 8008eaa:	4b2d      	ldr	r3, [pc, #180]	; (8008f60 <__kernel_cosf+0x11c>)
 8008eac:	4680      	mov	r8, r0
 8008eae:	429c      	cmp	r4, r3
 8008eb0:	dc1d      	bgt.n	8008eee <__kernel_cosf+0xaa>
 8008eb2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f7f7 ff64 	bl	8000d84 <__aeabi_fmul>
 8008ebc:	4641      	mov	r1, r8
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f7f7 ff5f 	bl	8000d84 <__aeabi_fmul>
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	4605      	mov	r5, r0
 8008eca:	4630      	mov	r0, r6
 8008ecc:	f7f7 ff5a 	bl	8000d84 <__aeabi_fmul>
 8008ed0:	4601      	mov	r1, r0
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f7f7 fe4c 	bl	8000b70 <__aeabi_fsub>
 8008ed8:	4601      	mov	r1, r0
 8008eda:	4620      	mov	r0, r4
 8008edc:	f7f7 fe48 	bl	8000b70 <__aeabi_fsub>
 8008ee0:	4601      	mov	r1, r0
 8008ee2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008ee6:	f7f7 fe43 	bl	8000b70 <__aeabi_fsub>
 8008eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eee:	4b1d      	ldr	r3, [pc, #116]	; (8008f64 <__kernel_cosf+0x120>)
 8008ef0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	bfcc      	ite	gt
 8008ef8:	4c1b      	ldrgt	r4, [pc, #108]	; (8008f68 <__kernel_cosf+0x124>)
 8008efa:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8008efe:	4621      	mov	r1, r4
 8008f00:	f7f7 fe36 	bl	8000b70 <__aeabi_fsub>
 8008f04:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008f08:	4681      	mov	r9, r0
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f7f7 ff3a 	bl	8000d84 <__aeabi_fmul>
 8008f10:	4621      	mov	r1, r4
 8008f12:	f7f7 fe2d 	bl	8000b70 <__aeabi_fsub>
 8008f16:	4641      	mov	r1, r8
 8008f18:	4604      	mov	r4, r0
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f7f7 ff32 	bl	8000d84 <__aeabi_fmul>
 8008f20:	4639      	mov	r1, r7
 8008f22:	4605      	mov	r5, r0
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7f7 ff2d 	bl	8000d84 <__aeabi_fmul>
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f7f7 fe1f 	bl	8000b70 <__aeabi_fsub>
 8008f32:	4601      	mov	r1, r0
 8008f34:	4620      	mov	r0, r4
 8008f36:	f7f7 fe1b 	bl	8000b70 <__aeabi_fsub>
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	4648      	mov	r0, r9
 8008f3e:	e7d2      	b.n	8008ee6 <__kernel_cosf+0xa2>
 8008f40:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f48:	ad47d74e 	.word	0xad47d74e
 8008f4c:	310f74f6 	.word	0x310f74f6
 8008f50:	3493f27c 	.word	0x3493f27c
 8008f54:	37d00d01 	.word	0x37d00d01
 8008f58:	3ab60b61 	.word	0x3ab60b61
 8008f5c:	3d2aaaab 	.word	0x3d2aaaab
 8008f60:	3e999999 	.word	0x3e999999
 8008f64:	3f480000 	.word	0x3f480000
 8008f68:	3e900000 	.word	0x3e900000

08008f6c <__kernel_rem_pio2f>:
 8008f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	b0d9      	sub	sp, #356	; 0x164
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	9101      	str	r1, [sp, #4]
 8008f76:	4bb4      	ldr	r3, [pc, #720]	; (8009248 <__kernel_rem_pio2f+0x2dc>)
 8008f78:	9962      	ldr	r1, [sp, #392]	; 0x188
 8008f7a:	1ed4      	subs	r4, r2, #3
 8008f7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f80:	2500      	movs	r5, #0
 8008f82:	9302      	str	r3, [sp, #8]
 8008f84:	9b04      	ldr	r3, [sp, #16]
 8008f86:	f04f 0b00 	mov.w	fp, #0
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	9303      	str	r3, [sp, #12]
 8008f8e:	2308      	movs	r3, #8
 8008f90:	fb94 f4f3 	sdiv	r4, r4, r3
 8008f94:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008f98:	1c66      	adds	r6, r4, #1
 8008f9a:	9b02      	ldr	r3, [sp, #8]
 8008f9c:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8008fa0:	9a03      	ldr	r2, [sp, #12]
 8008fa2:	9005      	str	r0, [sp, #20]
 8008fa4:	eb03 0802 	add.w	r8, r3, r2
 8008fa8:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8008faa:	1aa7      	subs	r7, r4, r2
 8008fac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008fb0:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 8008fb4:	4545      	cmp	r5, r8
 8008fb6:	dd10      	ble.n	8008fda <__kernel_rem_pio2f+0x6e>
 8008fb8:	2500      	movs	r5, #0
 8008fba:	f04f 0b00 	mov.w	fp, #0
 8008fbe:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 8008fc2:	9b02      	ldr	r3, [sp, #8]
 8008fc4:	429d      	cmp	r5, r3
 8008fc6:	dc28      	bgt.n	800901a <__kernel_rem_pio2f+0xae>
 8008fc8:	9b04      	ldr	r3, [sp, #16]
 8008fca:	46d9      	mov	r9, fp
 8008fcc:	eb03 0805 	add.w	r8, r3, r5
 8008fd0:	ab1c      	add	r3, sp, #112	; 0x70
 8008fd2:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 8008fd6:	2700      	movs	r7, #0
 8008fd8:	e018      	b.n	800900c <__kernel_rem_pio2f+0xa0>
 8008fda:	42ef      	cmn	r7, r5
 8008fdc:	d407      	bmi.n	8008fee <__kernel_rem_pio2f+0x82>
 8008fde:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008fe2:	f7f7 fe7b 	bl	8000cdc <__aeabi_i2f>
 8008fe6:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 8008fea:	3501      	adds	r5, #1
 8008fec:	e7e2      	b.n	8008fb4 <__kernel_rem_pio2f+0x48>
 8008fee:	4658      	mov	r0, fp
 8008ff0:	e7f9      	b.n	8008fe6 <__kernel_rem_pio2f+0x7a>
 8008ff2:	9b05      	ldr	r3, [sp, #20]
 8008ff4:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 8008ff8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008ffc:	f7f7 fec2 	bl	8000d84 <__aeabi_fmul>
 8009000:	4601      	mov	r1, r0
 8009002:	4648      	mov	r0, r9
 8009004:	f7f7 fdb6 	bl	8000b74 <__addsf3>
 8009008:	4681      	mov	r9, r0
 800900a:	3701      	adds	r7, #1
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	429f      	cmp	r7, r3
 8009010:	ddef      	ble.n	8008ff2 <__kernel_rem_pio2f+0x86>
 8009012:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 8009016:	3501      	adds	r5, #1
 8009018:	e7d3      	b.n	8008fc2 <__kernel_rem_pio2f+0x56>
 800901a:	9b02      	ldr	r3, [sp, #8]
 800901c:	aa08      	add	r2, sp, #32
 800901e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009022:	9307      	str	r3, [sp, #28]
 8009024:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8009026:	9f02      	ldr	r7, [sp, #8]
 8009028:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800902c:	9306      	str	r3, [sp, #24]
 800902e:	46ba      	mov	sl, r7
 8009030:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8009034:	ab58      	add	r3, sp, #352	; 0x160
 8009036:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800903a:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800903e:	ad07      	add	r5, sp, #28
 8009040:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8009044:	f1ba 0f00 	cmp.w	sl, #0
 8009048:	dc57      	bgt.n	80090fa <__kernel_rem_pio2f+0x18e>
 800904a:	4631      	mov	r1, r6
 800904c:	4620      	mov	r0, r4
 800904e:	f000 fbe7 	bl	8009820 <scalbnf>
 8009052:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8009056:	4604      	mov	r4, r0
 8009058:	f7f7 fe94 	bl	8000d84 <__aeabi_fmul>
 800905c:	f000 fba0 	bl	80097a0 <floorf>
 8009060:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8009064:	f7f7 fe8e 	bl	8000d84 <__aeabi_fmul>
 8009068:	4601      	mov	r1, r0
 800906a:	4620      	mov	r0, r4
 800906c:	f7f7 fd80 	bl	8000b70 <__aeabi_fsub>
 8009070:	4604      	mov	r4, r0
 8009072:	f7f8 f863 	bl	800113c <__aeabi_f2iz>
 8009076:	4680      	mov	r8, r0
 8009078:	f7f7 fe30 	bl	8000cdc <__aeabi_i2f>
 800907c:	4601      	mov	r1, r0
 800907e:	4620      	mov	r0, r4
 8009080:	f7f7 fd76 	bl	8000b70 <__aeabi_fsub>
 8009084:	2e00      	cmp	r6, #0
 8009086:	4604      	mov	r4, r0
 8009088:	dd55      	ble.n	8009136 <__kernel_rem_pio2f+0x1ca>
 800908a:	1e7b      	subs	r3, r7, #1
 800908c:	aa08      	add	r2, sp, #32
 800908e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8009092:	f1c6 0208 	rsb	r2, r6, #8
 8009096:	fa45 f002 	asr.w	r0, r5, r2
 800909a:	4480      	add	r8, r0
 800909c:	4090      	lsls	r0, r2
 800909e:	1a2d      	subs	r5, r5, r0
 80090a0:	aa08      	add	r2, sp, #32
 80090a2:	f1c6 0007 	rsb	r0, r6, #7
 80090a6:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 80090aa:	4105      	asrs	r5, r0
 80090ac:	2d00      	cmp	r5, #0
 80090ae:	dd50      	ble.n	8009152 <__kernel_rem_pio2f+0x1e6>
 80090b0:	2200      	movs	r2, #0
 80090b2:	4691      	mov	r9, r2
 80090b4:	f108 0801 	add.w	r8, r8, #1
 80090b8:	4297      	cmp	r7, r2
 80090ba:	f300 8085 	bgt.w	80091c8 <__kernel_rem_pio2f+0x25c>
 80090be:	2e00      	cmp	r6, #0
 80090c0:	dd05      	ble.n	80090ce <__kernel_rem_pio2f+0x162>
 80090c2:	2e01      	cmp	r6, #1
 80090c4:	f000 8097 	beq.w	80091f6 <__kernel_rem_pio2f+0x28a>
 80090c8:	2e02      	cmp	r6, #2
 80090ca:	f000 809e 	beq.w	800920a <__kernel_rem_pio2f+0x29e>
 80090ce:	2d02      	cmp	r5, #2
 80090d0:	d13f      	bne.n	8009152 <__kernel_rem_pio2f+0x1e6>
 80090d2:	4621      	mov	r1, r4
 80090d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80090d8:	f7f7 fd4a 	bl	8000b70 <__aeabi_fsub>
 80090dc:	4604      	mov	r4, r0
 80090de:	f1b9 0f00 	cmp.w	r9, #0
 80090e2:	d036      	beq.n	8009152 <__kernel_rem_pio2f+0x1e6>
 80090e4:	4631      	mov	r1, r6
 80090e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80090ea:	f000 fb99 	bl	8009820 <scalbnf>
 80090ee:	4601      	mov	r1, r0
 80090f0:	4620      	mov	r0, r4
 80090f2:	f7f7 fd3d 	bl	8000b70 <__aeabi_fsub>
 80090f6:	4604      	mov	r4, r0
 80090f8:	e02b      	b.n	8009152 <__kernel_rem_pio2f+0x1e6>
 80090fa:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80090fe:	4620      	mov	r0, r4
 8009100:	f7f7 fe40 	bl	8000d84 <__aeabi_fmul>
 8009104:	f7f8 f81a 	bl	800113c <__aeabi_f2iz>
 8009108:	f7f7 fde8 	bl	8000cdc <__aeabi_i2f>
 800910c:	4641      	mov	r1, r8
 800910e:	4683      	mov	fp, r0
 8009110:	f7f7 fe38 	bl	8000d84 <__aeabi_fmul>
 8009114:	4601      	mov	r1, r0
 8009116:	4620      	mov	r0, r4
 8009118:	f7f7 fd2a 	bl	8000b70 <__aeabi_fsub>
 800911c:	f7f8 f80e 	bl	800113c <__aeabi_f2iz>
 8009120:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009124:	f845 0f04 	str.w	r0, [r5, #4]!
 8009128:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800912c:	4658      	mov	r0, fp
 800912e:	f7f7 fd21 	bl	8000b74 <__addsf3>
 8009132:	4604      	mov	r4, r0
 8009134:	e786      	b.n	8009044 <__kernel_rem_pio2f+0xd8>
 8009136:	d105      	bne.n	8009144 <__kernel_rem_pio2f+0x1d8>
 8009138:	1e7b      	subs	r3, r7, #1
 800913a:	aa08      	add	r2, sp, #32
 800913c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8009140:	122d      	asrs	r5, r5, #8
 8009142:	e7b3      	b.n	80090ac <__kernel_rem_pio2f+0x140>
 8009144:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009148:	f7f7 ffce 	bl	80010e8 <__aeabi_fcmpge>
 800914c:	2800      	cmp	r0, #0
 800914e:	d139      	bne.n	80091c4 <__kernel_rem_pio2f+0x258>
 8009150:	4605      	mov	r5, r0
 8009152:	2100      	movs	r1, #0
 8009154:	4620      	mov	r0, r4
 8009156:	f7f7 ffa9 	bl	80010ac <__aeabi_fcmpeq>
 800915a:	2800      	cmp	r0, #0
 800915c:	f000 8098 	beq.w	8009290 <__kernel_rem_pio2f+0x324>
 8009160:	1e7c      	subs	r4, r7, #1
 8009162:	4623      	mov	r3, r4
 8009164:	2200      	movs	r2, #0
 8009166:	9902      	ldr	r1, [sp, #8]
 8009168:	428b      	cmp	r3, r1
 800916a:	da55      	bge.n	8009218 <__kernel_rem_pio2f+0x2ac>
 800916c:	2a00      	cmp	r2, #0
 800916e:	d16e      	bne.n	800924e <__kernel_rem_pio2f+0x2e2>
 8009170:	2301      	movs	r3, #1
 8009172:	f06f 0103 	mvn.w	r1, #3
 8009176:	fb01 f203 	mul.w	r2, r1, r3
 800917a:	9807      	ldr	r0, [sp, #28]
 800917c:	5882      	ldr	r2, [r0, r2]
 800917e:	2a00      	cmp	r2, #0
 8009180:	d050      	beq.n	8009224 <__kernel_rem_pio2f+0x2b8>
 8009182:	f06f 0803 	mvn.w	r8, #3
 8009186:	9a04      	ldr	r2, [sp, #16]
 8009188:	1c7d      	adds	r5, r7, #1
 800918a:	19d4      	adds	r4, r2, r7
 800918c:	aa58      	add	r2, sp, #352	; 0x160
 800918e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009192:	3cf4      	subs	r4, #244	; 0xf4
 8009194:	441f      	add	r7, r3
 8009196:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800919a:	42bd      	cmp	r5, r7
 800919c:	f73f af47 	bgt.w	800902e <__kernel_rem_pio2f+0xc2>
 80091a0:	9b06      	ldr	r3, [sp, #24]
 80091a2:	f04f 0a00 	mov.w	sl, #0
 80091a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091aa:	f7f7 fd97 	bl	8000cdc <__aeabi_i2f>
 80091ae:	f04f 0b00 	mov.w	fp, #0
 80091b2:	f844 0f04 	str.w	r0, [r4, #4]!
 80091b6:	9b03      	ldr	r3, [sp, #12]
 80091b8:	459a      	cmp	sl, r3
 80091ba:	dd35      	ble.n	8009228 <__kernel_rem_pio2f+0x2bc>
 80091bc:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 80091c0:	3501      	adds	r5, #1
 80091c2:	e7ea      	b.n	800919a <__kernel_rem_pio2f+0x22e>
 80091c4:	2502      	movs	r5, #2
 80091c6:	e773      	b.n	80090b0 <__kernel_rem_pio2f+0x144>
 80091c8:	ab08      	add	r3, sp, #32
 80091ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ce:	f1b9 0f00 	cmp.w	r9, #0
 80091d2:	d109      	bne.n	80091e8 <__kernel_rem_pio2f+0x27c>
 80091d4:	b12b      	cbz	r3, 80091e2 <__kernel_rem_pio2f+0x276>
 80091d6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80091da:	a908      	add	r1, sp, #32
 80091dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80091e0:	2301      	movs	r3, #1
 80091e2:	3201      	adds	r2, #1
 80091e4:	4699      	mov	r9, r3
 80091e6:	e767      	b.n	80090b8 <__kernel_rem_pio2f+0x14c>
 80091e8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80091ec:	a908      	add	r1, sp, #32
 80091ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80091f2:	464b      	mov	r3, r9
 80091f4:	e7f5      	b.n	80091e2 <__kernel_rem_pio2f+0x276>
 80091f6:	1e7a      	subs	r2, r7, #1
 80091f8:	ab08      	add	r3, sp, #32
 80091fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009202:	a908      	add	r1, sp, #32
 8009204:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009208:	e761      	b.n	80090ce <__kernel_rem_pio2f+0x162>
 800920a:	1e7a      	subs	r2, r7, #1
 800920c:	ab08      	add	r3, sp, #32
 800920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009212:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009216:	e7f4      	b.n	8009202 <__kernel_rem_pio2f+0x296>
 8009218:	a908      	add	r1, sp, #32
 800921a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800921e:	3b01      	subs	r3, #1
 8009220:	430a      	orrs	r2, r1
 8009222:	e7a0      	b.n	8009166 <__kernel_rem_pio2f+0x1fa>
 8009224:	3301      	adds	r3, #1
 8009226:	e7a6      	b.n	8009176 <__kernel_rem_pio2f+0x20a>
 8009228:	fb08 f30a 	mul.w	r3, r8, sl
 800922c:	9a05      	ldr	r2, [sp, #20]
 800922e:	58e0      	ldr	r0, [r4, r3]
 8009230:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8009234:	f7f7 fda6 	bl	8000d84 <__aeabi_fmul>
 8009238:	4601      	mov	r1, r0
 800923a:	4658      	mov	r0, fp
 800923c:	f7f7 fc9a 	bl	8000b74 <__addsf3>
 8009240:	f10a 0a01 	add.w	sl, sl, #1
 8009244:	4683      	mov	fp, r0
 8009246:	e7b6      	b.n	80091b6 <__kernel_rem_pio2f+0x24a>
 8009248:	08009f00 	.word	0x08009f00
 800924c:	3c01      	subs	r4, #1
 800924e:	ab08      	add	r3, sp, #32
 8009250:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009254:	3e08      	subs	r6, #8
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0f8      	beq.n	800924c <__kernel_rem_pio2f+0x2e0>
 800925a:	4631      	mov	r1, r6
 800925c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009260:	f000 fade 	bl	8009820 <scalbnf>
 8009264:	46a1      	mov	r9, r4
 8009266:	4682      	mov	sl, r0
 8009268:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 800926c:	ae44      	add	r6, sp, #272	; 0x110
 800926e:	f1b9 0f00 	cmp.w	r9, #0
 8009272:	da3f      	bge.n	80092f4 <__kernel_rem_pio2f+0x388>
 8009274:	2700      	movs	r7, #0
 8009276:	f04f 0b00 	mov.w	fp, #0
 800927a:	4b82      	ldr	r3, [pc, #520]	; (8009484 <__kernel_rem_pio2f+0x518>)
 800927c:	aa30      	add	r2, sp, #192	; 0xc0
 800927e:	ebb4 0a07 	subs.w	sl, r4, r7
 8009282:	d462      	bmi.n	800934a <__kernel_rem_pio2f+0x3de>
 8009284:	a944      	add	r1, sp, #272	; 0x110
 8009286:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 800928a:	46d9      	mov	r9, fp
 800928c:	2600      	movs	r6, #0
 800928e:	e053      	b.n	8009338 <__kernel_rem_pio2f+0x3cc>
 8009290:	4271      	negs	r1, r6
 8009292:	4620      	mov	r0, r4
 8009294:	f000 fac4 	bl	8009820 <scalbnf>
 8009298:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800929c:	4604      	mov	r4, r0
 800929e:	f7f7 ff23 	bl	80010e8 <__aeabi_fcmpge>
 80092a2:	b1f8      	cbz	r0, 80092e4 <__kernel_rem_pio2f+0x378>
 80092a4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80092a8:	4620      	mov	r0, r4
 80092aa:	f7f7 fd6b 	bl	8000d84 <__aeabi_fmul>
 80092ae:	f7f7 ff45 	bl	800113c <__aeabi_f2iz>
 80092b2:	f7f7 fd13 	bl	8000cdc <__aeabi_i2f>
 80092b6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80092ba:	4681      	mov	r9, r0
 80092bc:	f7f7 fd62 	bl	8000d84 <__aeabi_fmul>
 80092c0:	4601      	mov	r1, r0
 80092c2:	4620      	mov	r0, r4
 80092c4:	f7f7 fc54 	bl	8000b70 <__aeabi_fsub>
 80092c8:	f7f7 ff38 	bl	800113c <__aeabi_f2iz>
 80092cc:	ab08      	add	r3, sp, #32
 80092ce:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80092d2:	4648      	mov	r0, r9
 80092d4:	f7f7 ff32 	bl	800113c <__aeabi_f2iz>
 80092d8:	1c7c      	adds	r4, r7, #1
 80092da:	ab08      	add	r3, sp, #32
 80092dc:	3608      	adds	r6, #8
 80092de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80092e2:	e7ba      	b.n	800925a <__kernel_rem_pio2f+0x2ee>
 80092e4:	4620      	mov	r0, r4
 80092e6:	f7f7 ff29 	bl	800113c <__aeabi_f2iz>
 80092ea:	ab08      	add	r3, sp, #32
 80092ec:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80092f0:	463c      	mov	r4, r7
 80092f2:	e7b2      	b.n	800925a <__kernel_rem_pio2f+0x2ee>
 80092f4:	ab08      	add	r3, sp, #32
 80092f6:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80092fa:	f7f7 fcef 	bl	8000cdc <__aeabi_i2f>
 80092fe:	4651      	mov	r1, sl
 8009300:	f7f7 fd40 	bl	8000d84 <__aeabi_fmul>
 8009304:	4639      	mov	r1, r7
 8009306:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 800930a:	4650      	mov	r0, sl
 800930c:	f7f7 fd3a 	bl	8000d84 <__aeabi_fmul>
 8009310:	f109 39ff 	add.w	r9, r9, #4294967295
 8009314:	4682      	mov	sl, r0
 8009316:	e7aa      	b.n	800926e <__kernel_rem_pio2f+0x302>
 8009318:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800931c:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 8009320:	9204      	str	r2, [sp, #16]
 8009322:	9303      	str	r3, [sp, #12]
 8009324:	f7f7 fd2e 	bl	8000d84 <__aeabi_fmul>
 8009328:	4601      	mov	r1, r0
 800932a:	4648      	mov	r0, r9
 800932c:	f7f7 fc22 	bl	8000b74 <__addsf3>
 8009330:	4681      	mov	r9, r0
 8009332:	9a04      	ldr	r2, [sp, #16]
 8009334:	9b03      	ldr	r3, [sp, #12]
 8009336:	3601      	adds	r6, #1
 8009338:	9902      	ldr	r1, [sp, #8]
 800933a:	428e      	cmp	r6, r1
 800933c:	dc01      	bgt.n	8009342 <__kernel_rem_pio2f+0x3d6>
 800933e:	42be      	cmp	r6, r7
 8009340:	ddea      	ble.n	8009318 <__kernel_rem_pio2f+0x3ac>
 8009342:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 8009346:	3701      	adds	r7, #1
 8009348:	e799      	b.n	800927e <__kernel_rem_pio2f+0x312>
 800934a:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800934c:	2b03      	cmp	r3, #3
 800934e:	d826      	bhi.n	800939e <__kernel_rem_pio2f+0x432>
 8009350:	e8df f003 	tbb	[pc, r3]
 8009354:	2a02021c 	.word	0x2a02021c
 8009358:	4626      	mov	r6, r4
 800935a:	2000      	movs	r0, #0
 800935c:	af30      	add	r7, sp, #192	; 0xc0
 800935e:	2e00      	cmp	r6, #0
 8009360:	da40      	bge.n	80093e4 <__kernel_rem_pio2f+0x478>
 8009362:	2d00      	cmp	r5, #0
 8009364:	d044      	beq.n	80093f0 <__kernel_rem_pio2f+0x484>
 8009366:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800936a:	9a01      	ldr	r2, [sp, #4]
 800936c:	af58      	add	r7, sp, #352	; 0x160
 800936e:	4601      	mov	r1, r0
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8009376:	f7f7 fbfb 	bl	8000b70 <__aeabi_fsub>
 800937a:	2601      	movs	r6, #1
 800937c:	42b4      	cmp	r4, r6
 800937e:	da39      	bge.n	80093f4 <__kernel_rem_pio2f+0x488>
 8009380:	b10d      	cbz	r5, 8009386 <__kernel_rem_pio2f+0x41a>
 8009382:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	6058      	str	r0, [r3, #4]
 800938a:	e008      	b.n	800939e <__kernel_rem_pio2f+0x432>
 800938c:	2000      	movs	r0, #0
 800938e:	ae30      	add	r6, sp, #192	; 0xc0
 8009390:	2c00      	cmp	r4, #0
 8009392:	da21      	bge.n	80093d8 <__kernel_rem_pio2f+0x46c>
 8009394:	b10d      	cbz	r5, 800939a <__kernel_rem_pio2f+0x42e>
 8009396:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800939a:	9b01      	ldr	r3, [sp, #4]
 800939c:	6018      	str	r0, [r3, #0]
 800939e:	f008 0007 	and.w	r0, r8, #7
 80093a2:	b059      	add	sp, #356	; 0x164
 80093a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 80093ac:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 80093b0:	4637      	mov	r7, r6
 80093b2:	46a1      	mov	r9, r4
 80093b4:	f1b9 0f00 	cmp.w	r9, #0
 80093b8:	dc22      	bgt.n	8009400 <__kernel_rem_pio2f+0x494>
 80093ba:	4627      	mov	r7, r4
 80093bc:	2f01      	cmp	r7, #1
 80093be:	dc38      	bgt.n	8009432 <__kernel_rem_pio2f+0x4c6>
 80093c0:	2000      	movs	r0, #0
 80093c2:	2c01      	cmp	r4, #1
 80093c4:	dc4c      	bgt.n	8009460 <__kernel_rem_pio2f+0x4f4>
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	d150      	bne.n	800946c <__kernel_rem_pio2f+0x500>
 80093ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80093cc:	9a01      	ldr	r2, [sp, #4]
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80093d2:	6053      	str	r3, [r2, #4]
 80093d4:	6090      	str	r0, [r2, #8]
 80093d6:	e7e2      	b.n	800939e <__kernel_rem_pio2f+0x432>
 80093d8:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80093dc:	f7f7 fbca 	bl	8000b74 <__addsf3>
 80093e0:	3c01      	subs	r4, #1
 80093e2:	e7d5      	b.n	8009390 <__kernel_rem_pio2f+0x424>
 80093e4:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80093e8:	f7f7 fbc4 	bl	8000b74 <__addsf3>
 80093ec:	3e01      	subs	r6, #1
 80093ee:	e7b6      	b.n	800935e <__kernel_rem_pio2f+0x3f2>
 80093f0:	4603      	mov	r3, r0
 80093f2:	e7ba      	b.n	800936a <__kernel_rem_pio2f+0x3fe>
 80093f4:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80093f8:	f7f7 fbbc 	bl	8000b74 <__addsf3>
 80093fc:	3601      	adds	r6, #1
 80093fe:	e7bd      	b.n	800937c <__kernel_rem_pio2f+0x410>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009406:	4619      	mov	r1, r3
 8009408:	4610      	mov	r0, r2
 800940a:	9303      	str	r3, [sp, #12]
 800940c:	9202      	str	r2, [sp, #8]
 800940e:	f7f7 fbb1 	bl	8000b74 <__addsf3>
 8009412:	9a02      	ldr	r2, [sp, #8]
 8009414:	4601      	mov	r1, r0
 8009416:	4683      	mov	fp, r0
 8009418:	4610      	mov	r0, r2
 800941a:	f7f7 fba9 	bl	8000b70 <__aeabi_fsub>
 800941e:	9b03      	ldr	r3, [sp, #12]
 8009420:	f109 39ff 	add.w	r9, r9, #4294967295
 8009424:	4619      	mov	r1, r3
 8009426:	f7f7 fba5 	bl	8000b74 <__addsf3>
 800942a:	6038      	str	r0, [r7, #0]
 800942c:	f847 bd04 	str.w	fp, [r7, #-4]!
 8009430:	e7c0      	b.n	80093b4 <__kernel_rem_pio2f+0x448>
 8009432:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009436:	f8d6 b000 	ldr.w	fp, [r6]
 800943a:	4618      	mov	r0, r3
 800943c:	4659      	mov	r1, fp
 800943e:	9302      	str	r3, [sp, #8]
 8009440:	f7f7 fb98 	bl	8000b74 <__addsf3>
 8009444:	9b02      	ldr	r3, [sp, #8]
 8009446:	4601      	mov	r1, r0
 8009448:	4681      	mov	r9, r0
 800944a:	4618      	mov	r0, r3
 800944c:	f7f7 fb90 	bl	8000b70 <__aeabi_fsub>
 8009450:	4659      	mov	r1, fp
 8009452:	f7f7 fb8f 	bl	8000b74 <__addsf3>
 8009456:	3f01      	subs	r7, #1
 8009458:	6030      	str	r0, [r6, #0]
 800945a:	f846 9d04 	str.w	r9, [r6, #-4]!
 800945e:	e7ad      	b.n	80093bc <__kernel_rem_pio2f+0x450>
 8009460:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8009464:	f7f7 fb86 	bl	8000b74 <__addsf3>
 8009468:	3c01      	subs	r4, #1
 800946a:	e7aa      	b.n	80093c2 <__kernel_rem_pio2f+0x456>
 800946c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800946e:	9a01      	ldr	r2, [sp, #4]
 8009470:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8009478:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800947c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009480:	6053      	str	r3, [r2, #4]
 8009482:	e7a7      	b.n	80093d4 <__kernel_rem_pio2f+0x468>
 8009484:	08009ed4 	.word	0x08009ed4

08009488 <__kernel_sinf>:
 8009488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800948c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009490:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009494:	4604      	mov	r4, r0
 8009496:	460f      	mov	r7, r1
 8009498:	4691      	mov	r9, r2
 800949a:	da03      	bge.n	80094a4 <__kernel_sinf+0x1c>
 800949c:	f7f7 fe4e 	bl	800113c <__aeabi_f2iz>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d035      	beq.n	8009510 <__kernel_sinf+0x88>
 80094a4:	4621      	mov	r1, r4
 80094a6:	4620      	mov	r0, r4
 80094a8:	f7f7 fc6c 	bl	8000d84 <__aeabi_fmul>
 80094ac:	4605      	mov	r5, r0
 80094ae:	4601      	mov	r1, r0
 80094b0:	4620      	mov	r0, r4
 80094b2:	f7f7 fc67 	bl	8000d84 <__aeabi_fmul>
 80094b6:	4929      	ldr	r1, [pc, #164]	; (800955c <__kernel_sinf+0xd4>)
 80094b8:	4606      	mov	r6, r0
 80094ba:	4628      	mov	r0, r5
 80094bc:	f7f7 fc62 	bl	8000d84 <__aeabi_fmul>
 80094c0:	4927      	ldr	r1, [pc, #156]	; (8009560 <__kernel_sinf+0xd8>)
 80094c2:	f7f7 fb55 	bl	8000b70 <__aeabi_fsub>
 80094c6:	4629      	mov	r1, r5
 80094c8:	f7f7 fc5c 	bl	8000d84 <__aeabi_fmul>
 80094cc:	4925      	ldr	r1, [pc, #148]	; (8009564 <__kernel_sinf+0xdc>)
 80094ce:	f7f7 fb51 	bl	8000b74 <__addsf3>
 80094d2:	4629      	mov	r1, r5
 80094d4:	f7f7 fc56 	bl	8000d84 <__aeabi_fmul>
 80094d8:	4923      	ldr	r1, [pc, #140]	; (8009568 <__kernel_sinf+0xe0>)
 80094da:	f7f7 fb49 	bl	8000b70 <__aeabi_fsub>
 80094de:	4629      	mov	r1, r5
 80094e0:	f7f7 fc50 	bl	8000d84 <__aeabi_fmul>
 80094e4:	4921      	ldr	r1, [pc, #132]	; (800956c <__kernel_sinf+0xe4>)
 80094e6:	f7f7 fb45 	bl	8000b74 <__addsf3>
 80094ea:	4680      	mov	r8, r0
 80094ec:	f1b9 0f00 	cmp.w	r9, #0
 80094f0:	d111      	bne.n	8009516 <__kernel_sinf+0x8e>
 80094f2:	4601      	mov	r1, r0
 80094f4:	4628      	mov	r0, r5
 80094f6:	f7f7 fc45 	bl	8000d84 <__aeabi_fmul>
 80094fa:	491d      	ldr	r1, [pc, #116]	; (8009570 <__kernel_sinf+0xe8>)
 80094fc:	f7f7 fb38 	bl	8000b70 <__aeabi_fsub>
 8009500:	4631      	mov	r1, r6
 8009502:	f7f7 fc3f 	bl	8000d84 <__aeabi_fmul>
 8009506:	4601      	mov	r1, r0
 8009508:	4620      	mov	r0, r4
 800950a:	f7f7 fb33 	bl	8000b74 <__addsf3>
 800950e:	4604      	mov	r4, r0
 8009510:	4620      	mov	r0, r4
 8009512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009516:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800951a:	4638      	mov	r0, r7
 800951c:	f7f7 fc32 	bl	8000d84 <__aeabi_fmul>
 8009520:	4641      	mov	r1, r8
 8009522:	4681      	mov	r9, r0
 8009524:	4630      	mov	r0, r6
 8009526:	f7f7 fc2d 	bl	8000d84 <__aeabi_fmul>
 800952a:	4601      	mov	r1, r0
 800952c:	4648      	mov	r0, r9
 800952e:	f7f7 fb1f 	bl	8000b70 <__aeabi_fsub>
 8009532:	4629      	mov	r1, r5
 8009534:	f7f7 fc26 	bl	8000d84 <__aeabi_fmul>
 8009538:	4639      	mov	r1, r7
 800953a:	f7f7 fb19 	bl	8000b70 <__aeabi_fsub>
 800953e:	490c      	ldr	r1, [pc, #48]	; (8009570 <__kernel_sinf+0xe8>)
 8009540:	4605      	mov	r5, r0
 8009542:	4630      	mov	r0, r6
 8009544:	f7f7 fc1e 	bl	8000d84 <__aeabi_fmul>
 8009548:	4601      	mov	r1, r0
 800954a:	4628      	mov	r0, r5
 800954c:	f7f7 fb12 	bl	8000b74 <__addsf3>
 8009550:	4601      	mov	r1, r0
 8009552:	4620      	mov	r0, r4
 8009554:	f7f7 fb0c 	bl	8000b70 <__aeabi_fsub>
 8009558:	e7d9      	b.n	800950e <__kernel_sinf+0x86>
 800955a:	bf00      	nop
 800955c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009560:	32d72f34 	.word	0x32d72f34
 8009564:	3638ef1b 	.word	0x3638ef1b
 8009568:	39500d01 	.word	0x39500d01
 800956c:	3c088889 	.word	0x3c088889
 8009570:	3e2aaaab 	.word	0x3e2aaaab

08009574 <matherr>:
 8009574:	2000      	movs	r0, #0
 8009576:	4770      	bx	lr

08009578 <atanf>:
 8009578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8009580:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8009584:	4604      	mov	r4, r0
 8009586:	4607      	mov	r7, r0
 8009588:	db0e      	blt.n	80095a8 <atanf+0x30>
 800958a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800958e:	dd04      	ble.n	800959a <atanf+0x22>
 8009590:	4601      	mov	r1, r0
 8009592:	f7f7 faef 	bl	8000b74 <__addsf3>
 8009596:	4604      	mov	r4, r0
 8009598:	e003      	b.n	80095a2 <atanf+0x2a>
 800959a:	2800      	cmp	r0, #0
 800959c:	f300 80d2 	bgt.w	8009744 <atanf+0x1cc>
 80095a0:	4c69      	ldr	r4, [pc, #420]	; (8009748 <atanf+0x1d0>)
 80095a2:	4620      	mov	r0, r4
 80095a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a8:	4b68      	ldr	r3, [pc, #416]	; (800974c <atanf+0x1d4>)
 80095aa:	429d      	cmp	r5, r3
 80095ac:	dc0e      	bgt.n	80095cc <atanf+0x54>
 80095ae:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80095b2:	da08      	bge.n	80095c6 <atanf+0x4e>
 80095b4:	4966      	ldr	r1, [pc, #408]	; (8009750 <atanf+0x1d8>)
 80095b6:	f7f7 fadd 	bl	8000b74 <__addsf3>
 80095ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80095be:	f7f7 fd9d 	bl	80010fc <__aeabi_fcmpgt>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d1ed      	bne.n	80095a2 <atanf+0x2a>
 80095c6:	f04f 36ff 	mov.w	r6, #4294967295
 80095ca:	e01c      	b.n	8009606 <atanf+0x8e>
 80095cc:	f000 f8e4 	bl	8009798 <fabsf>
 80095d0:	4b60      	ldr	r3, [pc, #384]	; (8009754 <atanf+0x1dc>)
 80095d2:	4604      	mov	r4, r0
 80095d4:	429d      	cmp	r5, r3
 80095d6:	dc7c      	bgt.n	80096d2 <atanf+0x15a>
 80095d8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80095dc:	429d      	cmp	r5, r3
 80095de:	dc67      	bgt.n	80096b0 <atanf+0x138>
 80095e0:	4601      	mov	r1, r0
 80095e2:	f7f7 fac7 	bl	8000b74 <__addsf3>
 80095e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80095ea:	f7f7 fac1 	bl	8000b70 <__aeabi_fsub>
 80095ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80095f2:	4605      	mov	r5, r0
 80095f4:	4620      	mov	r0, r4
 80095f6:	f7f7 fabd 	bl	8000b74 <__addsf3>
 80095fa:	4601      	mov	r1, r0
 80095fc:	4628      	mov	r0, r5
 80095fe:	f7f7 fc75 	bl	8000eec <__aeabi_fdiv>
 8009602:	2600      	movs	r6, #0
 8009604:	4604      	mov	r4, r0
 8009606:	4621      	mov	r1, r4
 8009608:	4620      	mov	r0, r4
 800960a:	f7f7 fbbb 	bl	8000d84 <__aeabi_fmul>
 800960e:	4601      	mov	r1, r0
 8009610:	4680      	mov	r8, r0
 8009612:	f7f7 fbb7 	bl	8000d84 <__aeabi_fmul>
 8009616:	4605      	mov	r5, r0
 8009618:	494f      	ldr	r1, [pc, #316]	; (8009758 <atanf+0x1e0>)
 800961a:	f7f7 fbb3 	bl	8000d84 <__aeabi_fmul>
 800961e:	494f      	ldr	r1, [pc, #316]	; (800975c <atanf+0x1e4>)
 8009620:	f7f7 faa8 	bl	8000b74 <__addsf3>
 8009624:	4629      	mov	r1, r5
 8009626:	f7f7 fbad 	bl	8000d84 <__aeabi_fmul>
 800962a:	494d      	ldr	r1, [pc, #308]	; (8009760 <atanf+0x1e8>)
 800962c:	f7f7 faa2 	bl	8000b74 <__addsf3>
 8009630:	4629      	mov	r1, r5
 8009632:	f7f7 fba7 	bl	8000d84 <__aeabi_fmul>
 8009636:	494b      	ldr	r1, [pc, #300]	; (8009764 <atanf+0x1ec>)
 8009638:	f7f7 fa9c 	bl	8000b74 <__addsf3>
 800963c:	4629      	mov	r1, r5
 800963e:	f7f7 fba1 	bl	8000d84 <__aeabi_fmul>
 8009642:	4949      	ldr	r1, [pc, #292]	; (8009768 <atanf+0x1f0>)
 8009644:	f7f7 fa96 	bl	8000b74 <__addsf3>
 8009648:	4629      	mov	r1, r5
 800964a:	f7f7 fb9b 	bl	8000d84 <__aeabi_fmul>
 800964e:	4947      	ldr	r1, [pc, #284]	; (800976c <atanf+0x1f4>)
 8009650:	f7f7 fa90 	bl	8000b74 <__addsf3>
 8009654:	4641      	mov	r1, r8
 8009656:	f7f7 fb95 	bl	8000d84 <__aeabi_fmul>
 800965a:	4945      	ldr	r1, [pc, #276]	; (8009770 <atanf+0x1f8>)
 800965c:	4680      	mov	r8, r0
 800965e:	4628      	mov	r0, r5
 8009660:	f7f7 fb90 	bl	8000d84 <__aeabi_fmul>
 8009664:	4943      	ldr	r1, [pc, #268]	; (8009774 <atanf+0x1fc>)
 8009666:	f7f7 fa83 	bl	8000b70 <__aeabi_fsub>
 800966a:	4629      	mov	r1, r5
 800966c:	f7f7 fb8a 	bl	8000d84 <__aeabi_fmul>
 8009670:	4941      	ldr	r1, [pc, #260]	; (8009778 <atanf+0x200>)
 8009672:	f7f7 fa7d 	bl	8000b70 <__aeabi_fsub>
 8009676:	4629      	mov	r1, r5
 8009678:	f7f7 fb84 	bl	8000d84 <__aeabi_fmul>
 800967c:	493f      	ldr	r1, [pc, #252]	; (800977c <atanf+0x204>)
 800967e:	f7f7 fa77 	bl	8000b70 <__aeabi_fsub>
 8009682:	4629      	mov	r1, r5
 8009684:	f7f7 fb7e 	bl	8000d84 <__aeabi_fmul>
 8009688:	493d      	ldr	r1, [pc, #244]	; (8009780 <atanf+0x208>)
 800968a:	f7f7 fa71 	bl	8000b70 <__aeabi_fsub>
 800968e:	4629      	mov	r1, r5
 8009690:	f7f7 fb78 	bl	8000d84 <__aeabi_fmul>
 8009694:	1c73      	adds	r3, r6, #1
 8009696:	4601      	mov	r1, r0
 8009698:	4640      	mov	r0, r8
 800969a:	d139      	bne.n	8009710 <atanf+0x198>
 800969c:	f7f7 fa6a 	bl	8000b74 <__addsf3>
 80096a0:	4621      	mov	r1, r4
 80096a2:	f7f7 fb6f 	bl	8000d84 <__aeabi_fmul>
 80096a6:	4601      	mov	r1, r0
 80096a8:	4620      	mov	r0, r4
 80096aa:	f7f7 fa61 	bl	8000b70 <__aeabi_fsub>
 80096ae:	e772      	b.n	8009596 <atanf+0x1e>
 80096b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80096b4:	f7f7 fa5c 	bl	8000b70 <__aeabi_fsub>
 80096b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80096bc:	4605      	mov	r5, r0
 80096be:	4620      	mov	r0, r4
 80096c0:	f7f7 fa58 	bl	8000b74 <__addsf3>
 80096c4:	4601      	mov	r1, r0
 80096c6:	4628      	mov	r0, r5
 80096c8:	f7f7 fc10 	bl	8000eec <__aeabi_fdiv>
 80096cc:	2601      	movs	r6, #1
 80096ce:	4604      	mov	r4, r0
 80096d0:	e799      	b.n	8009606 <atanf+0x8e>
 80096d2:	4b2c      	ldr	r3, [pc, #176]	; (8009784 <atanf+0x20c>)
 80096d4:	429d      	cmp	r5, r3
 80096d6:	dc14      	bgt.n	8009702 <atanf+0x18a>
 80096d8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80096dc:	f7f7 fa48 	bl	8000b70 <__aeabi_fsub>
 80096e0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80096e4:	4605      	mov	r5, r0
 80096e6:	4620      	mov	r0, r4
 80096e8:	f7f7 fb4c 	bl	8000d84 <__aeabi_fmul>
 80096ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80096f0:	f7f7 fa40 	bl	8000b74 <__addsf3>
 80096f4:	4601      	mov	r1, r0
 80096f6:	4628      	mov	r0, r5
 80096f8:	f7f7 fbf8 	bl	8000eec <__aeabi_fdiv>
 80096fc:	2602      	movs	r6, #2
 80096fe:	4604      	mov	r4, r0
 8009700:	e781      	b.n	8009606 <atanf+0x8e>
 8009702:	4601      	mov	r1, r0
 8009704:	4820      	ldr	r0, [pc, #128]	; (8009788 <atanf+0x210>)
 8009706:	f7f7 fbf1 	bl	8000eec <__aeabi_fdiv>
 800970a:	2603      	movs	r6, #3
 800970c:	4604      	mov	r4, r0
 800970e:	e77a      	b.n	8009606 <atanf+0x8e>
 8009710:	f7f7 fa30 	bl	8000b74 <__addsf3>
 8009714:	4621      	mov	r1, r4
 8009716:	f7f7 fb35 	bl	8000d84 <__aeabi_fmul>
 800971a:	4b1c      	ldr	r3, [pc, #112]	; (800978c <atanf+0x214>)
 800971c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8009720:	f7f7 fa26 	bl	8000b70 <__aeabi_fsub>
 8009724:	4621      	mov	r1, r4
 8009726:	f7f7 fa23 	bl	8000b70 <__aeabi_fsub>
 800972a:	4b19      	ldr	r3, [pc, #100]	; (8009790 <atanf+0x218>)
 800972c:	4601      	mov	r1, r0
 800972e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009732:	f7f7 fa1d 	bl	8000b70 <__aeabi_fsub>
 8009736:	2f00      	cmp	r7, #0
 8009738:	4604      	mov	r4, r0
 800973a:	f6bf af32 	bge.w	80095a2 <atanf+0x2a>
 800973e:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8009742:	e72e      	b.n	80095a2 <atanf+0x2a>
 8009744:	4c13      	ldr	r4, [pc, #76]	; (8009794 <atanf+0x21c>)
 8009746:	e72c      	b.n	80095a2 <atanf+0x2a>
 8009748:	bfc90fdb 	.word	0xbfc90fdb
 800974c:	3edfffff 	.word	0x3edfffff
 8009750:	7149f2ca 	.word	0x7149f2ca
 8009754:	3f97ffff 	.word	0x3f97ffff
 8009758:	3c8569d7 	.word	0x3c8569d7
 800975c:	3d4bda59 	.word	0x3d4bda59
 8009760:	3d886b35 	.word	0x3d886b35
 8009764:	3dba2e6e 	.word	0x3dba2e6e
 8009768:	3e124925 	.word	0x3e124925
 800976c:	3eaaaaab 	.word	0x3eaaaaab
 8009770:	bd15a221 	.word	0xbd15a221
 8009774:	3d6ef16b 	.word	0x3d6ef16b
 8009778:	3d9d8795 	.word	0x3d9d8795
 800977c:	3de38e38 	.word	0x3de38e38
 8009780:	3e4ccccd 	.word	0x3e4ccccd
 8009784:	401bffff 	.word	0x401bffff
 8009788:	bf800000 	.word	0xbf800000
 800978c:	08009f1c 	.word	0x08009f1c
 8009790:	08009f0c 	.word	0x08009f0c
 8009794:	3fc90fdb 	.word	0x3fc90fdb

08009798 <fabsf>:
 8009798:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800979c:	4770      	bx	lr
	...

080097a0 <floorf>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80097a6:	0df5      	lsrs	r5, r6, #23
 80097a8:	3d7f      	subs	r5, #127	; 0x7f
 80097aa:	2d16      	cmp	r5, #22
 80097ac:	4601      	mov	r1, r0
 80097ae:	4604      	mov	r4, r0
 80097b0:	dc26      	bgt.n	8009800 <floorf+0x60>
 80097b2:	2d00      	cmp	r5, #0
 80097b4:	da0e      	bge.n	80097d4 <floorf+0x34>
 80097b6:	4917      	ldr	r1, [pc, #92]	; (8009814 <floorf+0x74>)
 80097b8:	f7f7 f9dc 	bl	8000b74 <__addsf3>
 80097bc:	2100      	movs	r1, #0
 80097be:	f7f7 fc9d 	bl	80010fc <__aeabi_fcmpgt>
 80097c2:	b128      	cbz	r0, 80097d0 <floorf+0x30>
 80097c4:	2c00      	cmp	r4, #0
 80097c6:	da23      	bge.n	8009810 <floorf+0x70>
 80097c8:	4b13      	ldr	r3, [pc, #76]	; (8009818 <floorf+0x78>)
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	bf18      	it	ne
 80097ce:	461c      	movne	r4, r3
 80097d0:	4621      	mov	r1, r4
 80097d2:	e01b      	b.n	800980c <floorf+0x6c>
 80097d4:	4e11      	ldr	r6, [pc, #68]	; (800981c <floorf+0x7c>)
 80097d6:	412e      	asrs	r6, r5
 80097d8:	4230      	tst	r0, r6
 80097da:	d017      	beq.n	800980c <floorf+0x6c>
 80097dc:	490d      	ldr	r1, [pc, #52]	; (8009814 <floorf+0x74>)
 80097de:	f7f7 f9c9 	bl	8000b74 <__addsf3>
 80097e2:	2100      	movs	r1, #0
 80097e4:	f7f7 fc8a 	bl	80010fc <__aeabi_fcmpgt>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d0f1      	beq.n	80097d0 <floorf+0x30>
 80097ec:	2c00      	cmp	r4, #0
 80097ee:	bfbe      	ittt	lt
 80097f0:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80097f4:	fa43 f505 	asrlt.w	r5, r3, r5
 80097f8:	1964      	addlt	r4, r4, r5
 80097fa:	ea24 0406 	bic.w	r4, r4, r6
 80097fe:	e7e7      	b.n	80097d0 <floorf+0x30>
 8009800:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009804:	d302      	bcc.n	800980c <floorf+0x6c>
 8009806:	f7f7 f9b5 	bl	8000b74 <__addsf3>
 800980a:	4601      	mov	r1, r0
 800980c:	4608      	mov	r0, r1
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	2400      	movs	r4, #0
 8009812:	e7dd      	b.n	80097d0 <floorf+0x30>
 8009814:	7149f2ca 	.word	0x7149f2ca
 8009818:	bf800000 	.word	0xbf800000
 800981c:	007fffff 	.word	0x007fffff

08009820 <scalbnf>:
 8009820:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8009824:	b510      	push	{r4, lr}
 8009826:	4602      	mov	r2, r0
 8009828:	460c      	mov	r4, r1
 800982a:	d028      	beq.n	800987e <scalbnf+0x5e>
 800982c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009830:	d304      	bcc.n	800983c <scalbnf+0x1c>
 8009832:	4601      	mov	r1, r0
 8009834:	f7f7 f99e 	bl	8000b74 <__addsf3>
 8009838:	4602      	mov	r2, r0
 800983a:	e020      	b.n	800987e <scalbnf+0x5e>
 800983c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009840:	d215      	bcs.n	800986e <scalbnf+0x4e>
 8009842:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009846:	f7f7 fa9d 	bl	8000d84 <__aeabi_fmul>
 800984a:	4b18      	ldr	r3, [pc, #96]	; (80098ac <scalbnf+0x8c>)
 800984c:	4602      	mov	r2, r0
 800984e:	429c      	cmp	r4, r3
 8009850:	db22      	blt.n	8009898 <scalbnf+0x78>
 8009852:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009856:	3b19      	subs	r3, #25
 8009858:	4423      	add	r3, r4
 800985a:	2bfe      	cmp	r3, #254	; 0xfe
 800985c:	dd09      	ble.n	8009872 <scalbnf+0x52>
 800985e:	4611      	mov	r1, r2
 8009860:	4813      	ldr	r0, [pc, #76]	; (80098b0 <scalbnf+0x90>)
 8009862:	f000 f829 	bl	80098b8 <copysignf>
 8009866:	4912      	ldr	r1, [pc, #72]	; (80098b0 <scalbnf+0x90>)
 8009868:	f7f7 fa8c 	bl	8000d84 <__aeabi_fmul>
 800986c:	e7e4      	b.n	8009838 <scalbnf+0x18>
 800986e:	0ddb      	lsrs	r3, r3, #23
 8009870:	e7f2      	b.n	8009858 <scalbnf+0x38>
 8009872:	2b00      	cmp	r3, #0
 8009874:	dd05      	ble.n	8009882 <scalbnf+0x62>
 8009876:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800987a:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800987e:	4610      	mov	r0, r2
 8009880:	bd10      	pop	{r4, pc}
 8009882:	f113 0f16 	cmn.w	r3, #22
 8009886:	da09      	bge.n	800989c <scalbnf+0x7c>
 8009888:	f24c 3350 	movw	r3, #50000	; 0xc350
 800988c:	429c      	cmp	r4, r3
 800988e:	4611      	mov	r1, r2
 8009890:	dce6      	bgt.n	8009860 <scalbnf+0x40>
 8009892:	4808      	ldr	r0, [pc, #32]	; (80098b4 <scalbnf+0x94>)
 8009894:	f000 f810 	bl	80098b8 <copysignf>
 8009898:	4906      	ldr	r1, [pc, #24]	; (80098b4 <scalbnf+0x94>)
 800989a:	e7e5      	b.n	8009868 <scalbnf+0x48>
 800989c:	3319      	adds	r3, #25
 800989e:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80098a2:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80098a6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80098aa:	e7dd      	b.n	8009868 <scalbnf+0x48>
 80098ac:	ffff3cb0 	.word	0xffff3cb0
 80098b0:	7149f2ca 	.word	0x7149f2ca
 80098b4:	0da24260 	.word	0x0da24260

080098b8 <copysignf>:
 80098b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80098bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80098c0:	4308      	orrs	r0, r1
 80098c2:	4770      	bx	lr

080098c4 <_init>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	bf00      	nop
 80098c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ca:	bc08      	pop	{r3}
 80098cc:	469e      	mov	lr, r3
 80098ce:	4770      	bx	lr

080098d0 <_fini>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	bf00      	nop
 80098d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d6:	bc08      	pop	{r3}
 80098d8:	469e      	mov	lr, r3
 80098da:	4770      	bx	lr
