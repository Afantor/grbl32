
F16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  080097fc  080097fc  000197fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009e58  08009e58  00019e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08009e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004030  20000078  08009ed0  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200040a8  08009ed0  000240a8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002ca01  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000719f  00000000  00000000  0004ca9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008222  00000000  00000000  00053c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d98  00000000  00000000  0005be60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000014f8  00000000  00000000  0005cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b728  00000000  00000000  0005e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004b28  00000000  00000000  00069818  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006e340  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d28  00000000  00000000  0006e3bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080097e4 	.word	0x080097e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080097e4 	.word	0x080097e4

08000150 <__aeabi_llsr>:
 8000150:	40d0      	lsrs	r0, r2
 8000152:	1c0b      	adds	r3, r1, #0
 8000154:	40d1      	lsrs	r1, r2
 8000156:	469c      	mov	ip, r3
 8000158:	3a20      	subs	r2, #32
 800015a:	40d3      	lsrs	r3, r2
 800015c:	4318      	orrs	r0, r3
 800015e:	4252      	negs	r2, r2
 8000160:	4663      	mov	r3, ip
 8000162:	4093      	lsls	r3, r2
 8000164:	4318      	orrs	r0, r3
 8000166:	4770      	bx	lr

08000168 <__aeabi_drsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800016c:	e002      	b.n	8000174 <__adddf3>
 800016e:	bf00      	nop

08000170 <__aeabi_dsub>:
 8000170:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000174 <__adddf3>:
 8000174:	b530      	push	{r4, r5, lr}
 8000176:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800017a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017e:	ea94 0f05 	teq	r4, r5
 8000182:	bf08      	it	eq
 8000184:	ea90 0f02 	teqeq	r0, r2
 8000188:	bf1f      	itttt	ne
 800018a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000192:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000196:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800019a:	f000 80e2 	beq.w	8000362 <__adddf3+0x1ee>
 800019e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a6:	bfb8      	it	lt
 80001a8:	426d      	neglt	r5, r5
 80001aa:	dd0c      	ble.n	80001c6 <__adddf3+0x52>
 80001ac:	442c      	add	r4, r5
 80001ae:	ea80 0202 	eor.w	r2, r0, r2
 80001b2:	ea81 0303 	eor.w	r3, r1, r3
 80001b6:	ea82 0000 	eor.w	r0, r2, r0
 80001ba:	ea83 0101 	eor.w	r1, r3, r1
 80001be:	ea80 0202 	eor.w	r2, r0, r2
 80001c2:	ea81 0303 	eor.w	r3, r1, r3
 80001c6:	2d36      	cmp	r5, #54	; 0x36
 80001c8:	bf88      	it	hi
 80001ca:	bd30      	pophi	{r4, r5, pc}
 80001cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001dc:	d002      	beq.n	80001e4 <__adddf3+0x70>
 80001de:	4240      	negs	r0, r0
 80001e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x84>
 80001f2:	4252      	negs	r2, r2
 80001f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f8:	ea94 0f05 	teq	r4, r5
 80001fc:	f000 80a7 	beq.w	800034e <__adddf3+0x1da>
 8000200:	f1a4 0401 	sub.w	r4, r4, #1
 8000204:	f1d5 0e20 	rsbs	lr, r5, #32
 8000208:	db0d      	blt.n	8000226 <__adddf3+0xb2>
 800020a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020e:	fa22 f205 	lsr.w	r2, r2, r5
 8000212:	1880      	adds	r0, r0, r2
 8000214:	f141 0100 	adc.w	r1, r1, #0
 8000218:	fa03 f20e 	lsl.w	r2, r3, lr
 800021c:	1880      	adds	r0, r0, r2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	4159      	adcs	r1, r3
 8000224:	e00e      	b.n	8000244 <__adddf3+0xd0>
 8000226:	f1a5 0520 	sub.w	r5, r5, #32
 800022a:	f10e 0e20 	add.w	lr, lr, #32
 800022e:	2a01      	cmp	r2, #1
 8000230:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000234:	bf28      	it	cs
 8000236:	f04c 0c02 	orrcs.w	ip, ip, #2
 800023a:	fa43 f305 	asr.w	r3, r3, r5
 800023e:	18c0      	adds	r0, r0, r3
 8000240:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000244:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000248:	d507      	bpl.n	800025a <__adddf3+0xe6>
 800024a:	f04f 0e00 	mov.w	lr, #0
 800024e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000252:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000256:	eb6e 0101 	sbc.w	r1, lr, r1
 800025a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025e:	d31b      	bcc.n	8000298 <__adddf3+0x124>
 8000260:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000264:	d30c      	bcc.n	8000280 <__adddf3+0x10c>
 8000266:	0849      	lsrs	r1, r1, #1
 8000268:	ea5f 0030 	movs.w	r0, r0, rrx
 800026c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000270:	f104 0401 	add.w	r4, r4, #1
 8000274:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000278:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800027c:	f080 809a 	bcs.w	80003b4 <__adddf3+0x240>
 8000280:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	ea41 0105 	orr.w	r1, r1, r5
 8000296:	bd30      	pop	{r4, r5, pc}
 8000298:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800029c:	4140      	adcs	r0, r0
 800029e:	eb41 0101 	adc.w	r1, r1, r1
 80002a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002a6:	f1a4 0401 	sub.w	r4, r4, #1
 80002aa:	d1e9      	bne.n	8000280 <__adddf3+0x10c>
 80002ac:	f091 0f00 	teq	r1, #0
 80002b0:	bf04      	itt	eq
 80002b2:	4601      	moveq	r1, r0
 80002b4:	2000      	moveq	r0, #0
 80002b6:	fab1 f381 	clz	r3, r1
 80002ba:	bf08      	it	eq
 80002bc:	3320      	addeq	r3, #32
 80002be:	f1a3 030b 	sub.w	r3, r3, #11
 80002c2:	f1b3 0220 	subs.w	r2, r3, #32
 80002c6:	da0c      	bge.n	80002e2 <__adddf3+0x16e>
 80002c8:	320c      	adds	r2, #12
 80002ca:	dd08      	ble.n	80002de <__adddf3+0x16a>
 80002cc:	f102 0c14 	add.w	ip, r2, #20
 80002d0:	f1c2 020c 	rsb	r2, r2, #12
 80002d4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d8:	fa21 f102 	lsr.w	r1, r1, r2
 80002dc:	e00c      	b.n	80002f8 <__adddf3+0x184>
 80002de:	f102 0214 	add.w	r2, r2, #20
 80002e2:	bfd8      	it	le
 80002e4:	f1c2 0c20 	rsble	ip, r2, #32
 80002e8:	fa01 f102 	lsl.w	r1, r1, r2
 80002ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f0:	bfdc      	itt	le
 80002f2:	ea41 010c 	orrle.w	r1, r1, ip
 80002f6:	4090      	lslle	r0, r2
 80002f8:	1ae4      	subs	r4, r4, r3
 80002fa:	bfa2      	ittt	ge
 80002fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000300:	4329      	orrge	r1, r5
 8000302:	bd30      	popge	{r4, r5, pc}
 8000304:	ea6f 0404 	mvn.w	r4, r4
 8000308:	3c1f      	subs	r4, #31
 800030a:	da1c      	bge.n	8000346 <__adddf3+0x1d2>
 800030c:	340c      	adds	r4, #12
 800030e:	dc0e      	bgt.n	800032e <__adddf3+0x1ba>
 8000310:	f104 0414 	add.w	r4, r4, #20
 8000314:	f1c4 0220 	rsb	r2, r4, #32
 8000318:	fa20 f004 	lsr.w	r0, r0, r4
 800031c:	fa01 f302 	lsl.w	r3, r1, r2
 8000320:	ea40 0003 	orr.w	r0, r0, r3
 8000324:	fa21 f304 	lsr.w	r3, r1, r4
 8000328:	ea45 0103 	orr.w	r1, r5, r3
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	f1c4 040c 	rsb	r4, r4, #12
 8000332:	f1c4 0220 	rsb	r2, r4, #32
 8000336:	fa20 f002 	lsr.w	r0, r0, r2
 800033a:	fa01 f304 	lsl.w	r3, r1, r4
 800033e:	ea40 0003 	orr.w	r0, r0, r3
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	fa21 f004 	lsr.w	r0, r1, r4
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f094 0f00 	teq	r4, #0
 8000352:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000356:	bf06      	itte	eq
 8000358:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800035c:	3401      	addeq	r4, #1
 800035e:	3d01      	subne	r5, #1
 8000360:	e74e      	b.n	8000200 <__adddf3+0x8c>
 8000362:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000366:	bf18      	it	ne
 8000368:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800036c:	d029      	beq.n	80003c2 <__adddf3+0x24e>
 800036e:	ea94 0f05 	teq	r4, r5
 8000372:	bf08      	it	eq
 8000374:	ea90 0f02 	teqeq	r0, r2
 8000378:	d005      	beq.n	8000386 <__adddf3+0x212>
 800037a:	ea54 0c00 	orrs.w	ip, r4, r0
 800037e:	bf04      	itt	eq
 8000380:	4619      	moveq	r1, r3
 8000382:	4610      	moveq	r0, r2
 8000384:	bd30      	pop	{r4, r5, pc}
 8000386:	ea91 0f03 	teq	r1, r3
 800038a:	bf1e      	ittt	ne
 800038c:	2100      	movne	r1, #0
 800038e:	2000      	movne	r0, #0
 8000390:	bd30      	popne	{r4, r5, pc}
 8000392:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000396:	d105      	bne.n	80003a4 <__adddf3+0x230>
 8000398:	0040      	lsls	r0, r0, #1
 800039a:	4149      	adcs	r1, r1
 800039c:	bf28      	it	cs
 800039e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003a2:	bd30      	pop	{r4, r5, pc}
 80003a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a8:	bf3c      	itt	cc
 80003aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ae:	bd30      	popcc	{r4, r5, pc}
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003bc:	f04f 0000 	mov.w	r0, #0
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf1a      	itte	ne
 80003c8:	4619      	movne	r1, r3
 80003ca:	4610      	movne	r0, r2
 80003cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d0:	bf1c      	itt	ne
 80003d2:	460b      	movne	r3, r1
 80003d4:	4602      	movne	r2, r0
 80003d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003da:	bf06      	itte	eq
 80003dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e0:	ea91 0f03 	teqeq	r1, r3
 80003e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	bf00      	nop

080003ec <__aeabi_ui2d>:
 80003ec:	f090 0f00 	teq	r0, #0
 80003f0:	bf04      	itt	eq
 80003f2:	2100      	moveq	r1, #0
 80003f4:	4770      	bxeq	lr
 80003f6:	b530      	push	{r4, r5, lr}
 80003f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000400:	f04f 0500 	mov.w	r5, #0
 8000404:	f04f 0100 	mov.w	r1, #0
 8000408:	e750      	b.n	80002ac <__adddf3+0x138>
 800040a:	bf00      	nop

0800040c <__aeabi_i2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000424:	bf48      	it	mi
 8000426:	4240      	negmi	r0, r0
 8000428:	f04f 0100 	mov.w	r1, #0
 800042c:	e73e      	b.n	80002ac <__adddf3+0x138>
 800042e:	bf00      	nop

08000430 <__aeabi_f2d>:
 8000430:	0042      	lsls	r2, r0, #1
 8000432:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000436:	ea4f 0131 	mov.w	r1, r1, rrx
 800043a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043e:	bf1f      	itttt	ne
 8000440:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000444:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000448:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800044c:	4770      	bxne	lr
 800044e:	f092 0f00 	teq	r2, #0
 8000452:	bf14      	ite	ne
 8000454:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e720      	b.n	80002ac <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aedc 	beq.w	800025a <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6c1      	b.n	800025a <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_InitTick+0x3c>)
{
 80011cc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ce:	7818      	ldrb	r0, [r3, #0]
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_InitTick+0x40>)
 80011da:	6810      	ldr	r0, [r2, #0]
 80011dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80011e0:	f000 f88c 	bl	80012fc <HAL_SYSTICK_Config>
 80011e4:	4604      	mov	r4, r0
 80011e6:	b958      	cbnz	r0, 8001200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e8:	2d0f      	cmp	r5, #15
 80011ea:	d809      	bhi.n	8001200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	4602      	mov	r2, r0
 80011ee:	4629      	mov	r1, r5
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f842 	bl	800127c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <HAL_InitTick+0x44>)
 80011fa:	4620      	mov	r0, r4
 80011fc:	601d      	str	r5, [r3, #0]
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001200:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001202:	bd38      	pop	{r3, r4, r5, pc}
 8001204:	20000000 	.word	0x20000000
 8001208:	20000008 	.word	0x20000008
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x20>)
{
 8001212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001216:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121e:	f000 f81b 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ffd0 	bl	80011c8 <HAL_InitTick>
  HAL_MspInit();
 8001228:	f001 f876 	bl	8002318 <HAL_MspInit>
}
 800122c:	2000      	movs	r0, #0
 800122e:	bd08      	pop	{r3, pc}
 8001230:	40022000 	.word	0x40022000

08001234 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001234:	4a03      	ldr	r2, [pc, #12]	; (8001244 <HAL_IncTick+0x10>)
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_IncTick+0x14>)
 8001238:	6811      	ldr	r1, [r2, #0]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	440b      	add	r3, r1
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	200038a8 	.word	0x200038a8
 8001248:	20000000 	.word	0x20000000

0800124c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800124c:	4b01      	ldr	r3, [pc, #4]	; (8001254 <HAL_GetTick+0x8>)
 800124e:	6818      	ldr	r0, [r3, #0]
}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200038a8 	.word	0x200038a8

08001258 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800125a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800125e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001266:	041b      	lsls	r3, r3, #16
 8001268:	0c1b      	lsrs	r3, r3, #16
 800126a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800126e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001272:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001274:	60d3      	str	r3, [r2, #12]
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b530      	push	{r4, r5, lr}
 8001280:	68dc      	ldr	r4, [r3, #12]
 8001282:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001286:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	2b04      	cmp	r3, #4
 800128e:	bf28      	it	cs
 8001290:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001298:	bf98      	it	ls
 800129a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	fa05 f303 	lsl.w	r3, r5, r3
 80012a0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a4:	bf88      	it	hi
 80012a6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4019      	ands	r1, r3
 80012aa:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	fa05 f404 	lsl.w	r4, r5, r4
 80012b0:	3c01      	subs	r4, #1
 80012b2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80012b4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b6:	ea42 0201 	orr.w	r2, r2, r1
 80012ba:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	bfaf      	iteee	ge
 80012c0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	4b06      	ldrlt	r3, [pc, #24]	; (80012e0 <HAL_NVIC_SetPriority+0x64>)
 80012c6:	f000 000f 	andlt.w	r0, r0, #15
 80012ca:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	bfa5      	ittet	ge
 80012ce:	b2d2      	uxtbge	r2, r2
 80012d0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80012da:	bd30      	pop	{r4, r5, pc}
 80012dc:	e000ed00 	.word	0xe000ed00
 80012e0:	e000ed14 	.word	0xe000ed14

080012e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012e4:	2301      	movs	r3, #1
 80012e6:	0942      	lsrs	r2, r0, #5
 80012e8:	f000 001f 	and.w	r0, r0, #31
 80012ec:	fa03 f000 	lsl.w	r0, r3, r0
 80012f0:	4b01      	ldr	r3, [pc, #4]	; (80012f8 <HAL_NVIC_EnableIRQ+0x14>)
 80012f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100

080012fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	3801      	subs	r0, #1
 80012fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001302:	d20a      	bcs.n	800131a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001328:	2201      	movs	r2, #1
 800132a:	0943      	lsrs	r3, r0, #5
 800132c:	f000 001f 	and.w	r0, r0, #31
 8001330:	fa02 f000 	lsl.w	r0, r2, r0
 8001334:	4a02      	ldr	r2, [pc, #8]	; (8001340 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001336:	3360      	adds	r3, #96	; 0x60
 8001338:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001344:	4a11      	ldr	r2, [pc, #68]	; (800138c <FLASH_SetErrorCode+0x48>)
 8001346:	68d3      	ldr	r3, [r2, #12]
 8001348:	f013 0310 	ands.w	r3, r3, #16
 800134c:	d005      	beq.n	800135a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800134e:	4910      	ldr	r1, [pc, #64]	; (8001390 <FLASH_SetErrorCode+0x4c>)
 8001350:	69cb      	ldr	r3, [r1, #28]
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001358:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800135a:	68d2      	ldr	r2, [r2, #12]
 800135c:	0750      	lsls	r0, r2, #29
 800135e:	d506      	bpl.n	800136e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001360:	490b      	ldr	r1, [pc, #44]	; (8001390 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001362:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001366:	69ca      	ldr	r2, [r1, #28]
 8001368:	f042 0201 	orr.w	r2, r2, #1
 800136c:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <FLASH_SetErrorCode+0x48>)
 8001370:	69d1      	ldr	r1, [r2, #28]
 8001372:	07c9      	lsls	r1, r1, #31
 8001374:	d508      	bpl.n	8001388 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <FLASH_SetErrorCode+0x4c>)
 8001378:	69c1      	ldr	r1, [r0, #28]
 800137a:	f041 0104 	orr.w	r1, r1, #4
 800137e:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001380:	69d1      	ldr	r1, [r2, #28]
 8001382:	f021 0101 	bic.w	r1, r1, #1
 8001386:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001388:	60d3      	str	r3, [r2, #12]
 800138a:	4770      	bx	lr
 800138c:	40022000 	.word	0x40022000
 8001390:	200038b0 	.word	0x200038b0

08001394 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_FLASH_Unlock+0x1c>)
 8001396:	6918      	ldr	r0, [r3, #16]
 8001398:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800139c:	d007      	beq.n	80013ae <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <HAL_FLASH_Unlock+0x20>)
 80013a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80013a2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80013a6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013a8:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80013aa:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 80013ae:	4770      	bx	lr
 80013b0:	40022000 	.word	0x40022000
 80013b4:	45670123 	.word	0x45670123

080013b8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80013b8:	4a03      	ldr	r2, [pc, #12]	; (80013c8 <HAL_FLASH_Lock+0x10>)
}
 80013ba:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80013bc:	6913      	ldr	r3, [r2, #16]
 80013be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c2:	6113      	str	r3, [r2, #16]
}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40022000 	.word	0x40022000

080013cc <FLASH_WaitForLastOperation>:
{
 80013cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ce:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff ff3c 	bl	800124c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013d4:	4c11      	ldr	r4, [pc, #68]	; (800141c <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 80013d6:	4607      	mov	r7, r0
 80013d8:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013da:	68e3      	ldr	r3, [r4, #12]
 80013dc:	07d8      	lsls	r0, r3, #31
 80013de:	d412      	bmi.n	8001406 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80013e0:	68e3      	ldr	r3, [r4, #12]
 80013e2:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013e4:	bf44      	itt	mi
 80013e6:	2320      	movmi	r3, #32
 80013e8:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013ea:	68eb      	ldr	r3, [r5, #12]
 80013ec:	06da      	lsls	r2, r3, #27
 80013ee:	d406      	bmi.n	80013fe <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80013f0:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013f2:	07db      	lsls	r3, r3, #31
 80013f4:	d403      	bmi.n	80013fe <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80013f6:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80013f8:	f010 0004 	ands.w	r0, r0, #4
 80013fc:	d002      	beq.n	8001404 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 80013fe:	f7ff ffa1 	bl	8001344 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001402:	2001      	movs	r0, #1
}
 8001404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001406:	1c73      	adds	r3, r6, #1
 8001408:	d0e7      	beq.n	80013da <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800140a:	b90e      	cbnz	r6, 8001410 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 800140c:	2003      	movs	r0, #3
 800140e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001410:	f7ff ff1c 	bl	800124c <HAL_GetTick>
 8001414:	1bc0      	subs	r0, r0, r7
 8001416:	4286      	cmp	r6, r0
 8001418:	d2df      	bcs.n	80013da <FLASH_WaitForLastOperation+0xe>
 800141a:	e7f7      	b.n	800140c <FLASH_WaitForLastOperation+0x40>
 800141c:	40022000 	.word	0x40022000

08001420 <HAL_FLASH_Program>:
{
 8001420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8001424:	4c1f      	ldr	r4, [pc, #124]	; (80014a4 <HAL_FLASH_Program+0x84>)
{
 8001426:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8001428:	7e23      	ldrb	r3, [r4, #24]
{
 800142a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800142c:	2b01      	cmp	r3, #1
{
 800142e:	460f      	mov	r7, r1
 8001430:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8001432:	d033      	beq.n	800149c <HAL_FLASH_Program+0x7c>
 8001434:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001436:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800143a:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800143c:	f7ff ffc6 	bl	80013cc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001440:	bb40      	cbnz	r0, 8001494 <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001442:	2d01      	cmp	r5, #1
 8001444:	d003      	beq.n	800144e <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8001446:	2d02      	cmp	r5, #2
 8001448:	bf0c      	ite	eq
 800144a:	2502      	moveq	r5, #2
 800144c:	2504      	movne	r5, #4
 800144e:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001450:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001452:	f8df b054 	ldr.w	fp, [pc, #84]	; 80014a8 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001456:	0132      	lsls	r2, r6, #4
 8001458:	4640      	mov	r0, r8
 800145a:	4649      	mov	r1, r9
 800145c:	f7fe fe78 	bl	8000150 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001460:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001464:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001468:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 8001472:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001476:	f24c 3050 	movw	r0, #50000	; 0xc350
 800147a:	f7ff ffa7 	bl	80013cc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800147e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 800148a:	b918      	cbnz	r0, 8001494 <HAL_FLASH_Program+0x74>
 800148c:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 800148e:	b2f3      	uxtb	r3, r6
 8001490:	429d      	cmp	r5, r3
 8001492:	d8e0      	bhi.n	8001456 <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8001494:	2300      	movs	r3, #0
 8001496:	7623      	strb	r3, [r4, #24]
  return status;
 8001498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 800149c:	2002      	movs	r0, #2
}
 800149e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014a2:	bf00      	nop
 80014a4:	200038b0 	.word	0x200038b0
 80014a8:	40022000 	.word	0x40022000

080014ac <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014ac:	2200      	movs	r2, #0
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <FLASH_PageErase+0x1c>)
 80014b0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <FLASH_PageErase+0x20>)
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	f042 0202 	orr.w	r2, r2, #2
 80014ba:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80014bc:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	4770      	bx	lr
 80014c8:	200038b0 	.word	0x200038b0
 80014cc:	40022000 	.word	0x40022000

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80014d4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	4616      	mov	r6, r2
 80014d8:	4b65      	ldr	r3, [pc, #404]	; (8001670 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014da:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001680 <HAL_GPIO_Init+0x1b0>
 80014de:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001684 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80014e2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80014e8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ec:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80014f0:	45a0      	cmp	r8, r4
 80014f2:	d17f      	bne.n	80015f4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80014f4:	684d      	ldr	r5, [r1, #4]
 80014f6:	2d12      	cmp	r5, #18
 80014f8:	f000 80af 	beq.w	800165a <HAL_GPIO_Init+0x18a>
 80014fc:	f200 8088 	bhi.w	8001610 <HAL_GPIO_Init+0x140>
 8001500:	2d02      	cmp	r5, #2
 8001502:	f000 80a7 	beq.w	8001654 <HAL_GPIO_Init+0x184>
 8001506:	d87c      	bhi.n	8001602 <HAL_GPIO_Init+0x132>
 8001508:	2d00      	cmp	r5, #0
 800150a:	f000 808e 	beq.w	800162a <HAL_GPIO_Init+0x15a>
 800150e:	2d01      	cmp	r5, #1
 8001510:	f000 809e 	beq.w	8001650 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001514:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001518:	2cff      	cmp	r4, #255	; 0xff
 800151a:	bf93      	iteet	ls
 800151c:	4682      	movls	sl, r0
 800151e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001522:	3d08      	subhi	r5, #8
 8001524:	f8d0 b000 	ldrls.w	fp, [r0]
 8001528:	bf92      	itee	ls
 800152a:	00b5      	lslls	r5, r6, #2
 800152c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001530:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001532:	fa09 f805 	lsl.w	r8, r9, r5
 8001536:	ea2b 0808 	bic.w	r8, fp, r8
 800153a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800153e:	bf88      	it	hi
 8001540:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001544:	ea48 0505 	orr.w	r5, r8, r5
 8001548:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800154c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001550:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001554:	d04e      	beq.n	80015f4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001556:	4d47      	ldr	r5, [pc, #284]	; (8001674 <HAL_GPIO_Init+0x1a4>)
 8001558:	4f46      	ldr	r7, [pc, #280]	; (8001674 <HAL_GPIO_Init+0x1a4>)
 800155a:	69ad      	ldr	r5, [r5, #24]
 800155c:	f026 0803 	bic.w	r8, r6, #3
 8001560:	f045 0501 	orr.w	r5, r5, #1
 8001564:	61bd      	str	r5, [r7, #24]
 8001566:	69bd      	ldr	r5, [r7, #24]
 8001568:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800156c:	f005 0501 	and.w	r5, r5, #1
 8001570:	9501      	str	r5, [sp, #4]
 8001572:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001576:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800157a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800157c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001580:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001584:	fa09 f90b 	lsl.w	r9, r9, fp
 8001588:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158c:	4d3a      	ldr	r5, [pc, #232]	; (8001678 <HAL_GPIO_Init+0x1a8>)
 800158e:	42a8      	cmp	r0, r5
 8001590:	d068      	beq.n	8001664 <HAL_GPIO_Init+0x194>
 8001592:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001596:	42a8      	cmp	r0, r5
 8001598:	d066      	beq.n	8001668 <HAL_GPIO_Init+0x198>
 800159a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800159e:	42a8      	cmp	r0, r5
 80015a0:	d064      	beq.n	800166c <HAL_GPIO_Init+0x19c>
 80015a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015a6:	42a8      	cmp	r0, r5
 80015a8:	bf0c      	ite	eq
 80015aa:	2503      	moveq	r5, #3
 80015ac:	2504      	movne	r5, #4
 80015ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80015b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80015b6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015ba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015bc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015c0:	bf14      	ite	ne
 80015c2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015c4:	43a5      	biceq	r5, r4
 80015c6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015c8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80015ce:	bf14      	ite	ne
 80015d0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015d2:	43a5      	biceq	r5, r4
 80015d4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80015dc:	bf14      	ite	ne
 80015de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015e0:	43a5      	biceq	r5, r4
 80015e2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015e4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ea:	bf14      	ite	ne
 80015ec:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ee:	ea25 0404 	biceq.w	r4, r5, r4
 80015f2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80015f4:	3601      	adds	r6, #1
 80015f6:	2e10      	cmp	r6, #16
 80015f8:	f47f af73 	bne.w	80014e2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80015fc:	b003      	add	sp, #12
 80015fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001602:	2d03      	cmp	r5, #3
 8001604:	d022      	beq.n	800164c <HAL_GPIO_Init+0x17c>
 8001606:	2d11      	cmp	r5, #17
 8001608:	d184      	bne.n	8001514 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800160a:	68ca      	ldr	r2, [r1, #12]
 800160c:	3204      	adds	r2, #4
          break;
 800160e:	e781      	b.n	8001514 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001610:	4f1a      	ldr	r7, [pc, #104]	; (800167c <HAL_GPIO_Init+0x1ac>)
 8001612:	42bd      	cmp	r5, r7
 8001614:	d009      	beq.n	800162a <HAL_GPIO_Init+0x15a>
 8001616:	d812      	bhi.n	800163e <HAL_GPIO_Init+0x16e>
 8001618:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001688 <HAL_GPIO_Init+0x1b8>
 800161c:	454d      	cmp	r5, r9
 800161e:	d004      	beq.n	800162a <HAL_GPIO_Init+0x15a>
 8001620:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001624:	454d      	cmp	r5, r9
 8001626:	f47f af75 	bne.w	8001514 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800162a:	688a      	ldr	r2, [r1, #8]
 800162c:	b1c2      	cbz	r2, 8001660 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800162e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001630:	bf0c      	ite	eq
 8001632:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001636:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800163a:	2208      	movs	r2, #8
 800163c:	e76a      	b.n	8001514 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800163e:	4575      	cmp	r5, lr
 8001640:	d0f3      	beq.n	800162a <HAL_GPIO_Init+0x15a>
 8001642:	4565      	cmp	r5, ip
 8001644:	d0f1      	beq.n	800162a <HAL_GPIO_Init+0x15a>
 8001646:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800168c <HAL_GPIO_Init+0x1bc>
 800164a:	e7eb      	b.n	8001624 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800164c:	2200      	movs	r2, #0
 800164e:	e761      	b.n	8001514 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001650:	68ca      	ldr	r2, [r1, #12]
          break;
 8001652:	e75f      	b.n	8001514 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001654:	68ca      	ldr	r2, [r1, #12]
 8001656:	3208      	adds	r2, #8
          break;
 8001658:	e75c      	b.n	8001514 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800165a:	68ca      	ldr	r2, [r1, #12]
 800165c:	320c      	adds	r2, #12
          break;
 800165e:	e759      	b.n	8001514 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001660:	2204      	movs	r2, #4
 8001662:	e757      	b.n	8001514 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001664:	2500      	movs	r5, #0
 8001666:	e7a2      	b.n	80015ae <HAL_GPIO_Init+0xde>
 8001668:	2501      	movs	r5, #1
 800166a:	e7a0      	b.n	80015ae <HAL_GPIO_Init+0xde>
 800166c:	2502      	movs	r5, #2
 800166e:	e79e      	b.n	80015ae <HAL_GPIO_Init+0xde>
 8001670:	40010400 	.word	0x40010400
 8001674:	40021000 	.word	0x40021000
 8001678:	40010800 	.word	0x40010800
 800167c:	10210000 	.word	0x10210000
 8001680:	10310000 	.word	0x10310000
 8001684:	10320000 	.word	0x10320000
 8001688:	10110000 	.word	0x10110000
 800168c:	10220000 	.word	0x10220000

08001690 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001690:	b10a      	cbz	r2, 8001696 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001692:	6101      	str	r1, [r0, #16]
 8001694:	4770      	bx	lr
 8001696:	0409      	lsls	r1, r1, #16
 8001698:	e7fb      	b.n	8001692 <HAL_GPIO_WritePin+0x2>

0800169a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_EXTI_IRQHandler>:
{
 800169c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80016a0:	6959      	ldr	r1, [r3, #20]
 80016a2:	4201      	tst	r1, r0
 80016a4:	d002      	beq.n	80016ac <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016a6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016a8:	f7ff fff7 	bl	800169a <HAL_GPIO_EXTI_Callback>
 80016ac:	bd08      	pop	{r3, pc}
 80016ae:	bf00      	nop
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b4:	6803      	ldr	r3, [r0, #0]
{
 80016b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	07db      	lsls	r3, r3, #31
{
 80016bc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	d410      	bmi.n	80016e2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	079f      	lsls	r7, r3, #30
 80016c4:	d45e      	bmi.n	8001784 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c6:	682b      	ldr	r3, [r5, #0]
 80016c8:	0719      	lsls	r1, r3, #28
 80016ca:	f100 8095 	bmi.w	80017f8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ce:	682b      	ldr	r3, [r5, #0]
 80016d0:	075a      	lsls	r2, r3, #29
 80016d2:	f100 80bf 	bmi.w	8001854 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d6:	69ea      	ldr	r2, [r5, #28]
 80016d8:	2a00      	cmp	r2, #0
 80016da:	f040 812d 	bne.w	8001938 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80016de:	2000      	movs	r0, #0
 80016e0:	e014      	b.n	800170c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016e2:	4c90      	ldr	r4, [pc, #576]	; (8001924 <HAL_RCC_OscConfig+0x270>)
 80016e4:	6863      	ldr	r3, [r4, #4]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d007      	beq.n	80016fe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ee:	6863      	ldr	r3, [r4, #4]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d10c      	bne.n	8001712 <HAL_RCC_OscConfig+0x5e>
 80016f8:	6863      	ldr	r3, [r4, #4]
 80016fa:	03de      	lsls	r6, r3, #15
 80016fc:	d509      	bpl.n	8001712 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	039c      	lsls	r4, r3, #14
 8001702:	d5dd      	bpl.n	80016c0 <HAL_RCC_OscConfig+0xc>
 8001704:	686b      	ldr	r3, [r5, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1da      	bne.n	80016c0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800170a:	2001      	movs	r0, #1
}
 800170c:	b002      	add	sp, #8
 800170e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001712:	686b      	ldr	r3, [r5, #4]
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001718:	d110      	bne.n	800173c <HAL_RCC_OscConfig+0x88>
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001720:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001722:	f7ff fd93 	bl	800124c <HAL_GetTick>
 8001726:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	0398      	lsls	r0, r3, #14
 800172c:	d4c8      	bmi.n	80016c0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172e:	f7ff fd8d 	bl	800124c <HAL_GetTick>
 8001732:	1b80      	subs	r0, r0, r6
 8001734:	2864      	cmp	r0, #100	; 0x64
 8001736:	d9f7      	bls.n	8001728 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001738:	2003      	movs	r0, #3
 800173a:	e7e7      	b.n	800170c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173c:	b99b      	cbnz	r3, 8001766 <HAL_RCC_OscConfig+0xb2>
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001744:	6023      	str	r3, [r4, #0]
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800174e:	f7ff fd7d 	bl	800124c <HAL_GetTick>
 8001752:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	0399      	lsls	r1, r3, #14
 8001758:	d5b2      	bpl.n	80016c0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800175a:	f7ff fd77 	bl	800124c <HAL_GetTick>
 800175e:	1b80      	subs	r0, r0, r6
 8001760:	2864      	cmp	r0, #100	; 0x64
 8001762:	d9f7      	bls.n	8001754 <HAL_RCC_OscConfig+0xa0>
 8001764:	e7e8      	b.n	8001738 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001766:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	d103      	bne.n	8001776 <HAL_RCC_OscConfig+0xc2>
 800176e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001772:	6023      	str	r3, [r4, #0]
 8001774:	e7d1      	b.n	800171a <HAL_RCC_OscConfig+0x66>
 8001776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177a:	6023      	str	r3, [r4, #0]
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001782:	e7cd      	b.n	8001720 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001784:	4c67      	ldr	r4, [pc, #412]	; (8001924 <HAL_RCC_OscConfig+0x270>)
 8001786:	6863      	ldr	r3, [r4, #4]
 8001788:	f013 0f0c 	tst.w	r3, #12
 800178c:	d007      	beq.n	800179e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800178e:	6863      	ldr	r3, [r4, #4]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b08      	cmp	r3, #8
 8001796:	d110      	bne.n	80017ba <HAL_RCC_OscConfig+0x106>
 8001798:	6863      	ldr	r3, [r4, #4]
 800179a:	03da      	lsls	r2, r3, #15
 800179c:	d40d      	bmi.n	80017ba <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	079b      	lsls	r3, r3, #30
 80017a2:	d502      	bpl.n	80017aa <HAL_RCC_OscConfig+0xf6>
 80017a4:	692b      	ldr	r3, [r5, #16]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d1af      	bne.n	800170a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	696a      	ldr	r2, [r5, #20]
 80017ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017b6:	6023      	str	r3, [r4, #0]
 80017b8:	e785      	b.n	80016c6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ba:	692a      	ldr	r2, [r5, #16]
 80017bc:	4b5a      	ldr	r3, [pc, #360]	; (8001928 <HAL_RCC_OscConfig+0x274>)
 80017be:	b16a      	cbz	r2, 80017dc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017c4:	f7ff fd42 	bl	800124c <HAL_GetTick>
 80017c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	079f      	lsls	r7, r3, #30
 80017ce:	d4ec      	bmi.n	80017aa <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d0:	f7ff fd3c 	bl	800124c <HAL_GetTick>
 80017d4:	1b80      	subs	r0, r0, r6
 80017d6:	2802      	cmp	r0, #2
 80017d8:	d9f7      	bls.n	80017ca <HAL_RCC_OscConfig+0x116>
 80017da:	e7ad      	b.n	8001738 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80017dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017de:	f7ff fd35 	bl	800124c <HAL_GetTick>
 80017e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	0798      	lsls	r0, r3, #30
 80017e8:	f57f af6d 	bpl.w	80016c6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff fd2e 	bl	800124c <HAL_GetTick>
 80017f0:	1b80      	subs	r0, r0, r6
 80017f2:	2802      	cmp	r0, #2
 80017f4:	d9f6      	bls.n	80017e4 <HAL_RCC_OscConfig+0x130>
 80017f6:	e79f      	b.n	8001738 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f8:	69aa      	ldr	r2, [r5, #24]
 80017fa:	4c4a      	ldr	r4, [pc, #296]	; (8001924 <HAL_RCC_OscConfig+0x270>)
 80017fc:	4b4b      	ldr	r3, [pc, #300]	; (800192c <HAL_RCC_OscConfig+0x278>)
 80017fe:	b1da      	cbz	r2, 8001838 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001804:	f7ff fd22 	bl	800124c <HAL_GetTick>
 8001808:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800180c:	079b      	lsls	r3, r3, #30
 800180e:	d50d      	bpl.n	800182c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001810:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001814:	4b46      	ldr	r3, [pc, #280]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fbb3 f3f2 	udiv	r3, r3, r2
 800181c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800181e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001820:	9b01      	ldr	r3, [sp, #4]
 8001822:	1e5a      	subs	r2, r3, #1
 8001824:	9201      	str	r2, [sp, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f9      	bne.n	800181e <HAL_RCC_OscConfig+0x16a>
 800182a:	e750      	b.n	80016ce <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff fd0e 	bl	800124c <HAL_GetTick>
 8001830:	1b80      	subs	r0, r0, r6
 8001832:	2802      	cmp	r0, #2
 8001834:	d9e9      	bls.n	800180a <HAL_RCC_OscConfig+0x156>
 8001836:	e77f      	b.n	8001738 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001838:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800183a:	f7ff fd07 	bl	800124c <HAL_GetTick>
 800183e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001842:	079f      	lsls	r7, r3, #30
 8001844:	f57f af43 	bpl.w	80016ce <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001848:	f7ff fd00 	bl	800124c <HAL_GetTick>
 800184c:	1b80      	subs	r0, r0, r6
 800184e:	2802      	cmp	r0, #2
 8001850:	d9f6      	bls.n	8001840 <HAL_RCC_OscConfig+0x18c>
 8001852:	e771      	b.n	8001738 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001854:	4c33      	ldr	r4, [pc, #204]	; (8001924 <HAL_RCC_OscConfig+0x270>)
 8001856:	69e3      	ldr	r3, [r4, #28]
 8001858:	00d8      	lsls	r0, r3, #3
 800185a:	d424      	bmi.n	80018a6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800185c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	69e3      	ldr	r3, [r4, #28]
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	61e3      	str	r3, [r4, #28]
 8001866:	69e3      	ldr	r3, [r4, #28]
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	4e30      	ldr	r6, [pc, #192]	; (8001934 <HAL_RCC_OscConfig+0x280>)
 8001872:	6833      	ldr	r3, [r6, #0]
 8001874:	05d9      	lsls	r1, r3, #23
 8001876:	d518      	bpl.n	80018aa <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	68eb      	ldr	r3, [r5, #12]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d126      	bne.n	80018cc <HAL_RCC_OscConfig+0x218>
 800187e:	6a23      	ldr	r3, [r4, #32]
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001886:	f7ff fce1 	bl	800124c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800188e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	6a23      	ldr	r3, [r4, #32]
 8001892:	079b      	lsls	r3, r3, #30
 8001894:	d53f      	bpl.n	8001916 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001896:	2f00      	cmp	r7, #0
 8001898:	f43f af1d 	beq.w	80016d6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800189c:	69e3      	ldr	r3, [r4, #28]
 800189e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a2:	61e3      	str	r3, [r4, #28]
 80018a4:	e717      	b.n	80016d6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	2700      	movs	r7, #0
 80018a8:	e7e2      	b.n	8001870 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018aa:	6833      	ldr	r3, [r6, #0]
 80018ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018b2:	f7ff fccb 	bl	800124c <HAL_GetTick>
 80018b6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	6833      	ldr	r3, [r6, #0]
 80018ba:	05da      	lsls	r2, r3, #23
 80018bc:	d4dc      	bmi.n	8001878 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018be:	f7ff fcc5 	bl	800124c <HAL_GetTick>
 80018c2:	eba0 0008 	sub.w	r0, r0, r8
 80018c6:	2864      	cmp	r0, #100	; 0x64
 80018c8:	d9f6      	bls.n	80018b8 <HAL_RCC_OscConfig+0x204>
 80018ca:	e735      	b.n	8001738 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	b9ab      	cbnz	r3, 80018fa <HAL_RCC_OscConfig+0x246>
 80018ce:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6223      	str	r3, [r4, #32]
 80018da:	6a23      	ldr	r3, [r4, #32]
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80018e2:	f7ff fcb3 	bl	800124c <HAL_GetTick>
 80018e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	6a23      	ldr	r3, [r4, #32]
 80018ea:	0798      	lsls	r0, r3, #30
 80018ec:	d5d3      	bpl.n	8001896 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff fcad 	bl	800124c <HAL_GetTick>
 80018f2:	1b80      	subs	r0, r0, r6
 80018f4:	4540      	cmp	r0, r8
 80018f6:	d9f7      	bls.n	80018e8 <HAL_RCC_OscConfig+0x234>
 80018f8:	e71e      	b.n	8001738 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	6a23      	ldr	r3, [r4, #32]
 80018fe:	d103      	bne.n	8001908 <HAL_RCC_OscConfig+0x254>
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	6223      	str	r3, [r4, #32]
 8001906:	e7ba      	b.n	800187e <HAL_RCC_OscConfig+0x1ca>
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6223      	str	r3, [r4, #32]
 800190e:	6a23      	ldr	r3, [r4, #32]
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	e7b6      	b.n	8001884 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff fc99 	bl	800124c <HAL_GetTick>
 800191a:	eba0 0008 	sub.w	r0, r0, r8
 800191e:	42b0      	cmp	r0, r6
 8001920:	d9b6      	bls.n	8001890 <HAL_RCC_OscConfig+0x1dc>
 8001922:	e709      	b.n	8001738 <HAL_RCC_OscConfig+0x84>
 8001924:	40021000 	.word	0x40021000
 8001928:	42420000 	.word	0x42420000
 800192c:	42420480 	.word	0x42420480
 8001930:	20000008 	.word	0x20000008
 8001934:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001938:	4c22      	ldr	r4, [pc, #136]	; (80019c4 <HAL_RCC_OscConfig+0x310>)
 800193a:	6863      	ldr	r3, [r4, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	f43f aee2 	beq.w	800170a <HAL_RCC_OscConfig+0x56>
 8001946:	2300      	movs	r3, #0
 8001948:	4e1f      	ldr	r6, [pc, #124]	; (80019c8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800194c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194e:	d12b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001950:	f7ff fc7c 	bl	800124c <HAL_GetTick>
 8001954:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	0199      	lsls	r1, r3, #6
 800195a:	d41f      	bmi.n	800199c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800195c:	6a2b      	ldr	r3, [r5, #32]
 800195e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001964:	6862      	ldr	r2, [r4, #4]
 8001966:	68a9      	ldr	r1, [r5, #8]
 8001968:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800196c:	430a      	orrs	r2, r1
 800196e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001970:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001972:	6862      	ldr	r2, [r4, #4]
 8001974:	430b      	orrs	r3, r1
 8001976:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800197a:	4313      	orrs	r3, r2
 800197c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800197e:	2301      	movs	r3, #1
 8001980:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001982:	f7ff fc63 	bl	800124c <HAL_GetTick>
 8001986:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	019a      	lsls	r2, r3, #6
 800198c:	f53f aea7 	bmi.w	80016de <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff fc5c 	bl	800124c <HAL_GetTick>
 8001994:	1b40      	subs	r0, r0, r5
 8001996:	2802      	cmp	r0, #2
 8001998:	d9f6      	bls.n	8001988 <HAL_RCC_OscConfig+0x2d4>
 800199a:	e6cd      	b.n	8001738 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fc56 	bl	800124c <HAL_GetTick>
 80019a0:	1bc0      	subs	r0, r0, r7
 80019a2:	2802      	cmp	r0, #2
 80019a4:	d9d7      	bls.n	8001956 <HAL_RCC_OscConfig+0x2a2>
 80019a6:	e6c7      	b.n	8001738 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80019a8:	f7ff fc50 	bl	800124c <HAL_GetTick>
 80019ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	019b      	lsls	r3, r3, #6
 80019b2:	f57f ae94 	bpl.w	80016de <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff fc49 	bl	800124c <HAL_GetTick>
 80019ba:	1b40      	subs	r0, r0, r5
 80019bc:	2802      	cmp	r0, #2
 80019be:	d9f6      	bls.n	80019ae <HAL_RCC_OscConfig+0x2fa>
 80019c0:	e6ba      	b.n	8001738 <HAL_RCC_OscConfig+0x84>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	42420060 	.word	0x42420060

080019cc <HAL_RCC_GetSysClockFreq>:
{
 80019cc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80019d0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019d2:	ac02      	add	r4, sp, #8
 80019d4:	f103 0510 	add.w	r5, r3, #16
 80019d8:	4622      	mov	r2, r4
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	6859      	ldr	r1, [r3, #4]
 80019de:	3308      	adds	r3, #8
 80019e0:	c203      	stmia	r2!, {r0, r1}
 80019e2:	42ab      	cmp	r3, r5
 80019e4:	4614      	mov	r4, r2
 80019e6:	d1f7      	bne.n	80019d8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019e8:	2301      	movs	r3, #1
 80019ea:	f88d 3004 	strb.w	r3, [sp, #4]
 80019ee:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80019f0:	4911      	ldr	r1, [pc, #68]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019f2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80019f6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019f8:	f003 020c 	and.w	r2, r3, #12
 80019fc:	2a08      	cmp	r2, #8
 80019fe:	d117      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a00:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001a04:	a806      	add	r0, sp, #24
 8001a06:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a08:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a0a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a0e:	d50c      	bpl.n	8001a2a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a10:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a12:	480a      	ldr	r0, [pc, #40]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a14:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a18:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a1a:	aa06      	add	r2, sp, #24
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a22:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001a26:	b007      	add	sp, #28
 8001a28:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x74>)
 8001a2c:	4350      	muls	r0, r2
 8001a2e:	e7fa      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001a32:	e7f8      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x5a>
 8001a34:	080097fc 	.word	0x080097fc
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	007a1200 	.word	0x007a1200
 8001a40:	003d0900 	.word	0x003d0900

08001a44 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a44:	4a54      	ldr	r2, [pc, #336]	; (8001b98 <HAL_RCC_ClockConfig+0x154>)
{
 8001a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a4a:	6813      	ldr	r3, [r2, #0]
{
 8001a4c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	428b      	cmp	r3, r1
{
 8001a54:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a56:	d32a      	bcc.n	8001aae <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a58:	6829      	ldr	r1, [r5, #0]
 8001a5a:	078c      	lsls	r4, r1, #30
 8001a5c:	d434      	bmi.n	8001ac8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5e:	07ca      	lsls	r2, r1, #31
 8001a60:	d447      	bmi.n	8001af2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a62:	4a4d      	ldr	r2, [pc, #308]	; (8001b98 <HAL_RCC_ClockConfig+0x154>)
 8001a64:	6813      	ldr	r3, [r2, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	429e      	cmp	r6, r3
 8001a6c:	f0c0 8082 	bcc.w	8001b74 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	682a      	ldr	r2, [r5, #0]
 8001a72:	4c4a      	ldr	r4, [pc, #296]	; (8001b9c <HAL_RCC_ClockConfig+0x158>)
 8001a74:	f012 0f04 	tst.w	r2, #4
 8001a78:	f040 8087 	bne.w	8001b8a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7c:	0713      	lsls	r3, r2, #28
 8001a7e:	d506      	bpl.n	8001a8e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a80:	6863      	ldr	r3, [r4, #4]
 8001a82:	692a      	ldr	r2, [r5, #16]
 8001a84:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a8c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a8e:	f7ff ff9d 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8001a92:	6863      	ldr	r3, [r4, #4]
 8001a94:	4a42      	ldr	r2, [pc, #264]	; (8001ba0 <HAL_RCC_ClockConfig+0x15c>)
 8001a96:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	40d8      	lsrs	r0, r3
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_RCC_ClockConfig+0x160>)
 8001aa0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fb90 	bl	80011c8 <HAL_InitTick>
  return HAL_OK;
 8001aa8:	2000      	movs	r0, #0
}
 8001aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	6813      	ldr	r3, [r2, #0]
 8001ab0:	f023 0307 	bic.w	r3, r3, #7
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab8:	6813      	ldr	r3, [r2, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	4299      	cmp	r1, r3
 8001ac0:	d0ca      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ac8:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aca:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ace:	bf1e      	ittt	ne
 8001ad0:	685a      	ldrne	r2, [r3, #4]
 8001ad2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001ad6:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ada:	bf42      	ittt	mi
 8001adc:	685a      	ldrmi	r2, [r3, #4]
 8001ade:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001ae2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	68a8      	ldr	r0, [r5, #8]
 8001ae8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001aec:	4302      	orrs	r2, r0
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	e7b5      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af2:	686a      	ldr	r2, [r5, #4]
 8001af4:	4c29      	ldr	r4, [pc, #164]	; (8001b9c <HAL_RCC_ClockConfig+0x158>)
 8001af6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afa:	d11c      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b00:	d0df      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b02:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b08:	f023 0303 	bic.w	r3, r3, #3
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001b10:	f7ff fb9c 	bl	800124c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b14:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001b16:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d114      	bne.n	8001b46 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b1c:	6863      	ldr	r3, [r4, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d09d      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b26:	f7ff fb91 	bl	800124c <HAL_GetTick>
 8001b2a:	1bc0      	subs	r0, r0, r7
 8001b2c:	4540      	cmp	r0, r8
 8001b2e:	d9f5      	bls.n	8001b1c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001b30:	2003      	movs	r0, #3
 8001b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b36:	2a02      	cmp	r2, #2
 8001b38:	d102      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b3e:	e7df      	b.n	8001b00 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	f013 0f02 	tst.w	r3, #2
 8001b44:	e7dc      	b.n	8001b00 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d10f      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4a:	6863      	ldr	r3, [r4, #4]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d086      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7ff fb7a 	bl	800124c <HAL_GetTick>
 8001b58:	1bc0      	subs	r0, r0, r7
 8001b5a:	4540      	cmp	r0, r8
 8001b5c:	d9f5      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x106>
 8001b5e:	e7e7      	b.n	8001b30 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff fb74 	bl	800124c <HAL_GetTick>
 8001b64:	1bc0      	subs	r0, r0, r7
 8001b66:	4540      	cmp	r0, r8
 8001b68:	d8e2      	bhi.n	8001b30 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6a:	6863      	ldr	r3, [r4, #4]
 8001b6c:	f013 0f0c 	tst.w	r3, #12
 8001b70:	d1f6      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x11c>
 8001b72:	e776      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b74:	6813      	ldr	r3, [r2, #0]
 8001b76:	f023 0307 	bic.w	r3, r3, #7
 8001b7a:	4333      	orrs	r3, r6
 8001b7c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b7e:	6813      	ldr	r3, [r2, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	429e      	cmp	r6, r3
 8001b86:	d19c      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0x7e>
 8001b88:	e772      	b.n	8001a70 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8a:	6863      	ldr	r3, [r4, #4]
 8001b8c:	68e9      	ldr	r1, [r5, #12]
 8001b8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b92:	430b      	orrs	r3, r1
 8001b94:	6063      	str	r3, [r4, #4]
 8001b96:	e771      	b.n	8001a7c <HAL_RCC_ClockConfig+0x38>
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	0800980c 	.word	0x0800980c
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001bac:	680d      	ldr	r5, [r1, #0]
 8001bae:	f3c5 250f 	ubfx	r5, r5, #8, #16
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	fa95 f2a5 	rbit	r2, r5
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001bb6:	f04f 090f 	mov.w	r9, #15
  pinpos = POSITION_VAL(pinmask);
 8001bba:	fab2 f282 	clz	r2, r2
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001bbe:	f04f 0803 	mov.w	r8, #3
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001bc2:	f04f 0c04 	mov.w	ip, #4
    if ((pinmask & (1U << pinpos)) != 0U)
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
      {
        currentpin = (0x00000101U << pinpos);
 8001bc6:	f240 1e01 	movw	lr, #257	; 0x101
  while ((pinmask  >> pinpos) != 0U)
 8001bca:	fa35 f302 	lsrs.w	r3, r5, r2
 8001bce:	d102      	bne.n	8001bd6 <LL_GPIO_Init+0x2e>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1U << pinpos)) != 0U)
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	422b      	tst	r3, r5
 8001bdc:	d063      	beq.n	8001ca6 <LL_GPIO_Init+0xfe>
      if (pinpos < GPIO_PIN_MASK_POS)
 8001bde:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8001be0:	bf83      	ittte	hi
 8001be2:	f04f 1401 	movhi.w	r4, #65537	; 0x10001
 8001be6:	f1a2 0308 	subhi.w	r3, r2, #8
 8001bea:	fa04 f303 	lslhi.w	r3, r4, r3
        currentpin = (0x00000101U << pinpos);
 8001bee:	fa0e f302 	lslls.w	r3, lr, r2
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8001bf2:	bf88      	it	hi
 8001bf4:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001bf8:	0e1e      	lsrs	r6, r3, #24
 8001bfa:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001bfe:	faba fa8a 	clz	sl, sl
 8001c02:	fa93 fba3 	rbit	fp, r3
 8001c06:	fabb fb8b 	clz	fp, fp
 8001c0a:	5984      	ldr	r4, [r0, r6]
 8001c0c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001c10:	fa09 fa0a 	lsl.w	sl, r9, sl
 8001c14:	ea24 0a0a 	bic.w	sl, r4, sl
 8001c18:	684c      	ldr	r4, [r1, #4]
 8001c1a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001c1e:	fa04 fb0b 	lsl.w	fp, r4, fp
 8001c22:	ea4a 040b 	orr.w	r4, sl, fp
 8001c26:	5184      	str	r4, [r0, r6]
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001c28:	68c4      	ldr	r4, [r0, #12]
 8001c2a:	ea4f 2a13 	mov.w	sl, r3, lsr #8
 8001c2e:	fa9a fbaa 	rbit	fp, sl
 8001c32:	fabb fb8b 	clz	fp, fp
 8001c36:	ea24 0a0a 	bic.w	sl, r4, sl
 8001c3a:	690c      	ldr	r4, [r1, #16]
 8001c3c:	fa04 f40b 	lsl.w	r4, r4, fp
 8001c40:	ea4a 0404 	orr.w	r4, sl, r4
 8001c44:	60c4      	str	r4, [r0, #12]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c46:	684c      	ldr	r4, [r1, #4]
 8001c48:	f024 0408 	bic.w	r4, r4, #8
 8001c4c:	2c01      	cmp	r4, #1
 8001c4e:	d12a      	bne.n	8001ca6 <LL_GPIO_Init+0xfe>
 8001c50:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001c54:	faba fa8a 	clz	sl, sl
 8001c58:	fa93 f4a3 	rbit	r4, r3
 8001c5c:	fab4 f484 	clz	r4, r4
 8001c60:	5987      	ldr	r7, [r0, r6]
 8001c62:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8001c66:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001c6a:	688c      	ldr	r4, [r1, #8]
 8001c6c:	fa08 fa0a 	lsl.w	sl, r8, sl
 8001c70:	ea27 0a0a 	bic.w	sl, r7, sl
 8001c74:	fa04 f40b 	lsl.w	r4, r4, fp
 8001c78:	ea4a 0404 	orr.w	r4, sl, r4
 8001c7c:	5184      	str	r4, [r0, r6]
 8001c7e:	fa93 fba3 	rbit	fp, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001c82:	fabb fb8b 	clz	fp, fp
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	68cf      	ldr	r7, [r1, #12]
 8001c90:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001c94:	fa0c fb0b 	lsl.w	fp, ip, fp
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	ea24 040b 	bic.w	r4, r4, fp
 8001c9e:	fa07 f303 	lsl.w	r3, r7, r3
 8001ca2:	431c      	orrs	r4, r3
 8001ca4:	5184      	str	r4, [r0, r6]
    pinpos++;
 8001ca6:	3201      	adds	r2, #1
 8001ca8:	e78f      	b.n	8001bca <LL_GPIO_Init+0x22>
	...

08001cac <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <RCC_GetHCLKClockFreq+0x14>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001cb8:	40d8      	lsrs	r0, r3
 8001cba:	4770      	bx	lr
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	0800980c 	.word	0x0800980c

08001cc4 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <RCC_GetPCLK1ClockFreq+0x14>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
}
 8001cd0:	40d8      	lsrs	r0, r3
 8001cd2:	4770      	bx	lr
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	0800981c 	.word	0x0800981c

08001cdc <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <RCC_GetPCLK2ClockFreq+0x14>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001ce6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ce8:	40d8      	lsrs	r0, r3
 8001cea:	4770      	bx	lr
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	0800981c 	.word	0x0800981c

08001cf4 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <RCC_PLL_GetFreqDomain_SYS+0x28>)
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8001cfc:	b162      	cbz	r2, 8001d18 <RCC_PLL_GetFreqDomain_SYS+0x24>
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001cfe:	6858      	ldr	r0, [r3, #4]
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001d00:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8001d02:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001d06:	3001      	adds	r0, #1
 8001d08:	fbb2 f0f0 	udiv	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001d0c:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001d0e:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8001d12:	3302      	adds	r3, #2
}
 8001d14:	4358      	muls	r0, r3
 8001d16:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8001d1a:	e7f7      	b.n	8001d0c <RCC_PLL_GetFreqDomain_SYS+0x18>
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	007a1200 	.word	0x007a1200
 8001d24:	003d0900 	.word	0x003d0900

08001d28 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <RCC_GetSystemClockFreq+0x14>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d101      	bne.n	8001d38 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001d34:	f7ff bfde 	b.w	8001cf4 <RCC_PLL_GetFreqDomain_SYS>
}
 8001d38:	4801      	ldr	r0, [pc, #4]	; (8001d40 <RCC_GetSystemClockFreq+0x18>)
 8001d3a:	4770      	bx	lr
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	007a1200 	.word	0x007a1200

08001d44 <LL_RCC_GetSystemClocksFreq>:
{
 8001d44:	b508      	push	{r3, lr}
 8001d46:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001d48:	f7ff ffee 	bl	8001d28 <RCC_GetSystemClockFreq>
 8001d4c:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001d4e:	f7ff ffad 	bl	8001cac <RCC_GetHCLKClockFreq>
 8001d52:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001d54:	f7ff ffb6 	bl	8001cc4 <RCC_GetPCLK1ClockFreq>
 8001d58:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001d5a:	6848      	ldr	r0, [r1, #4]
 8001d5c:	f7ff ffbe 	bl	8001cdc <RCC_GetPCLK2ClockFreq>
 8001d60:	60c8      	str	r0, [r1, #12]
 8001d62:	bd08      	pop	{r3, pc}

08001d64 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d64:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <LL_TIM_Init+0x6c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001d66:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d68:	4290      	cmp	r0, r2
 8001d6a:	d00a      	beq.n	8001d82 <LL_TIM_Init+0x1e>
 8001d6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d70:	d007      	beq.n	8001d82 <LL_TIM_Init+0x1e>
 8001d72:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d76:	4290      	cmp	r0, r2
 8001d78:	d003      	beq.n	8001d82 <LL_TIM_Init+0x1e>
 8001d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d7e:	4290      	cmp	r0, r2
 8001d80:	d115      	bne.n	8001dae <LL_TIM_Init+0x4a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001d82:	684a      	ldr	r2, [r1, #4]
 8001d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d88:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d8a:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <LL_TIM_Init+0x6c>)
 8001d8c:	4290      	cmp	r0, r2
 8001d8e:	d00a      	beq.n	8001da6 <LL_TIM_Init+0x42>
 8001d90:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d94:	d007      	beq.n	8001da6 <LL_TIM_Init+0x42>
 8001d96:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d9a:	4290      	cmp	r0, r2
 8001d9c:	d003      	beq.n	8001da6 <LL_TIM_Init+0x42>
 8001d9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001da2:	4290      	cmp	r0, r2
 8001da4:	d103      	bne.n	8001dae <LL_TIM_Init+0x4a>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001da6:	68ca      	ldr	r2, [r1, #12]
 8001da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dac:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001dae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001db0:	688b      	ldr	r3, [r1, #8]
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 8001db2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001db4:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001db6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <LL_TIM_Init+0x6c>)
 8001dba:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001dbc:	bf04      	itt	eq
 8001dbe:	7c0b      	ldrbeq	r3, [r1, #16]
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001dc0:	6303      	streq	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001dc2:	6943      	ldr	r3, [r0, #20]
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8001dca:	2001      	movs	r0, #1
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40012c00 	.word	0x40012c00

08001dd4 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8001dd4:	2910      	cmp	r1, #16
{
 8001dd6:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8001dd8:	d05f      	beq.n	8001e9a <LL_TIM_OC_Init+0xc6>
 8001dda:	d803      	bhi.n	8001de4 <LL_TIM_OC_Init+0x10>
 8001ddc:	2901      	cmp	r1, #1
 8001dde:	d02c      	beq.n	8001e3a <LL_TIM_OC_Init+0x66>
  ErrorStatus result = ERROR;
 8001de0:	2000      	movs	r0, #0
    default:
      break;
  }

  return result;
}
 8001de2:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 8001de4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001de8:	f000 8089 	beq.w	8001efe <LL_TIM_OC_Init+0x12a>
 8001dec:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001df0:	d1f6      	bne.n	8001de0 <LL_TIM_OC_Init+0xc>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001df2:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001df4:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dfa:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001dfc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001dfe:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001e00:	69c1      	ldr	r1, [r0, #28]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001e06:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8001e0a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001e0e:	6915      	ldr	r5, [r2, #16]
 8001e10:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001e14:	6855      	ldr	r5, [r2, #4]
 8001e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e1a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e1e:	4d50      	ldr	r5, [pc, #320]	; (8001f60 <LL_TIM_OC_Init+0x18c>)
 8001e20:	42a8      	cmp	r0, r5
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001e22:	bf04      	itt	eq
 8001e24:	6995      	ldreq	r5, [r2, #24]
 8001e26:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001e2a:	68d2      	ldr	r2, [r2, #12]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001e2c:	bf08      	it	eq
 8001e2e:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001e32:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001e34:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001e36:	6402      	str	r2, [r0, #64]	; 0x40
 8001e38:	e02c      	b.n	8001e94 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001e3a:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001e3c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001e44:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e46:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e48:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001e4a:	f023 0302 	bic.w	r3, r3, #2
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001e4e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8001e52:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001e54:	6915      	ldr	r5, [r2, #16]
 8001e56:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001e58:	6855      	ldr	r5, [r2, #4]
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e60:	4d3f      	ldr	r5, [pc, #252]	; (8001f60 <LL_TIM_OC_Init+0x18c>)
 8001e62:	42a8      	cmp	r0, r5
 8001e64:	d112      	bne.n	8001e8c <LL_TIM_OC_Init+0xb8>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001e66:	6955      	ldr	r5, [r2, #20]
 8001e68:	f023 0308 	bic.w	r3, r3, #8
 8001e6c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001e70:	6895      	ldr	r5, [r2, #8]
 8001e72:	f023 0304 	bic.w	r3, r3, #4
 8001e76:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001e7a:	6995      	ldr	r5, [r2, #24]
 8001e7c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001e80:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001e82:	69d5      	ldr	r5, [r2, #28]
 8001e84:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8001e88:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001e8c:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001e8e:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001e90:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001e92:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e94:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001e96:	2001      	movs	r0, #1
      break;
 8001e98:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001e9a:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001e9c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001e9e:	f023 0310 	bic.w	r3, r3, #16
 8001ea2:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001ea4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001ea6:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001ea8:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001eaa:	f023 0320 	bic.w	r3, r3, #32
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001eae:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8001eb2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001eb6:	6915      	ldr	r5, [r2, #16]
 8001eb8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001ebc:	6855      	ldr	r5, [r2, #4]
 8001ebe:	f023 0310 	bic.w	r3, r3, #16
 8001ec2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ec6:	4d26      	ldr	r5, [pc, #152]	; (8001f60 <LL_TIM_OC_Init+0x18c>)
 8001ec8:	42a8      	cmp	r0, r5
 8001eca:	d113      	bne.n	8001ef4 <LL_TIM_OC_Init+0x120>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001ecc:	6955      	ldr	r5, [r2, #20]
 8001ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ed2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001ed6:	6895      	ldr	r5, [r2, #8]
 8001ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001edc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001ee0:	6995      	ldr	r5, [r2, #24]
 8001ee2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001ee6:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001eea:	69d5      	ldr	r5, [r2, #28]
 8001eec:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8001ef0:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001ef4:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ef6:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001ef8:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001efa:	6382      	str	r2, [r0, #56]	; 0x38
 8001efc:	e7ca      	b.n	8001e94 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001efe:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001f00:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001f02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f06:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001f08:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f0a:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001f0c:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001f0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001f12:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8001f16:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001f18:	6915      	ldr	r5, [r2, #16]
 8001f1a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001f1e:	6855      	ldr	r5, [r2, #4]
 8001f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f24:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f28:	4d0d      	ldr	r5, [pc, #52]	; (8001f60 <LL_TIM_OC_Init+0x18c>)
 8001f2a:	42a8      	cmp	r0, r5
 8001f2c:	d113      	bne.n	8001f56 <LL_TIM_OC_Init+0x182>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001f2e:	6955      	ldr	r5, [r2, #20]
 8001f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f34:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001f38:	6895      	ldr	r5, [r2, #8]
 8001f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f3e:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001f42:	6995      	ldr	r5, [r2, #24]
 8001f44:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001f48:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001f4c:	69d5      	ldr	r5, [r2, #28]
 8001f4e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8001f52:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001f56:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f58:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001f5a:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001f5c:	63c2      	str	r2, [r0, #60]	; 0x3c
 8001f5e:	e799      	b.n	8001e94 <LL_TIM_OC_Init+0xc0>
 8001f60:	40012c00 	.word	0x40012c00

08001f64 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8001f64:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8001f66:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8001f68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8001f6a:	684a      	ldr	r2, [r1, #4]
 8001f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f70:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8001f72:	680a      	ldr	r2, [r1, #0]
 8001f74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8001f7a:	89ca      	ldrh	r2, [r1, #14]
 8001f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8001f82:	690a      	ldr	r2, [r1, #16]
 8001f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001f8a:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001f8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f90:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8001f92:	6443      	str	r3, [r0, #68]	; 0x44
}
 8001f94:	2001      	movs	r0, #1
 8001f96:	4770      	bx	lr

08001f98 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001f98:	b530      	push	{r4, r5, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001f9a:	68c3      	ldr	r3, [r0, #12]
 8001f9c:	b085      	sub	sp, #20
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001f9e:	049b      	lsls	r3, r3, #18
{
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001fa4:	d502      	bpl.n	8001fac <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 8001fa6:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8001fa8:	b005      	add	sp, #20
 8001faa:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8001fac:	684b      	ldr	r3, [r1, #4]
 8001fae:	68c9      	ldr	r1, [r1, #12]
 8001fb0:	68c2      	ldr	r2, [r0, #12]
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	6929      	ldr	r1, [r5, #16]
 8001fb6:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	f022 020c 	bic.w	r2, r2, #12
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60c3      	str	r3, [r0, #12]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001fc4:	6903      	ldr	r3, [r0, #16]
 8001fc6:	68aa      	ldr	r2, [r5, #8]
 8001fc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	6103      	str	r3, [r0, #16]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001fd0:	6943      	ldr	r3, [r0, #20]
 8001fd2:	696a      	ldr	r2, [r5, #20]
 8001fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001fdc:	4668      	mov	r0, sp
 8001fde:	f7ff feb1 	bl	8001d44 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <LL_USART_Init+0x98>)
 8001fe4:	429c      	cmp	r4, r3
 8001fe6:	d119      	bne.n	800201c <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001fe8:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001fea:	2900      	cmp	r1, #0
 8001fec:	d0db      	beq.n	8001fa6 <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8001fee:	682a      	ldr	r2, [r5, #0]
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	d0d8      	beq.n	8001fa6 <LL_USART_Init+0xe>
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001ff4:	2319      	movs	r3, #25
 8001ff6:	434b      	muls	r3, r1
 8001ff8:	0092      	lsls	r2, r2, #2
 8001ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ffe:	2264      	movs	r2, #100	; 0x64
 8002000:	fbb3 f1f2 	udiv	r1, r3, r2
 8002004:	fb02 3311 	mls	r3, r2, r1, r3
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	3332      	adds	r3, #50	; 0x32
 800200c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002010:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002014:	b29b      	uxth	r3, r3
 8002016:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8002018:	2001      	movs	r0, #1
 800201a:	e7c5      	b.n	8001fa8 <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <LL_USART_Init+0x9c>)
 800201e:	429c      	cmp	r4, r3
 8002020:	d101      	bne.n	8002026 <LL_USART_Init+0x8e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002022:	9902      	ldr	r1, [sp, #8]
 8002024:	e7e1      	b.n	8001fea <LL_USART_Init+0x52>
    else if (USARTx == USART3)
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <LL_USART_Init+0xa0>)
 8002028:	429c      	cmp	r4, r3
 800202a:	d1bc      	bne.n	8001fa6 <LL_USART_Init+0xe>
 800202c:	e7f9      	b.n	8002022 <LL_USART_Init+0x8a>
 800202e:	bf00      	nop
 8002030:	40013800 	.word	0x40013800
 8002034:	40004400 	.word	0x40004400
 8002038:	40004800 	.word	0x40004800

0800203c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	2210      	movs	r2, #16
{
 800203e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002042:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	eb0d 0002 	add.w	r0, sp, r2
 8002048:	2100      	movs	r1, #0
 800204a:	f005 fc62 	bl	8007912 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	4b44      	ldr	r3, [pc, #272]	; (8002160 <MX_GPIO_Init+0x124>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COOL_FLOOD_Pin|COOL_MIST_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8002050:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800216c <MX_GPIO_Init+0x130>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002054:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_X_Pin|STEP_X_Pin|STEP_Z_Pin|DIR_C_Pin 
 8002056:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8002170 <MX_GPIO_Init+0x134>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205a:	f042 0210 	orr.w	r2, r2, #16
 800205e:	619a      	str	r2, [r3, #24]
 8002060:	699a      	ldr	r2, [r3, #24]
                          |DIR_Y_Pin|DIR_Z_Pin|DIR_A_Pin|DIR_B_Pin 
                          |STEP_C_Pin|STEP_A_Pin|STEP_B_Pin|STEP_Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AUX_1_Pin|SPIN_DIR_Pin|SPIN_EN_Pin, GPIO_PIN_RESET);
 8002062:	4f40      	ldr	r7, [pc, #256]	; (8002164 <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002064:	f002 0210 	and.w	r2, r2, #16
 8002068:	9200      	str	r2, [sp, #0]
 800206a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800206c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, COOL_FLOOD_Pin|COOL_MIST_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800206e:	4648      	mov	r0, r9
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	619a      	str	r2, [r3, #24]
 8002076:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, COOL_FLOOD_Pin|COOL_MIST_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8002078:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800207c:	f002 0220 	and.w	r2, r2, #32
 8002080:	9201      	str	r2, [sp, #4]
 8002082:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = COOL_FLOOD_Pin|COOL_MIST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002086:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002088:	f042 0204 	orr.w	r2, r2, #4
 800208c:	619a      	str	r2, [r3, #24]
 800208e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002090:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	f002 0204 	and.w	r2, r2, #4
 8002096:	9202      	str	r2, [sp, #8]
 8002098:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800209c:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a0:	f042 0208 	orr.w	r2, r2, #8
 80020a4:	619a      	str	r2, [r3, #24]
 80020a6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, COOL_FLOOD_Pin|COOL_MIST_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	9303      	str	r3, [sp, #12]
 80020b0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, COOL_FLOOD_Pin|COOL_MIST_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80020b2:	f7ff faed 	bl	8001690 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIR_X_Pin|STEP_X_Pin|STEP_Z_Pin|DIR_C_Pin 
 80020b6:	4640      	mov	r0, r8
 80020b8:	2200      	movs	r2, #0
 80020ba:	f641 61ff 	movw	r1, #7935	; 0x1eff
 80020be:	f7ff fae7 	bl	8001690 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, AUX_1_Pin|SPIN_DIR_Pin|SPIN_EN_Pin, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	4638      	mov	r0, r7
 80020c6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80020ca:	f7ff fae1 	bl	8001690 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = COOL_FLOOD_Pin|COOL_MIST_Pin;
 80020ce:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEP_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = STEP_ENABLE_Pin;
 80020d4:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d8:	a904      	add	r1, sp, #16
 80020da:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = COOL_FLOOD_Pin|COOL_MIST_Pin;
 80020dc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020e0:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e4:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e6:	f7ff f9f3 	bl	80014d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(STEP_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80020ea:	a904      	add	r1, sp, #16
 80020ec:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = STEP_ENABLE_Pin;
 80020ee:	f8cd b010 	str.w	fp, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f6:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(STEP_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f7ff f9ea 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIR_X_Pin|STEP_X_Pin|STEP_Z_Pin|DIR_C_Pin 
 80020fc:	f641 63ff 	movw	r3, #7935	; 0x1eff
                          |DIR_Y_Pin|DIR_Z_Pin|DIR_A_Pin|DIR_B_Pin 
                          |STEP_C_Pin|STEP_A_Pin|STEP_B_Pin|STEP_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	a904      	add	r1, sp, #16
 8002102:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = DIR_X_Pin|STEP_X_Pin|STEP_Z_Pin|DIR_C_Pin 
 8002104:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002106:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800210a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	f7ff f9e0 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CON_CYCLE_START_Pin|CON_FEED_HOLD_Pin|LIM_X_Pin|LIM_Y_Pin 
 8002110:	f64f 431b 	movw	r3, #64539	; 0xfc1b
 8002114:	9304      	str	r3, [sp, #16]
                          |LIM_Z_Pin|LIM_A_Pin|LIM_B_Pin|LIM_C_Pin 
                          |CON_RESET_Pin|CON_SAFETY_DOOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_GPIO_Init+0x12c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	a904      	add	r1, sp, #16
 800211a:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800211c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800211e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	f7ff f9d6 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PROBE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(PROBE_GPIO_Port, &GPIO_InitStruct);
 8002124:	a904      	add	r1, sp, #16
 8002126:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = PROBE_Pin;
 8002128:	f8cd b010 	str.w	fp, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800212e:	f8cd a018 	str.w	sl, [sp, #24]
  HAL_GPIO_Init(PROBE_GPIO_Port, &GPIO_InitStruct);
 8002132:	f7ff f9cd 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = AUX_1_Pin|SPIN_DIR_Pin|SPIN_EN_Pin;
 8002136:	f44f 7348 	mov.w	r3, #800	; 0x320
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	a904      	add	r1, sp, #16
 800213c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = AUX_1_Pin|SPIN_DIR_Pin|SPIN_EN_Pin;
 800213e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002140:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002144:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002146:	f7ff f9c3 	bl	80014d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800214a:	4622      	mov	r2, r4
 800214c:	4621      	mov	r1, r4
 800214e:	2028      	movs	r0, #40	; 0x28
 8002150:	f7ff f894 	bl	800127c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002154:	2028      	movs	r0, #40	; 0x28
 8002156:	f7ff f8c5 	bl	80012e4 <HAL_NVIC_EnableIRQ>

}
 800215a:	b009      	add	sp, #36	; 0x24
 800215c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	40010c00 	.word	0x40010c00
 8002168:	10210000 	.word	0x10210000
 800216c:	40011000 	.word	0x40011000
 8002170:	40010800 	.word	0x40010800

08002174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002174:	b510      	push	{r4, lr}
 8002176:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002178:	2228      	movs	r2, #40	; 0x28
 800217a:	2100      	movs	r1, #0
 800217c:	a806      	add	r0, sp, #24
 800217e:	f005 fbc8 	bl	8007912 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002182:	2100      	movs	r1, #0
 8002184:	2214      	movs	r2, #20
 8002186:	a801      	add	r0, sp, #4
 8002188:	f005 fbc3 	bl	8007912 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800218c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002190:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002192:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002194:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002196:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;//RCC_PLL_MUL12;//RCC_PLL_MUL9;
 8002198:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800219c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800219e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021a0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;//RCC_PLL_MUL12;//RCC_PLL_MUL9;
 80021a2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a4:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021a6:	f7ff fa85 	bl	80016b4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021aa:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b2:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021b4:	4621      	mov	r1, r4
 80021b6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ba:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021bc:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021be:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021c0:	f7ff fc40 	bl	8001a44 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80021c4:	b010      	add	sp, #64	; 0x40
 80021c6:	bd10      	pop	{r4, pc}

080021c8 <main>:
{
 80021c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Init();
 80021cc:	f7ff f820 	bl	8001210 <HAL_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	2400      	movs	r4, #0
  SystemClock_Config();
 80021d2:	f7ff ffcf 	bl	8002174 <SystemClock_Config>
  MX_GPIO_Init();
 80021d6:	f7ff ff31 	bl	800203c <MX_GPIO_Init>
  MX_TIM1_Init();
 80021da:	f000 f99f 	bl	800251c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80021de:	f000 fa97 	bl	8002710 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80021e2:	f000 fa15 	bl	8002610 <MX_TIM2_Init>
  MX_TIM3_Init();
 80021e6:	f000 fa53 	bl	8002690 <MX_TIM3_Init>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80021ea:	2220      	movs	r2, #32
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <main+0x124>)
{
  /* USART1_IRQn interrupt configuration */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(USART1_IRQn);
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80021ee:	4621      	mov	r1, r4
 80021f0:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f2:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <main+0x128>)
 80021f4:	2006      	movs	r0, #6
 80021f6:	f883 4325 	strb.w	r4, [r3, #805]	; 0x325
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	4622      	mov	r2, r4
 80021fe:	f7ff f83d 	bl	800127c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002202:	2006      	movs	r0, #6
 8002204:	f7ff f86e 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002208:	4622      	mov	r2, r4
 800220a:	4621      	mov	r1, r4
 800220c:	2007      	movs	r0, #7
 800220e:	f7ff f835 	bl	800127c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002212:	2007      	movs	r0, #7
 8002214:	f7ff f866 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002218:	4622      	mov	r2, r4
 800221a:	4621      	mov	r1, r4
 800221c:	2009      	movs	r0, #9
 800221e:	f7ff f82d 	bl	800127c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002222:	2009      	movs	r0, #9
 8002224:	f7ff f85e 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002228:	4622      	mov	r2, r4
 800222a:	4621      	mov	r1, r4
 800222c:	200a      	movs	r0, #10
 800222e:	f7ff f825 	bl	800127c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002232:	200a      	movs	r0, #10
 8002234:	f7ff f856 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  timing_init();
 8002238:	f005 fae0 	bl	80077fc <timing_init>
  uart_init();
 800223c:	f005 fb0a 	bl	8007854 <uart_init>
  eeprom_init();
 8002240:	f000 fb52 	bl	80028e8 <eeprom_init>
  serial_init();   // Setup serial baud rate and interrupts
 8002244:	f003 fdaa 	bl	8005d9c <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 8002248:	f004 f8a6 	bl	8006398 <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 800224c:	f004 fc00 	bl	8006a50 <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 8002250:	f004 ffea 	bl	8007228 <system_init>
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8002254:	2218      	movs	r2, #24
 8002256:	4621      	mov	r1, r4
 8002258:	4826      	ldr	r0, [pc, #152]	; (80022f4 <main+0x12c>)
 800225a:	f005 fb5a 	bl	8007912 <memset>
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 800225e:	4a26      	ldr	r2, [pc, #152]	; (80022f8 <main+0x130>)
    sys.state = STATE_IDLE;
 8002260:	4b26      	ldr	r3, [pc, #152]	; (80022fc <main+0x134>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8002262:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    sys.state = STATE_IDLE;
 8002266:	701c      	strb	r4, [r3, #0]
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8002268:	f012 0f10 	tst.w	r2, #16
 800226c:	461c      	mov	r4, r3
 800226e:	bf18      	it	ne
 8002270:	2301      	movne	r3, #1
	memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8002272:	f04f 0500 	mov.w	r5, #0
 8002276:	4f21      	ldr	r7, [pc, #132]	; (80022fc <main+0x134>)
		memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8002278:	4e21      	ldr	r6, [pc, #132]	; (8002300 <main+0x138>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 800227a:	bf18      	it	ne
 800227c:	7023      	strbne	r3, [r4, #0]
	memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800227e:	2214      	movs	r2, #20
 8002280:	2100      	movs	r1, #0
 8002282:	4638      	mov	r0, r7
	uint8_t prior_state = sys.state;
 8002284:	f894 8000 	ldrb.w	r8, [r4]
	memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8002288:	f005 fb43 	bl	8007912 <memset>
	sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 800228c:	2364      	movs	r3, #100	; 0x64
		memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 800228e:	2218      	movs	r2, #24
 8002290:	2100      	movs	r1, #0
 8002292:	4630      	mov	r0, r6
	sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8002294:	7223      	strb	r3, [r4, #8]
	sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 8002296:	7263      	strb	r3, [r4, #9]
	sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 8002298:	72a3      	strb	r3, [r4, #10]
	sys.state = prior_state;
 800229a:	f884 8000 	strb.w	r8, [r4]
		memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 800229e:	f005 fb38 	bl	8007912 <memset>
	sys_probe_state = 0;
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <main+0x13c>)
 80022a4:	701d      	strb	r5, [r3, #0]
	sys_rt_exec_state = 0;
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <main+0x140>)
 80022a8:	701d      	strb	r5, [r3, #0]
	sys_rt_exec_alarm = 0;
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <main+0x144>)
 80022ac:	701d      	strb	r5, [r3, #0]
	sys_rt_exec_motion_override = 0;
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <main+0x148>)
 80022b0:	701d      	strb	r5, [r3, #0]
	sys_rt_exec_accessory_override = 0;
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <main+0x14c>)
 80022b4:	701d      	strb	r5, [r3, #0]
	serial_reset_read_buffer(); // Clear serial read buffer
 80022b6:	f003 fdfd 	bl	8005eb4 <serial_reset_read_buffer>
	gc_init(); // Set g-code parser to default state
 80022ba:	f000 fb77 	bl	80029ac <gc_init>
	spindle_init();
 80022be:	f004 f897 	bl	80063f0 <spindle_init>
	coolant_init();
 80022c2:	f000 fa9f 	bl	8002804 <coolant_init>
	limits_init();
 80022c6:	f001 fbc3 	bl	8003a50 <limits_init>
	probe_init();
 80022ca:	f002 fd8b 	bl	8004de4 <probe_init>
	inoutputs_init();
 80022ce:	f005 fa53 	bl	8007778 <inoutputs_init>
	plan_reset(); // Clear block buffer and planner variables
 80022d2:	f002 fa07 	bl	80046e4 <plan_reset>
	st_reset(); // Clear stepper subsystem variables.
 80022d6:	f004 fb6f 	bl	80069b8 <st_reset>
	plan_sync_position();
 80022da:	f002 fc7d 	bl	8004bd8 <plan_sync_position>
	gc_sync_position();
 80022de:	f000 fb7b 	bl	80029d8 <gc_sync_position>
	report_init_message();
 80022e2:	f003 f99f 	bl	8005624 <report_init_message>
	protocol_main_loop();
 80022e6:	f003 f849 	bl	800537c <protocol_main_loop>
 80022ea:	e7c8      	b.n	800227e <main+0xb6>
 80022ec:	e000ed00 	.word	0xe000ed00
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	20003904 	.word	0x20003904
 80022f8:	20003f70 	.word	0x20003f70
 80022fc:	200038d4 	.word	0x200038d4
 8002300:	200038ec 	.word	0x200038ec
 8002304:	200038ea 	.word	0x200038ea
 8002308:	200038e9 	.word	0x200038e9
 800230c:	2000391c 	.word	0x2000391c
 8002310:	200038d0 	.word	0x200038d0
 8002314:	200038e8 	.word	0x200038e8

08002318 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <HAL_MspInit+0x3c>)
{
 800231a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	619a      	str	r2, [r3, #24]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	f002 0201 	and.w	r2, r2, #1
 800232a:	9200      	str	r2, [sp, #0]
 800232c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002334:	61da      	str	r2, [r3, #28]
 8002336:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002342:	6853      	ldr	r3, [r2, #4]
 8002344:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002348:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800234c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	b002      	add	sp, #8
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	40010000 	.word	0x40010000

0800235c <NMI_Handler>:
 800235c:	4770      	bx	lr

0800235e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235e:	e7fe      	b.n	800235e <HardFault_Handler>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	e7fe      	b.n	8002360 <MemManage_Handler>

08002362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002362:	e7fe      	b.n	8002362 <BusFault_Handler>

08002364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002364:	e7fe      	b.n	8002364 <UsageFault_Handler>

08002366 <SVC_Handler>:
 8002366:	4770      	bx	lr

08002368 <DebugMon_Handler>:
 8002368:	4770      	bx	lr

0800236a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236a:	4770      	bx	lr

0800236c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800236c:	f7fe bf62 	b.w	8001234 <HAL_IncTick>

08002370 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002370:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff f992 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  HandleControlIT(GPIO_PIN_0);
 8002378:	2001      	movs	r0, #1
 800237a:	f004 ff6f 	bl	800725c <HandleControlIT>
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	4b01      	ldr	r3, [pc, #4]	; (8002388 <EXTI0_IRQHandler+0x18>)
 8002382:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8002386:	bd08      	pop	{r3, pc}
 8002388:	e000e100 	.word	0xe000e100

0800238c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800238c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800238e:	2002      	movs	r0, #2
 8002390:	f7ff f984 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  HandleControlIT(GPIO_PIN_1);
 8002394:	2002      	movs	r0, #2
 8002396:	f004 ff61 	bl	800725c <HandleControlIT>
 800239a:	2280      	movs	r2, #128	; 0x80
 800239c:	4b01      	ldr	r3, [pc, #4]	; (80023a4 <EXTI1_IRQHandler+0x18>)
 800239e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 80023a2:	bd08      	pop	{r3, pc}
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80023a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80023aa:	2008      	movs	r0, #8
 80023ac:	f7ff f976 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HandleControlIT(GPIO_PIN_3);
 80023b0:	2008      	movs	r0, #8
 80023b2:	f004 ff53 	bl	800725c <HandleControlIT>
 80023b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ba:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <EXTI3_IRQHandler+0x1c>)
 80023bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 80023c0:	bd08      	pop	{r3, pc}
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100

080023c8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80023c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80023ca:	2010      	movs	r0, #16
 80023cc:	f7ff f966 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  HandleControlIT(GPIO_PIN_4);
 80023d0:	2010      	movs	r0, #16
 80023d2:	f004 ff43 	bl	800725c <HandleControlIT>
 80023d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023da:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <EXTI4_IRQHandler+0x1c>)
 80023dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 80023e0:	bd08      	pop	{r3, pc}
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <TIM2_IRQHandler>:
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if ((TIM2->SR & 0x0001) != 0)                  // check interrupt source
 80023e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	07d2      	lsls	r2, r2, #31
 80023f0:	d507      	bpl.n	8002402 <TIM2_IRQHandler+0x1a>
  {
	TIM2->SR &= ~(1 << 0);                          // clear UIF flag
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	611a      	str	r2, [r3, #16]
	TIM2->CNT = 0;
 80023fa:	2200      	movs	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
	HandleStepSetIT();
 80023fe:	f004 b949 	b.w	8006694 <HandleStepSetIT>
 8002402:	4770      	bx	lr

08002404 <TIM3_IRQHandler>:
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if ((TIM3->SR & 0x0001) != 0)                  // check interrupt source
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <TIM3_IRQHandler+0x24>)
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	07d2      	lsls	r2, r2, #31
 800240a:	d50c      	bpl.n	8002426 <TIM3_IRQHandler+0x22>
  {
	TIM3->SR &= ~(1<<0);                          // clear UIF flag
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	611a      	str	r2, [r3, #16]
	TIM3->CNT = 0;
 8002414:	2200      	movs	r2, #0
 8002416:	625a      	str	r2, [r3, #36]	; 0x24
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002418:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <TIM3_IRQHandler+0x28>)
 800241e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	NVIC_DisableIRQ(TIM3_IRQn);
	HandleStepResetIT();
 8002422:	f004 ba77 	b.w	8006914 <HandleStepResetIT>
 8002426:	4770      	bx	lr
 8002428:	40000400 	.word	0x40000400
 800242c:	e000e100 	.word	0xe000e100

08002430 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002430:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002432:	4c06      	ldr	r4, [pc, #24]	; (800244c <USART1_IRQHandler+0x1c>)
 8002434:	68e3      	ldr	r3, [r4, #12]
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	uint8_t data;
	if (LL_USART_IsEnabledIT_RXNE(USART1))
 8002436:	069b      	lsls	r3, r3, #26
 8002438:	d506      	bpl.n	8002448 <USART1_IRQHandler+0x18>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800243a:	6860      	ldr	r0, [r4, #4]
	{
		data = LL_USART_ReceiveData8(USART1);
		HandleUartIT(data);
 800243c:	b2c0      	uxtb	r0, r0
 800243e:	f003 fcc9 	bl	8005dd4 <HandleUartIT>
  WRITE_REG(USARTx->SR , ~(USART_SR_RXNE));
 8002442:	f06f 0320 	mvn.w	r3, #32
 8002446:	6023      	str	r3, [r4, #0]
 8002448:	bd10      	pop	{r4, pc}
 800244a:	bf00      	nop
 800244c:	40013800 	.word	0x40013800

08002450 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002450:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002452:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002456:	f7ff f921 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800245a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800245e:	f7ff f91d 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002462:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002466:	f7ff f919 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800246a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800246e:	f7ff f915 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002472:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002476:	f7ff f911 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800247a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800247e:	f7ff f90d 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002486:	4b03      	ldr	r3, [pc, #12]	; (8002494 <EXTI15_10_IRQHandler+0x44>)
 8002488:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
//  pinmask = LL_GPIO_ReadInputPort(GPIOB); //-- debugging
  HandleLimitIT();

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800248c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HandleLimitIT();
 8002490:	f001 bb1c 	b.w	8003acc <HandleLimitIT>
 8002494:	e000e100 	.word	0xe000e100

08002498 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002498:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <_sbrk+0x2c>)
{
 800249c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800249e:	6819      	ldr	r1, [r3, #0]
 80024a0:	b909      	cbnz	r1, 80024a6 <_sbrk+0xe>
		heap_end = &end;
 80024a2:	4909      	ldr	r1, [pc, #36]	; (80024c8 <_sbrk+0x30>)
 80024a4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80024a6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80024a8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80024aa:	4402      	add	r2, r0
 80024ac:	428a      	cmp	r2, r1
 80024ae:	d906      	bls.n	80024be <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80024b0:	f005 f9f6 	bl	80078a0 <__errno>
 80024b4:	230c      	movs	r3, #12
 80024b6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80024be:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80024c0:	bd08      	pop	{r3, pc}
 80024c2:	bf00      	nop
 80024c4:	20000094 	.word	0x20000094
 80024c8:	200040a8 	.word	0x200040a8

080024cc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <SystemInit+0x40>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <SystemInit+0x44>)
 80024da:	400a      	ands	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80024e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024e8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024f0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80024f8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80024fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80024fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002500:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <SystemInit+0x48>)
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	f8ff0000 	.word	0xf8ff0000
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <NVIC_EncodePriority.constprop.2>:
}
 8002518:	2000      	movs	r0, #0
 800251a:	4770      	bx	lr

0800251c <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800251c:	b570      	push	{r4, r5, r6, lr}
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800251e:	2414      	movs	r4, #20
{
 8002520:	b09a      	sub	sp, #104	; 0x68
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002522:	4622      	mov	r2, r4
 8002524:	2100      	movs	r1, #0
 8002526:	a802      	add	r0, sp, #8
 8002528:	f005 f9f3 	bl	8007912 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800252c:	2220      	movs	r2, #32
 800252e:	2100      	movs	r1, #0
 8002530:	a812      	add	r0, sp, #72	; 0x48
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002532:	4e33      	ldr	r6, [pc, #204]	; (8002600 <MX_TIM1_Init+0xe4>)
 8002534:	f005 f9ed 	bl	8007912 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002538:	2218      	movs	r2, #24
 800253a:	2100      	movs	r1, #0
 800253c:	a80c      	add	r0, sp, #48	; 0x30
 800253e:	f005 f9e8 	bl	8007912 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002542:	4622      	mov	r2, r4
 8002544:	2100      	movs	r1, #0
 8002546:	a807      	add	r0, sp, #28
 8002548:	f005 f9e3 	bl	8007912 <memset>
 800254c:	69b3      	ldr	r3, [r6, #24]
  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 7199;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct.RepetitionCounter = 0;
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800254e:	4d2d      	ldr	r5, [pc, #180]	; (8002604 <MX_TIM1_Init+0xe8>)
 8002550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002554:	61b3      	str	r3, [r6, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002556:	69b3      	ldr	r3, [r6, #24]
 8002558:	a902      	add	r1, sp, #8
 800255a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800255e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002560:	9b01      	ldr	r3, [sp, #4]
  TIM_InitStruct.Autoreload = 7199;
 8002562:	f641 431f 	movw	r3, #7199	; 0x1c1f
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002566:	4628      	mov	r0, r5
  TIM_InitStruct.Autoreload = 7199;
 8002568:	9304      	str	r3, [sp, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800256a:	f7ff fbfb 	bl	8001d64 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800256e:	682b      	ldr	r3, [r5, #0]
  LL_TIM_DisableARRPreload(TIM1);
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002570:	2400      	movs	r4, #0
 8002572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002576:	602b      	str	r3, [r5, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002578:	69ab      	ldr	r3, [r5, #24]
  TIM_OC_InitStruct.CompareValue = 0;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800257a:	aa12      	add	r2, sp, #72	; 0x48
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	61ab      	str	r3, [r5, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002582:	2360      	movs	r3, #96	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002584:	2101      	movs	r1, #1
 8002586:	4628      	mov	r0, r5
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002588:	9312      	str	r3, [sp, #72]	; 0x48
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800258a:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800258c:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_OC_InitStruct.CompareValue = 0;
 800258e:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002590:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002592:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002594:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002596:	9419      	str	r4, [sp, #100]	; 0x64
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002598:	f7ff fc1c 	bl	8001dd4 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800259c:	69ab      	ldr	r3, [r5, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
  TIM_BDTRInitStruct.DeadTime = 0;
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800259e:	a90c      	add	r1, sp, #48	; 0x30
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	61ab      	str	r3, [r5, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80025a6:	686b      	ldr	r3, [r5, #4]
 80025a8:	4628      	mov	r0, r5
 80025aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ae:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80025b0:	68ab      	ldr	r3, [r5, #8]
 80025b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b6:	60ab      	str	r3, [r5, #8]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80025b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80025bc:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80025be:	9310      	str	r3, [sp, #64]	; 0x40
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80025c0:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80025c2:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_BDTRInitStruct.DeadTime = 0;
 80025c4:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80025c8:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80025cc:	9411      	str	r4, [sp, #68]	; 0x44
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80025ce:	f7ff fcc9 	bl	8001f64 <LL_TIM_BDTR_Init>
  SET_BIT(RCC->APB2ENR, Periphs);
 80025d2:	69b3      	ldr	r3, [r6, #24]
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d4:	a907      	add	r1, sp, #28
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	61b3      	str	r3, [r6, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80025dc:	69b3      	ldr	r3, [r6, #24]
 80025de:	480a      	ldr	r0, [pc, #40]	; (8002608 <MX_TIM1_Init+0xec>)
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80025e6:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <MX_TIM1_Init+0xf0>)
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025ea:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80025ec:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025ee:	2309      	movs	r3, #9
 80025f0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80025f2:	2302      	movs	r3, #2
 80025f4:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f7ff fad7 	bl	8001ba8 <LL_GPIO_Init>

}
 80025fa:	b01a      	add	sp, #104	; 0x68
 80025fc:	bd70      	pop	{r4, r5, r6, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40010800 	.word	0x40010800
 800260c:	04010001 	.word	0x04010001

08002610 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002610:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002612:	2100      	movs	r1, #0
 8002614:	2214      	movs	r2, #20
 8002616:	a801      	add	r0, sp, #4
 8002618:	f005 f97b 	bl	8007912 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <MX_TIM2_Init+0x74>)
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800262e:	9b00      	ldr	r3, [sp, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002630:	4b15      	ldr	r3, [pc, #84]	; (8002688 <MX_TIM2_Init+0x78>)
 8002632:	68d8      	ldr	r0, [r3, #12]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002634:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002638:	f7ff ff6e 	bl	8002518 <NVIC_EncodePriority.constprop.2>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800263c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <MX_TIM2_Init+0x7c>)
 8002642:	0100      	lsls	r0, r0, #4
 8002644:	b2c0      	uxtb	r0, r0
 8002646:	f883 031c 	strb.w	r0, [r3, #796]	; 0x31c

  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 0;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800264a:	a901      	add	r1, sp, #4
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002652:	f7ff fb87 	bl	8001d64 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002660:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002668:	f022 0207 	bic.w	r2, r2, #7
 800266c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002674:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800267c:	609a      	str	r2, [r3, #8]
  LL_TIM_DisableARRPreload(TIM2);
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM2);

}
 800267e:	b007      	add	sp, #28
 8002680:	f85d fb04 	ldr.w	pc, [sp], #4
 8002684:	40021000 	.word	0x40021000
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	e000e100 	.word	0xe000e100

08002690 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002690:	b510      	push	{r4, lr}
 8002692:	b086      	sub	sp, #24
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002694:	2100      	movs	r1, #0
 8002696:	2214      	movs	r2, #20
 8002698:	a801      	add	r0, sp, #4
 800269a:	f005 f93a 	bl	8007912 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <MX_TIM3_Init+0x70>)

  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 0;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80026a0:	4c18      	ldr	r4, [pc, #96]	; (8002704 <MX_TIM3_Init+0x74>)
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	f042 0202 	orr.w	r2, r2, #2
 80026a8:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80026b2:	9b00      	ldr	r3, [sp, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <MX_TIM3_Init+0x78>)
 80026b6:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80026b8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80026bc:	f7ff ff2c 	bl	8002518 <NVIC_EncodePriority.constprop.2>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <MX_TIM3_Init+0x7c>)
 80026c6:	0100      	lsls	r0, r0, #4
 80026c8:	b2c0      	uxtb	r0, r0
 80026ca:	f883 031d 	strb.w	r0, [r3, #797]	; 0x31d
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80026ce:	a901      	add	r1, sp, #4
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff fb46 	bl	8001d64 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026de:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80026e0:	68a3      	ldr	r3, [r4, #8]
 80026e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026e6:	f023 0307 	bic.w	r3, r3, #7
 80026ea:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80026ec:	6863      	ldr	r3, [r4, #4]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80026f4:	68a3      	ldr	r3, [r4, #8]
 80026f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026fa:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM3);

}
 80026fc:	b006      	add	sp, #24
 80026fe:	bd10      	pop	{r4, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	40000400 	.word	0x40000400
 8002708:	e000ed00 	.word	0xe000ed00
 800270c:	e000e100 	.word	0xe000e100

08002710 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002710:	b510      	push	{r4, lr}
 8002712:	b08e      	sub	sp, #56	; 0x38
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002714:	2218      	movs	r2, #24
 8002716:	2100      	movs	r1, #0
 8002718:	a808      	add	r0, sp, #32
 800271a:	f005 f8fa 	bl	8007912 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271e:	2214      	movs	r2, #20
 8002720:	2100      	movs	r1, #0
 8002722:	a803      	add	r0, sp, #12
 8002724:	f005 f8f5 	bl	8007912 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <MX_USART1_UART_Init+0xb0>)
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272a:	4c26      	ldr	r4, [pc, #152]	; (80027c4 <MX_USART1_UART_Init+0xb4>)
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	a903      	add	r1, sp, #12
 8002730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002734:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002736:	699a      	ldr	r2, [r3, #24]
 8002738:	4620      	mov	r0, r4
 800273a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800273e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002740:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	f042 0208 	orr.w	r2, r2, #8
 8002748:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002752:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002754:	f244 0340 	movw	r3, #16448	; 0x4040
 8002758:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800275a:	2309      	movs	r3, #9
 800275c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	9305      	str	r3, [sp, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002762:	f7ff fa21 	bl	8001ba8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002766:	f248 0380 	movw	r3, #32896	; 0x8080
 800276a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800276c:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276e:	a903      	add	r1, sp, #12
 8002770:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002772:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002774:	f7ff fa18 	bl	8001ba8 <LL_GPIO_Init>
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP);
 8002778:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <MX_USART1_UART_Init+0xb8>)
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
  LL_USART_Init(USART1, &USART_InitStruct);
 800277a:	f504 5430 	add.w	r4, r4, #11264	; 0x2c00
 800277e:	6853      	ldr	r3, [r2, #4]
 8002780:	a908      	add	r1, sp, #32
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6053      	str	r3, [r2, #4]
  USART_InitStruct.BaudRate = 921600;
 8002788:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800278c:	220c      	movs	r2, #12
  USART_InitStruct.BaudRate = 921600;
 800278e:	9308      	str	r3, [sp, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002790:	2300      	movs	r3, #0
  LL_USART_Init(USART1, &USART_InitStruct);
 8002792:	4620      	mov	r0, r4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002794:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002796:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002798:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800279a:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800279c:	920c      	str	r2, [sp, #48]	; 0x30
  LL_USART_Init(USART1, &USART_InitStruct);
 800279e:	f7ff fbfb 	bl	8001f98 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a2:	6923      	ldr	r3, [r4, #16]
 80027a4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80027a8:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80027aa:	6963      	ldr	r3, [r4, #20]
 80027ac:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80027b0:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80027b2:	68e3      	ldr	r3, [r4, #12]
 80027b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027b8:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART1);
  LL_USART_Enable(USART1);

}
 80027ba:	b00e      	add	sp, #56	; 0x38
 80027bc:	bd10      	pop	{r4, pc}
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010c00 	.word	0x40010c00
 80027c8:	40010000 	.word	0x40010000

080027cc <coolant_get_state>:
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <coolant_get_state+0x14>)
 80027ce:	68d8      	ldr	r0, [r3, #12]
 80027d0:	68db      	ldr	r3, [r3, #12]


// Returns current coolant output state. Overrides may alter it from programmed state.
uint8_t coolant_get_state()
{
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 80027d2:	f3c0 3040 	ubfx	r0, r0, #13, #1
  if (bit_istrue(GPIO_ReadOutputData(COOL_FLOOD_GPIO_Port),COOL_FLOOD_Pin))
  {
    cl_state |= COOLANT_STATE_FLOOD;
  }
  #ifdef ENABLE_M7
  if (bit_istrue(GPIO_ReadOutputData(COOL_MIST_GPIO_Port),COOL_MIST_Pin))
 80027d6:	045b      	lsls	r3, r3, #17
  {
    cl_state |= COOLANT_STATE_MIST;
 80027d8:	bf48      	it	mi
 80027da:	f040 0002 	orrmi.w	r0, r0, #2
    }
  #endif
#endif

  return(cl_state);
}
 80027de:	4770      	bx	lr
 80027e0:	40011000 	.word	0x40011000

080027e4 <coolant_stop>:


// Directly called by coolant_init(), coolant_set_state(), and mc_reset(), which can be at
// an interrupt-level. No report flag set, but only called by routines that don't need it.
void coolant_stop()
{
 80027e4:	b510      	push	{r4, lr}
  #endif //-- ENABLE_M7
*/
#ifdef INVERT_COOLANT_FLOOD_PIN
  GPIO_SetBits(COOL_FLOOD_GPIO_Port,COOL_FLOOD_Pin);
#else
  GPIO_ResetBits(COOL_FLOOD_GPIO_Port,COOL_FLOOD_Pin);
 80027e6:	4c06      	ldr	r4, [pc, #24]	; (8002800 <coolant_stop+0x1c>)
 80027e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ec:	4620      	mov	r0, r4
 80027ee:	f005 f851 	bl	8007894 <GPIO_ResetBits>
#endif
#ifdef ENABLE_M7
  #ifdef INVERT_COOLANT_MIST_PIN
    GPIO_SetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
  #else
    GPIO_ResetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
 80027f2:	4620      	mov	r0, r4
    #else
      COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
    #endif
  #endif
#endif
}
 80027f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GPIO_ResetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
 80027f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027fc:	f005 b84a 	b.w	8007894 <GPIO_ResetBits>
 8002800:	40011000 	.word	0x40011000

08002804 <coolant_init>:
  coolant_stop();
 8002804:	f7ff bfee 	b.w	80027e4 <coolant_stop>

08002808 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 8002808:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 800280a:	4c0c      	ldr	r4, [pc, #48]	; (800283c <coolant_set_state+0x34>)
{
 800280c:	4605      	mov	r5, r0
  if (sys.abort) { return; } // Block during abort.  
 800280e:	7862      	ldrb	r2, [r4, #1]
 8002810:	b922      	cbnz	r2, 800281c <coolant_set_state+0x14>

#ifdef STM32

  if (mode == COOLANT_DISABLE)
 8002812:	b920      	cbnz	r0, 800281e <coolant_set_state+0x16>
  {
    coolant_stop();
 8002814:	f7ff ffe6 	bl	80027e4 <coolant_stop>
      }
    #endif
  
  }
#endif
  sys.report_ovr_counter = 0; // Set to report change immediately
 8002818:	2300      	movs	r3, #0
 800281a:	7323      	strb	r3, [r4, #12]
 800281c:	bd38      	pop	{r3, r4, r5, pc}
    if (mode & COOLANT_FLOOD_ENABLE)
 800281e:	0642      	lsls	r2, r0, #25
 8002820:	d504      	bpl.n	800282c <coolant_set_state+0x24>
        GPIO_SetBits(COOL_FLOOD_GPIO_Port,COOL_FLOOD_Pin);
 8002822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002826:	4806      	ldr	r0, [pc, #24]	; (8002840 <coolant_set_state+0x38>)
 8002828:	f005 f837 	bl	800789a <GPIO_SetBits>
      if (mode & COOLANT_MIST_ENABLE)
 800282c:	062b      	lsls	r3, r5, #24
 800282e:	d5f3      	bpl.n	8002818 <coolant_set_state+0x10>
          GPIO_SetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
 8002830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <coolant_set_state+0x38>)
 8002836:	f005 f830 	bl	800789a <GPIO_SetBits>
 800283a:	e7ed      	b.n	8002818 <coolant_set_state+0x10>
 800283c:	200038d4 	.word	0x200038d4
 8002840:	40011000 	.word	0x40011000

08002844 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8002844:	b510      	push	{r4, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <coolant_sync+0x1c>)
{
 8002848:	4604      	mov	r4, r0
  if (sys.state == STATE_CHECK_MODE) { return; }
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d006      	beq.n	800285e <coolant_sync+0x1a>
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8002850:	f002 fe26 	bl	80054a0 <protocol_buffer_synchronize>
  coolant_set_state(mode);
 8002854:	4620      	mov	r0, r4
}
 8002856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  coolant_set_state(mode);
 800285a:	f7ff bfd5 	b.w	8002808 <coolant_set_state>
 800285e:	bd10      	pop	{r4, pc}
 8002860:	200038d4 	.word	0x200038d4

08002864 <eeprom_flush>:
#endif


#ifdef STM32
void eeprom_flush()
{
 8002864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
#endif

  while (nSize > 0)
  {
    if (*pBuffer != 0xffff)
 8002868:	f64f 76ff 	movw	r6, #65535	; 0xffff
  HAL_FLASH_Unlock();
 800286c:	f7fe fd92 	bl	8001394 <HAL_FLASH_Unlock>
  FLASH_PageErase(EEPROM_START_ADDRESS);
 8002870:	4817      	ldr	r0, [pc, #92]	; (80028d0 <eeprom_flush+0x6c>)
 8002872:	f7fe fe1b 	bl	80014ac <FLASH_PageErase>
  FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); //-- !!
 8002876:	f24c 3050 	movw	r0, #50000	; 0xc350
 800287a:	f7fe fda7 	bl	80013cc <FLASH_WaitForLastOperation>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800287e:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <eeprom_flush+0x70>)
  uint32_t nAddress = EEPROM_START_ADDRESS;
 8002880:	4d13      	ldr	r5, [pc, #76]	; (80028d0 <eeprom_flush+0x6c>)
  CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002882:	6913      	ldr	r3, [r2, #16]
    if (*pBuffer != 0xffff)
 8002884:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80028e4 <eeprom_flush+0x80>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002888:	f023 0302 	bic.w	r3, r3, #2
 800288c:	4f12      	ldr	r7, [pc, #72]	; (80028d8 <eeprom_flush+0x74>)
 800288e:	6113      	str	r3, [r2, #16]
    if (*pBuffer != 0xffff)
 8002890:	f835 2008 	ldrh.w	r2, [r5, r8]
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <eeprom_flush+0x78>)
 8002896:	42b2      	cmp	r2, r6
 8002898:	442b      	add	r3, r5
 800289a:	d016      	beq.n	80028ca <eeprom_flush+0x66>
 800289c:	18fc      	adds	r4, r7, r3
    {
      //FLASH_ProgramHalfWord(nAddress, *pBuffer++);
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, nAddress, *pBuffer++);
 800289e:	4629      	mov	r1, r5
 80028a0:	2300      	movs	r3, #0
 80028a2:	2001      	movs	r0, #1
 80028a4:	f7fe fdbc 	bl	8001420 <HAL_FLASH_Program>
 80028a8:	4623      	mov	r3, r4
    }
    else
    {
      pBuffer++;
    }
    if (*pBuffer != 0xffff)
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	42b2      	cmp	r2, r6
 80028ae:	d004      	beq.n	80028ba <eeprom_flush+0x56>
    {
    	//FLASH_Program_HalfWord(nAddress + 2, *pBuffer++);
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, nAddress+2, *pBuffer++);
 80028b0:	2300      	movs	r3, #0
 80028b2:	1ca9      	adds	r1, r5, #2
 80028b4:	2001      	movs	r0, #1
 80028b6:	f7fe fdb3 	bl	8001420 <HAL_FLASH_Program>
  while (nSize > 0)
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <eeprom_flush+0x7c>)
    else
    {
      pBuffer++;
    }
    nSize -= 4;
    nAddress += 4;
 80028bc:	3504      	adds	r5, #4
  while (nSize > 0)
 80028be:	429d      	cmp	r5, r3
 80028c0:	d1e6      	bne.n	8002890 <eeprom_flush+0x2c>
  }

  HAL_FLASH_Lock();

}
 80028c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_FLASH_Lock();
 80028c6:	f7fe bd77 	b.w	80013b8 <HAL_FLASH_Lock>
 80028ca:	443b      	add	r3, r7
 80028cc:	e7ed      	b.n	80028aa <eeprom_flush+0x46>
 80028ce:	bf00      	nop
 80028d0:	0801fc00 	.word	0x0801fc00
 80028d4:	40022000 	.word	0x40022000
 80028d8:	2000391d 	.word	0x2000391d
 80028dc:	f7fe0402 	.word	0xf7fe0402
 80028e0:	08020000 	.word	0x08020000
 80028e4:	17fe3d1d 	.word	0x17fe3d1d

080028e8 <eeprom_init>:
  uint16_t VarIdx = 0;
  uint8_t *pTmp = EE_Buffer;

  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
  {
    *pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 80028e8:	4a0c      	ldr	r2, [pc, #48]	; (800291c <eeprom_init+0x34>)
{
 80028ea:	b530      	push	{r4, r5, lr}
 80028ec:	4610      	mov	r0, r2
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <eeprom_init+0x38>)
  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 80028f0:	4c0c      	ldr	r4, [pc, #48]	; (8002924 <eeprom_init+0x3c>)
    *pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 80028f2:	781d      	ldrb	r5, [r3, #0]
 80028f4:	f103 4178 	add.w	r1, r3, #4160749568	; 0xf8000000
 80028f8:	3301      	adds	r3, #1
 80028fa:	f5a1 31fe 	sub.w	r1, r1, #130048	; 0x1fc00
  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 80028fe:	42a3      	cmp	r3, r4
    *pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8002900:	5455      	strb	r5, [r2, r1]
  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002902:	d1f6      	bne.n	80028f2 <eeprom_init+0xa>
  }

  if (EE_Buffer[0] != SETTINGS_VERSION)
 8002904:	7813      	ldrb	r3, [r2, #0]
 8002906:	2b0a      	cmp	r3, #10
 8002908:	d006      	beq.n	8002918 <eeprom_init+0x30>
 800290a:	2300      	movs	r3, #0
  {
    pTmp = EE_Buffer;

    for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
    {
      *pTmp++ = 0xFF;
 800290c:	22ff      	movs	r2, #255	; 0xff
 800290e:	54c2      	strb	r2, [r0, r3]
 8002910:	3301      	adds	r3, #1
    for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002916:	d1fa      	bne.n	800290e <eeprom_init+0x26>
 8002918:	bd30      	pop	{r4, r5, pc}
 800291a:	bf00      	nop
 800291c:	2000391d 	.word	0x2000391d
 8002920:	0801fc00 	.word	0x0801fc00
 8002924:	08020000 	.word	0x08020000

08002928 <eeprom_get_char>:
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
}
 8002928:	4b01      	ldr	r3, [pc, #4]	; (8002930 <eeprom_get_char+0x8>)
 800292a:	5c18      	ldrb	r0, [r3, r0]
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	2000391d 	.word	0x2000391d

08002934 <eeprom_put_char>:
 *  \param  new_value  New EEPROM value.
 */
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
#ifdef STM32
  EE_Buffer[addr] = new_value;
 8002934:	4b01      	ldr	r3, [pc, #4]	; (800293c <eeprom_put_char+0x8>)
 8002936:	5419      	strb	r1, [r3, r0]
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	2000391d 	.word	0x2000391d

08002940 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
 8002940:	2300      	movs	r3, #0
void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8002942:	b4f0      	push	{r4, r5, r6, r7}
 8002944:	4c0a      	ldr	r4, [pc, #40]	; (8002970 <memcpy_to_eeprom_with_checksum+0x30>)
 8002946:	1e45      	subs	r5, r0, #1
 8002948:	4425      	add	r5, r4
 800294a:	188f      	adds	r7, r1, r2
  for(; size > 0; size--) { 
 800294c:	42b9      	cmp	r1, r7
 800294e:	d104      	bne.n	800295a <memcpy_to_eeprom_with_checksum+0x1a>
  EE_Buffer[addr] = new_value;
 8002950:	4420      	add	r0, r4
 8002952:	5483      	strb	r3, [r0, r2]

#ifdef STM32
  eeprom_flush();
#endif

}
 8002954:	bcf0      	pop	{r4, r5, r6, r7}
  eeprom_flush();
 8002956:	f7ff bf85 	b.w	8002864 <eeprom_flush>
    checksum = (checksum << 1) || (checksum >> 7);
 800295a:	b93b      	cbnz	r3, 800296c <memcpy_to_eeprom_with_checksum+0x2c>
 800295c:	09db      	lsrs	r3, r3, #7
    checksum += *source;
 800295e:	f811 6b01 	ldrb.w	r6, [r1], #1
 8002962:	4433      	add	r3, r6
 8002964:	b2db      	uxtb	r3, r3
  EE_Buffer[addr] = new_value;
 8002966:	f805 6f01 	strb.w	r6, [r5, #1]!
 800296a:	e7ef      	b.n	800294c <memcpy_to_eeprom_with_checksum+0xc>
 800296c:	2301      	movs	r3, #1
 800296e:	e7f6      	b.n	800295e <memcpy_to_eeprom_with_checksum+0x1e>
 8002970:	2000391d 	.word	0x2000391d

08002974 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
 8002974:	2300      	movs	r3, #0
int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8002976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002978:	4c0b      	ldr	r4, [pc, #44]	; (80029a8 <memcpy_from_eeprom_with_checksum+0x34>)
 800297a:	1e4d      	subs	r5, r1, #1
 800297c:	4425      	add	r5, r4
 800297e:	1887      	adds	r7, r0, r2
  for(; size > 0; size--) { 
 8002980:	42b8      	cmp	r0, r7
 8002982:	d105      	bne.n	8002990 <memcpy_from_eeprom_with_checksum+0x1c>
  return EE_Buffer[addr];
 8002984:	4421      	add	r1, r4
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
 8002986:	5c88      	ldrb	r0, [r1, r2]
}
 8002988:	1ac3      	subs	r3, r0, r3
 800298a:	4258      	negs	r0, r3
 800298c:	4158      	adcs	r0, r3
 800298e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return EE_Buffer[addr];
 8002990:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    checksum = (checksum << 1) || (checksum >> 7);
 8002994:	b92b      	cbnz	r3, 80029a2 <memcpy_from_eeprom_with_checksum+0x2e>
 8002996:	09db      	lsrs	r3, r3, #7
    checksum += data;    
 8002998:	4433      	add	r3, r6
 800299a:	b2db      	uxtb	r3, r3
    *(destination++) = data; 
 800299c:	f800 6b01 	strb.w	r6, [r0], #1
 80029a0:	e7ee      	b.n	8002980 <memcpy_from_eeprom_with_checksum+0xc>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e7f8      	b.n	8002998 <memcpy_from_eeprom_with_checksum+0x24>
 80029a6:	bf00      	nop
 80029a8:	2000391d 	.word	0x2000391d

080029ac <gc_init>:
parser_block_t gc_block;

#define FAIL(status) return(status);

void gc_init()
{
 80029ac:	b508      	push	{r3, lr}
	memset(&gc_state, 0, sizeof(parser_state_t));
 80029ae:	2100      	movs	r1, #0
 80029b0:	226c      	movs	r2, #108	; 0x6c
 80029b2:	4807      	ldr	r0, [pc, #28]	; (80029d0 <gc_init+0x24>)
 80029b4:	f004 ffad 	bl	8007912 <memset>

	// Load default G54 coordinate system.
	if (!(settings_read_coord_data(gc_state.modal.coord_select,
 80029b8:	4906      	ldr	r1, [pc, #24]	; (80029d4 <gc_init+0x28>)
 80029ba:	2000      	movs	r0, #0
 80029bc:	f003 fb73 	bl	80060a6 <settings_read_coord_data>
 80029c0:	b920      	cbnz	r0, 80029cc <gc_init+0x20>
			gc_state.coord_system)))
	{
		report_status_message(STATUS_SETTING_READ_FAIL);
	}
}
 80029c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		report_status_message(STATUS_SETTING_READ_FAIL);
 80029c6:	2007      	movs	r0, #7
 80029c8:	f002 bdc0 	b.w	800554c <report_status_message>
 80029cc:	bd08      	pop	{r3, pc}
 80029ce:	bf00      	nop
 80029d0:	20003d20 	.word	0x20003d20
 80029d4:	20003d58 	.word	0x20003d58

080029d8 <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
	system_convert_array_steps_to_mpos(gc_state.position, sys_position);
 80029d8:	4901      	ldr	r1, [pc, #4]	; (80029e0 <gc_sync_position+0x8>)
 80029da:	4802      	ldr	r0, [pc, #8]	; (80029e4 <gc_sync_position+0xc>)
 80029dc:	f004 bca4 	b.w	8007328 <system_convert_array_steps_to_mpos>
 80029e0:	20003904 	.word	0x20003904
 80029e4:	20003d40 	.word	0x20003d40

080029e8 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 80029e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ec:	b09b      	sub	sp, #108	; 0x6c
 80029ee:	9006      	str	r0, [sp, #24]
	 updates these modes and commands as the block line is parser and will only be used and
	 executed after successful error-checking. The parser block struct also contains a block
	 values struct, word tracking variables, and a non-modal commands tracker for the new
	 block. This struct contains all of the necessary information to execute the block. */

	memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 80029f0:	2264      	movs	r2, #100	; 0x64
 80029f2:	2100      	movs	r1, #0
 80029f4:	48ae      	ldr	r0, [pc, #696]	; (8002cb0 <gc_execute_line+0x2c8>)
 80029f6:	f004 ff8c 	bl	8007912 <memset>
	memcpy(&gc_block.modal, &gc_state.modal, sizeof(gc_modal_t)); // Copy current modes
 80029fa:	4bae      	ldr	r3, [pc, #696]	; (8002cb4 <gc_execute_line+0x2cc>)
 80029fc:	4aae      	ldr	r2, [pc, #696]	; (8002cb8 <gc_execute_line+0x2d0>)
 80029fe:	4698      	mov	r8, r3
 8002a00:	f103 0508 	add.w	r5, r3, #8
 8002a04:	461c      	mov	r4, r3
 8002a06:	cc03      	ldmia	r4!, {r0, r1}
 8002a08:	42ac      	cmp	r4, r5
 8002a0a:	6010      	str	r0, [r2, #0]
 8002a0c:	6051      	str	r1, [r2, #4]
 8002a0e:	4623      	mov	r3, r4
 8002a10:	f102 0208 	add.w	r2, r2, #8
 8002a14:	d1f6      	bne.n	8002a04 <gc_execute_line+0x1c>
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	f04f 0b00 	mov.w	fp, #0
 8002a1c:	6010      	str	r0, [r2, #0]
 8002a1e:	79a3      	ldrb	r3, [r4, #6]
 8002a20:	88a1      	ldrh	r1, [r4, #4]
 8002a22:	7193      	strb	r3, [r2, #6]
 8002a24:	8091      	strh	r1, [r2, #4]
	uint32_t value_words = 0; // Tracks value words.

	uint8_t gc_parser_flags = GC_PARSER_NONE;

	// Determine if the line is a jogging motion or a normal g-code block.
	if (line[0] == '$')
 8002a26:	9b06      	ldr	r3, [sp, #24]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b24      	cmp	r3, #36	; 0x24
 8002a2c:	f040 87d1 	bne.w	80039d2 <gc_execute_line+0xfea>
	{ // NOTE: `$J=` already parsed when passed to this function.
		// Set G1 and G94 enforced modes to ensure accurate error checks.
		gc_parser_flags |= GC_PARSER_JOG_MOTION;
		gc_block.modal.motion = MOTION_MODE_LINEAR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	4a9f      	ldr	r2, [pc, #636]	; (8002cb0 <gc_execute_line+0x2c8>)
		gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8002a34:	f882 b002 	strb.w	fp, [r2, #2]
		gc_block.modal.motion = MOTION_MODE_LINEAR;
 8002a38:	7053      	strb	r3, [r2, #1]
	float value;
	uint8_t int_value = 0;
	uint16_t mantissa = 0;
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
	{
		char_counter = 3;
 8002a3a:	2203      	movs	r2, #3
		gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8002a3c:	469b      	mov	fp, r3
		char_counter = 3;
 8002a3e:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
				word_bit = WORD_Y;
				gc_block.values.xyz[Y_AXIS] = value;
				axis_words |= (1 << Y_AXIS);
				break;
			case 'Z':
				word_bit = WORD_Z;
 8002a42:	2400      	movs	r4, #0
 8002a44:	4625      	mov	r5, r4
 8002a46:	4626      	mov	r6, r4
 8002a48:	9408      	str	r4, [sp, #32]
 8002a4a:	9407      	str	r4, [sp, #28]
	while (line[char_counter] != 0)
 8002a4c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8002a50:	9b06      	ldr	r3, [sp, #24]
 8002a52:	f813 a002 	ldrb.w	sl, [r3, r2]
 8002a56:	f1ba 0f00 	cmp.w	sl, #0
 8002a5a:	d123      	bne.n	8002aa4 <gc_execute_line+0xbc>
	 */

	// [0. Non-specific/common error-checks and miscellaneous setup]:
	// Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
	// command has been sent. If so, set axis command to current motion mode.
	if (axis_words)
 8002a5c:	b115      	cbz	r5, 8002a64 <gc_execute_line+0x7c>
	{
		if (!axis_command)
		{
			axis_command = AXIS_COMMAND_MOTION_MODE;
 8002a5e:	2e00      	cmp	r6, #0
 8002a60:	bf08      	it	eq
 8002a62:	2602      	moveq	r6, #2
		} // Assign implicit motion-mode
	}

	// Check for valid line number N value.
	if (bit_istrue(value_words, bit(WORD_N)))
 8002a64:	06a2      	lsls	r2, r4, #26
 8002a66:	d505      	bpl.n	8002a74 <gc_execute_line+0x8c>
	{
		// Line number value cannot be less than zero (done) or greater than max line number.
		if (gc_block.values.n > MAX_LINE_NUMBER)
 8002a68:	4b91      	ldr	r3, [pc, #580]	; (8002cb0 <gc_execute_line+0x2c8>)
 8002a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6c:	4b93      	ldr	r3, [pc, #588]	; (8002cbc <gc_execute_line+0x2d4>)
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	f300 8794 	bgt.w	800399c <gc_execute_line+0xfb4>
	// [1. Comments ]: MSG's NOT SUPPORTED. Comment handling performed by protocol.

	// [2. Set feed rate mode ]: G93 F word missing with G1,G2/3 active, implicitly or explicitly. Feed rate
	//   is not defined after switching to G94 from G93.
	// NOTE: For jogging, ignore prior feed rate mode. Enforce G94 and check for required F word.
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
 8002a74:	f1bb 0f00 	cmp.w	fp, #0
 8002a78:	f000 820c 	beq.w	8002e94 <gc_execute_line+0x4ac>
	{
		if (bit_isfalse(value_words, bit(WORD_F)))
 8002a7c:	07e3      	lsls	r3, r4, #31
 8002a7e:	f140 8796 	bpl.w	80039ae <gc_execute_line+0xfc6>
		{
			FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE);
		}
		if (gc_block.modal.units == UNITS_MODE_INCHES)
 8002a82:	4f8b      	ldr	r7, [pc, #556]	; (8002cb0 <gc_execute_line+0x2c8>)
			// - In units per mm mode: If F word passed, ensure value is in mm/min, otherwise push last state value.
			if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN)
			{ // Last state is also G94
				if (bit_istrue(value_words, bit(WORD_F)))
				{
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	f040 8211 	bne.w	8002eae <gc_execute_line+0x4c6>
					{
						gc_block.values.f *= MM_PER_INCH;
 8002a8c:	6938      	ldr	r0, [r7, #16]
 8002a8e:	f7fd fccf 	bl	8000430 <__aeabi_f2d>
 8002a92:	a385      	add	r3, pc, #532	; (adr r3, 8002ca8 <gc_execute_line+0x2c0>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd fd1e 	bl	80004d8 <__aeabi_dmul>
 8002a9c:	f7fe f814 	bl	8000ac8 <__aeabi_d2f>
 8002aa0:	6138      	str	r0, [r7, #16]
 8002aa2:	e204      	b.n	8002eae <gc_execute_line+0x4c6>
		if ((letter < 'A') || (letter > 'Z'))
 8002aa4:	f1aa 0341 	sub.w	r3, sl, #65	; 0x41
 8002aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8002aaa:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8002aae:	2919      	cmp	r1, #25
 8002ab0:	f200 8762 	bhi.w	8003978 <gc_execute_line+0xf90>
		char_counter++;
 8002ab4:	3201      	adds	r2, #1
 8002ab6:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
		if (!read_float(line, &char_counter, &value))
 8002aba:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
 8002abe:	aa10      	add	r2, sp, #64	; 0x40
 8002ac0:	9806      	ldr	r0, [sp, #24]
 8002ac2:	f001 fc0d 	bl	80042e0 <read_float>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	f000 8759 	beq.w	800397e <gc_execute_line+0xf96>
		int_value = trunc(value);
 8002acc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8002ad0:	4648      	mov	r0, r9
 8002ad2:	f7fd fcad 	bl	8000430 <__aeabi_f2d>
 8002ad6:	f005 fce3 	bl	80084a0 <trunc>
 8002ada:	f7fd ffd5 	bl	8000a88 <__aeabi_d2uiz>
 8002ade:	b2c7      	uxtb	r7, r0
		mantissa = round(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8002ae0:	4638      	mov	r0, r7
 8002ae2:	f7fe f8fb 	bl	8000cdc <__aeabi_i2f>
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	4648      	mov	r0, r9
 8002aea:	f7fe f841 	bl	8000b70 <__aeabi_fsub>
 8002aee:	4974      	ldr	r1, [pc, #464]	; (8002cc0 <gc_execute_line+0x2d8>)
 8002af0:	f7fe f948 	bl	8000d84 <__aeabi_fmul>
 8002af4:	f7fd fc9c 	bl	8000430 <__aeabi_f2d>
 8002af8:	f005 fc8c 	bl	8008414 <round>
 8002afc:	f7fd ffc4 	bl	8000a88 <__aeabi_d2uiz>
		switch (letter)
 8002b00:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
		mantissa = round(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8002b04:	b280      	uxth	r0, r0
		switch (letter)
 8002b06:	d022      	beq.n	8002b4e <gc_execute_line+0x166>
 8002b08:	f1ba 0f4d 	cmp.w	sl, #77	; 0x4d
 8002b0c:	f000 80dc 	beq.w	8002cc8 <gc_execute_line+0x2e0>
			switch (letter)
 8002b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b12:	2b19      	cmp	r3, #25
 8002b14:	d828      	bhi.n	8002b68 <gc_execute_line+0x180>
 8002b16:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b1a:	012f      	.short	0x012f
 8002b1c:	01500149 	.word	0x01500149
 8002b20:	01570027 	.word	0x01570027
 8002b24:	0027015c 	.word	0x0027015c
 8002b28:	01610027 	.word	0x01610027
 8002b2c:	0173016a 	.word	0x0173016a
 8002b30:	0027017c 	.word	0x0027017c
 8002b34:	00270181 	.word	0x00270181
 8002b38:	018d0188 	.word	0x018d0188
 8002b3c:	01970192 	.word	0x01970192
 8002b40:	0027019c 	.word	0x0027019c
 8002b44:	00270027 	.word	0x00270027
 8002b48:	01af01a8 	.word	0x01af01a8
 8002b4c:	01b6      	.short	0x01b6
			switch (int_value)
 8002b4e:	2f28      	cmp	r7, #40	; 0x28
 8002b50:	f000 80a0 	beq.w	8002c94 <gc_execute_line+0x2ac>
 8002b54:	d81e      	bhi.n	8002b94 <gc_execute_line+0x1ac>
 8002b56:	2f13      	cmp	r7, #19
 8002b58:	d808      	bhi.n	8002b6c <gc_execute_line+0x184>
 8002b5a:	2f11      	cmp	r7, #17
 8002b5c:	d275      	bcs.n	8002c4a <gc_execute_line+0x262>
 8002b5e:	2f04      	cmp	r7, #4
 8002b60:	d05d      	beq.n	8002c1e <gc_execute_line+0x236>
 8002b62:	d312      	bcc.n	8002b8a <gc_execute_line+0x1a2>
 8002b64:	2f0a      	cmp	r7, #10
 8002b66:	d055      	beq.n	8002c14 <gc_execute_line+0x22c>
					FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
				} // [G10 L2 R not supported]
			}
			else
			{
				FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 8002b68:	2414      	movs	r4, #20
 8002b6a:	e075      	b.n	8002c58 <gc_execute_line+0x270>
			switch (int_value)
 8002b6c:	2f1c      	cmp	r7, #28
 8002b6e:	d051      	beq.n	8002c14 <gc_execute_line+0x22c>
 8002b70:	d807      	bhi.n	8002b82 <gc_execute_line+0x19a>
 8002b72:	2f15      	cmp	r7, #21
 8002b74:	d8f8      	bhi.n	8002b68 <gc_execute_line+0x180>
				gc_block.modal.units = 21 - int_value;
 8002b76:	4b4e      	ldr	r3, [pc, #312]	; (8002cb0 <gc_execute_line+0x2c8>)
 8002b78:	f1c7 0715 	rsb	r7, r7, #21
 8002b7c:	70df      	strb	r7, [r3, #3]
				word_bit = MODAL_GROUP_G6;
 8002b7e:	2306      	movs	r3, #6
				break;
 8002b80:	e067      	b.n	8002c52 <gc_execute_line+0x26a>
			switch (int_value)
 8002b82:	2f1e      	cmp	r7, #30
 8002b84:	d046      	beq.n	8002c14 <gc_execute_line+0x22c>
 8002b86:	2f26      	cmp	r7, #38	; 0x26
 8002b88:	d1ee      	bne.n	8002b68 <gc_execute_line+0x180>
				if (axis_command)
 8002b8a:	2e00      	cmp	r6, #0
 8002b8c:	f040 86fa 	bne.w	8003984 <gc_execute_line+0xf9c>
				axis_command = AXIS_COMMAND_MOTION_MODE;
 8002b90:	2602      	movs	r6, #2
 8002b92:	e020      	b.n	8002bd6 <gc_execute_line+0x1ee>
			switch (int_value)
 8002b94:	2f3d      	cmp	r7, #61	; 0x3d
 8002b96:	d078      	beq.n	8002c8a <gc_execute_line+0x2a2>
 8002b98:	d817      	bhi.n	8002bca <gc_execute_line+0x1e2>
 8002b9a:	2f35      	cmp	r7, #53	; 0x35
 8002b9c:	d03f      	beq.n	8002c1e <gc_execute_line+0x236>
 8002b9e:	d80d      	bhi.n	8002bbc <gc_execute_line+0x1d4>
 8002ba0:	2f2b      	cmp	r7, #43	; 0x2b
 8002ba2:	d001      	beq.n	8002ba8 <gc_execute_line+0x1c0>
 8002ba4:	2f31      	cmp	r7, #49	; 0x31
 8002ba6:	d1df      	bne.n	8002b68 <gc_execute_line+0x180>
				if (axis_command)
 8002ba8:	2e00      	cmp	r6, #0
 8002baa:	f040 86eb 	bne.w	8003984 <gc_execute_line+0xf9c>
				if (int_value == 49)
 8002bae:	2f31      	cmp	r7, #49	; 0x31
 8002bb0:	d164      	bne.n	8002c7c <gc_execute_line+0x294>
					gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <gc_execute_line+0x2c8>)
 8002bb4:	719e      	strb	r6, [r3, #6]
				word_bit = MODAL_GROUP_G8;
 8002bb6:	2308      	movs	r3, #8
				axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8002bb8:	2603      	movs	r6, #3
 8002bba:	e03e      	b.n	8002c3a <gc_execute_line+0x252>
			switch (int_value)
 8002bbc:	2f3b      	cmp	r7, #59	; 0x3b
 8002bbe:	d8d3      	bhi.n	8002b68 <gc_execute_line+0x180>
				gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8002bc0:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <gc_execute_line+0x2c8>)
 8002bc2:	3f36      	subs	r7, #54	; 0x36
 8002bc4:	71df      	strb	r7, [r3, #7]
				word_bit = MODAL_GROUP_G12;
 8002bc6:	2309      	movs	r3, #9
				break;
 8002bc8:	e043      	b.n	8002c52 <gc_execute_line+0x26a>
			switch (int_value)
 8002bca:	2f5b      	cmp	r7, #91	; 0x5b
 8002bcc:	d818      	bhi.n	8002c00 <gc_execute_line+0x218>
 8002bce:	2f5a      	cmp	r7, #90	; 0x5a
 8002bd0:	d246      	bcs.n	8002c60 <gc_execute_line+0x278>
 8002bd2:	2f50      	cmp	r7, #80	; 0x50
 8002bd4:	d1c8      	bne.n	8002b68 <gc_execute_line+0x180>
				gc_block.modal.motion = int_value;
 8002bd6:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <gc_execute_line+0x2c8>)
				if (int_value == 38)
 8002bd8:	2f26      	cmp	r7, #38	; 0x26
				gc_block.modal.motion = int_value;
 8002bda:	705f      	strb	r7, [r3, #1]
				if (int_value == 38)
 8002bdc:	d15e      	bne.n	8002c9c <gc_execute_line+0x2b4>
					if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40)
 8002bde:	f1a0 0214 	sub.w	r2, r0, #20
 8002be2:	b292      	uxth	r2, r2
 8002be4:	2a1e      	cmp	r2, #30
 8002be6:	d8bf      	bhi.n	8002b68 <gc_execute_line+0x180>
 8002be8:	4936      	ldr	r1, [pc, #216]	; (8002cc4 <gc_execute_line+0x2dc>)
 8002bea:	fa21 f202 	lsr.w	r2, r1, r2
 8002bee:	07d7      	lsls	r7, r2, #31
 8002bf0:	d5ba      	bpl.n	8002b68 <gc_execute_line+0x180>
					gc_block.modal.motion += (mantissa / 10) + 100;
 8002bf2:	270a      	movs	r7, #10
 8002bf4:	fbb0 f0f7 	udiv	r0, r0, r7
 8002bf8:	3876      	subs	r0, #118	; 0x76
 8002bfa:	7058      	strb	r0, [r3, #1]
				word_bit = MODAL_GROUP_G1;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e01c      	b.n	8002c3a <gc_execute_line+0x252>
			switch (int_value)
 8002c00:	2f5c      	cmp	r7, #92	; 0x5c
 8002c02:	d007      	beq.n	8002c14 <gc_execute_line+0x22c>
 8002c04:	2f5e      	cmp	r7, #94	; 0x5e
 8002c06:	d8af      	bhi.n	8002b68 <gc_execute_line+0x180>
				gc_block.modal.feed_rate = 94 - int_value;
 8002c08:	4b29      	ldr	r3, [pc, #164]	; (8002cb0 <gc_execute_line+0x2c8>)
 8002c0a:	f1c7 075e 	rsb	r7, r7, #94	; 0x5e
 8002c0e:	709f      	strb	r7, [r3, #2]
				word_bit = MODAL_GROUP_G5;
 8002c10:	2305      	movs	r3, #5
				break;
 8002c12:	e01e      	b.n	8002c52 <gc_execute_line+0x26a>
				if (mantissa == 0)
 8002c14:	b918      	cbnz	r0, 8002c1e <gc_execute_line+0x236>
					if (axis_command)
 8002c16:	2e00      	cmp	r6, #0
 8002c18:	f040 86b4 	bne.w	8003984 <gc_execute_line+0xf9c>
					axis_command = AXIS_COMMAND_NON_MODAL;
 8002c1c:	2601      	movs	r6, #1
				gc_block.non_modal_command = int_value;
 8002c1e:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <gc_execute_line+0x2c8>)
				if ((int_value == 28) || (int_value == 30) || (int_value == 92))
 8002c20:	f007 02fd 	and.w	r2, r7, #253	; 0xfd
 8002c24:	2a1c      	cmp	r2, #28
				gc_block.non_modal_command = int_value;
 8002c26:	701f      	strb	r7, [r3, #0]
				if ((int_value == 28) || (int_value == 30) || (int_value == 92))
 8002c28:	d001      	beq.n	8002c2e <gc_execute_line+0x246>
 8002c2a:	2f5c      	cmp	r7, #92	; 0x5c
 8002c2c:	d134      	bne.n	8002c98 <gc_execute_line+0x2b0>
					if (!((mantissa == 0) || (mantissa == 10)))
 8002c2e:	b108      	cbz	r0, 8002c34 <gc_execute_line+0x24c>
 8002c30:	280a      	cmp	r0, #10
 8002c32:	d199      	bne.n	8002b68 <gc_execute_line+0x180>
					gc_block.non_modal_command += mantissa;
 8002c34:	4438      	add	r0, r7
 8002c36:	7018      	strb	r0, [r3, #0]
				word_bit = MODAL_GROUP_G0;
 8002c38:	2300      	movs	r3, #0
			if (bit_istrue(command_words, bit(word_bit)))
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	9a08      	ldr	r2, [sp, #32]
 8002c42:	421a      	tst	r2, r3
 8002c44:	d02c      	beq.n	8002ca0 <gc_execute_line+0x2b8>
				FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION);
 8002c46:	2415      	movs	r4, #21
 8002c48:	e006      	b.n	8002c58 <gc_execute_line+0x270>
				gc_block.modal.plane_select = int_value - 17;
 8002c4a:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <gc_execute_line+0x2c8>)
 8002c4c:	3f11      	subs	r7, #17
 8002c4e:	715f      	strb	r7, [r3, #5]
				word_bit = MODAL_GROUP_G2;
 8002c50:	2302      	movs	r3, #2
			if (mantissa > 0)
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d0f1      	beq.n	8002c3a <gc_execute_line+0x252>
				FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER);
 8002c56:	2417      	movs	r4, #23
#endif

	// TODO: % to denote start of program.

	return (STATUS_OK);
}
 8002c58:	4620      	mov	r0, r4
 8002c5a:	b01b      	add	sp, #108	; 0x6c
 8002c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (mantissa == 0)
 8002c60:	b920      	cbnz	r0, 8002c6c <gc_execute_line+0x284>
					gc_block.modal.distance = int_value - 90;
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <gc_execute_line+0x2c8>)
 8002c64:	3f5a      	subs	r7, #90	; 0x5a
 8002c66:	711f      	strb	r7, [r3, #4]
					word_bit = MODAL_GROUP_G3;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e7e6      	b.n	8002c3a <gc_execute_line+0x252>
					if ((mantissa != 10) || (int_value == 90))
 8002c6c:	280a      	cmp	r0, #10
 8002c6e:	f47f af7b 	bne.w	8002b68 <gc_execute_line+0x180>
 8002c72:	2f5a      	cmp	r7, #90	; 0x5a
 8002c74:	f43f af78 	beq.w	8002b68 <gc_execute_line+0x180>
					word_bit = MODAL_GROUP_G4;
 8002c78:	2304      	movs	r3, #4
 8002c7a:	e7de      	b.n	8002c3a <gc_execute_line+0x252>
				else if (mantissa == 10)
 8002c7c:	280a      	cmp	r0, #10
 8002c7e:	f47f af73 	bne.w	8002b68 <gc_execute_line+0x180>
					gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8002c82:	2201      	movs	r2, #1
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <gc_execute_line+0x2c8>)
 8002c86:	719a      	strb	r2, [r3, #6]
 8002c88:	e795      	b.n	8002bb6 <gc_execute_line+0x1ce>
				if (mantissa != 0)
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	f47f af6c 	bne.w	8002b68 <gc_execute_line+0x180>
				word_bit = MODAL_GROUP_G13;
 8002c90:	230a      	movs	r3, #10
 8002c92:	e7d2      	b.n	8002c3a <gc_execute_line+0x252>
				word_bit = MODAL_GROUP_G7;
 8002c94:	2307      	movs	r3, #7
 8002c96:	e7dc      	b.n	8002c52 <gc_execute_line+0x26a>
				word_bit = MODAL_GROUP_G0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e7da      	b.n	8002c52 <gc_execute_line+0x26a>
				word_bit = MODAL_GROUP_G1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e7d8      	b.n	8002c52 <gc_execute_line+0x26a>
			command_words |= bit(word_bit);
 8002ca0:	9a08      	ldr	r2, [sp, #32]
			command_words |= bit(word_bit);
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	9208      	str	r2, [sp, #32]
			break;
 8002ca6:	e6d1      	b.n	8002a4c <gc_execute_line+0x64>
 8002ca8:	66666666 	.word	0x66666666
 8002cac:	40396666 	.word	0x40396666
 8002cb0:	20003d8c 	.word	0x20003d8c
 8002cb4:	20003d20 	.word	0x20003d20
 8002cb8:	20003d8d 	.word	0x20003d8d
 8002cbc:	00989680 	.word	0x00989680
 8002cc0:	42c80000 	.word	0x42c80000
 8002cc4:	40100401 	.word	0x40100401
			if (mantissa > 0)
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d1c4      	bne.n	8002c56 <gc_execute_line+0x26e>
			switch (int_value)
 8002ccc:	2f09      	cmp	r7, #9
 8002cce:	d815      	bhi.n	8002cfc <gc_execute_line+0x314>
 8002cd0:	2f07      	cmp	r7, #7
 8002cd2:	d23a      	bcs.n	8002d4a <gc_execute_line+0x362>
 8002cd4:	2f02      	cmp	r7, #2
 8002cd6:	d929      	bls.n	8002d2c <gc_execute_line+0x344>
 8002cd8:	2f05      	cmp	r7, #5
 8002cda:	f63f af45 	bhi.w	8002b68 <gc_execute_line+0x180>
				switch (int_value)
 8002cde:	2f04      	cmp	r7, #4
 8002ce0:	4ba6      	ldr	r3, [pc, #664]	; (8002f7c <gc_execute_line+0x594>)
 8002ce2:	d02e      	beq.n	8002d42 <gc_execute_line+0x35a>
 8002ce4:	2f05      	cmp	r7, #5
 8002ce6:	d02e      	beq.n	8002d46 <gc_execute_line+0x35e>
					gc_block.modal.spindle = SPINDLE_ENABLE_CW;
 8002ce8:	2210      	movs	r2, #16
					gc_block.modal.spindle = SPINDLE_DISABLE;
 8002cea:	729a      	strb	r2, [r3, #10]
				word_bit = MODAL_GROUP_M7;
 8002cec:	230c      	movs	r3, #12
			if (bit_istrue(command_words, bit(word_bit)))
 8002cee:	2201      	movs	r2, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	9a08      	ldr	r2, [sp, #32]
 8002cf6:	421a      	tst	r2, r3
 8002cf8:	d0d3      	beq.n	8002ca2 <gc_execute_line+0x2ba>
 8002cfa:	e7a4      	b.n	8002c46 <gc_execute_line+0x25e>
			switch (int_value)
 8002cfc:	2f3f      	cmp	r7, #63	; 0x3f
 8002cfe:	d031      	beq.n	8002d64 <gc_execute_line+0x37c>
 8002d00:	d809      	bhi.n	8002d16 <gc_execute_line+0x32e>
 8002d02:	2f1e      	cmp	r7, #30
 8002d04:	d015      	beq.n	8002d32 <gc_execute_line+0x34a>
 8002d06:	2f3e      	cmp	r7, #62	; 0x3e
 8002d08:	f47f af2e 	bne.w	8002b68 <gc_execute_line+0x180>
				gc_block.modal.digital = DIGITAL_CONTROL_ON;
 8002d0c:	2201      	movs	r2, #1
				gc_block.modal.digital = DIGITAL_CONTROL_OFF;
 8002d0e:	4b9b      	ldr	r3, [pc, #620]	; (8002f7c <gc_execute_line+0x594>)
 8002d10:	731a      	strb	r2, [r3, #12]
				word_bit = MODAL_GROUP_MO;
 8002d12:	230f      	movs	r3, #15
				break;
 8002d14:	e7eb      	b.n	8002cee <gc_execute_line+0x306>
			switch (int_value)
 8002d16:	2f43      	cmp	r7, #67	; 0x43
 8002d18:	d026      	beq.n	8002d68 <gc_execute_line+0x380>
 8002d1a:	2f64      	cmp	r7, #100	; 0x64
 8002d1c:	d028      	beq.n	8002d70 <gc_execute_line+0x388>
 8002d1e:	2f42      	cmp	r7, #66	; 0x42
 8002d20:	f47f af22 	bne.w	8002b68 <gc_execute_line+0x180>
				gc_block.modal.waitoninput = WAITONINPUT_CONTROL;
 8002d24:	2201      	movs	r2, #1
 8002d26:	4b95      	ldr	r3, [pc, #596]	; (8002f7c <gc_execute_line+0x594>)
 8002d28:	735a      	strb	r2, [r3, #13]
 8002d2a:	e7f2      	b.n	8002d12 <gc_execute_line+0x32a>
				switch (int_value)
 8002d2c:	b127      	cbz	r7, 8002d38 <gc_execute_line+0x350>
 8002d2e:	2f01      	cmp	r7, #1
 8002d30:	d005      	beq.n	8002d3e <gc_execute_line+0x356>
					gc_block.modal.program_flow = int_value; // Program end and reset
 8002d32:	4b92      	ldr	r3, [pc, #584]	; (8002f7c <gc_execute_line+0x594>)
 8002d34:	721f      	strb	r7, [r3, #8]
 8002d36:	e002      	b.n	8002d3e <gc_execute_line+0x356>
					gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED;
 8002d38:	2203      	movs	r2, #3
 8002d3a:	4b90      	ldr	r3, [pc, #576]	; (8002f7c <gc_execute_line+0x594>)
 8002d3c:	721a      	strb	r2, [r3, #8]
				word_bit = MODAL_GROUP_M4;
 8002d3e:	230b      	movs	r3, #11
 8002d40:	e7d5      	b.n	8002cee <gc_execute_line+0x306>
					gc_block.modal.spindle = SPINDLE_ENABLE_CCW;
 8002d42:	2220      	movs	r2, #32
 8002d44:	e7d1      	b.n	8002cea <gc_execute_line+0x302>
					gc_block.modal.spindle = SPINDLE_DISABLE;
 8002d46:	2200      	movs	r2, #0
 8002d48:	e7cf      	b.n	8002cea <gc_execute_line+0x302>
				switch (int_value)
 8002d4a:	2f08      	cmp	r7, #8
 8002d4c:	4b8b      	ldr	r3, [pc, #556]	; (8002f7c <gc_execute_line+0x594>)
 8002d4e:	d005      	beq.n	8002d5c <gc_execute_line+0x374>
 8002d50:	2f09      	cmp	r7, #9
 8002d52:	d005      	beq.n	8002d60 <gc_execute_line+0x378>
					gc_block.modal.coolant = COOLANT_MIST_ENABLE;
 8002d54:	2280      	movs	r2, #128	; 0x80
					gc_block.modal.coolant = COOLANT_DISABLE;
 8002d56:	725a      	strb	r2, [r3, #9]
				word_bit = MODAL_GROUP_M8;
 8002d58:	230d      	movs	r3, #13
					break;
 8002d5a:	e7c8      	b.n	8002cee <gc_execute_line+0x306>
					gc_block.modal.coolant = COOLANT_FLOOD_ENABLE;
 8002d5c:	2240      	movs	r2, #64	; 0x40
 8002d5e:	e7fa      	b.n	8002d56 <gc_execute_line+0x36e>
					gc_block.modal.coolant = COOLANT_DISABLE;
 8002d60:	2200      	movs	r2, #0
 8002d62:	e7f8      	b.n	8002d56 <gc_execute_line+0x36e>
				gc_block.modal.digital = DIGITAL_CONTROL_OFF;
 8002d64:	2202      	movs	r2, #2
 8002d66:	e7d2      	b.n	8002d0e <gc_execute_line+0x326>
				gc_block.modal.analog = ANALOG_CONTROL;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	4b84      	ldr	r3, [pc, #528]	; (8002f7c <gc_execute_line+0x594>)
 8002d6c:	739a      	strb	r2, [r3, #14]
 8002d6e:	e7d0      	b.n	8002d12 <gc_execute_line+0x32a>
				gc_block.modal.accel_scaling = ACCEL_SCALING;
 8002d70:	2201      	movs	r2, #1
 8002d72:	4b82      	ldr	r3, [pc, #520]	; (8002f7c <gc_execute_line+0x594>)
 8002d74:	73da      	strb	r2, [r3, #15]
 8002d76:	e7cc      	b.n	8002d12 <gc_execute_line+0x32a>
				gc_block.values.xyz[A_AXIS] = value;
 8002d78:	4b80      	ldr	r3, [pc, #512]	; (8002f7c <gc_execute_line+0x594>)
				axis_words |= (1 << A_AXIS);
 8002d7a:	f045 0508 	orr.w	r5, r5, #8
				gc_block.values.xyz[A_AXIS] = value;
 8002d7e:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
				word_bit = WORD_A;
 8002d82:	230d      	movs	r3, #13
			if (bit_istrue(value_words, bit(word_bit)))
 8002d84:	2701      	movs	r7, #1
 8002d86:	409f      	lsls	r7, r3
 8002d88:	423c      	tst	r4, r7
 8002d8a:	f040 8601 	bne.w	8003990 <gc_execute_line+0xfa8>
			if ( bit(word_bit)
 8002d8e:	f240 3161 	movw	r1, #865	; 0x361
 8002d92:	fa41 f303 	asr.w	r3, r1, r3
 8002d96:	07d9      	lsls	r1, r3, #31
 8002d98:	d506      	bpl.n	8002da8 <gc_execute_line+0x3c0>
				if (value < 0.0)
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4648      	mov	r0, r9
 8002d9e:	f7fe f98f 	bl	80010c0 <__aeabi_fcmplt>
 8002da2:	2800      	cmp	r0, #0
 8002da4:	f040 85f7 	bne.w	8003996 <gc_execute_line+0xfae>
			value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8002da8:	433c      	orrs	r4, r7
 8002daa:	e64f      	b.n	8002a4c <gc_execute_line+0x64>
				gc_block.values.xyz[B_AXIS] = value;
 8002dac:	4b73      	ldr	r3, [pc, #460]	; (8002f7c <gc_execute_line+0x594>)
				axis_words |= (1 << B_AXIS);
 8002dae:	f045 0510 	orr.w	r5, r5, #16
				gc_block.values.xyz[B_AXIS] = value;
 8002db2:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
				word_bit = WORD_B;
 8002db6:	230e      	movs	r3, #14
				break;
 8002db8:	e7e4      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.xyz[C_AXIS] = value;
 8002dba:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <gc_execute_line+0x594>)
				axis_words |= (1 << C_AXIS);
 8002dbc:	f045 0520 	orr.w	r5, r5, #32
				gc_block.values.xyz[C_AXIS] = value;
 8002dc0:	f8c3 9058 	str.w	r9, [r3, #88]	; 0x58
				word_bit = WORD_C;
 8002dc4:	230f      	movs	r3, #15
				break;
 8002dc6:	e7dd      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.e = int_value;
 8002dc8:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <gc_execute_line+0x594>)
 8002dca:	f883 705c 	strb.w	r7, [r3, #92]	; 0x5c
				word_bit = WORD_E;
 8002dce:	2310      	movs	r3, #16
				break;
 8002dd0:	e7d8      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.f = value;
 8002dd2:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <gc_execute_line+0x594>)
 8002dd4:	f8c3 9010 	str.w	r9, [r3, #16]
				word_bit = WORD_F;
 8002dd8:	2300      	movs	r3, #0
				break;
 8002dda:	e7d3      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.ijk[X_AXIS] = value;
 8002ddc:	4b67      	ldr	r3, [pc, #412]	; (8002f7c <gc_execute_line+0x594>)
 8002dde:	f8c3 9014 	str.w	r9, [r3, #20]
				ijk_words |= (1 << X_AXIS);
 8002de2:	9b07      	ldr	r3, [sp, #28]
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	9307      	str	r3, [sp, #28]
				word_bit = WORD_I;
 8002dea:	2301      	movs	r3, #1
				break;
 8002dec:	e7ca      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.ijk[Y_AXIS] = value;
 8002dee:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <gc_execute_line+0x594>)
 8002df0:	f8c3 9018 	str.w	r9, [r3, #24]
				ijk_words |= (1 << Y_AXIS);
 8002df4:	9b07      	ldr	r3, [sp, #28]
 8002df6:	f043 0302 	orr.w	r3, r3, #2
 8002dfa:	9307      	str	r3, [sp, #28]
				word_bit = WORD_J;
 8002dfc:	2302      	movs	r3, #2
				break;
 8002dfe:	e7c1      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.ijk[Z_AXIS] = value;
 8002e00:	4b5e      	ldr	r3, [pc, #376]	; (8002f7c <gc_execute_line+0x594>)
 8002e02:	f8c3 901c 	str.w	r9, [r3, #28]
				ijk_words |= (1 << Z_AXIS);
 8002e06:	9b07      	ldr	r3, [sp, #28]
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	9307      	str	r3, [sp, #28]
				word_bit = WORD_K;
 8002e0e:	2303      	movs	r3, #3
				break;
 8002e10:	e7b8      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.l = int_value;
 8002e12:	4b5a      	ldr	r3, [pc, #360]	; (8002f7c <gc_execute_line+0x594>)
 8002e14:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
				word_bit = WORD_L;
 8002e18:	2304      	movs	r3, #4
				break;
 8002e1a:	e7b3      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.n = trunc(value);
 8002e1c:	4648      	mov	r0, r9
 8002e1e:	f7fe f98d 	bl	800113c <__aeabi_f2iz>
 8002e22:	4b56      	ldr	r3, [pc, #344]	; (8002f7c <gc_execute_line+0x594>)
 8002e24:	6318      	str	r0, [r3, #48]	; 0x30
				word_bit = WORD_N;
 8002e26:	2305      	movs	r3, #5
				break;
 8002e28:	e7ac      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.p = value;
 8002e2a:	4b54      	ldr	r3, [pc, #336]	; (8002f7c <gc_execute_line+0x594>)
 8002e2c:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
				word_bit = WORD_P;
 8002e30:	2306      	movs	r3, #6
				break;
 8002e32:	e7a7      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.q = value;
 8002e34:	4b51      	ldr	r3, [pc, #324]	; (8002f7c <gc_execute_line+0x594>)
 8002e36:	f8c3 9060 	str.w	r9, [r3, #96]	; 0x60
				word_bit = WORD_Q;
 8002e3a:	2311      	movs	r3, #17
				break;
 8002e3c:	e7a2      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.r = value;
 8002e3e:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <gc_execute_line+0x594>)
 8002e40:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
				word_bit = WORD_R;
 8002e44:	2307      	movs	r3, #7
				break;
 8002e46:	e79d      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.s = value;
 8002e48:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <gc_execute_line+0x594>)
 8002e4a:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
				word_bit = WORD_S;
 8002e4e:	2308      	movs	r3, #8
				break;
 8002e50:	e798      	b.n	8002d84 <gc_execute_line+0x39c>
				if (value > MAX_TOOL_NUMBER)
 8002e52:	494b      	ldr	r1, [pc, #300]	; (8002f80 <gc_execute_line+0x598>)
 8002e54:	4648      	mov	r0, r9
 8002e56:	f7fe f951 	bl	80010fc <__aeabi_fcmpgt>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	f040 8595 	bne.w	800398a <gc_execute_line+0xfa2>
				gc_block.values.t = int_value;
 8002e60:	4b46      	ldr	r3, [pc, #280]	; (8002f7c <gc_execute_line+0x594>)
 8002e62:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
				word_bit = WORD_T;
 8002e66:	2309      	movs	r3, #9
				break;
 8002e68:	e78c      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.xyz[X_AXIS] = value;
 8002e6a:	4b44      	ldr	r3, [pc, #272]	; (8002f7c <gc_execute_line+0x594>)
				axis_words |= (1 << X_AXIS);
 8002e6c:	f045 0501 	orr.w	r5, r5, #1
				gc_block.values.xyz[X_AXIS] = value;
 8002e70:	f8c3 9044 	str.w	r9, [r3, #68]	; 0x44
				word_bit = WORD_X;
 8002e74:	230a      	movs	r3, #10
				break;
 8002e76:	e785      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.xyz[Y_AXIS] = value;
 8002e78:	4b40      	ldr	r3, [pc, #256]	; (8002f7c <gc_execute_line+0x594>)
				axis_words |= (1 << Y_AXIS);
 8002e7a:	f045 0502 	orr.w	r5, r5, #2
				gc_block.values.xyz[Y_AXIS] = value;
 8002e7e:	f8c3 9048 	str.w	r9, [r3, #72]	; 0x48
				word_bit = WORD_Y;
 8002e82:	230b      	movs	r3, #11
				break;
 8002e84:	e77e      	b.n	8002d84 <gc_execute_line+0x39c>
				gc_block.values.xyz[Z_AXIS] = value;
 8002e86:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <gc_execute_line+0x594>)
				axis_words |= (1 << Z_AXIS);
 8002e88:	f045 0504 	orr.w	r5, r5, #4
				gc_block.values.xyz[Z_AXIS] = value;
 8002e8c:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
				word_bit = WORD_Z;
 8002e90:	230c      	movs	r3, #12
				break;
 8002e92:	e777      	b.n	8002d84 <gc_execute_line+0x39c>
		if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME)
 8002e94:	4f39      	ldr	r7, [pc, #228]	; (8002f7c <gc_execute_line+0x594>)
 8002e96:	78bb      	ldrb	r3, [r7, #2]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d117      	bne.n	8002ecc <gc_execute_line+0x4e4>
			if (axis_command == AXIS_COMMAND_MOTION_MODE)
 8002e9c:	2e02      	cmp	r6, #2
 8002e9e:	d106      	bne.n	8002eae <gc_execute_line+0x4c6>
				if ((gc_block.modal.motion != MOTION_MODE_NONE)
 8002ea0:	787b      	ldrb	r3, [r7, #1]
 8002ea2:	2b50      	cmp	r3, #80	; 0x50
 8002ea4:	d003      	beq.n	8002eae <gc_execute_line+0x4c6>
						&& (gc_block.modal.motion != MOTION_MODE_SEEK))
 8002ea6:	b113      	cbz	r3, 8002eae <gc_execute_line+0x4c6>
					if (bit_isfalse(value_words, bit(WORD_F)))
 8002ea8:	07e7      	lsls	r7, r4, #31
 8002eaa:	f140 8580 	bpl.w	80039ae <gc_execute_line+0xfc6>
	if (bit_isfalse(value_words, bit(WORD_S)))
 8002eae:	f414 7f80 	tst.w	r4, #256	; 0x100
		gc_block.values.s = gc_state.spindle_speed;
 8002eb2:	bf08      	it	eq
 8002eb4:	f8d8 3010 	ldreq.w	r3, [r8, #16]
 8002eb8:	4f30      	ldr	r7, [pc, #192]	; (8002f7c <gc_execute_line+0x594>)
 8002eba:	bf08      	it	eq
 8002ebc:	63fb      	streq	r3, [r7, #60]	; 0x3c
	if (gc_block.non_modal_command == NON_MODAL_DWELL)
 8002ebe:	783b      	ldrb	r3, [r7, #0]
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d110      	bne.n	8002ee6 <gc_execute_line+0x4fe>
		if (bit_isfalse(value_words, bit(WORD_P)))
 8002ec4:	0661      	lsls	r1, r4, #25
 8002ec6:	d40c      	bmi.n	8002ee2 <gc_execute_line+0x4fa>
			FAIL(STATUS_GCODE_VALUE_WORD_MISSING);
 8002ec8:	241c      	movs	r4, #28
 8002eca:	e6c5      	b.n	8002c58 <gc_execute_line+0x270>
			if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN)
 8002ecc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1ec      	bne.n	8002eae <gc_execute_line+0x4c6>
				if (bit_istrue(value_words, bit(WORD_F)))
 8002ed4:	07e0      	lsls	r0, r4, #31
 8002ed6:	f53f add5 	bmi.w	8002a84 <gc_execute_line+0x9c>
					gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 8002eda:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e7e5      	b.n	8002eae <gc_execute_line+0x4c6>
		bit_false(value_words, bit(WORD_P));
 8002ee2:	f024 0440 	bic.w	r4, r4, #64	; 0x40
	switch (gc_block.modal.plane_select)
 8002ee6:	797b      	ldrb	r3, [r7, #5]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d041      	beq.n	8002f70 <gc_execute_line+0x588>
		axis_linear = X_AXIS;
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	2302      	movne	r3, #2
 8002efc:	930a      	str	r3, [sp, #40]	; 0x28
 8002efe:	bf0c      	ite	eq
 8002f00:	2302      	moveq	r3, #2
 8002f02:	2301      	movne	r3, #1
		axis_0 = X_AXIS;
 8002f04:	9309      	str	r3, [sp, #36]	; 0x24
	if (gc_block.modal.units == UNITS_MODE_INCHES)
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d03f      	beq.n	8002f8c <gc_execute_line+0x5a4>
	if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 8002f0c:	2e03      	cmp	r6, #3
 8002f0e:	d105      	bne.n	8002f1c <gc_execute_line+0x534>
		if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC)
 8002f10:	79bb      	ldrb	r3, [r7, #6]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d102      	bne.n	8002f1c <gc_execute_line+0x534>
			if (axis_words ^ (1 << TOOL_LENGTH_OFFSET_AXIS))
 8002f16:	2d04      	cmp	r5, #4
 8002f18:	f040 8543 	bne.w	80039a2 <gc_execute_line+0xfba>
	memcpy(block_coord_system, gc_state.coord_system,
 8002f1c:	f8df e068 	ldr.w	lr, [pc, #104]	; 8002f88 <gc_execute_line+0x5a0>
 8002f20:	af14      	add	r7, sp, #80	; 0x50
 8002f22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002f26:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002f28:	e89e 0003 	ldmia.w	lr, {r0, r1}
	if (bit_istrue(command_words, bit(MODAL_GROUP_G12)))
 8002f2c:	9b08      	ldr	r3, [sp, #32]
	memcpy(block_coord_system, gc_state.coord_system,
 8002f2e:	e887 0003 	stmia.w	r7, {r0, r1}
	if (bit_istrue(command_words, bit(MODAL_GROUP_G12)))
 8002f32:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002f36:	4f11      	ldr	r7, [pc, #68]	; (8002f7c <gc_execute_line+0x594>)
 8002f38:	d145      	bne.n	8002fc6 <gc_execute_line+0x5de>
	switch (gc_block.non_modal_command)
 8002f3a:	f897 9000 	ldrb.w	r9, [r7]
 8002f3e:	f1b9 0f0a 	cmp.w	r9, #10
 8002f42:	d050      	beq.n	8002fe6 <gc_execute_line+0x5fe>
 8002f44:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8002f48:	f000 8115 	beq.w	8003176 <gc_execute_line+0x78e>
		if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 8002f4c:	2e03      	cmp	r6, #3
 8002f4e:	f040 8147 	bne.w	80031e0 <gc_execute_line+0x7f8>
		switch (gc_block.non_modal_command)
 8002f52:	f1b9 0f1e 	cmp.w	r9, #30
 8002f56:	f000 8181 	beq.w	800325c <gc_execute_line+0x874>
 8002f5a:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8002f5e:	f000 81ab 	beq.w	80032b8 <gc_execute_line+0x8d0>
 8002f62:	f1b9 0f1c 	cmp.w	r9, #28
 8002f66:	f040 8134 	bne.w	80031d2 <gc_execute_line+0x7ea>
				if (!settings_read_coord_data(SETTING_INDEX_G28, gc_block.values.ijk))
 8002f6a:	4906      	ldr	r1, [pc, #24]	; (8002f84 <gc_execute_line+0x59c>)
 8002f6c:	2006      	movs	r0, #6
 8002f6e:	e177      	b.n	8003260 <gc_execute_line+0x878>
		axis_linear = Z_AXIS;
 8002f70:	2202      	movs	r2, #2
 8002f72:	920b      	str	r2, [sp, #44]	; 0x2c
		axis_1 = Y_AXIS;
 8002f74:	2201      	movs	r2, #1
 8002f76:	920a      	str	r2, [sp, #40]	; 0x28
 8002f78:	e7c4      	b.n	8002f04 <gc_execute_line+0x51c>
 8002f7a:	bf00      	nop
 8002f7c:	20003d8c 	.word	0x20003d8c
 8002f80:	437f0000 	.word	0x437f0000
 8002f84:	20003da0 	.word	0x20003da0
 8002f88:	20003d58 	.word	0x20003d58
	if (gc_block.modal.units == UNITS_MODE_INCHES)
 8002f8c:	f04f 0900 	mov.w	r9, #0
 8002f90:	f8df a300 	ldr.w	sl, [pc, #768]	; 8003294 <gc_execute_line+0x8ac>
			if (bit_istrue(axis_words, bit(idx)))
 8002f94:	fa45 f309 	asr.w	r3, r5, r9
 8002f98:	07da      	lsls	r2, r3, #31
 8002f9a:	d50c      	bpl.n	8002fb6 <gc_execute_line+0x5ce>
				gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002f9c:	f8da 0000 	ldr.w	r0, [sl]
 8002fa0:	f7fd fa46 	bl	8000430 <__aeabi_f2d>
 8002fa4:	a3b4      	add	r3, pc, #720	; (adr r3, 8003278 <gc_execute_line+0x890>)
 8002fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002faa:	f7fd fa95 	bl	80004d8 <__aeabi_dmul>
 8002fae:	f7fd fd8b 	bl	8000ac8 <__aeabi_d2f>
 8002fb2:	f8ca 0000 	str.w	r0, [sl]
 8002fb6:	f109 0901 	add.w	r9, r9, #1
		for (idx = 0; idx < N_AXIS; idx++)
 8002fba:	f1b9 0f06 	cmp.w	r9, #6
 8002fbe:	f10a 0a04 	add.w	sl, sl, #4
 8002fc2:	d1e7      	bne.n	8002f94 <gc_execute_line+0x5ac>
 8002fc4:	e7a2      	b.n	8002f0c <gc_execute_line+0x524>
		if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM)
 8002fc6:	79f8      	ldrb	r0, [r7, #7]
 8002fc8:	2806      	cmp	r0, #6
 8002fca:	d901      	bls.n	8002fd0 <gc_execute_line+0x5e8>
			FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS);
 8002fcc:	241d      	movs	r4, #29
 8002fce:	e643      	b.n	8002c58 <gc_execute_line+0x270>
		if (gc_state.modal.coord_select != gc_block.modal.coord_select)
 8002fd0:	f898 3006 	ldrb.w	r3, [r8, #6]
 8002fd4:	4283      	cmp	r3, r0
 8002fd6:	d0b0      	beq.n	8002f3a <gc_execute_line+0x552>
			if (!(settings_read_coord_data(gc_block.modal.coord_select,
 8002fd8:	a914      	add	r1, sp, #80	; 0x50
 8002fda:	f003 f864 	bl	80060a6 <settings_read_coord_data>
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d1ab      	bne.n	8002f3a <gc_execute_line+0x552>
					FAIL(STATUS_SETTING_READ_FAIL);
 8002fe2:	2407      	movs	r4, #7
 8002fe4:	e638      	b.n	8002c58 <gc_execute_line+0x270>
		if (!axis_words)
 8002fe6:	b90d      	cbnz	r5, 8002fec <gc_execute_line+0x604>
			FAIL(STATUS_GCODE_NO_AXIS_WORDS)
 8002fe8:	241a      	movs	r4, #26
 8002fea:	e635      	b.n	8002c58 <gc_execute_line+0x270>
		if (bit_isfalse(value_words, ((1<<WORD_P)|(1<<WORD_L))))
 8002fec:	f014 0f50 	tst.w	r4, #80	; 0x50
 8002ff0:	f43f af6a 	beq.w	8002ec8 <gc_execute_line+0x4e0>
		coord_select = trunc(gc_block.values.p); // Convert p value to int.
 8002ff4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ff6:	f7fd fa1b 	bl	8000430 <__aeabi_f2d>
 8002ffa:	f005 fa51 	bl	80084a0 <trunc>
 8002ffe:	f7fd fd43 	bl	8000a88 <__aeabi_d2uiz>
 8003002:	b2c0      	uxtb	r0, r0
		if (coord_select > N_COORDINATE_SYSTEM)
 8003004:	2806      	cmp	r0, #6
 8003006:	d8e1      	bhi.n	8002fcc <gc_execute_line+0x5e4>
		if (gc_block.values.l != 20)
 8003008:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800300c:	2b14      	cmp	r3, #20
 800300e:	d005      	beq.n	800301c <gc_execute_line+0x634>
			if (gc_block.values.l == 2)
 8003010:	2b02      	cmp	r3, #2
 8003012:	f47f ada9 	bne.w	8002b68 <gc_execute_line+0x180>
				if (bit_istrue(value_words, bit(WORD_R)))
 8003016:	0623      	lsls	r3, r4, #24
 8003018:	f53f ada6 	bmi.w	8002b68 <gc_execute_line+0x180>
		bit_false(value_words, (bit(WORD_L)|bit(WORD_P)));
 800301c:	f024 0450 	bic.w	r4, r4, #80	; 0x50
		if (coord_select > 0)
 8003020:	2800      	cmp	r0, #0
 8003022:	f000 80a1 	beq.w	8003168 <gc_execute_line+0x780>
			coord_select--;
 8003026:	3801      	subs	r0, #1
 8003028:	b2c3      	uxtb	r3, r0
			coord_select = gc_block.modal.coord_select;
 800302a:	9306      	str	r3, [sp, #24]
		if (!settings_read_coord_data(coord_select, gc_block.values.ijk))
 800302c:	4994      	ldr	r1, [pc, #592]	; (8003280 <gc_execute_line+0x898>)
 800302e:	9806      	ldr	r0, [sp, #24]
 8003030:	f003 f839 	bl	80060a6 <settings_read_coord_data>
 8003034:	2800      	cmp	r0, #0
 8003036:	d0d4      	beq.n	8002fe2 <gc_execute_line+0x5fa>
						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 8003038:	f04f 0800 	mov.w	r8, #0
				if (gc_block.values.l == 20)
 800303c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 8003040:	4f90      	ldr	r7, [pc, #576]	; (8003284 <gc_execute_line+0x89c>)
				if (gc_block.values.l == 20)
 8003042:	930c      	str	r3, [sp, #48]	; 0x30
 8003044:	f8df a238 	ldr.w	sl, [pc, #568]	; 8003280 <gc_execute_line+0x898>
						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 8003048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800304a:	f1aa 0914 	sub.w	r9, sl, #20
 800304e:	930d      	str	r3, [sp, #52]	; 0x34
 8003050:	3720      	adds	r7, #32
			if (bit_istrue(axis_words, bit(idx)))
 8003052:	fa45 f208 	asr.w	r2, r5, r8
 8003056:	07d1      	lsls	r1, r2, #31
 8003058:	d515      	bpl.n	8003086 <gc_execute_line+0x69e>
				if (gc_block.values.l == 20)
 800305a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800305c:	2b14      	cmp	r3, #20
 800305e:	f040 8085 	bne.w	800316c <gc_execute_line+0x784>
							- gc_state.coord_offset[idx] - gc_block.values.xyz[idx];
 8003062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003064:	6838      	ldr	r0, [r7, #0]
 8003066:	f7fd fd83 	bl	8000b70 <__aeabi_fsub>
 800306a:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 800306e:	f7fd fd7f 	bl	8000b70 <__aeabi_fsub>
					if (idx == TOOL_LENGTH_OFFSET_AXIS)
 8003072:	f1b8 0f02 	cmp.w	r8, #2
					gc_block.values.ijk[idx] = gc_state.position[idx]
 8003076:	f8ca 0000 	str.w	r0, [sl]
					if (idx == TOOL_LENGTH_OFFSET_AXIS)
 800307a:	d104      	bne.n	8003086 <gc_execute_line+0x69e>
						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 800307c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800307e:	f7fd fd77 	bl	8000b70 <__aeabi_fsub>
 8003082:	f8c9 001c 	str.w	r0, [r9, #28]
 8003086:	f108 0801 	add.w	r8, r8, #1
		for (idx = 0; idx < N_AXIS; idx++)
 800308a:	f1b8 0f06 	cmp.w	r8, #6
 800308e:	f10a 0a04 	add.w	sl, sl, #4
 8003092:	f107 0704 	add.w	r7, r7, #4
 8003096:	d1dc      	bne.n	8003052 <gc_execute_line+0x66a>
	if (gc_block.modal.motion == MOTION_MODE_NONE)
 8003098:	4b7b      	ldr	r3, [pc, #492]	; (8003288 <gc_execute_line+0x8a0>)
 800309a:	785f      	ldrb	r7, [r3, #1]
 800309c:	4699      	mov	r9, r3
 800309e:	2f50      	cmp	r7, #80	; 0x50
 80030a0:	f040 8110 	bne.w	80032c4 <gc_execute_line+0x8dc>
		if (axis_words)
 80030a4:	2d00      	cmp	r5, #0
 80030a6:	f040 847f 	bne.w	80039a8 <gc_execute_line+0xfc0>
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
 80030aa:	f01b 0201 	ands.w	r2, fp, #1
		bit_false(value_words, (bit(WORD_N)|bit(WORD_F)|bit(WORD_S)|bit(WORD_T))); // Remove single-meaning value words.
 80030ae:	bf0a      	itet	eq
 80030b0:	f424 7448 	biceq.w	r4, r4, #800	; 0x320
		bit_false(value_words, (bit(WORD_N)|bit(WORD_F)));
 80030b4:	f024 0421 	bicne.w	r4, r4, #33	; 0x21
		bit_false(value_words, (bit(WORD_N)|bit(WORD_F)|bit(WORD_S)|bit(WORD_T))); // Remove single-meaning value words.
 80030b8:	f024 0401 	biceq.w	r4, r4, #1
	if (axis_command)
 80030bc:	b10e      	cbz	r6, 80030c2 <gc_execute_line+0x6da>
		bit_false(value_words,
 80030be:	f424 447c 	bic.w	r4, r4, #64512	; 0xfc00
	if (gc_block.modal.digital)
 80030c2:	4f71      	ldr	r7, [pc, #452]	; (8003288 <gc_execute_line+0x8a0>)
 80030c4:	7b3b      	ldrb	r3, [r7, #12]
 80030c6:	b123      	cbz	r3, 80030d2 <gc_execute_line+0x6ea>
		if (bit_isfalse(value_words, bit(WORD_P)))
 80030c8:	0663      	lsls	r3, r4, #25
 80030ca:	f57f aefd 	bpl.w	8002ec8 <gc_execute_line+0x4e0>
		bit_false(value_words, bit(WORD_P));
 80030ce:	f024 0440 	bic.w	r4, r4, #64	; 0x40
	if (gc_block.modal.waitoninput)
 80030d2:	7b7b      	ldrb	r3, [r7, #13]
 80030d4:	b143      	cbz	r3, 80030e8 <gc_execute_line+0x700>
		if (bit_isfalse(value_words, (bit(WORD_P)|bit(WORD_L)|bit(WORD_Q))))
 80030d6:	4b6d      	ldr	r3, [pc, #436]	; (800328c <gc_execute_line+0x8a4>)
 80030d8:	4023      	ands	r3, r4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f43f aef4 	beq.w	8002ec8 <gc_execute_line+0x4e0>
		bit_false(value_words, (bit(WORD_P)|bit(WORD_L)|bit(WORD_Q)));
 80030e0:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 80030e4:	f024 0450 	bic.w	r4, r4, #80	; 0x50
	if (gc_block.modal.analog)
 80030e8:	7bbb      	ldrb	r3, [r7, #14]
 80030ea:	b12b      	cbz	r3, 80030f8 <gc_execute_line+0x710>
		if (bit_isfalse(value_words, (bit(WORD_E)|bit(WORD_Q))))
 80030ec:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80030f0:	f43f aeea 	beq.w	8002ec8 <gc_execute_line+0x4e0>
		bit_false(value_words, (bit(WORD_E)|bit(WORD_Q)));
 80030f4:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
	if (gc_block.modal.accel_scaling)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	b143      	cbz	r3, 800310e <gc_execute_line+0x726>
		if (bit_isfalse(value_words, (bit(WORD_P)|bit(WORD_Q))))
 80030fc:	4b64      	ldr	r3, [pc, #400]	; (8003290 <gc_execute_line+0x8a8>)
 80030fe:	4023      	ands	r3, r4
 8003100:	2b00      	cmp	r3, #0
 8003102:	f43f aee1 	beq.w	8002ec8 <gc_execute_line+0x4e0>
		bit_false(value_words, (bit(WORD_P)|bit(WORD_Q)));
 8003106:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 800310a:	f024 0440 	bic.w	r4, r4, #64	; 0x40
	if (value_words)
 800310e:	2c00      	cmp	r4, #0
 8003110:	f040 8459 	bne.w	80039c6 <gc_execute_line+0xfde>
	memset(pl_data, 0, sizeof(plan_line_data_t)); // Zero pl_data struct
 8003114:	9411      	str	r4, [sp, #68]	; 0x44
 8003116:	9412      	str	r4, [sp, #72]	; 0x48
 8003118:	9413      	str	r4, [sp, #76]	; 0x4c
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
 800311a:	2a00      	cmp	r2, #0
 800311c:	f000 8263 	beq.w	80035e6 <gc_execute_line+0xbfe>
		if (command_words
 8003120:	9b08      	ldr	r3, [sp, #32]
 8003122:	f033 0349 	bics.w	r3, r3, #73	; 0x49
 8003126:	f040 8451 	bne.w	80039cc <gc_execute_line+0xfe4>
		if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE
 800312a:	783b      	ldrb	r3, [r7, #0]
 800312c:	2b35      	cmp	r3, #53	; 0x35
 800312e:	d002      	beq.n	8003136 <gc_execute_line+0x74e>
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 844b 	bne.w	80039cc <gc_execute_line+0xfe4>
		pl_data->spindle_speed = gc_state.spindle_speed;
 8003136:	4d53      	ldr	r5, [pc, #332]	; (8003284 <gc_execute_line+0x89c>)
		uint8_t status = jog_execute(&plan_data, &gc_block);
 8003138:	4953      	ldr	r1, [pc, #332]	; (8003288 <gc_execute_line+0x8a0>)
		pl_data->spindle_speed = gc_state.spindle_speed;
 800313a:	692b      	ldr	r3, [r5, #16]
		plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 800313c:	7a2a      	ldrb	r2, [r5, #8]
		pl_data->spindle_speed = gc_state.spindle_speed;
 800313e:	9312      	str	r3, [sp, #72]	; 0x48
		plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8003140:	7a6b      	ldrb	r3, [r5, #9]
		uint8_t status = jog_execute(&plan_data, &gc_block);
 8003142:	a811      	add	r0, sp, #68	; 0x44
		plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8003144:	4313      	orrs	r3, r2
 8003146:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		uint8_t status = jog_execute(&plan_data, &gc_block);
 800314a:	f000 fc51 	bl	80039f0 <jog_execute>
		if (status == STATUS_OK)
 800314e:	4604      	mov	r4, r0
 8003150:	2800      	cmp	r0, #0
 8003152:	f47f ad81 	bne.w	8002c58 <gc_execute_line+0x270>
			memcpy(gc_state.position, gc_block.values.xyz,
 8003156:	4e4f      	ldr	r6, [pc, #316]	; (8003294 <gc_execute_line+0x8ac>)
 8003158:	3520      	adds	r5, #32
 800315a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800315c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003162:	e885 0003 	stmia.w	r5, {r0, r1}
 8003166:	e577      	b.n	8002c58 <gc_execute_line+0x270>
			coord_select = gc_block.modal.coord_select;
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	e75e      	b.n	800302a <gc_execute_line+0x642>
					gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 800316c:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8003170:	f8ca 2000 	str.w	r2, [sl]
 8003174:	e787      	b.n	8003086 <gc_execute_line+0x69e>
		if (!axis_words)
 8003176:	2d00      	cmp	r5, #0
 8003178:	f43f af36 	beq.w	8002fe8 <gc_execute_line+0x600>
					gc_block.values.xyz[idx] -= gc_state.tool_length_offset;
 800317c:	f04f 0800 	mov.w	r8, #0
 8003180:	4f40      	ldr	r7, [pc, #256]	; (8003284 <gc_execute_line+0x89c>)
 8003182:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8003294 <gc_execute_line+0x8ac>
 8003186:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003188:	f1a9 0a44 	sub.w	sl, r9, #68	; 0x44
 800318c:	9306      	str	r3, [sp, #24]
 800318e:	3720      	adds	r7, #32
			if (bit_istrue(axis_words, bit(idx)))
 8003190:	fa45 f108 	asr.w	r1, r5, r8
 8003194:	07ca      	lsls	r2, r1, #31
 8003196:	d51f      	bpl.n	80031d8 <gc_execute_line+0x7f0>
						- block_coord_system[idx] - gc_block.values.xyz[idx];
 8003198:	ab14      	add	r3, sp, #80	; 0x50
 800319a:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800319e:	6838      	ldr	r0, [r7, #0]
 80031a0:	f7fd fce6 	bl	8000b70 <__aeabi_fsub>
 80031a4:	f8d9 1000 	ldr.w	r1, [r9]
 80031a8:	f7fd fce2 	bl	8000b70 <__aeabi_fsub>
				if (idx == TOOL_LENGTH_OFFSET_AXIS)
 80031ac:	f1b8 0f02 	cmp.w	r8, #2
				gc_block.values.xyz[idx] = gc_state.position[idx]
 80031b0:	f8c9 0000 	str.w	r0, [r9]
				if (idx == TOOL_LENGTH_OFFSET_AXIS)
 80031b4:	d104      	bne.n	80031c0 <gc_execute_line+0x7d8>
					gc_block.values.xyz[idx] -= gc_state.tool_length_offset;
 80031b6:	9906      	ldr	r1, [sp, #24]
 80031b8:	f7fd fcda 	bl	8000b70 <__aeabi_fsub>
 80031bc:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
 80031c0:	f108 0801 	add.w	r8, r8, #1
		for (idx = 0; idx < N_AXIS; idx++)
 80031c4:	f1b8 0f06 	cmp.w	r8, #6
 80031c8:	f107 0704 	add.w	r7, r7, #4
 80031cc:	f109 0904 	add.w	r9, r9, #4
 80031d0:	d1de      	bne.n	8003190 <gc_execute_line+0x7a8>
	uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80031d2:	2300      	movs	r3, #0
 80031d4:	9306      	str	r3, [sp, #24]
 80031d6:	e75f      	b.n	8003098 <gc_execute_line+0x6b0>
				gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 80031d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031da:	f8c9 1000 	str.w	r1, [r9]
 80031de:	e7ef      	b.n	80031c0 <gc_execute_line+0x7d8>
			if (axis_words)
 80031e0:	2d00      	cmp	r5, #0
 80031e2:	f43f aeb6 	beq.w	8002f52 <gc_execute_line+0x56a>
									gc_block.values.xyz[idx] += gc_state.tool_length_offset;
 80031e6:	f04f 0a00 	mov.w	sl, #0
							if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE)
 80031ea:	793b      	ldrb	r3, [r7, #4]
									gc_block.values.xyz[idx] += gc_state.tool_length_offset;
 80031ec:	4a25      	ldr	r2, [pc, #148]	; (8003284 <gc_execute_line+0x89c>)
							if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE)
 80031ee:	9306      	str	r3, [sp, #24]
									gc_block.values.xyz[idx] += gc_state.tool_length_offset;
 80031f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80031f2:	4f28      	ldr	r7, [pc, #160]	; (8003294 <gc_execute_line+0x8ac>)
 80031f4:	930c      	str	r3, [sp, #48]	; 0x30
 80031f6:	f102 0820 	add.w	r8, r2, #32
					if (bit_isfalse(axis_words, bit(idx)))
 80031fa:	fa45 f10a 	asr.w	r1, r5, sl
 80031fe:	07cb      	lsls	r3, r1, #31
 8003200:	d40c      	bmi.n	800321c <gc_execute_line+0x834>
						gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8003202:	f8d8 1000 	ldr.w	r1, [r8]
 8003206:	6039      	str	r1, [r7, #0]
 8003208:	f10a 0a01 	add.w	sl, sl, #1
				for (idx = 0; idx < N_AXIS; idx++)
 800320c:	f1ba 0f06 	cmp.w	sl, #6
 8003210:	f108 0804 	add.w	r8, r8, #4
 8003214:	f107 0704 	add.w	r7, r7, #4
 8003218:	d1ef      	bne.n	80031fa <gc_execute_line+0x812>
 800321a:	e69a      	b.n	8002f52 <gc_execute_line+0x56a>
						if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE)
 800321c:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8003220:	d0f2      	beq.n	8003208 <gc_execute_line+0x820>
							if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE)
 8003222:	9b06      	ldr	r3, [sp, #24]
 8003224:	b99b      	cbnz	r3, 800324e <gc_execute_line+0x866>
										+ gc_state.coord_offset[idx];
 8003226:	ab14      	add	r3, sp, #80	; 0x50
 8003228:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
 800322c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003230:	f7fd fca0 	bl	8000b74 <__addsf3>
								gc_block.values.xyz[idx] += block_coord_system[idx]
 8003234:	6839      	ldr	r1, [r7, #0]
 8003236:	f7fd fc9d 	bl	8000b74 <__addsf3>
								if (idx == TOOL_LENGTH_OFFSET_AXIS)
 800323a:	f1ba 0f02 	cmp.w	sl, #2
								gc_block.values.xyz[idx] += block_coord_system[idx]
 800323e:	6038      	str	r0, [r7, #0]
								if (idx == TOOL_LENGTH_OFFSET_AXIS)
 8003240:	d1e2      	bne.n	8003208 <gc_execute_line+0x820>
									gc_block.values.xyz[idx] += gc_state.tool_length_offset;
 8003242:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003244:	f7fd fc96 	bl	8000b74 <__addsf3>
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <gc_execute_line+0x8a0>)
 800324a:	64d8      	str	r0, [r3, #76]	; 0x4c
 800324c:	e7dc      	b.n	8003208 <gc_execute_line+0x820>
								gc_block.values.xyz[idx] += gc_state.position[idx];
 800324e:	6838      	ldr	r0, [r7, #0]
 8003250:	f8d8 1000 	ldr.w	r1, [r8]
 8003254:	f7fd fc8e 	bl	8000b74 <__addsf3>
 8003258:	6038      	str	r0, [r7, #0]
 800325a:	e7d5      	b.n	8003208 <gc_execute_line+0x820>
				if (!settings_read_coord_data(SETTING_INDEX_G30, gc_block.values.ijk))
 800325c:	2007      	movs	r0, #7
 800325e:	4908      	ldr	r1, [pc, #32]	; (8003280 <gc_execute_line+0x898>)
				if (!settings_read_coord_data(SETTING_INDEX_G28, gc_block.values.ijk))
 8003260:	f002 ff21 	bl	80060a6 <settings_read_coord_data>
 8003264:	2800      	cmp	r0, #0
 8003266:	f43f aebc 	beq.w	8002fe2 <gc_execute_line+0x5fa>
			if (axis_words)
 800326a:	b9ad      	cbnz	r5, 8003298 <gc_execute_line+0x8b0>
	uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 800326c:	9506      	str	r5, [sp, #24]
				axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 800326e:	462e      	mov	r6, r5
 8003270:	e712      	b.n	8003098 <gc_execute_line+0x6b0>
 8003272:	bf00      	nop
 8003274:	f3af 8000 	nop.w
 8003278:	66666666 	.word	0x66666666
 800327c:	40396666 	.word	0x40396666
 8003280:	20003da0 	.word	0x20003da0
 8003284:	20003d20 	.word	0x20003d20
 8003288:	20003d8c 	.word	0x20003d8c
 800328c:	00020050 	.word	0x00020050
 8003290:	00020040 	.word	0x00020040
 8003294:	20003dd0 	.word	0x20003dd0
 8003298:	2300      	movs	r3, #0
						gc_block.values.ijk[idx] = gc_state.position[idx];
 800329a:	49bf      	ldr	r1, [pc, #764]	; (8003598 <gc_execute_line+0xbb0>)
 800329c:	48bf      	ldr	r0, [pc, #764]	; (800359c <gc_execute_line+0xbb4>)
					if (!(axis_words & (1 << idx)))
 800329e:	fa45 f203 	asr.w	r2, r5, r3
 80032a2:	07d7      	lsls	r7, r2, #31
 80032a4:	d404      	bmi.n	80032b0 <gc_execute_line+0x8c8>
 80032a6:	009a      	lsls	r2, r3, #2
						gc_block.values.ijk[idx] = gc_state.position[idx];
 80032a8:	1857      	adds	r7, r2, r1
 80032aa:	4402      	add	r2, r0
 80032ac:	6a12      	ldr	r2, [r2, #32]
 80032ae:	617a      	str	r2, [r7, #20]
 80032b0:	3301      	adds	r3, #1
				for (idx = 0; idx < N_AXIS; idx++)
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d1f3      	bne.n	800329e <gc_execute_line+0x8b6>
 80032b6:	e78c      	b.n	80031d2 <gc_execute_line+0x7ea>
			if (!(gc_block.modal.motion == MOTION_MODE_SEEK
 80032b8:	4bb7      	ldr	r3, [pc, #732]	; (8003598 <gc_execute_line+0xbb0>)
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d988      	bls.n	80031d2 <gc_execute_line+0x7ea>
				FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 80032c0:	241e      	movs	r4, #30
 80032c2:	e4c9      	b.n	8002c58 <gc_execute_line+0x270>
	else if (axis_command == AXIS_COMMAND_MOTION_MODE)
 80032c4:	2e02      	cmp	r6, #2
 80032c6:	f47f aef0 	bne.w	80030aa <gc_execute_line+0x6c2>
		if (gc_block.modal.motion == MOTION_MODE_SEEK)
 80032ca:	b91f      	cbnz	r7, 80032d4 <gc_execute_line+0x8ec>
					axis_command = AXIS_COMMAND_NONE;
 80032cc:	2d00      	cmp	r5, #0
 80032ce:	bf08      	it	eq
 80032d0:	2600      	moveq	r6, #0
 80032d2:	e6ea      	b.n	80030aa <gc_execute_line+0x6c2>
			if (gc_block.values.f == 0.0)
 80032d4:	2100      	movs	r1, #0
 80032d6:	6918      	ldr	r0, [r3, #16]
 80032d8:	f7fd fee8 	bl	80010ac <__aeabi_fcmpeq>
 80032dc:	2800      	cmp	r0, #0
 80032de:	f040 8366 	bne.w	80039ae <gc_execute_line+0xfc6>
			switch (gc_block.modal.motion)
 80032e2:	2f8c      	cmp	r7, #140	; 0x8c
 80032e4:	d010      	beq.n	8003308 <gc_execute_line+0x920>
 80032e6:	d807      	bhi.n	80032f8 <gc_execute_line+0x910>
 80032e8:	2f02      	cmp	r7, #2
 80032ea:	d01e      	beq.n	800332a <gc_execute_line+0x942>
 80032ec:	2f03      	cmp	r7, #3
 80032ee:	d01e      	beq.n	800332e <gc_execute_line+0x946>
 80032f0:	2f01      	cmp	r7, #1
 80032f2:	f47f aeda 	bne.w	80030aa <gc_execute_line+0x6c2>
 80032f6:	e7e9      	b.n	80032cc <gc_execute_line+0x8e4>
 80032f8:	2f8e      	cmp	r7, #142	; 0x8e
 80032fa:	d005      	beq.n	8003308 <gc_execute_line+0x920>
 80032fc:	d302      	bcc.n	8003304 <gc_execute_line+0x91c>
 80032fe:	2f8f      	cmp	r7, #143	; 0x8f
 8003300:	f47f aed3 	bne.w	80030aa <gc_execute_line+0x6c2>
				gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 8003304:	f04b 0b10 	orr.w	fp, fp, #16
						|| (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR))
 8003308:	3772      	adds	r7, #114	; 0x72
				if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY)
 800330a:	b2ff      	uxtb	r7, r7
 800330c:	2f01      	cmp	r7, #1
					gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY;
 800330e:	bf98      	it	ls
 8003310:	f04b 0b08 	orrls.w	fp, fp, #8
				if (!axis_words)
 8003314:	2d00      	cmp	r5, #0
 8003316:	f43f ae67 	beq.w	8002fe8 <gc_execute_line+0x600>
				if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 800331a:	2218      	movs	r2, #24
 800331c:	49a0      	ldr	r1, [pc, #640]	; (80035a0 <gc_execute_line+0xbb8>)
 800331e:	48a1      	ldr	r0, [pc, #644]	; (80035a4 <gc_execute_line+0xbbc>)
 8003320:	f004 fae8 	bl	80078f4 <memcmp>
 8003324:	2800      	cmp	r0, #0
 8003326:	d036      	beq.n	8003396 <gc_execute_line+0x9ae>
 8003328:	e6bf      	b.n	80030aa <gc_execute_line+0x6c2>
				gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 800332a:	f04b 0b04 	orr.w	fp, fp, #4
				if (!axis_words)
 800332e:	2d00      	cmp	r5, #0
 8003330:	f43f ae5a 	beq.w	8002fe8 <gc_execute_line+0x600>
				if (!(axis_words & (bit(axis_0) | bit(axis_1))))
 8003334:	2201      	movs	r2, #1
 8003336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003338:	990a      	ldr	r1, [sp, #40]	; 0x28
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	408a      	lsls	r2, r1
 8003340:	4313      	orrs	r3, r2
 8003342:	421d      	tst	r5, r3
 8003344:	f000 8336 	beq.w	80039b4 <gc_execute_line+0xfcc>
 8003348:	930c      	str	r3, [sp, #48]	; 0x30
				x = gc_block.values.xyz[axis_0] - gc_state.position[axis_0]; // Delta x between current position and target
 800334a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800334c:	f8df 824c 	ldr.w	r8, [pc, #588]	; 800359c <gc_execute_line+0xbb4>
 8003350:	eb09 0283 	add.w	r2, r9, r3, lsl #2
 8003354:	f103 0108 	add.w	r1, r3, #8
 8003358:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800335c:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800335e:	f7fd fc07 	bl	8000b70 <__aeabi_fsub>
				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current position and target
 8003362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				x = gc_block.values.xyz[axis_0] - gc_state.position[axis_0]; // Delta x between current position and target
 8003364:	4682      	mov	sl, r0
				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current position and target
 8003366:	eb09 0283 	add.w	r2, r9, r3, lsl #2
 800336a:	f103 0108 	add.w	r1, r3, #8
 800336e:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003370:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8003374:	f7fd fbfc 	bl	8000b70 <__aeabi_fsub>
				if (value_words & bit(WORD_R))
 8003378:	f014 0280 	ands.w	r2, r4, #128	; 0x80
				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current position and target
 800337c:	4607      	mov	r7, r0
				if (value_words & bit(WORD_R))
 800337e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003380:	f000 80a3 	beq.w	80034ca <gc_execute_line+0xae2>
					if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 8003384:	2218      	movs	r2, #24
 8003386:	4986      	ldr	r1, [pc, #536]	; (80035a0 <gc_execute_line+0xbb8>)
 8003388:	f108 0020 	add.w	r0, r8, #32
					bit_false(value_words, bit(WORD_R));
 800338c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
					if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 8003390:	f004 fab0 	bl	80078f4 <memcmp>
 8003394:	b908      	cbnz	r0, 800339a <gc_execute_line+0x9b2>
						FAIL(STATUS_GCODE_INVALID_TARGET);
 8003396:	2421      	movs	r4, #33	; 0x21
 8003398:	e45e      	b.n	8002c58 <gc_execute_line+0x270>
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 800339a:	f899 3003 	ldrb.w	r3, [r9, #3]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d10c      	bne.n	80033bc <gc_execute_line+0x9d4>
						gc_block.values.r *= MM_PER_INCH;
 80033a2:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 80033a6:	f7fd f843 	bl	8000430 <__aeabi_f2d>
 80033aa:	a375      	add	r3, pc, #468	; (adr r3, 8003580 <gc_execute_line+0xb98>)
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f7fd f892 	bl	80004d8 <__aeabi_dmul>
 80033b4:	f7fd fb88 	bl	8000ac8 <__aeabi_d2f>
 80033b8:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
					float h_x2_div_d = 4.0 * gc_block.values.r * gc_block.values.r - x * x
 80033bc:	4b76      	ldr	r3, [pc, #472]	; (8003598 <gc_execute_line+0xbb0>)
 80033be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033c0:	f7fd f836 	bl	8000430 <__aeabi_f2d>
 80033c4:	4680      	mov	r8, r0
 80033c6:	4689      	mov	r9, r1
 80033c8:	2200      	movs	r2, #0
 80033ca:	4b77      	ldr	r3, [pc, #476]	; (80035a8 <gc_execute_line+0xbc0>)
 80033cc:	f7fd f884 	bl	80004d8 <__aeabi_dmul>
 80033d0:	4642      	mov	r2, r8
 80033d2:	464b      	mov	r3, r9
 80033d4:	f7fd f880 	bl	80004d8 <__aeabi_dmul>
 80033d8:	4680      	mov	r8, r0
 80033da:	4689      	mov	r9, r1
 80033dc:	4650      	mov	r0, sl
 80033de:	4651      	mov	r1, sl
 80033e0:	f7fd fcd0 	bl	8000d84 <__aeabi_fmul>
 80033e4:	f7fd f824 	bl	8000430 <__aeabi_f2d>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4640      	mov	r0, r8
 80033ee:	4649      	mov	r1, r9
 80033f0:	f7fc febe 	bl	8000170 <__aeabi_dsub>
 80033f4:	4680      	mov	r8, r0
 80033f6:	4689      	mov	r9, r1
							- y * y;
 80033f8:	4638      	mov	r0, r7
 80033fa:	4639      	mov	r1, r7
 80033fc:	f7fd fcc2 	bl	8000d84 <__aeabi_fmul>
 8003400:	f7fd f816 	bl	8000430 <__aeabi_f2d>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4640      	mov	r0, r8
 800340a:	4649      	mov	r1, r9
 800340c:	f7fc feb0 	bl	8000170 <__aeabi_dsub>
					float h_x2_div_d = 4.0 * gc_block.values.r * gc_block.values.r - x * x
 8003410:	f7fd fb5a 	bl	8000ac8 <__aeabi_d2f>
					if (h_x2_div_d < 0)
 8003414:	2100      	movs	r1, #0
					float h_x2_div_d = 4.0 * gc_block.values.r * gc_block.values.r - x * x
 8003416:	4680      	mov	r8, r0
					if (h_x2_div_d < 0)
 8003418:	f7fd fe52 	bl	80010c0 <__aeabi_fcmplt>
 800341c:	2800      	cmp	r0, #0
 800341e:	f040 82cc 	bne.w	80039ba <gc_execute_line+0xfd2>
					h_x2_div_d = -sqrt(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 8003422:	4640      	mov	r0, r8
 8003424:	f7fd f804 	bl	8000430 <__aeabi_f2d>
 8003428:	f005 f916 	bl	8008658 <sqrt>
 800342c:	4681      	mov	r9, r0
 800342e:	4688      	mov	r8, r1
 8003430:	4650      	mov	r0, sl
 8003432:	4639      	mov	r1, r7
 8003434:	f001 f818 	bl	8004468 <hypot_f>
 8003438:	f7fc fffa 	bl	8000430 <__aeabi_f2d>
 800343c:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4648      	mov	r0, r9
 8003446:	4641      	mov	r1, r8
 8003448:	f7fd f970 	bl	800072c <__aeabi_ddiv>
 800344c:	f7fd fb3c 	bl	8000ac8 <__aeabi_d2f>
					if (gc_block.modal.motion == MOTION_MODE_CCW_ARC)
 8003450:	4b51      	ldr	r3, [pc, #324]	; (8003598 <gc_execute_line+0xbb0>)
					if (gc_block.values.r < 0)
 8003452:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8003598 <gc_execute_line+0xbb0>
					if (gc_block.modal.motion == MOTION_MODE_CCW_ARC)
 8003456:	785b      	ldrb	r3, [r3, #1]
					h_x2_div_d = -sqrt(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 8003458:	4680      	mov	r8, r0
					if (gc_block.modal.motion == MOTION_MODE_CCW_ARC)
 800345a:	2b03      	cmp	r3, #3
					if (gc_block.values.r < 0)
 800345c:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
						h_x2_div_d = -h_x2_div_d;
 8003460:	bf08      	it	eq
 8003462:	f100 4800 	addeq.w	r8, r0, #2147483648	; 0x80000000
					if (gc_block.values.r < 0)
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	9307      	str	r3, [sp, #28]
 800346c:	f7fd fe28 	bl	80010c0 <__aeabi_fcmplt>
 8003470:	9b07      	ldr	r3, [sp, #28]
 8003472:	b128      	cbz	r0, 8003480 <gc_execute_line+0xa98>
						gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8003474:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
						h_x2_div_d = -h_x2_div_d;
 8003478:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
						gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 800347c:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
					gc_block.values.ijk[axis_0] = 0.5 * (x - (y * h_x2_div_d));
 8003480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003482:	4639      	mov	r1, r7
 8003484:	3304      	adds	r3, #4
 8003486:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800348a:	4640      	mov	r0, r8
 800348c:	9307      	str	r3, [sp, #28]
 800348e:	f7fd fc79 	bl	8000d84 <__aeabi_fmul>
 8003492:	4601      	mov	r1, r0
 8003494:	4650      	mov	r0, sl
 8003496:	f7fd fb6b 	bl	8000b70 <__aeabi_fsub>
 800349a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800349e:	f7fd fc71 	bl	8000d84 <__aeabi_fmul>
 80034a2:	9b07      	ldr	r3, [sp, #28]
					gc_block.values.ijk[axis_1] = 0.5 * (y + (x * h_x2_div_d));
 80034a4:	4651      	mov	r1, sl
					gc_block.values.ijk[axis_0] = 0.5 * (x - (y * h_x2_div_d));
 80034a6:	6058      	str	r0, [r3, #4]
					gc_block.values.ijk[axis_1] = 0.5 * (y + (x * h_x2_div_d));
 80034a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034aa:	4640      	mov	r0, r8
 80034ac:	3304      	adds	r3, #4
 80034ae:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 80034b2:	f7fd fc67 	bl	8000d84 <__aeabi_fmul>
 80034b6:	4639      	mov	r1, r7
 80034b8:	f7fd fb5c 	bl	8000b74 <__addsf3>
 80034bc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80034c0:	f7fd fc60 	bl	8000d84 <__aeabi_fmul>
 80034c4:	f8c9 0004 	str.w	r0, [r9, #4]
 80034c8:	e5ef      	b.n	80030aa <gc_execute_line+0x6c2>
					if (!(ijk_words & (bit(axis_0) | bit(axis_1))))
 80034ca:	9907      	ldr	r1, [sp, #28]
 80034cc:	420b      	tst	r3, r1
 80034ce:	f000 8277 	beq.w	80039c0 <gc_execute_line+0xfd8>
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 80034d2:	f899 3003 	ldrb.w	r3, [r9, #3]
					bit_false(value_words, (bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 80034d6:	f024 040e 	bic.w	r4, r4, #14
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d066      	beq.n	80035ac <gc_execute_line+0xbc4>
					y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 80034de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034e0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8003598 <gc_execute_line+0xbb0>
 80034e4:	f103 0904 	add.w	r9, r3, #4
 80034e8:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 80034ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80034f0:	4638      	mov	r0, r7
 80034f2:	f7fd fb3d 	bl	8000b70 <__aeabi_fsub>
					x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 80034f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
					y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 80034f8:	9007      	str	r0, [sp, #28]
					x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 80034fa:	1d1f      	adds	r7, r3, #4
 80034fc:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4650      	mov	r0, sl
 8003504:	f7fd fb34 	bl	8000b70 <__aeabi_fsub>
					float target_r = hypot_f(x, y);
 8003508:	9b07      	ldr	r3, [sp, #28]
 800350a:	4619      	mov	r1, r3
 800350c:	f000 ffac 	bl	8004468 <hypot_f>
					gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0],
 8003510:	f8d9 1004 	ldr.w	r1, [r9, #4]
					float target_r = hypot_f(x, y);
 8003514:	4682      	mov	sl, r0
					gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0],
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 ffa6 	bl	8004468 <hypot_f>
 800351c:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
					float delta_r = fabs(target_r - gc_block.values.r);
 8003520:	4601      	mov	r1, r0
					gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0],
 8003522:	4607      	mov	r7, r0
					float delta_r = fabs(target_r - gc_block.values.r);
 8003524:	4650      	mov	r0, sl
 8003526:	f7fd fb23 	bl	8000b70 <__aeabi_fsub>
 800352a:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
					if (delta_r > 0.005)
 800352e:	4650      	mov	r0, sl
 8003530:	f7fc ff7e 	bl	8000430 <__aeabi_f2d>
 8003534:	a314      	add	r3, pc, #80	; (adr r3, 8003588 <gc_execute_line+0xba0>)
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	4680      	mov	r8, r0
 800353c:	4689      	mov	r9, r1
 800353e:	f7fd fa5b 	bl	80009f8 <__aeabi_dcmpgt>
 8003542:	2800      	cmp	r0, #0
 8003544:	f43f adb1 	beq.w	80030aa <gc_execute_line+0x6c2>
						if (delta_r > 0.5)
 8003548:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800354c:	4650      	mov	r0, sl
 800354e:	f7fd fdd5 	bl	80010fc <__aeabi_fcmpgt>
 8003552:	2800      	cmp	r0, #0
 8003554:	f47f af1f 	bne.w	8003396 <gc_execute_line+0x9ae>
						if (delta_r > (0.001 * gc_block.values.r))
 8003558:	4638      	mov	r0, r7
 800355a:	f7fc ff69 	bl	8000430 <__aeabi_f2d>
 800355e:	a30c      	add	r3, pc, #48	; (adr r3, 8003590 <gc_execute_line+0xba8>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fc ffb8 	bl	80004d8 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4640      	mov	r0, r8
 800356e:	4649      	mov	r1, r9
 8003570:	f7fd fa42 	bl	80009f8 <__aeabi_dcmpgt>
 8003574:	2800      	cmp	r0, #0
 8003576:	f47f af0e 	bne.w	8003396 <gc_execute_line+0x9ae>
 800357a:	e596      	b.n	80030aa <gc_execute_line+0x6c2>
 800357c:	f3af 8000 	nop.w
 8003580:	66666666 	.word	0x66666666
 8003584:	40396666 	.word	0x40396666
 8003588:	47ae147b 	.word	0x47ae147b
 800358c:	3f747ae1 	.word	0x3f747ae1
 8003590:	d2f1a9fc 	.word	0xd2f1a9fc
 8003594:	3f50624d 	.word	0x3f50624d
 8003598:	20003d8c 	.word	0x20003d8c
 800359c:	20003d20 	.word	0x20003d20
 80035a0:	20003dd0 	.word	0x20003dd0
 80035a4:	20003d40 	.word	0x20003d40
 80035a8:	40100000 	.word	0x40100000
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 80035ac:	4690      	mov	r8, r2
 80035ae:	f8df 9304 	ldr.w	r9, [pc, #772]	; 80038b4 <gc_execute_line+0xecc>
							if (ijk_words & bit(idx))
 80035b2:	9b07      	ldr	r3, [sp, #28]
 80035b4:	fa43 f308 	asr.w	r3, r3, r8
 80035b8:	07da      	lsls	r2, r3, #31
 80035ba:	d50c      	bpl.n	80035d6 <gc_execute_line+0xbee>
								gc_block.values.ijk[idx] *= MM_PER_INCH;
 80035bc:	f8d9 0000 	ldr.w	r0, [r9]
 80035c0:	f7fc ff36 	bl	8000430 <__aeabi_f2d>
 80035c4:	a3b2      	add	r3, pc, #712	; (adr r3, 8003890 <gc_execute_line+0xea8>)
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	f7fc ff85 	bl	80004d8 <__aeabi_dmul>
 80035ce:	f7fd fa7b 	bl	8000ac8 <__aeabi_d2f>
 80035d2:	f8c9 0000 	str.w	r0, [r9]
 80035d6:	f108 0801 	add.w	r8, r8, #1
						for (idx = 0; idx < N_AXIS; idx++)
 80035da:	f1b8 0f06 	cmp.w	r8, #6
 80035de:	f109 0904 	add.w	r9, r9, #4
 80035e2:	d1e6      	bne.n	80035b2 <gc_execute_line+0xbca>
 80035e4:	e77b      	b.n	80034de <gc_execute_line+0xaf6>
	if (bit_istrue(settings.flags, BITFLAG_LASER_MODE))
 80035e6:	4bac      	ldr	r3, [pc, #688]	; (8003898 <gc_execute_line+0xeb0>)
 80035e8:	4cac      	ldr	r4, [pc, #688]	; (800389c <gc_execute_line+0xeb4>)
 80035ea:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80035ee:	f013 0f02 	tst.w	r3, #2
 80035f2:	d00d      	beq.n	8003610 <gc_execute_line+0xc28>
		if (!((gc_block.modal.motion == MOTION_MODE_LINEAR)
 80035f4:	787b      	ldrb	r3, [r7, #1]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	2b02      	cmp	r3, #2
			gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 80035fa:	bf88      	it	hi
 80035fc:	f04b 0b40 	orrhi.w	fp, fp, #64	; 0x40
		if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE))
 8003600:	2d00      	cmp	r5, #0
 8003602:	f000 80ec 	beq.w	80037de <gc_execute_line+0xdf6>
 8003606:	2e02      	cmp	r6, #2
 8003608:	f040 80e9 	bne.w	80037de <gc_execute_line+0xdf6>
			gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 800360c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
	gc_state.line_number = gc_block.values.n;
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	61e3      	str	r3, [r4, #28]
	gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8003614:	78bb      	ldrb	r3, [r7, #2]
 8003616:	7063      	strb	r3, [r4, #1]
	if (gc_state.modal.feed_rate)
 8003618:	b113      	cbz	r3, 8003620 <gc_execute_line+0xc38>
		pl_data->condition |= PL_COND_FLAG_INVERSE_TIME;
 800361a:	2308      	movs	r3, #8
 800361c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8003620:	693b      	ldr	r3, [r7, #16]
	if ((gc_state.spindle_speed != gc_block.values.s)
 8003622:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
	gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8003626:	6163      	str	r3, [r4, #20]
	if ((gc_state.spindle_speed != gc_block.values.s)
 8003628:	4641      	mov	r1, r8
 800362a:	6920      	ldr	r0, [r4, #16]
	pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 800362c:	9311      	str	r3, [sp, #68]	; 0x44
	if ((gc_state.spindle_speed != gc_block.values.s)
 800362e:	f7fd fd3d 	bl	80010ac <__aeabi_fcmpeq>
 8003632:	f00b 0540 	and.w	r5, fp, #64	; 0x40
 8003636:	b110      	cbz	r0, 800363e <gc_execute_line+0xc56>
			|| bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC))
 8003638:	f01b 0f20 	tst.w	fp, #32
 800363c:	d00c      	beq.n	8003658 <gc_execute_line+0xc70>
		if (gc_state.modal.spindle != SPINDLE_DISABLE)
 800363e:	7a60      	ldrb	r0, [r4, #9]
 8003640:	b140      	cbz	r0, 8003654 <gc_execute_line+0xc6c>
			if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION))
 8003642:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8003646:	d105      	bne.n	8003654 <gc_execute_line+0xc6c>
				if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 8003648:	2d00      	cmp	r5, #0
 800364a:	f000 80dc 	beq.w	8003806 <gc_execute_line+0xe1e>
					spindle_sync(gc_state.modal.spindle, 0.0);
 800364e:	2100      	movs	r1, #0
					spindle_sync(gc_state.modal.spindle, gc_block.values.s);
 8003650:	f002 ff8c 	bl	800656c <spindle_sync>
		gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 8003654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003656:	6123      	str	r3, [r4, #16]
	if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 8003658:	b90d      	cbnz	r5, 800365e <gc_execute_line+0xc76>
		pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use.
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	9312      	str	r3, [sp, #72]	; 0x48
	gc_state.tool = gc_block.values.t;
 800365e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
	if (gc_state.modal.spindle != gc_block.modal.spindle)
 8003662:	7ab8      	ldrb	r0, [r7, #10]
	gc_state.tool = gc_block.values.t;
 8003664:	7623      	strb	r3, [r4, #24]
	if (gc_state.modal.spindle != gc_block.modal.spindle)
 8003666:	7a63      	ldrb	r3, [r4, #9]
 8003668:	4283      	cmp	r3, r0
 800366a:	d004      	beq.n	8003676 <gc_execute_line+0xc8e>
		spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 800366c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800366e:	f002 ff7d 	bl	800656c <spindle_sync>
		gc_state.modal.spindle = gc_block.modal.spindle;
 8003672:	7abb      	ldrb	r3, [r7, #10]
 8003674:	7263      	strb	r3, [r4, #9]
	pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8003676:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800367a:	7a62      	ldrb	r2, [r4, #9]
	if (gc_state.modal.coolant != gc_block.modal.coolant)
 800367c:	7a78      	ldrb	r0, [r7, #9]
	pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 800367e:	4313      	orrs	r3, r2
 8003680:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	if (gc_state.modal.coolant != gc_block.modal.coolant)
 8003684:	7a23      	ldrb	r3, [r4, #8]
 8003686:	4283      	cmp	r3, r0
 8003688:	d006      	beq.n	8003698 <gc_execute_line+0xcb0>
		coolant_sync(gc_block.modal.coolant);
 800368a:	f7ff f8db 	bl	8002844 <coolant_sync>
		if (gc_block.modal.coolant == COOLANT_DISABLE)
 800368e:	7a7b      	ldrb	r3, [r7, #9]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f040 80ba 	bne.w	800380a <gc_execute_line+0xe22>
			gc_state.modal.coolant |= gc_block.modal.coolant;
 8003696:	7223      	strb	r3, [r4, #8]
	pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8003698:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800369c:	7a22      	ldrb	r2, [r4, #8]
 800369e:	4313      	orrs	r3, r2
 80036a0:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	if (gc_block.non_modal_command == NON_MODAL_DWELL)
 80036a4:	783b      	ldrb	r3, [r7, #0]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d102      	bne.n	80036b0 <gc_execute_line+0xcc8>
		mc_dwell(gc_block.values.p);
 80036aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036ac:	f000 fd4c 	bl	8004148 <mc_dwell>
	gc_state.modal.plane_select = gc_block.modal.plane_select;
 80036b0:	797b      	ldrb	r3, [r7, #5]
	if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 80036b2:	2e03      	cmp	r6, #3
	gc_state.modal.plane_select = gc_block.modal.plane_select;
 80036b4:	7123      	strb	r3, [r4, #4]
	gc_state.modal.units = gc_block.modal.units;
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	70a3      	strb	r3, [r4, #2]
	if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 80036ba:	d10d      	bne.n	80036d8 <gc_execute_line+0xcf0>
		gc_state.modal.tool_length = gc_block.modal.tool_length;
 80036bc:	79bb      	ldrb	r3, [r7, #6]
 80036be:	7163      	strb	r3, [r4, #5]
		if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL)
 80036c0:	b90b      	cbnz	r3, 80036c6 <gc_execute_line+0xcde>
			gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	64fb      	str	r3, [r7, #76]	; 0x4c
				!= gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS])
 80036c6:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
		if (gc_state.tool_length_offset
 80036c8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80036ca:	4629      	mov	r1, r5
 80036cc:	f7fd fcee 	bl	80010ac <__aeabi_fcmpeq>
 80036d0:	b910      	cbnz	r0, 80036d8 <gc_execute_line+0xcf0>
			gc_state.tool_length_offset =
 80036d2:	66a5      	str	r5, [r4, #104]	; 0x68
			system_flag_wco_change();
 80036d4:	f003 fe10 	bl	80072f8 <system_flag_wco_change>
	if (gc_state.modal.coord_select != gc_block.modal.coord_select)
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	79a2      	ldrb	r2, [r4, #6]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d00c      	beq.n	80036fa <gc_execute_line+0xd12>
		memcpy(gc_state.coord_system, block_coord_system, N_AXIS * sizeof(float));
 80036e0:	4d6f      	ldr	r5, [pc, #444]	; (80038a0 <gc_execute_line+0xeb8>)
 80036e2:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
		gc_state.modal.coord_select = gc_block.modal.coord_select;
 80036e6:	71a3      	strb	r3, [r4, #6]
		memcpy(gc_state.coord_system, block_coord_system, N_AXIS * sizeof(float));
 80036e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80036ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ee:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80036f2:	e885 0003 	stmia.w	r5, {r0, r1}
		system_flag_wco_change();
 80036f6:	f003 fdff 	bl	80072f8 <system_flag_wco_change>
	gc_state.modal.distance = gc_block.modal.distance;
 80036fa:	793b      	ldrb	r3, [r7, #4]
 80036fc:	70e3      	strb	r3, [r4, #3]
	switch (gc_block.non_modal_command)
 80036fe:	783b      	ldrb	r3, [r7, #0]
 8003700:	2b26      	cmp	r3, #38	; 0x26
 8003702:	f000 80bf 	beq.w	8003884 <gc_execute_line+0xe9c>
 8003706:	f200 8083 	bhi.w	8003810 <gc_execute_line+0xe28>
 800370a:	2b1c      	cmp	r3, #28
 800370c:	f000 80a0 	beq.w	8003850 <gc_execute_line+0xe68>
 8003710:	2b1e      	cmp	r3, #30
 8003712:	f000 809d 	beq.w	8003850 <gc_execute_line+0xe68>
 8003716:	2b0a      	cmp	r3, #10
 8003718:	f000 8084 	beq.w	8003824 <gc_execute_line+0xe3c>
	gc_state.modal.motion = gc_block.modal.motion;
 800371c:	787b      	ldrb	r3, [r7, #1]
	if (gc_state.modal.motion != MOTION_MODE_NONE)
 800371e:	2b50      	cmp	r3, #80	; 0x50
	gc_state.modal.motion = gc_block.modal.motion;
 8003720:	7023      	strb	r3, [r4, #0]
	if (gc_state.modal.motion != MOTION_MODE_NONE)
 8003722:	d010      	beq.n	8003746 <gc_execute_line+0xd5e>
		if (axis_command == AXIS_COMMAND_MOTION_MODE)
 8003724:	2e02      	cmp	r6, #2
 8003726:	d10e      	bne.n	8003746 <gc_execute_line+0xd5e>
			if (gc_state.modal.motion == MOTION_MODE_LINEAR)
 8003728:	2b01      	cmp	r3, #1
 800372a:	f040 80cf 	bne.w	80038cc <gc_execute_line+0xee4>
				mc_line(gc_block.values.xyz, pl_data);
 800372e:	a911      	add	r1, sp, #68	; 0x44
 8003730:	485c      	ldr	r0, [pc, #368]	; (80038a4 <gc_execute_line+0xebc>)
 8003732:	f000 fb21 	bl	8003d78 <mc_line>
				memcpy(gc_state.position, gc_block.values.xyz,
 8003736:	4d5c      	ldr	r5, [pc, #368]	; (80038a8 <gc_execute_line+0xec0>)
 8003738:	4e5a      	ldr	r6, [pc, #360]	; (80038a4 <gc_execute_line+0xebc>)
 800373a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800373c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800373e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003742:	e885 0003 	stmia.w	r5, {r0, r1}
	gc_state.modal.program_flow = gc_block.modal.program_flow;
 8003746:	7a3b      	ldrb	r3, [r7, #8]
 8003748:	71e3      	strb	r3, [r4, #7]
	if (gc_state.modal.program_flow)
 800374a:	b183      	cbz	r3, 800376e <gc_execute_line+0xd86>
		protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 800374c:	f001 fea8 	bl	80054a0 <protocol_buffer_synchronize>
		if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED)
 8003750:	79e3      	ldrb	r3, [r4, #7]
 8003752:	2b03      	cmp	r3, #3
 8003754:	4b55      	ldr	r3, [pc, #340]	; (80038ac <gc_execute_line+0xec4>)
 8003756:	f040 80eb 	bne.w	8003930 <gc_execute_line+0xf48>
			if (sys.state != STATE_CHECK_MODE)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d004      	beq.n	800376a <gc_execute_line+0xd82>
				system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8003760:	2008      	movs	r0, #8
 8003762:	f003 fe0d 	bl	8007380 <system_set_exec_state_flag>
				protocol_execute_realtime(); // Execute suspend.
 8003766:	f001 fd33 	bl	80051d0 <protocol_execute_realtime>
		gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 800376a:	2300      	movs	r3, #0
 800376c:	71e3      	strb	r3, [r4, #7]
	if (gc_block.modal.digital)
 800376e:	7b3c      	ldrb	r4, [r7, #12]
 8003770:	b154      	cbz	r4, 8003788 <gc_execute_line+0xda0>
		output_select = trunc(gc_block.values.p); // Convert p value to int.
 8003772:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003774:	f7fc fe5c 	bl	8000430 <__aeabi_f2d>
 8003778:	f004 fe92 	bl	80084a0 <trunc>
 800377c:	f7fd f984 	bl	8000a88 <__aeabi_d2uiz>
		outputs_digital_action(output_select, gc_block.modal.digital);
 8003780:	4621      	mov	r1, r4
 8003782:	b2c0      	uxtb	r0, r0
 8003784:	f004 f80e 	bl	80077a4 <outputs_digital_action>
	if (gc_block.modal.waitoninput)
 8003788:	7b7b      	ldrb	r3, [r7, #13]
 800378a:	b16b      	cbz	r3, 80037a8 <gc_execute_line+0xdc0>
		input_select = trunc(gc_block.values.p); // Convert p value to int.
 800378c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800378e:	f7fc fe4f 	bl	8000430 <__aeabi_f2d>
 8003792:	f004 fe85 	bl	80084a0 <trunc>
 8003796:	f7fd f977 	bl	8000a88 <__aeabi_d2uiz>
		wait_on_input_action(input_select, gc_block.values.l, &gc_block.values.q);
 800379a:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 800379e:	4a44      	ldr	r2, [pc, #272]	; (80038b0 <gc_execute_line+0xec8>)
 80037a0:	4621      	mov	r1, r4
 80037a2:	b2c0      	uxtb	r0, r0
 80037a4:	f004 f828 	bl	80077f8 <wait_on_input_action>
	if (gc_block.modal.analog)
 80037a8:	7bbb      	ldrb	r3, [r7, #14]
 80037aa:	b123      	cbz	r3, 80037b6 <gc_execute_line+0xdce>
		outputs_analog_action(gc_block.values.e, &gc_block.values.q);
 80037ac:	4940      	ldr	r1, [pc, #256]	; (80038b0 <gc_execute_line+0xec8>)
 80037ae:	f897 005c 	ldrb.w	r0, [r7, #92]	; 0x5c
 80037b2:	f004 f820 	bl	80077f6 <outputs_analog_action>
	if (gc_block.modal.accel_scaling)
 80037b6:	7bfc      	ldrb	r4, [r7, #15]
 80037b8:	2c00      	cmp	r4, #0
 80037ba:	f43f aa4d 	beq.w	8002c58 <gc_execute_line+0x270>
		output_select = trunc(gc_block.values.p); // Convert p value to int.
 80037be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037c0:	f7fc fe36 	bl	8000430 <__aeabi_f2d>
 80037c4:	f004 fe6c 	bl	80084a0 <trunc>
 80037c8:	f7fd f95e 	bl	8000a88 <__aeabi_d2uiz>
		acceleration_scaling(output_select, &gc_block.values.q); // in settings.c
 80037cc:	4938      	ldr	r1, [pc, #224]	; (80038b0 <gc_execute_line+0xec8>)
 80037ce:	b2c0      	uxtb	r0, r0
 80037d0:	f002 fda8 	bl	8006324 <acceleration_scaling>
	return (STATUS_OK);
 80037d4:	2400      	movs	r4, #0
		plan_reset(); // Clear block buffer and planner variables
 80037d6:	f000 ff85 	bl	80046e4 <plan_reset>
 80037da:	f7ff ba3d 	b.w	8002c58 <gc_execute_line+0x270>
			if (gc_state.modal.spindle == SPINDLE_ENABLE_CW)
 80037de:	7a63      	ldrb	r3, [r4, #9]
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	f47f af15 	bne.w	8003610 <gc_execute_line+0xc28>
						|| (gc_state.modal.motion == MOTION_MODE_CCW_ARC))
 80037e6:	7823      	ldrb	r3, [r4, #0]
				if ((gc_state.modal.motion == MOTION_MODE_LINEAR)
 80037e8:	3b01      	subs	r3, #1
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	f00b 0340 	and.w	r3, fp, #64	; 0x40
 80037f0:	d805      	bhi.n	80037fe <gc_execute_line+0xe16>
					if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f43f af0c 	beq.w	8003610 <gc_execute_line+0xc28>
						gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 80037f8:	f04b 0b20 	orr.w	fp, fp, #32
 80037fc:	e708      	b.n	8003610 <gc_execute_line+0xc28>
					if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f47f af06 	bne.w	8003610 <gc_execute_line+0xc28>
 8003804:	e7f8      	b.n	80037f8 <gc_execute_line+0xe10>
					spindle_sync(gc_state.modal.spindle, gc_block.values.s);
 8003806:	4641      	mov	r1, r8
 8003808:	e722      	b.n	8003650 <gc_execute_line+0xc68>
			gc_state.modal.coolant |= gc_block.modal.coolant;
 800380a:	7a22      	ldrb	r2, [r4, #8]
 800380c:	4313      	orrs	r3, r2
 800380e:	e742      	b.n	8003696 <gc_execute_line+0xcae>
	switch (gc_block.non_modal_command)
 8003810:	2b5c      	cmp	r3, #92	; 0x5c
 8003812:	d051      	beq.n	80038b8 <gc_execute_line+0xed0>
 8003814:	2b66      	cmp	r3, #102	; 0x66
 8003816:	d053      	beq.n	80038c0 <gc_execute_line+0xed8>
 8003818:	2b28      	cmp	r3, #40	; 0x28
 800381a:	f47f af7f 	bne.w	800371c <gc_execute_line+0xd34>
		settings_write_coord_data(SETTING_INDEX_G30, gc_state.position);
 800381e:	4922      	ldr	r1, [pc, #136]	; (80038a8 <gc_execute_line+0xec0>)
 8003820:	2007      	movs	r0, #7
 8003822:	e031      	b.n	8003888 <gc_execute_line+0xea0>
		settings_write_coord_data(coord_select, gc_block.values.ijk);
 8003824:	4923      	ldr	r1, [pc, #140]	; (80038b4 <gc_execute_line+0xecc>)
 8003826:	9806      	ldr	r0, [sp, #24]
 8003828:	f002 fb64 	bl	8005ef4 <settings_write_coord_data>
		if (gc_state.modal.coord_select == coord_select)
 800382c:	79a3      	ldrb	r3, [r4, #6]
 800382e:	9a06      	ldr	r2, [sp, #24]
 8003830:	4293      	cmp	r3, r2
 8003832:	f47f af73 	bne.w	800371c <gc_execute_line+0xd34>
			memcpy(gc_state.coord_system, gc_block.values.ijk,
 8003836:	4d1a      	ldr	r5, [pc, #104]	; (80038a0 <gc_execute_line+0xeb8>)
 8003838:	f8df e078 	ldr.w	lr, [pc, #120]	; 80038b4 <gc_execute_line+0xecc>
		memcpy(gc_state.coord_offset, gc_block.values.xyz,
 800383c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003842:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8003846:	e885 0003 	stmia.w	r5, {r0, r1}
		system_flag_wco_change();
 800384a:	f003 fd55 	bl	80072f8 <system_flag_wco_change>
		break;
 800384e:	e765      	b.n	800371c <gc_execute_line+0xd34>
		pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8003850:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		if (axis_command)
 800385c:	b11e      	cbz	r6, 8003866 <gc_execute_line+0xe7e>
			mc_line(gc_block.values.xyz, pl_data);
 800385e:	a911      	add	r1, sp, #68	; 0x44
 8003860:	4810      	ldr	r0, [pc, #64]	; (80038a4 <gc_execute_line+0xebc>)
 8003862:	f000 fa89 	bl	8003d78 <mc_line>
		mc_line(gc_block.values.ijk, pl_data);
 8003866:	a911      	add	r1, sp, #68	; 0x44
 8003868:	4812      	ldr	r0, [pc, #72]	; (80038b4 <gc_execute_line+0xecc>)
 800386a:	f000 fa85 	bl	8003d78 <mc_line>
		memcpy(gc_state.position, gc_block.values.ijk, N_AXIS * sizeof(float));
 800386e:	4d0e      	ldr	r5, [pc, #56]	; (80038a8 <gc_execute_line+0xec0>)
 8003870:	f8df e040 	ldr.w	lr, [pc, #64]	; 80038b4 <gc_execute_line+0xecc>
 8003874:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800387a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800387e:	e885 0003 	stmia.w	r5, {r0, r1}
		break;
 8003882:	e74b      	b.n	800371c <gc_execute_line+0xd34>
		settings_write_coord_data(SETTING_INDEX_G28, gc_state.position);
 8003884:	2006      	movs	r0, #6
 8003886:	4908      	ldr	r1, [pc, #32]	; (80038a8 <gc_execute_line+0xec0>)
		settings_write_coord_data(SETTING_INDEX_G30, gc_state.position);
 8003888:	f002 fb34 	bl	8005ef4 <settings_write_coord_data>
		break;
 800388c:	e746      	b.n	800371c <gc_execute_line+0xd34>
 800388e:	bf00      	nop
 8003890:	66666666 	.word	0x66666666
 8003894:	40396666 	.word	0x40396666
 8003898:	20003f70 	.word	0x20003f70
 800389c:	20003d20 	.word	0x20003d20
 80038a0:	20003d58 	.word	0x20003d58
 80038a4:	20003dd0 	.word	0x20003dd0
 80038a8:	20003d40 	.word	0x20003d40
 80038ac:	200038d4 	.word	0x200038d4
 80038b0:	20003dec 	.word	0x20003dec
 80038b4:	20003da0 	.word	0x20003da0
		memcpy(gc_state.coord_offset, gc_block.values.xyz,
 80038b8:	4d48      	ldr	r5, [pc, #288]	; (80039dc <gc_execute_line+0xff4>)
 80038ba:	f8df e12c 	ldr.w	lr, [pc, #300]	; 80039e8 <gc_execute_line+0x1000>
 80038be:	e7bd      	b.n	800383c <gc_execute_line+0xe54>
		clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 80038c0:	2218      	movs	r2, #24
 80038c2:	2100      	movs	r1, #0
 80038c4:	4845      	ldr	r0, [pc, #276]	; (80039dc <gc_execute_line+0xff4>)
 80038c6:	f004 f824 	bl	8007912 <memset>
 80038ca:	e7be      	b.n	800384a <gc_execute_line+0xe62>
			else if (gc_state.modal.motion == MOTION_MODE_SEEK)
 80038cc:	b933      	cbnz	r3, 80038dc <gc_execute_line+0xef4>
				pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 80038ce:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80038da:	e728      	b.n	800372e <gc_execute_line+0xd46>
			else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC)
 80038dc:	3b02      	subs	r3, #2
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d812      	bhi.n	8003908 <gc_execute_line+0xf20>
				mc_arc(gc_block.values.xyz, pl_data, gc_state.position,
 80038e2:	f3cb 0380 	ubfx	r3, fp, #2, #1
 80038e6:	9304      	str	r3, [sp, #16]
 80038e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038ea:	4a3d      	ldr	r2, [pc, #244]	; (80039e0 <gc_execute_line+0xff8>)
 80038ec:	9303      	str	r3, [sp, #12]
 80038ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038f0:	a911      	add	r1, sp, #68	; 0x44
 80038f2:	9302      	str	r3, [sp, #8]
 80038f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4b39      	ldr	r3, [pc, #228]	; (80039e4 <gc_execute_line+0xffc>)
 80038fe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003902:	f000 fa6d 	bl	8003de0 <mc_arc>
 8003906:	e716      	b.n	8003736 <gc_execute_line+0xd4e>
				pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003908:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
				gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data,
 800390c:	465a      	mov	r2, fp
				pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 800390e:	f043 0304 	orr.w	r3, r3, #4
				gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data,
 8003912:	a911      	add	r1, sp, #68	; 0x44
 8003914:	4834      	ldr	r0, [pc, #208]	; (80039e8 <gc_execute_line+0x1000>)
				pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003916:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data,
 800391a:	f000 fc4f 	bl	80041bc <mc_probe_cycle>
			if (gc_update_pos == GC_UPDATE_POS_TARGET)
 800391e:	2800      	cmp	r0, #0
 8003920:	f43f af09 	beq.w	8003736 <gc_execute_line+0xd4e>
			else if (gc_update_pos == GC_UPDATE_POS_SYSTEM)
 8003924:	2801      	cmp	r0, #1
 8003926:	f47f af0e 	bne.w	8003746 <gc_execute_line+0xd5e>
				gc_sync_position(); // gc_state.position[] = sys_position
 800392a:	f7ff f855 	bl	80029d8 <gc_sync_position>
 800392e:	e70a      	b.n	8003746 <gc_execute_line+0xd5e>
			gc_state.modal.motion = MOTION_MODE_LINEAR;
 8003930:	2201      	movs	r2, #1
 8003932:	7022      	strb	r2, [r4, #0]
			sys.f_override = DEFAULT_FEED_OVERRIDE;
 8003934:	2264      	movs	r2, #100	; 0x64
			gc_state.modal.plane_select = PLANE_SELECT_XY;
 8003936:	2500      	movs	r5, #0
			sys.f_override = DEFAULT_FEED_OVERRIDE;
 8003938:	721a      	strb	r2, [r3, #8]
			sys.r_override = DEFAULT_RAPID_OVERRIDE;
 800393a:	725a      	strb	r2, [r3, #9]
			sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 800393c:	729a      	strb	r2, [r3, #10]
			if (sys.state != STATE_CHECK_MODE)
 800393e:	781b      	ldrb	r3, [r3, #0]
			gc_state.modal.plane_select = PLANE_SELECT_XY;
 8003940:	7125      	strb	r5, [r4, #4]
			if (sys.state != STATE_CHECK_MODE)
 8003942:	2b02      	cmp	r3, #2
			gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 8003944:	70e5      	strb	r5, [r4, #3]
			gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8003946:	7065      	strb	r5, [r4, #1]
			gc_state.modal.coord_select = 0; // G54
 8003948:	71a5      	strb	r5, [r4, #6]
			gc_state.modal.spindle = SPINDLE_DISABLE;
 800394a:	7265      	strb	r5, [r4, #9]
			gc_state.modal.coolant = COOLANT_DISABLE;
 800394c:	7225      	strb	r5, [r4, #8]
			if (sys.state != STATE_CHECK_MODE)
 800394e:	d00f      	beq.n	8003970 <gc_execute_line+0xf88>
				if (!(settings_read_coord_data(gc_state.modal.coord_select,
 8003950:	4926      	ldr	r1, [pc, #152]	; (80039ec <gc_execute_line+0x1004>)
 8003952:	4628      	mov	r0, r5
 8003954:	f002 fba7 	bl	80060a6 <settings_read_coord_data>
 8003958:	2800      	cmp	r0, #0
 800395a:	f43f ab42 	beq.w	8002fe2 <gc_execute_line+0x5fa>
				system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 800395e:	f003 fccb 	bl	80072f8 <system_flag_wco_change>
				spindle_set_state(SPINDLE_DISABLE, 0.0);
 8003962:	4628      	mov	r0, r5
 8003964:	2100      	movs	r1, #0
 8003966:	f002 fdd5 	bl	8006514 <spindle_set_state>
				coolant_set_state(COOLANT_DISABLE);
 800396a:	4628      	mov	r0, r5
 800396c:	f7fe ff4c 	bl	8002808 <coolant_set_state>
			report_feedback_message(MESSAGE_PROGRAM_END);
 8003970:	2008      	movs	r0, #8
 8003972:	f001 fe13 	bl	800559c <report_feedback_message>
 8003976:	e6f8      	b.n	800376a <gc_execute_line+0xd82>
			FAIL(STATUS_EXPECTED_COMMAND_LETTER);
 8003978:	2401      	movs	r4, #1
 800397a:	f7ff b96d 	b.w	8002c58 <gc_execute_line+0x270>
			FAIL(STATUS_BAD_NUMBER_FORMAT);
 800397e:	2402      	movs	r4, #2
 8003980:	f7ff b96a 	b.w	8002c58 <gc_execute_line+0x270>
						FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT);
 8003984:	2418      	movs	r4, #24
 8003986:	f7ff b967 	b.w	8002c58 <gc_execute_line+0x270>
					FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED);
 800398a:	2426      	movs	r4, #38	; 0x26
 800398c:	f7ff b964 	b.w	8002c58 <gc_execute_line+0x270>
				FAIL(STATUS_GCODE_WORD_REPEATED);
 8003990:	2419      	movs	r4, #25
 8003992:	f7ff b961 	b.w	8002c58 <gc_execute_line+0x270>
					FAIL(STATUS_NEGATIVE_VALUE);
 8003996:	2404      	movs	r4, #4
 8003998:	f7ff b95e 	b.w	8002c58 <gc_execute_line+0x270>
			FAIL(STATUS_GCODE_INVALID_LINE_NUMBER);
 800399c:	241b      	movs	r4, #27
 800399e:	f7ff b95b 	b.w	8002c58 <gc_execute_line+0x270>
				FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR);
 80039a2:	2425      	movs	r4, #37	; 0x25
 80039a4:	f7ff b958 	b.w	8002c58 <gc_execute_line+0x270>
			FAIL(STATUS_GCODE_AXIS_WORDS_EXIST);
 80039a8:	241f      	movs	r4, #31
 80039aa:	f7ff b955 	b.w	8002c58 <gc_execute_line+0x270>
				FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE);
 80039ae:	2416      	movs	r4, #22
 80039b0:	f7ff b952 	b.w	8002c58 <gc_execute_line+0x270>
					FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE);
 80039b4:	2420      	movs	r4, #32
 80039b6:	f7ff b94f 	b.w	8002c58 <gc_execute_line+0x270>
						FAIL(STATUS_GCODE_ARC_RADIUS_ERROR);
 80039ba:	2422      	movs	r4, #34	; 0x22
 80039bc:	f7ff b94c 	b.w	8002c58 <gc_execute_line+0x270>
						FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE);
 80039c0:	2423      	movs	r4, #35	; 0x23
 80039c2:	f7ff b949 	b.w	8002c58 <gc_execute_line+0x270>
		FAIL(STATUS_GCODE_UNUSED_WORDS);
 80039c6:	2424      	movs	r4, #36	; 0x24
 80039c8:	f7ff b946 	b.w	8002c58 <gc_execute_line+0x270>
			FAIL(STATUS_INVALID_JOG_COMMAND)
 80039cc:	2410      	movs	r4, #16
 80039ce:	f7ff b943 	b.w	8002c58 <gc_execute_line+0x270>
		char_counter = 0;
 80039d2:	f88d b03f 	strb.w	fp, [sp, #63]	; 0x3f
 80039d6:	f7ff b834 	b.w	8002a42 <gc_execute_line+0x5a>
 80039da:	bf00      	nop
 80039dc:	20003d70 	.word	0x20003d70
 80039e0:	20003d40 	.word	0x20003d40
 80039e4:	20003da0 	.word	0x20003da0
 80039e8:	20003dd0 	.word	0x20003dd0
 80039ec:	20003d58 	.word	0x20003d58

080039f0 <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 80039f0:	b538      	push	{r3, r4, r5, lr}
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
 80039f2:	690b      	ldr	r3, [r1, #16]
{
 80039f4:	4605      	mov	r5, r0
  pl_data->feed_rate = gc_block->values.f;
 80039f6:	6003      	str	r3, [r0, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 80039f8:	7a03      	ldrb	r3, [r0, #8]
 80039fa:	f101 0444 	add.w	r4, r1, #68	; 0x44
 80039fe:	f043 0304 	orr.w	r3, r3, #4
 8003a02:	7203      	strb	r3, [r0, #8]
  #ifdef USE_LINE_NUMBERS
    pl_data->line_number = gc_block->values.n;
  #endif

  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <jog_execute+0x58>)
 8003a06:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003a0a:	f013 0f20 	tst.w	r3, #32
 8003a0e:	d110      	bne.n	8003a32 <jog_execute+0x42>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
  }

  // Valid jog command. Plan, set state, and execute.
  mc_line(gc_block->values.xyz,pl_data);
 8003a10:	4629      	mov	r1, r5
  if (sys.state == STATE_IDLE) {
 8003a12:	4d0e      	ldr	r5, [pc, #56]	; (8003a4c <jog_execute+0x5c>)
  mc_line(gc_block->values.xyz,pl_data);
 8003a14:	4620      	mov	r0, r4
 8003a16:	f000 f9af 	bl	8003d78 <mc_line>
  if (sys.state == STATE_IDLE) {
 8003a1a:	782c      	ldrb	r4, [r5, #0]
 8003a1c:	b984      	cbnz	r4, 8003a40 <jog_execute+0x50>
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8003a1e:	f000 fe91 	bl	8004744 <plan_get_current_block>
 8003a22:	b168      	cbz	r0, 8003a40 <jog_execute+0x50>
      sys.state = STATE_JOG;
 8003a24:	2320      	movs	r3, #32
 8003a26:	702b      	strb	r3, [r5, #0]
      st_prep_buffer();
 8003a28:	f003 f84a 	bl	8006ac0 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8003a2c:	f002 fdb0 	bl	8006590 <st_wake_up>
 8003a30:	e007      	b.n	8003a42 <jog_execute+0x52>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8003a32:	4620      	mov	r0, r4
 8003a34:	f003 fc86 	bl	8007344 <system_check_travel_limits>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d0e9      	beq.n	8003a10 <jog_execute+0x20>
 8003a3c:	240f      	movs	r4, #15
 8003a3e:	e000      	b.n	8003a42 <jog_execute+0x52>
    }
  }

  return(STATUS_OK);
 8003a40:	2400      	movs	r4, #0
}
 8003a42:	4620      	mov	r0, r4
 8003a44:	bd38      	pop	{r3, r4, r5, pc}
 8003a46:	bf00      	nop
 8003a48:	20003f70 	.word	0x20003f70
 8003a4c:	200038d4 	.word	0x200038d4

08003a50 <limits_init>:
#endif

void limits_init()
{
#ifdef STM32
  if (bit_isfalse(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <limits_init+0x18>)
 8003a52:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003a56:	071b      	lsls	r3, r3, #28
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003a58:	bf5e      	ittt	pl
 8003a5a:	f44f 7280 	movpl.w	r2, #256	; 0x100
 8003a5e:	4b03      	ldrpl	r3, [pc, #12]	; (8003a6c <limits_init+0x1c>)
 8003a60:	f8c3 2084 	strpl.w	r2, [r3, #132]	; 0x84
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20003f70 	.word	0x20003f70
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <limits_disable>:
 8003a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a74:	4b01      	ldr	r3, [pc, #4]	; (8003a7c <limits_disable+0xc>)
 8003a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003a7a:	4770      	bx	lr
 8003a7c:	e000e100 	.word	0xe000e100

08003a80 <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8003a80:	b530      	push	{r4, r5, lr}
  return (READ_REG(GPIOx->IDR));
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <limits_get_state+0x40>)
	#endif

	#ifdef INVERT_LIMIT_PIN_MASK
		pin ^= INVERT_LIMIT_PIN_MASK;
	#endif
	if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIM_MASK; }
 8003a84:	4a0f      	ldr	r2, [pc, #60]	; (8003ac4 <limits_get_state+0x44>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    pin = GPIO_ReadInputData(LIM_GPIO_Port);
 8003a8c:	b29b      	uxth	r3, r3
	if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIM_MASK; }
 8003a8e:	0652      	lsls	r2, r2, #25
 8003a90:	bf58      	it	pl
 8003a92:	f483 437c 	eorpl.w	r3, r3, #64512	; 0xfc00
	if (pin)
 8003a96:	b18b      	cbz	r3, 8003abc <limits_get_state+0x3c>
 8003a98:	2200      	movs	r2, #0
	{
		uint8_t idx;
		for (idx=0; idx<N_AXIS; idx++)
		{
			if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003a9a:	2401      	movs	r4, #1
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	490a      	ldr	r1, [pc, #40]	; (8003ac8 <limits_get_state+0x48>)
 8003aa0:	f831 5012 	ldrh.w	r5, [r1, r2, lsl #1]
 8003aa4:	422b      	tst	r3, r5
 8003aa6:	bf1c      	itt	ne
 8003aa8:	fa04 f502 	lslne.w	r5, r4, r2
 8003aac:	4328      	orrne	r0, r5
 8003aae:	f102 0201 	add.w	r2, r2, #1
 8003ab2:	bf18      	it	ne
 8003ab4:	b2c0      	uxtbne	r0, r0
		for (idx=0; idx<N_AXIS; idx++)
 8003ab6:	2a06      	cmp	r2, #6
 8003ab8:	d1f2      	bne.n	8003aa0 <limits_get_state+0x20>
 8003aba:	bd30      	pop	{r4, r5, pc}
  uint8_t limit_state = 0;
 8003abc:	4618      	mov	r0, r3
      if (pin & get_limit_pin_mask(idx)) { limit_state |= (1 << idx); }
    }
  }
#endif
  return(limit_state);
}
 8003abe:	bd30      	pop	{r4, r5, pc}
 8003ac0:	40010c00 	.word	0x40010c00
 8003ac4:	20003f70 	.word	0x20003f70
 8003ac8:	080099fe 	.word	0x080099fe

08003acc <HandleLimitIT>:
	}
*/


void HandleLimitIT(void)
{
 8003acc:	b508      	push	{r3, lr}
	// Ignore limit switches if already in an alarm state or in-process of executing an alarm.
	// When in the alarm state, Grbl should have been reset or will force a reset, so any pending
	// moves in the planner and serial buffers are all cleared and newly sent blocks will be
	// locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
	// limit setting if their limits are constantly triggering after a reset and move their axes.
	if (sys.state != STATE_ALARM)
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HandleLimitIT+0x28>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d00c      	beq.n	8003af0 <HandleLimitIT+0x24>
	{
		if (!(sys_rt_exec_alarm))
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HandleLimitIT+0x2c>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	b94b      	cbnz	r3, 8003af0 <HandleLimitIT+0x24>
		{
#ifdef HARD_LIMIT_FORCE_STATE_CHECK
			// Check limit pin state.
			if (limits_get_state())
 8003adc:	f7ff ffd0 	bl	8003a80 <limits_get_state>
 8003ae0:	b130      	cbz	r0, 8003af0 <HandleLimitIT+0x24>
			{
				mc_reset(); // Initiate system kill.
 8003ae2:	f000 fbd3 	bl	800428c <mc_reset>
			system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif //HARD_LIMIT_FORCE_STATE_CHECK
		}
	}

}
 8003ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8003aea:	2001      	movs	r0, #1
 8003aec:	f003 bde2 	b.w	80076b4 <system_set_exec_alarm>
 8003af0:	bd08      	pop	{r3, pc}
 8003af2:	bf00      	nop
 8003af4:	200038d4 	.word	0x200038d4
 8003af8:	2000391c 	.word	0x2000391c

08003afc <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 8003afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003b00:	4b86      	ldr	r3, [pc, #536]	; (8003d1c <limits_go_home+0x220>)
{
 8003b02:	b08f      	sub	sp, #60	; 0x3c
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003b04:	785c      	ldrb	r4, [r3, #1]
{
 8003b06:	4683      	mov	fp, r0
 8003b08:	9301      	str	r3, [sp, #4]
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003b0a:	2c00      	cmp	r4, #0
 8003b0c:	f040 80b5 	bne.w	8003c7a <limits_go_home+0x17e>

  // Initialize plan data struct for homing motion. Spindle and coolant are disabled.
  plan_line_data_t plan_data;
  plan_line_data_t *pl_data = &plan_data;
  memset(pl_data,0,sizeof(plan_line_data_t));
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8003b10:	2306      	movs	r3, #6
  // Initialize variables used for homing computations.
  uint8_t n_cycle = (2*N_HOMING_LOCATE_CYCLE+1);
  //uint8_t step_pin[N_AXIS];
  uint16_t step_pin[N_AXIS];
  float target[N_AXIS];
  float max_travel = 0.0;
 8003b12:	2500      	movs	r5, #0
    #endif

    if (bit_istrue(cycle_mask,bit(idx))) {
      // Set target based on max_travel setting. Ensure homing switches engaged with search scalar.
      // NOTE: settings.max_travel[] is stored as a negative value.
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003b14:	f04f 0800 	mov.w	r8, #0
 8003b18:	f04f 4940 	mov.w	r9, #3221225472	; 0xc0000000
      step_pin[idx] = step_pin_mask[idx];
 8003b1c:	f8df a214 	ldr.w	sl, [pc, #532]	; 8003d34 <limits_go_home+0x238>
  memset(pl_data,0,sizeof(plan_line_data_t));
 8003b20:	9404      	str	r4, [sp, #16]
 8003b22:	9402      	str	r4, [sp, #8]
 8003b24:	9403      	str	r4, [sp, #12]
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8003b26:	f88d 3010 	strb.w	r3, [sp, #16]
      step_pin[idx] = step_pin_mask[idx];
 8003b2a:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
 8003b2e:	aa05      	add	r2, sp, #20
 8003b30:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003b34:	fa4b f304 	asr.w	r3, fp, r4
 8003b38:	07d8      	lsls	r0, r3, #31
 8003b3a:	d518      	bpl.n	8003b6e <limits_go_home+0x72>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003b3c:	4b78      	ldr	r3, [pc, #480]	; (8003d20 <limits_go_home+0x224>)
 8003b3e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003b42:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003b44:	f7fc fc74 	bl	8000430 <__aeabi_f2d>
 8003b48:	4642      	mov	r2, r8
 8003b4a:	464b      	mov	r3, r9
 8003b4c:	f7fc fcc4 	bl	80004d8 <__aeabi_dmul>
 8003b50:	4606      	mov	r6, r0
 8003b52:	460f      	mov	r7, r1
 8003b54:	4628      	mov	r0, r5
 8003b56:	f7fc fc6b 	bl	8000430 <__aeabi_f2d>
 8003b5a:	4632      	mov	r2, r6
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	f7fc ff4b 	bl	80009f8 <__aeabi_dcmpgt>
 8003b62:	b920      	cbnz	r0, 8003b6e <limits_go_home+0x72>
 8003b64:	4630      	mov	r0, r6
 8003b66:	4639      	mov	r1, r7
 8003b68:	f7fc ffae 	bl	8000ac8 <__aeabi_d2f>
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8003b70:	2c06      	cmp	r4, #6
 8003b72:	d1da      	bne.n	8003b2a <limits_go_home+0x2e>
    }
  }

  // Set search mode with approach at seek rate to quickly engage the specified cycle_mask limit switches.
  bool approach = true;
  float homing_rate = settings.homing_seek_rate;
 8003b74:	2404      	movs	r4, #4
  bool approach = true;
 8003b76:	2701      	movs	r7, #1
  float homing_rate = settings.homing_seek_rate;
 8003b78:	4e69      	ldr	r6, [pc, #420]	; (8003d20 <limits_go_home+0x224>)
 8003b7a:	f8d6 a080 	ldr.w	sl, [r6, #128]	; 0x80
  uint8_t limit_state, n_active_axis;
  uint16_t axislock;

  do {

    system_convert_array_steps_to_mpos(target,sys_position);
 8003b7e:	f10d 0820 	add.w	r8, sp, #32
 8003b82:	4640      	mov	r0, r8
 8003b84:	4967      	ldr	r1, [pc, #412]	; (8003d24 <limits_go_home+0x228>)
 8003b86:	f003 fbcf 	bl	8007328 <system_convert_array_steps_to_mpos>

    // Initialize and declare variables needed for homing routine.
    axislock = 0;
    n_active_axis = 0;
 8003b8a:	2000      	movs	r0, #0
        #else
          sys_position[idx] = 0;
        #endif
        // Set target direction based on cycle mask and homing cycle approach state.
        // NOTE: This happens to compile smaller than any other implementation tried.
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003b8c:	4603      	mov	r3, r0
    axislock = 0;
 8003b8e:	4681      	mov	r9, r0
          sys_position[idx] = 0;
 8003b90:	4686      	mov	lr, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003b92:	f896 c079 	ldrb.w	ip, [r6, #121]	; 0x79
          if (approach) { target[idx] = -max_travel; }
          else { target[idx] = max_travel; }
        } else {
          if (approach) { target[idx] = max_travel; }
          else { target[idx] = -max_travel; }
 8003b96:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003b9a:	fa4b f103 	asr.w	r1, fp, r3
 8003b9e:	07c9      	lsls	r1, r1, #31
 8003ba0:	d515      	bpl.n	8003bce <limits_go_home+0xd2>
          sys_position[idx] = 0;
 8003ba2:	4960      	ldr	r1, [pc, #384]	; (8003d24 <limits_go_home+0x228>)
        n_active_axis++;
 8003ba4:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 8003ba6:	f841 e023 	str.w	lr, [r1, r3, lsl #2]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003baa:	fa4c f103 	asr.w	r1, ip, r3
 8003bae:	07c9      	lsls	r1, r1, #31
        n_active_axis++;
 8003bb0:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003bb2:	d503      	bpl.n	8003bbc <limits_go_home+0xc0>
          if (approach) { target[idx] = -max_travel; }
 8003bb4:	b127      	cbz	r7, 8003bc0 <limits_go_home+0xc4>
          else { target[idx] = -max_travel; }
 8003bb6:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
 8003bba:	e003      	b.n	8003bc4 <limits_go_home+0xc8>
          if (approach) { target[idx] = max_travel; }
 8003bbc:	2f00      	cmp	r7, #0
 8003bbe:	d0fa      	beq.n	8003bb6 <limits_go_home+0xba>
 8003bc0:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
        }
        // Apply axislock to the step port pins active in this cycle.
        axislock |= step_pin[idx];
 8003bc4:	a905      	add	r1, sp, #20
 8003bc6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8003bca:	ea49 0901 	orr.w	r9, r9, r1
 8003bce:	3301      	adds	r3, #1
    for (idx=0; idx<N_AXIS; idx++) {
 8003bd0:	2b06      	cmp	r3, #6
 8003bd2:	d1e2      	bne.n	8003b9a <limits_go_home+0x9e>
      }

    }
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003bd4:	f7fd f87e 	bl	8000cd4 <__aeabi_ui2f>
 8003bd8:	f004 fd94 	bl	8008704 <sqrtf>
    sys.homing_axis_lock = axislock;
 8003bdc:	9b01      	ldr	r3, [sp, #4]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003bde:	4601      	mov	r1, r0
    sys.homing_axis_lock = axislock;
 8003be0:	f8a3 9006 	strh.w	r9, [r3, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003be4:	4650      	mov	r0, sl
 8003be6:	f7fd f8cd 	bl	8000d84 <__aeabi_fmul>

    // Perform homing cycle. Planner buffer should be empty, as required to initiate the homing cycle.
    pl_data->feed_rate = homing_rate; // Set current homing rate.
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8003bea:	a902      	add	r1, sp, #8
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 8003bec:	9002      	str	r0, [sp, #8]
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8003bee:	a808      	add	r0, sp, #32
 8003bf0:	f000 fe6e 	bl	80048d0 <plan_buffer_line>

    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	9a01      	ldr	r2, [sp, #4]
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
          break;
        }
      }

    } while (STEP_MASK & axislock);
 8003bf8:	f641 6806 	movw	r8, #7686	; 0x1e06
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8003bfc:	7113      	strb	r3, [r2, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 8003bfe:	f002 ff5f 	bl	8006ac0 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 8003c02:	f002 fcc5 	bl	8006590 <st_wake_up>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8003c06:	4d48      	ldr	r5, [pc, #288]	; (8003d28 <limits_go_home+0x22c>)
      if (approach) {
 8003c08:	b1a7      	cbz	r7, 8003c34 <limits_go_home+0x138>
        limit_state = limits_get_state();
 8003c0a:	f7ff ff39 	bl	8003a80 <limits_get_state>
 8003c0e:	2300      	movs	r3, #0
          if (axislock & step_pin[idx]) {
 8003c10:	aa05      	add	r2, sp, #20
 8003c12:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003c16:	ea12 0f09 	tst.w	r2, r9
 8003c1a:	d005      	beq.n	8003c28 <limits_go_home+0x12c>
            if (limit_state & (1 << idx)) {
 8003c1c:	fa40 f103 	asr.w	r1, r0, r3
 8003c20:	07c9      	lsls	r1, r1, #31
                axislock &= ~(step_pin[idx]);
 8003c22:	bf48      	it	mi
 8003c24:	ea29 0902 	bicmi.w	r9, r9, r2
 8003c28:	3301      	adds	r3, #1
        for (idx=0; idx<N_AXIS; idx++) {
 8003c2a:	2b06      	cmp	r3, #6
 8003c2c:	d1f0      	bne.n	8003c10 <limits_go_home+0x114>
        sys.homing_axis_lock = axislock;
 8003c2e:	9b01      	ldr	r3, [sp, #4]
 8003c30:	f8a3 9006 	strh.w	r9, [r3, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8003c34:	f002 ff44 	bl	8006ac0 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8003c38:	782b      	ldrb	r3, [r5, #0]
 8003c3a:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003c3e:	d05a      	beq.n	8003cf6 <limits_go_home+0x1fa>
        uint8_t rt_exec = sys_rt_exec_state;
 8003c40:	782d      	ldrb	r5, [r5, #0]
 8003c42:	b2ed      	uxtb	r5, r5
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003c44:	06eb      	lsls	r3, r5, #27
 8003c46:	d502      	bpl.n	8003c4e <limits_go_home+0x152>
 8003c48:	2006      	movs	r0, #6
 8003c4a:	f003 fd33 	bl	80076b4 <system_set_exec_alarm>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8003c4e:	06a8      	lsls	r0, r5, #26
 8003c50:	d502      	bpl.n	8003c58 <limits_go_home+0x15c>
 8003c52:	2007      	movs	r0, #7
 8003c54:	f003 fd2e 	bl	80076b4 <system_set_exec_alarm>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003c58:	2f00      	cmp	r7, #0
 8003c5a:	d15a      	bne.n	8003d12 <limits_go_home+0x216>
 8003c5c:	f7ff ff10 	bl	8003a80 <limits_get_state>
 8003c60:	ea1b 0f00 	tst.w	fp, r0
 8003c64:	d002      	beq.n	8003c6c <limits_go_home+0x170>
 8003c66:	2008      	movs	r0, #8
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8003c68:	f003 fd24 	bl	80076b4 <system_set_exec_alarm>
        if (sys_rt_exec_alarm) {
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <limits_go_home+0x230>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b133      	cbz	r3, 8003c80 <limits_go_home+0x184>
          mc_reset(); // Stop motors, if they are running.
 8003c72:	f000 fb0b 	bl	800428c <mc_reset>
          protocol_execute_realtime();
 8003c76:	f001 faab 	bl	80051d0 <protocol_execute_realtime>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
}
 8003c7a:	b00f      	add	sp, #60	; 0x3c
 8003c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8003c80:	2004      	movs	r0, #4
 8003c82:	f003 fd0d 	bl	80076a0 <system_clear_exec_state_flag>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8003c86:	f002 fe97 	bl	80069b8 <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 8003c8a:	f8b6 0084 	ldrh.w	r0, [r6, #132]	; 0x84
 8003c8e:	f000 fbe1 	bl	8004454 <delay_ms>
    if (approach) {
 8003c92:	f097 0701 	eors.w	r7, r7, #1
 8003c96:	d032      	beq.n	8003cfe <limits_go_home+0x202>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8003c98:	4925      	ldr	r1, [pc, #148]	; (8003d30 <limits_go_home+0x234>)
 8003c9a:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 8003c9e:	f7fd f871 	bl	8000d84 <__aeabi_fmul>
 8003ca2:	4605      	mov	r5, r0
      homing_rate = settings.homing_feed_rate;
 8003ca4:	f8d6 a07c 	ldr.w	sl, [r6, #124]	; 0x7c
 8003ca8:	3c01      	subs	r4, #1
  } while (n_cycle-- > 0);
 8003caa:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003cae:	f47f af66 	bne.w	8003b7e <limits_go_home+0x82>
 8003cb2:	4d1b      	ldr	r5, [pc, #108]	; (8003d20 <limits_go_home+0x224>)
        sys_position[idx] = set_axis_position;
 8003cb4:	4f1b      	ldr	r7, [pc, #108]	; (8003d24 <limits_go_home+0x228>)
    if (cycle_mask & bit(idx)) {
 8003cb6:	fa4b f304 	asr.w	r3, fp, r4
 8003cba:	07d9      	lsls	r1, r3, #31
 8003cbc:	d512      	bpl.n	8003ce4 <limits_go_home+0x1e8>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003cbe:	f896 3079 	ldrb.w	r3, [r6, #121]	; 0x79
 8003cc2:	4123      	asrs	r3, r4
 8003cc4:	07da      	lsls	r2, r3, #31
 8003cc6:	d51f      	bpl.n	8003d08 <limits_go_home+0x20c>
          set_axis_position = lround((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 8003cc8:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 8003ccc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8003cce:	f7fc ff51 	bl	8000b74 <__addsf3>
          set_axis_position = lround(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8003cd2:	6829      	ldr	r1, [r5, #0]
 8003cd4:	f7fd f856 	bl	8000d84 <__aeabi_fmul>
 8003cd8:	f7fc fbaa 	bl	8000430 <__aeabi_f2d>
 8003cdc:	f004 fb58 	bl	8008390 <lround>
        sys_position[idx] = set_axis_position;
 8003ce0:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8003ce4:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8003ce6:	2c06      	cmp	r4, #6
 8003ce8:	f105 0504 	add.w	r5, r5, #4
 8003cec:	d1e3      	bne.n	8003cb6 <limits_go_home+0x1ba>
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 8003cee:	2300      	movs	r3, #0
 8003cf0:	9a01      	ldr	r2, [sp, #4]
 8003cf2:	7113      	strb	r3, [r2, #4]
 8003cf4:	e7c1      	b.n	8003c7a <limits_go_home+0x17e>
    } while (STEP_MASK & axislock);
 8003cf6:	ea19 0f08 	tst.w	r9, r8
 8003cfa:	d185      	bne.n	8003c08 <limits_go_home+0x10c>
 8003cfc:	e7c3      	b.n	8003c86 <limits_go_home+0x18a>
      max_travel = settings.homing_pulloff;
 8003cfe:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
      homing_rate = settings.homing_seek_rate;
 8003d02:	f8d6 a080 	ldr.w	sl, [r6, #128]	; 0x80
 8003d06:	e7cf      	b.n	8003ca8 <limits_go_home+0x1ac>
          set_axis_position = lround(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8003d08:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 8003d0c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003d10:	e7df      	b.n	8003cd2 <limits_go_home+0x1d6>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8003d12:	076b      	lsls	r3, r5, #29
 8003d14:	d5aa      	bpl.n	8003c6c <limits_go_home+0x170>
 8003d16:	2009      	movs	r0, #9
 8003d18:	e7a6      	b.n	8003c68 <limits_go_home+0x16c>
 8003d1a:	bf00      	nop
 8003d1c:	200038d4 	.word	0x200038d4
 8003d20:	20003f70 	.word	0x20003f70
 8003d24:	20003904 	.word	0x20003904
 8003d28:	200038e9 	.word	0x200038e9
 8003d2c:	2000391c 	.word	0x2000391c
 8003d30:	40a00000 	.word	0x40a00000
 8003d34:	08009a0a 	.word	0x08009a0a

08003d38 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 8003d38:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 8003d3a:	f003 fb03 	bl	8007344 <system_check_travel_limits>
 8003d3e:	b1c0      	cbz	r0, 8003d72 <limits_soft_check+0x3a>
    sys.soft_limit = true;
 8003d40:	2201      	movs	r2, #1
 8003d42:	4c0c      	ldr	r4, [pc, #48]	; (8003d74 <limits_soft_check+0x3c>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 8003d44:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 8003d46:	70e2      	strb	r2, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 8003d48:	2808      	cmp	r0, #8
 8003d4a:	d008      	beq.n	8003d5e <limits_soft_check+0x26>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 8003d4c:	f000 fa9e 	bl	800428c <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 8003d50:	2002      	movs	r0, #2
 8003d52:	f003 fcaf 	bl	80076b4 <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 8003d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 8003d5a:	f001 ba39 	b.w	80051d0 <protocol_execute_realtime>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 8003d5e:	f003 fb0f 	bl	8007380 <system_set_exec_state_flag>
        protocol_execute_realtime();
 8003d62:	f001 fa35 	bl	80051d0 <protocol_execute_realtime>
        if (sys.abort) { return; }
 8003d66:	7863      	ldrb	r3, [r4, #1]
 8003d68:	b91b      	cbnz	r3, 8003d72 <limits_soft_check+0x3a>
      } while ( sys.state != STATE_IDLE );
 8003d6a:	7823      	ldrb	r3, [r4, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f8      	bne.n	8003d62 <limits_soft_check+0x2a>
 8003d70:	e7ec      	b.n	8003d4c <limits_soft_check+0x14>
 8003d72:	bd10      	pop	{r4, pc}
 8003d74:	200038d4 	.word	0x200038d4

08003d78 <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003d7a:	4c17      	ldr	r4, [pc, #92]	; (8003dd8 <mc_line+0x60>)
{
 8003d7c:	4607      	mov	r7, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003d7e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
{
 8003d82:	460d      	mov	r5, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003d84:	f012 0f20 	tst.w	r2, #32
 8003d88:	4e14      	ldr	r6, [pc, #80]	; (8003ddc <mc_line+0x64>)
 8003d8a:	d004      	beq.n	8003d96 <mc_line+0x1e>
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003d8c:	7833      	ldrb	r3, [r6, #0]
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d001      	beq.n	8003d96 <mc_line+0x1e>
 8003d92:	f7ff ffd1 	bl	8003d38 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003d96:	7833      	ldrb	r3, [r6, #0]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d01b      	beq.n	8003dd4 <mc_line+0x5c>
  // parser and planner are separate from the system machine positions, this is doable.

  // If the buffer is full: good! That means we are well ahead of the robot.
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_realtime(); // Check for any run-time commands
 8003d9c:	f001 fa18 	bl	80051d0 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003da0:	7873      	ldrb	r3, [r6, #1]
 8003da2:	b9bb      	cbnz	r3, 8003dd4 <mc_line+0x5c>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003da4:	f000 fcf8 	bl	8004798 <plan_check_full_buffer>
 8003da8:	b110      	cbz	r0, 8003db0 <mc_line+0x38>
 8003daa:	f001 f853 	bl	8004e54 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003dae:	e7f5      	b.n	8003d9c <mc_line+0x24>
    else { break; }
  } while (1);

  // Plan and queue motion into planner buffer
  if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003db0:	4629      	mov	r1, r5
 8003db2:	4638      	mov	r0, r7
 8003db4:	f000 fd8c 	bl	80048d0 <plan_buffer_line>
 8003db8:	b960      	cbnz	r0, 8003dd4 <mc_line+0x5c>
    if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8003dba:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8003dbe:	079a      	lsls	r2, r3, #30
 8003dc0:	d508      	bpl.n	8003dd4 <mc_line+0x5c>
      // Correctly set spindle state, if there is a coincident position passed. Forces a buffer
      // sync while in M3 laser mode only.
      if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003dc2:	7a2b      	ldrb	r3, [r5, #8]
 8003dc4:	06db      	lsls	r3, r3, #27
 8003dc6:	d505      	bpl.n	8003dd4 <mc_line+0x5c>
        spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003dc8:	6869      	ldr	r1, [r5, #4]
 8003dca:	2010      	movs	r0, #16
      }
    }
  }
}
 8003dcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003dd0:	f002 bbcc 	b.w	800656c <spindle_sync>
 8003dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20003f70 	.word	0x20003f70
 8003ddc:	200038d4 	.word	0x200038d4

08003de0 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8003de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de4:	461c      	mov	r4, r3
 8003de6:	b08f      	sub	sp, #60	; 0x3c
 8003de8:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8003dec:	9201      	str	r2, [sp, #4]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003dee:	00ab      	lsls	r3, r5, #2
 8003df0:	441a      	add	r2, r3
 8003df2:	18e3      	adds	r3, r4, r3
 8003df4:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
 8003df8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dfa:	9b01      	ldr	r3, [sp, #4]
{
 8003dfc:	9003      	str	r0, [sp, #12]
 8003dfe:	9102      	str	r1, [sp, #8]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003e00:	4638      	mov	r0, r7
 8003e02:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8003e06:	9208      	str	r2, [sp, #32]
 8003e08:	f7fc feb4 	bl	8000b74 <__addsf3>
{
 8003e0c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003e10:	9a01      	ldr	r2, [sp, #4]
 8003e12:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8003e16:	441a      	add	r2, r3
 8003e18:	18e3      	adds	r3, r4, r3
 8003e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e1c:	f854 4028 	ldr.w	r4, [r4, r8, lsl #2]
 8003e20:	9b01      	ldr	r3, [sp, #4]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003e22:	9004      	str	r0, [sp, #16]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003e24:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003e28:	4620      	mov	r0, r4
 8003e2a:	920a      	str	r2, [sp, #40]	; 0x28
 8003e2c:	f7fc fea2 	bl	8000b74 <__addsf3>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
 8003e30:	9b03      	ldr	r3, [sp, #12]
 8003e32:	9904      	ldr	r1, [sp, #16]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003e34:	9005      	str	r0, [sp, #20]
  float rt_axis0 = target[axis_0] - center_axis0;
 8003e36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003e3a:	f7fc fe99 	bl	8000b70 <__aeabi_fsub>
  float rt_axis1 = target[axis_1] - center_axis1;
 8003e3e:	9b03      	ldr	r3, [sp, #12]
  float rt_axis0 = target[axis_0] - center_axis0;
 8003e40:	4605      	mov	r5, r0
  float rt_axis1 = target[axis_1] - center_axis1;
 8003e42:	9905      	ldr	r1, [sp, #20]
 8003e44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003e48:	f7fc fe92 	bl	8000b70 <__aeabi_fsub>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8003e4c:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  float rt_axis1 = target[axis_1] - center_axis1;
 8003e50:	4680      	mov	r8, r0

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003e52:	4629      	mov	r1, r5
 8003e54:	4638      	mov	r0, r7
 8003e56:	f7fc ff95 	bl	8000d84 <__aeabi_fmul>
  float r_axis1 = -offset[axis_1];
 8003e5a:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003e5e:	4682      	mov	sl, r0
 8003e60:	4641      	mov	r1, r8
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7fc ff8e 	bl	8000d84 <__aeabi_fmul>
 8003e68:	4601      	mov	r1, r0
 8003e6a:	4650      	mov	r0, sl
 8003e6c:	f7fc fe82 	bl	8000b74 <__addsf3>
 8003e70:	4641      	mov	r1, r8
 8003e72:	4682      	mov	sl, r0
 8003e74:	4638      	mov	r0, r7
 8003e76:	f7fc ff85 	bl	8000d84 <__aeabi_fmul>
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	4680      	mov	r8, r0
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f7fc ff80 	bl	8000d84 <__aeabi_fmul>
 8003e84:	4601      	mov	r1, r0
 8003e86:	4640      	mov	r0, r8
 8003e88:	f7fc fe72 	bl	8000b70 <__aeabi_fsub>
 8003e8c:	4651      	mov	r1, sl
{
 8003e8e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8003e90:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8003e94:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003e98:	f004 fc32 	bl	8008700 <atan2f>
 8003e9c:	4605      	mov	r5, r0
  if (is_clockwise_arc) { // Correct atan2 output per direction
 8003e9e:	f1b9 0f00 	cmp.w	r9, #0
 8003ea2:	d04e      	beq.n	8003f42 <mc_arc+0x162>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003ea4:	f7fc fac4 	bl	8000430 <__aeabi_f2d>
 8003ea8:	a39b      	add	r3, pc, #620	; (adr r3, 8004118 <mc_arc+0x338>)
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	4680      	mov	r8, r0
 8003eb0:	4689      	mov	r9, r1
 8003eb2:	f7fc fd97 	bl	80009e4 <__aeabi_dcmpge>
 8003eb6:	b148      	cbz	r0, 8003ecc <mc_arc+0xec>
 8003eb8:	a399      	add	r3, pc, #612	; (adr r3, 8004120 <mc_arc+0x340>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	f7fc f955 	bl	8000170 <__aeabi_dsub>
  } else {
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8003ec6:	f7fc fdff 	bl	8000ac8 <__aeabi_d2f>
 8003eca:	4605      	mov	r5, r0
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003ecc:	4b9a      	ldr	r3, [pc, #616]	; (8004138 <mc_arc+0x358>)
 8003ece:	4631      	mov	r1, r6
 8003ed0:	f8d3 806c 	ldr.w	r8, [r3, #108]	; 0x6c
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f7fc fe4d 	bl	8000b74 <__addsf3>
 8003eda:	4641      	mov	r1, r8
 8003edc:	f7fc fe48 	bl	8000b70 <__aeabi_fsub>
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	f7fc ff4f 	bl	8000d84 <__aeabi_fmul>
 8003ee6:	f004 fc0d 	bl	8008704 <sqrtf>
 8003eea:	4682      	mov	sl, r0
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 8003eec:	4628      	mov	r0, r5
 8003eee:	f7fc fa9f 	bl	8000430 <__aeabi_f2d>
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	4b91      	ldr	r3, [pc, #580]	; (800413c <mc_arc+0x35c>)
 8003ef6:	f7fc faef 	bl	80004d8 <__aeabi_dmul>
 8003efa:	4680      	mov	r8, r0
 8003efc:	4630      	mov	r0, r6
 8003efe:	4689      	mov	r9, r1
 8003f00:	f7fc fa96 	bl	8000430 <__aeabi_f2d>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4640      	mov	r0, r8
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	f7fc fae4 	bl	80004d8 <__aeabi_dmul>
 8003f10:	4680      	mov	r8, r0
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003f12:	4650      	mov	r0, sl
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 8003f14:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003f18:	f7fc fa8a 	bl	8000430 <__aeabi_f2d>
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4640      	mov	r0, r8
 8003f22:	4631      	mov	r1, r6
 8003f24:	f7fc fc02 	bl	800072c <__aeabi_ddiv>
 8003f28:	f004 f9ae 	bl	8008288 <floor>
 8003f2c:	f7fc fdac 	bl	8000a88 <__aeabi_d2uiz>
 8003f30:	b286      	uxth	r6, r0

  if (segments) {
 8003f32:	b9ce      	cbnz	r6, 8003f68 <mc_arc+0x188>
      // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
      if (sys.abort) { return; }
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
 8003f34:	9902      	ldr	r1, [sp, #8]
 8003f36:	9803      	ldr	r0, [sp, #12]
}
 8003f38:	b00f      	add	sp, #60	; 0x3c
 8003f3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mc_line(target, pl_data);
 8003f3e:	f7ff bf1b 	b.w	8003d78 <mc_line>
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8003f42:	f7fc fa75 	bl	8000430 <__aeabi_f2d>
 8003f46:	a378      	add	r3, pc, #480	; (adr r3, 8004128 <mc_arc+0x348>)
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	4680      	mov	r8, r0
 8003f4e:	4689      	mov	r9, r1
 8003f50:	f7fc fd3e 	bl	80009d0 <__aeabi_dcmple>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d0b9      	beq.n	8003ecc <mc_arc+0xec>
 8003f58:	a371      	add	r3, pc, #452	; (adr r3, 8004120 <mc_arc+0x340>)
 8003f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5e:	4640      	mov	r0, r8
 8003f60:	4649      	mov	r1, r9
 8003f62:	f7fc f907 	bl	8000174 <__adddf3>
 8003f66:	e7ae      	b.n	8003ec6 <mc_arc+0xe6>
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8003f68:	9b02      	ldr	r3, [sp, #8]
 8003f6a:	f893 8008 	ldrb.w	r8, [r3, #8]
 8003f6e:	f018 0f08 	tst.w	r8, #8
 8003f72:	d00d      	beq.n	8003f90 <mc_arc+0x1b0>
      pl_data->feed_rate *= segments; 
 8003f74:	4630      	mov	r0, r6
 8003f76:	f7fc feb1 	bl	8000cdc <__aeabi_i2f>
 8003f7a:	9b02      	ldr	r3, [sp, #8]
 8003f7c:	4601      	mov	r1, r0
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	f7fc ff00 	bl	8000d84 <__aeabi_fmul>
 8003f84:	9b02      	ldr	r3, [sp, #8]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003f86:	f028 0808 	bic.w	r8, r8, #8
      pl_data->feed_rate *= segments; 
 8003f8a:	6018      	str	r0, [r3, #0]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003f8c:	f883 8008 	strb.w	r8, [r3, #8]
    float theta_per_segment = angular_travel/segments;
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7fc fea3 	bl	8000cdc <__aeabi_i2f>
 8003f96:	4680      	mov	r8, r0
 8003f98:	4601      	mov	r1, r0
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f7fc ffa6 	bl	8000eec <__aeabi_fdiv>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003fa0:	9b01      	ldr	r3, [sp, #4]
    float theta_per_segment = angular_travel/segments;
 8003fa2:	4682      	mov	sl, r0
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003fa4:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8003fa8:	9306      	str	r3, [sp, #24]
 8003faa:	9b01      	ldr	r3, [sp, #4]
 8003fac:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003fb6:	f7fc fddb 	bl	8000b70 <__aeabi_fsub>
 8003fba:	4641      	mov	r1, r8
 8003fbc:	f7fc ff96 	bl	8000eec <__aeabi_fdiv>
    float cos_T = 2.0 - theta_per_segment*theta_per_segment;
 8003fc0:	4651      	mov	r1, sl
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003fc2:	900c      	str	r0, [sp, #48]	; 0x30
    float cos_T = 2.0 - theta_per_segment*theta_per_segment;
 8003fc4:	4650      	mov	r0, sl
 8003fc6:	f7fc fedd 	bl	8000d84 <__aeabi_fmul>
 8003fca:	4601      	mov	r1, r0
 8003fcc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003fd0:	f7fc fdce 	bl	8000b70 <__aeabi_fsub>
 8003fd4:	4605      	mov	r5, r0
    float sin_T = theta_per_segment*0.16666667*(cos_T + 4.0);
 8003fd6:	4650      	mov	r0, sl
 8003fd8:	f7fc fa2a 	bl	8000430 <__aeabi_f2d>
 8003fdc:	a354      	add	r3, pc, #336	; (adr r3, 8004130 <mc_arc+0x350>)
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f7fc fa79 	bl	80004d8 <__aeabi_dmul>
 8003fe6:	4680      	mov	r8, r0
 8003fe8:	4628      	mov	r0, r5
 8003fea:	4689      	mov	r9, r1
 8003fec:	f7fc fa20 	bl	8000430 <__aeabi_f2d>
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	4b53      	ldr	r3, [pc, #332]	; (8004140 <mc_arc+0x360>)
 8003ff4:	f7fc f8be 	bl	8000174 <__adddf3>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4640      	mov	r0, r8
 8003ffe:	4649      	mov	r1, r9
 8004000:	f7fc fa6a 	bl	80004d8 <__aeabi_dmul>
 8004004:	f7fc fd60 	bl	8000ac8 <__aeabi_d2f>
    cos_T *= 0.5;
 8004008:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float sin_T = theta_per_segment*0.16666667*(cos_T + 4.0);
 800400c:	9007      	str	r0, [sp, #28]
    cos_T *= 0.5;
 800400e:	4628      	mov	r0, r5
 8004010:	f7fc feb8 	bl	8000d84 <__aeabi_fmul>
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8004014:	2501      	movs	r5, #1
    cos_T *= 0.5;
 8004016:	4680      	mov	r8, r0
    uint8_t count = 0;
 8004018:	f04f 0900 	mov.w	r9, #0
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 800401c:	b2ab      	uxth	r3, r5
 800401e:	429e      	cmp	r6, r3
 8004020:	d988      	bls.n	8003f34 <mc_arc+0x154>
      if (count < N_ARC_CORRECTION) {
 8004022:	f1b9 0f0b 	cmp.w	r9, #11
 8004026:	d83f      	bhi.n	80040a8 <mc_arc+0x2c8>
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8004028:	9907      	ldr	r1, [sp, #28]
 800402a:	4638      	mov	r0, r7
 800402c:	f7fc feaa 	bl	8000d84 <__aeabi_fmul>
 8004030:	4641      	mov	r1, r8
 8004032:	4683      	mov	fp, r0
 8004034:	4620      	mov	r0, r4
 8004036:	f7fc fea5 	bl	8000d84 <__aeabi_fmul>
 800403a:	4601      	mov	r1, r0
 800403c:	4658      	mov	r0, fp
 800403e:	f7fc fd99 	bl	8000b74 <__addsf3>
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8004042:	4641      	mov	r1, r8
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8004044:	4683      	mov	fp, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8004046:	4638      	mov	r0, r7
 8004048:	f7fc fe9c 	bl	8000d84 <__aeabi_fmul>
 800404c:	9907      	ldr	r1, [sp, #28]
 800404e:	4607      	mov	r7, r0
 8004050:	4620      	mov	r0, r4
 8004052:	f7fc fe97 	bl	8000d84 <__aeabi_fmul>
 8004056:	4601      	mov	r1, r0
 8004058:	4638      	mov	r0, r7
 800405a:	f7fc fd89 	bl	8000b70 <__aeabi_fsub>
        r_axis1 = r_axisi;
 800405e:	465c      	mov	r4, fp
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8004060:	4607      	mov	r7, r0
        count++;
 8004062:	f109 0901 	add.w	r9, r9, #1
 8004066:	fa5f f989 	uxtb.w	r9, r9
      position[axis_0] = center_axis0 + r_axis0;
 800406a:	9904      	ldr	r1, [sp, #16]
 800406c:	4638      	mov	r0, r7
 800406e:	f7fc fd81 	bl	8000b74 <__addsf3>
 8004072:	9b08      	ldr	r3, [sp, #32]
      position[axis_1] = center_axis1 + r_axis1;
 8004074:	9905      	ldr	r1, [sp, #20]
      position[axis_0] = center_axis0 + r_axis0;
 8004076:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 8004078:	4620      	mov	r0, r4
 800407a:	f7fc fd7b 	bl	8000b74 <__addsf3>
 800407e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      position[axis_linear] += linear_per_segment;
 8004080:	990c      	ldr	r1, [sp, #48]	; 0x30
      position[axis_1] = center_axis1 + r_axis1;
 8004082:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 8004084:	9b06      	ldr	r3, [sp, #24]
 8004086:	3501      	adds	r5, #1
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	f7fc fd73 	bl	8000b74 <__addsf3>
 800408e:	9b06      	ldr	r3, [sp, #24]
      mc_line(position, pl_data);
 8004090:	9902      	ldr	r1, [sp, #8]
      position[axis_linear] += linear_per_segment;
 8004092:	6018      	str	r0, [r3, #0]
      mc_line(position, pl_data);
 8004094:	9801      	ldr	r0, [sp, #4]
 8004096:	f7ff fe6f 	bl	8003d78 <mc_line>
      if (sys.abort) { return; }
 800409a:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <mc_arc+0x364>)
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0bc      	beq.n	800401c <mc_arc+0x23c>
}
 80040a2:	b00f      	add	sp, #60	; 0x3c
 80040a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cos_Ti = cosf(i*theta_per_segment);
 80040a8:	4628      	mov	r0, r5
 80040aa:	f7fc fe17 	bl	8000cdc <__aeabi_i2f>
 80040ae:	4651      	mov	r1, sl
 80040b0:	f7fc fe68 	bl	8000d84 <__aeabi_fmul>
 80040b4:	4607      	mov	r7, r0
 80040b6:	f004 fa65 	bl	8008584 <cosf>
 80040ba:	4604      	mov	r4, r0
        sin_Ti = sinf(i*theta_per_segment);
 80040bc:	4638      	mov	r0, r7
 80040be:	f004 fa95 	bl	80085ec <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 80040c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040c6:	681b      	ldr	r3, [r3, #0]
        sin_Ti = sinf(i*theta_per_segment);
 80040c8:	4683      	mov	fp, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 80040ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80040ce:	4619      	mov	r1, r3
 80040d0:	4620      	mov	r0, r4
 80040d2:	f8d2 9000 	ldr.w	r9, [r2]
 80040d6:	930d      	str	r3, [sp, #52]	; 0x34
 80040d8:	f7fc fe54 	bl	8000d84 <__aeabi_fmul>
 80040dc:	4649      	mov	r1, r9
 80040de:	4607      	mov	r7, r0
 80040e0:	4658      	mov	r0, fp
 80040e2:	f7fc fe4f 	bl	8000d84 <__aeabi_fmul>
 80040e6:	4601      	mov	r1, r0
 80040e8:	4638      	mov	r0, r7
 80040ea:	f7fc fd43 	bl	8000b74 <__addsf3>
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 80040ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 80040f0:	4607      	mov	r7, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 80040f2:	4619      	mov	r1, r3
 80040f4:	4658      	mov	r0, fp
 80040f6:	f7fc fe45 	bl	8000d84 <__aeabi_fmul>
 80040fa:	4649      	mov	r1, r9
 80040fc:	4683      	mov	fp, r0
 80040fe:	4620      	mov	r0, r4
 8004100:	f7fc fe40 	bl	8000d84 <__aeabi_fmul>
 8004104:	4601      	mov	r1, r0
 8004106:	4658      	mov	r0, fp
 8004108:	f7fc fd32 	bl	8000b70 <__aeabi_fsub>
        count = 0;
 800410c:	f04f 0900 	mov.w	r9, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8004110:	4604      	mov	r4, r0
 8004112:	e7aa      	b.n	800406a <mc_arc+0x28a>
 8004114:	f3af 8000 	nop.w
 8004118:	a0b5ed8d 	.word	0xa0b5ed8d
 800411c:	bea0c6f7 	.word	0xbea0c6f7
 8004120:	54442d18 	.word	0x54442d18
 8004124:	401921fb 	.word	0x401921fb
 8004128:	a0b5ed8d 	.word	0xa0b5ed8d
 800412c:	3ea0c6f7 	.word	0x3ea0c6f7
 8004130:	5c7dda4b 	.word	0x5c7dda4b
 8004134:	3fc55555 	.word	0x3fc55555
 8004138:	20003f70 	.word	0x20003f70
 800413c:	3fe00000 	.word	0x3fe00000
 8004140:	40100000 	.word	0x40100000
 8004144:	200038d4 	.word	0x200038d4

08004148 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
 8004148:	b510      	push	{r4, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 800414a:	4b07      	ldr	r3, [pc, #28]	; (8004168 <mc_dwell+0x20>)
{
 800414c:	4604      	mov	r4, r0
  if (sys.state == STATE_CHECK_MODE) { return; }
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d007      	beq.n	8004164 <mc_dwell+0x1c>
  protocol_buffer_synchronize();
 8004154:	f001 f9a4 	bl	80054a0 <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8004158:	4620      	mov	r0, r4
}
 800415a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 800415e:	2100      	movs	r1, #0
 8004160:	f000 b954 	b.w	800440c <delay_sec>
 8004164:	bd10      	pop	{r4, pc}
 8004166:	bf00      	nop
 8004168:	200038d4 	.word	0x200038d4

0800416c <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 800416c:	b510      	push	{r4, lr}
 800416e:	4604      	mov	r4, r0
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8004170:	f7ff fc7e 	bl	8003a70 <limits_disable>

  // -------------------------------------------------------------------------------------
  // Perform homing routine. NOTE: Special motion case. Only system reset works.
  
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
 8004174:	b1bc      	cbz	r4, 80041a6 <mc_homing_cycle+0x3a>
 8004176:	4620      	mov	r0, r4
  #endif
  {
    // Search to engage all axes limit switches at faster homing seek rate.
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
    #ifdef HOMING_CYCLE_1
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8004178:	f7ff fcc0 	bl	8003afc <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 800417c:	f001 f828 	bl	80051d0 <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <mc_homing_cycle+0x48>)
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	b9a3      	cbnz	r3, 80041b0 <mc_homing_cycle+0x44>

  // Homing cycle complete! Setup system for normal operation.
  // -------------------------------------------------------------------------------------

  // Sync gcode parser and planner positions to homed position.
  gc_sync_position();
 8004186:	f7fe fc27 	bl	80029d8 <gc_sync_position>
  plan_sync_position();
 800418a:	f000 fd25 	bl	8004bd8 <plan_sync_position>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800418e:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <mc_homing_cycle+0x4c>)
	EXTI_ClearITPendingBit(LIMIT_MASK);
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
*/
  LL_EXTI_ClearFlag_0_31(LIM_MASK);
  HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8004194:	2028      	movs	r0, #40	; 0x28
 8004196:	615a      	str	r2, [r3, #20]
 8004198:	f7fd f8c6 	bl	8001328 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

#elif ATMEGA328P
  limits_init();
#endif
}
 800419c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80041a0:	2028      	movs	r0, #40	; 0x28
 80041a2:	f7fd b89f 	b.w	80012e4 <HAL_NVIC_EnableIRQ>
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 80041a6:	2004      	movs	r0, #4
 80041a8:	f7ff fca8 	bl	8003afc <limits_go_home>
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 80041ac:	2003      	movs	r0, #3
 80041ae:	e7e3      	b.n	8004178 <mc_homing_cycle+0xc>
 80041b0:	bd10      	pop	{r4, pc}
 80041b2:	bf00      	nop
 80041b4:	200038d4 	.word	0x200038d4
 80041b8:	40010400 	.word	0x40010400

080041bc <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 80041bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80041c0:	4c2e      	ldr	r4, [pc, #184]	; (800427c <mc_probe_cycle+0xc0>)
{
 80041c2:	4606      	mov	r6, r0
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80041c4:	7823      	ldrb	r3, [r4, #0]
{
 80041c6:	4689      	mov	r9, r1
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80041c8:	2b02      	cmp	r3, #2
{
 80041ca:	4690      	mov	r8, r2
 80041cc:	4627      	mov	r7, r4
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80041ce:	d052      	beq.n	8004276 <mc_probe_cycle+0xba>

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 80041d0:	f001 f966 	bl	80054a0 <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 80041d4:	7865      	ldrb	r5, [r4, #1]
 80041d6:	b115      	cbz	r5, 80041de <mc_probe_cycle+0x22>
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
    protocol_execute_realtime();
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 80041d8:	2002      	movs	r0, #2
 80041da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  probe_configure_invert_mask(is_probe_away);
 80041de:	f3c8 00c0 	ubfx	r0, r8, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 80041e2:	7165      	strb	r5, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 80041e4:	f000 fe04 	bl	8004df0 <probe_configure_invert_mask>
  if ( probe_get_state() ) { // Check probe pin state.
 80041e8:	f000 fe08 	bl	8004dfc <probe_get_state>
 80041ec:	b140      	cbz	r0, 8004200 <mc_probe_cycle+0x44>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 80041ee:	2004      	movs	r0, #4
 80041f0:	f003 fa60 	bl	80076b4 <system_set_exec_alarm>
    protocol_execute_realtime();
 80041f4:	f000 ffec 	bl	80051d0 <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 80041f8:	4628      	mov	r0, r5
 80041fa:	f000 fdf9 	bl	8004df0 <probe_configure_invert_mask>
 80041fe:	e7eb      	b.n	80041d8 <mc_probe_cycle+0x1c>
  }

  // Setup and queue probing motion. Auto cycle-start should not start the cycle.
  mc_line(target, pl_data);
 8004200:	4630      	mov	r0, r6
 8004202:	4649      	mov	r1, r9
 8004204:	f7ff fdb8 	bl	8003d78 <mc_line>

  // Activate the probing state monitor in the stepper module.
  sys_probe_state = PROBE_ACTIVE;
 8004208:	2301      	movs	r3, #1
 800420a:	4e1d      	ldr	r6, [pc, #116]	; (8004280 <mc_probe_cycle+0xc4>)

  // Perform probing cycle. Wait here until probe is triggered or motion completes.
  system_set_exec_state_flag(EXEC_CYCLE_START);
 800420c:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 800420e:	7033      	strb	r3, [r6, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8004210:	f003 f8b6 	bl	8007380 <system_set_exec_state_flag>
  do {
    protocol_execute_realtime();
 8004214:	f000 ffdc 	bl	80051d0 <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8004218:	787b      	ldrb	r3, [r7, #1]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1dc      	bne.n	80041d8 <mc_probe_cycle+0x1c>
  } while (sys.state != STATE_IDLE);
 800421e:	783b      	ldrb	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f7      	bne.n	8004214 <mc_probe_cycle+0x58>

  // Probing cycle complete!

  // Set state variables and error out, if the probe failed and cycle with error is enabled.
  if (sys_probe_state == PROBE_ACTIVE) {
 8004224:	7833      	ldrb	r3, [r6, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d122      	bne.n	8004270 <mc_probe_cycle+0xb4>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 800422a:	f018 0f10 	tst.w	r8, #16
 800422e:	d01b      	beq.n	8004268 <mc_probe_cycle+0xac>
 8004230:	4c14      	ldr	r4, [pc, #80]	; (8004284 <mc_probe_cycle+0xc8>)
 8004232:	4d15      	ldr	r5, [pc, #84]	; (8004288 <mc_probe_cycle+0xcc>)
 8004234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004238:	e895 0003 	ldmia.w	r5, {r0, r1}
 800423c:	e884 0003 	stmia.w	r4, {r0, r1}
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
  } else {
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
  }
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8004240:	2000      	movs	r0, #0
 8004242:	7030      	strb	r0, [r6, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8004244:	f000 fdd4 	bl	8004df0 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 8004248:	f000 ffc2 	bl	80051d0 <protocol_execute_realtime>

  // Reset the stepper and planner buffers to remove the remainder of the probe motion.
  st_reset(); // Reset step segment buffer.
 800424c:	f002 fbb4 	bl	80069b8 <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8004250:	f000 fa48 	bl	80046e4 <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 8004254:	f000 fcc0 	bl	8004bd8 <plan_sync_position>

  #ifdef MESSAGE_PROBE_COORDINATES
    // All done! Output the probe position as message.
    report_probe_parameters();
 8004258:	f001 fab0 	bl	80057bc <report_probe_parameters>
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 800425c:	7978      	ldrb	r0, [r7, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 800425e:	3000      	adds	r0, #0
 8004260:	bf18      	it	ne
 8004262:	2001      	movne	r0, #1
 8004264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8004268:	2005      	movs	r0, #5
 800426a:	f003 fa23 	bl	80076b4 <system_set_exec_alarm>
 800426e:	e7e7      	b.n	8004240 <mc_probe_cycle+0x84>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 8004270:	2301      	movs	r3, #1
 8004272:	717b      	strb	r3, [r7, #5]
 8004274:	e7e4      	b.n	8004240 <mc_probe_cycle+0x84>
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8004276:	2000      	movs	r0, #0
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 8004278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800427c:	200038d4 	.word	0x200038d4
 8004280:	200038ea 	.word	0x200038ea
 8004284:	200038ec 	.word	0x200038ec
 8004288:	20003904 	.word	0x20003904

0800428c <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 800428c:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <mc_reset+0x48>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	06db      	lsls	r3, r3, #27
 8004294:	d41d      	bmi.n	80042d2 <mc_reset+0x46>
    system_set_exec_state_flag(EXEC_RESET);
 8004296:	2010      	movs	r0, #16
 8004298:	f003 f872 	bl	8007380 <system_set_exec_state_flag>

    // Kill spindle and coolant.
    spindle_stop();
 800429c:	f002 f8a0 	bl	80063e0 <spindle_stop>
    coolant_stop();
 80042a0:	f7fe faa0 	bl	80027e4 <coolant_stop>

    // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
    // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
    // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
    // violated, by which, all bets are off.
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 80042a4:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <mc_reset+0x4c>)
 80042a6:	7813      	ldrb	r3, [r2, #0]
 80042a8:	f013 0f2c 	tst.w	r3, #44	; 0x2c
 80042ac:	d103      	bne.n	80042b6 <mc_reset+0x2a>
 80042ae:	7912      	ldrb	r2, [r2, #4]
 80042b0:	f012 0f06 	tst.w	r2, #6
 80042b4:	d00d      	beq.n	80042d2 <mc_reset+0x46>
    		(sys.step_control & (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION))) {
      if (sys.state == STATE_HOMING) { 
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d109      	bne.n	80042ce <mc_reset+0x42>
        if (!sys_rt_exec_alarm) {system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80042ba:	4b08      	ldr	r3, [pc, #32]	; (80042dc <mc_reset+0x50>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	b913      	cbnz	r3, 80042c6 <mc_reset+0x3a>
 80042c0:	2006      	movs	r0, #6
      } else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 80042c2:	f003 f9f7 	bl	80076b4 <system_set_exec_alarm>
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 80042c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 80042ca:	f002 b9a5 	b.w	8006618 <st_go_idle>
      } else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 80042ce:	2003      	movs	r0, #3
 80042d0:	e7f7      	b.n	80042c2 <mc_reset+0x36>
 80042d2:	bd08      	pop	{r3, pc}
 80042d4:	200038e9 	.word	0x200038e9
 80042d8:	200038d4 	.word	0x200038d4
 80042dc:	2000391c 	.word	0x2000391c

080042e0 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 80042e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char *ptr = line + *char_counter;
 80042e4:	780b      	ldrb	r3, [r1, #0]
{
 80042e6:	4693      	mov	fp, r2
  char *ptr = line + *char_counter;
 80042e8:	18c2      	adds	r2, r0, r3
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 80042ea:	5cc3      	ldrb	r3, [r0, r3]
{
 80042ec:	4606      	mov	r6, r0

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 80042ee:	2b2d      	cmp	r3, #45	; 0x2d
{
 80042f0:	468a      	mov	sl, r1
  if (c == '-') {
 80042f2:	d118      	bne.n	8004326 <read_float+0x46>
    isnegative = true;
 80042f4:	2701      	movs	r7, #1
    c = *ptr++;
 80042f6:	7853      	ldrb	r3, [r2, #1]
 80042f8:	1c95      	adds	r5, r2, #2

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 80042fa:	2100      	movs	r1, #0
  uint8_t ndigit = 0;
 80042fc:	460a      	mov	r2, r1
  int8_t exp = 0;
 80042fe:	460c      	mov	r4, r1
  uint32_t intval = 0;
 8004300:	4608      	mov	r0, r1
  while(1) {
    c -= '0';
 8004302:	3b30      	subs	r3, #48	; 0x30
 8004304:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8004306:	2b09      	cmp	r3, #9
 8004308:	d819      	bhi.n	800433e <read_float+0x5e>
      ndigit++;
 800430a:	3201      	adds	r2, #1
 800430c:	b2d2      	uxtb	r2, r2
      if (ndigit <= MAX_INT_DIGITS) {
 800430e:	2a08      	cmp	r2, #8
 8004310:	d810      	bhi.n	8004334 <read_float+0x54>
        if (isdecimal) { exp--; }
 8004312:	b109      	cbz	r1, 8004318 <read_float+0x38>
 8004314:	3c01      	subs	r4, #1
 8004316:	b264      	sxtb	r4, r4
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8004318:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800431c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 8004320:	f815 3b01 	ldrb.w	r3, [r5], #1
    c -= '0';
 8004324:	e7ed      	b.n	8004302 <read_float+0x22>
  } else if (c == '+') {
 8004326:	2b2b      	cmp	r3, #43	; 0x2b
  c = *ptr++;
 8004328:	bf12      	itee	ne
 800432a:	1c55      	addne	r5, r2, #1
    c = *ptr++;
 800432c:	1c95      	addeq	r5, r2, #2
 800432e:	7853      	ldrbeq	r3, [r2, #1]
  bool isnegative = false;
 8004330:	2700      	movs	r7, #0
 8004332:	e7e2      	b.n	80042fa <read_float+0x1a>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8004334:	2900      	cmp	r1, #0
 8004336:	d1f3      	bne.n	8004320 <read_float+0x40>
 8004338:	3401      	adds	r4, #1
 800433a:	b264      	sxtb	r4, r4
 800433c:	e7f0      	b.n	8004320 <read_float+0x40>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 800433e:	2bfe      	cmp	r3, #254	; 0xfe
 8004340:	d102      	bne.n	8004348 <read_float+0x68>
 8004342:	b909      	cbnz	r1, 8004348 <read_float+0x68>
      isdecimal = true;
 8004344:	2101      	movs	r1, #1
 8004346:	e7eb      	b.n	8004320 <read_float+0x40>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 8004348:	b31a      	cbz	r2, 8004392 <read_float+0xb2>

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 800434a:	f7fc fcc3 	bl	8000cd4 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 800434e:	2100      	movs	r1, #0
  fval = (float)intval;
 8004350:	9001      	str	r0, [sp, #4]
  if (fval != 0) {
 8004352:	f7fc feab 	bl	80010ac <__aeabi_fcmpeq>
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	b988      	cbnz	r0, 800437e <read_float+0x9e>
    while (exp <= -2) {
      fval *= 0.01;
 800435a:	f20f 097c 	addw	r9, pc, #124	; 0x7c
 800435e:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (exp <= -2) {
 8004362:	1c62      	adds	r2, r4, #1
 8004364:	db19      	blt.n	800439a <read_float+0xba>
      exp += 2;
    }
    if (exp < 0) {
 8004366:	d125      	bne.n	80043b4 <read_float+0xd4>
      fval *= 0.1;
 8004368:	4618      	mov	r0, r3
 800436a:	f7fc f861 	bl	8000430 <__aeabi_f2d>
 800436e:	a31c      	add	r3, pc, #112	; (adr r3, 80043e0 <read_float+0x100>)
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f7fc f8b0 	bl	80004d8 <__aeabi_dmul>
 8004378:	f7fc fba6 	bl	8000ac8 <__aeabi_d2f>
 800437c:	4603      	mov	r3, r0
      } while (--exp > 0);
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 800437e:	b10f      	cbz	r7, 8004384 <read_float+0xa4>
    *float_ptr = -fval;
 8004380:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 8004384:	2201      	movs	r2, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 8004386:	1bad      	subs	r5, r5, r6
 8004388:	3d01      	subs	r5, #1
    *float_ptr = fval;
 800438a:	f8cb 3000 	str.w	r3, [fp]
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 800438e:	f88a 5000 	strb.w	r5, [sl]
}
 8004392:	4610      	mov	r0, r2
 8004394:	b003      	add	sp, #12
 8004396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      fval *= 0.01;
 800439a:	4618      	mov	r0, r3
 800439c:	f7fc f848 	bl	8000430 <__aeabi_f2d>
 80043a0:	464b      	mov	r3, r9
 80043a2:	4642      	mov	r2, r8
 80043a4:	f7fc f898 	bl	80004d8 <__aeabi_dmul>
 80043a8:	f7fc fb8e 	bl	8000ac8 <__aeabi_d2f>
 80043ac:	3402      	adds	r4, #2
 80043ae:	4603      	mov	r3, r0
 80043b0:	b264      	sxtb	r4, r4
 80043b2:	e7d6      	b.n	8004362 <read_float+0x82>
    } else if (exp > 0) {
 80043b4:	2c00      	cmp	r4, #0
 80043b6:	d0e2      	beq.n	800437e <read_float+0x9e>
        fval *= 10.0;
 80043b8:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80043e8 <read_float+0x108>
 80043bc:	4618      	mov	r0, r3
 80043be:	4641      	mov	r1, r8
 80043c0:	f7fc fce0 	bl	8000d84 <__aeabi_fmul>
 80043c4:	3c01      	subs	r4, #1
 80043c6:	b2e2      	uxtb	r2, r4
 80043c8:	4603      	mov	r3, r0
 80043ca:	b254      	sxtb	r4, r2
      } while (--exp > 0);
 80043cc:	2a00      	cmp	r2, #0
 80043ce:	d1f5      	bne.n	80043bc <read_float+0xdc>
 80043d0:	e7d5      	b.n	800437e <read_float+0x9e>
 80043d2:	bf00      	nop
 80043d4:	f3af 8000 	nop.w
 80043d8:	47ae147b 	.word	0x47ae147b
 80043dc:	3f847ae1 	.word	0x3f847ae1
 80043e0:	9999999a 	.word	0x9999999a
 80043e4:	3fb99999 	.word	0x3fb99999
 80043e8:	41200000 	.word	0x41200000

080043ec <_delay_ms>:
  } while ( (temp & 0x01) && !(temp&(1 << 16)) );                             // Wait time arrive
  SysTick->CTRL = 0x00;                                            // Close the counter
  SysTick->VAL = 0X00;                                            // Empty the counter
*/
	//HAL_Delay(x);
	uint32_t mililoop = SystemCoreClock/1000;
 80043ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <_delay_ms+0x1c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	fbb3 f3f2 	udiv	r3, r3, r2
	for (uint32_t i=0; i< mililoop; i++)
 80043f8:	2200      	movs	r2, #0
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d100      	bne.n	8004400 <_delay_ms+0x14>
		__asm__ __volatile__("nop\n\t":::"memory");


}
 80043fe:	4770      	bx	lr
		__asm__ __volatile__("nop\n\t":::"memory");
 8004400:	bf00      	nop
	for (uint32_t i=0; i< mililoop; i++)
 8004402:	3201      	adds	r2, #1
 8004404:	e7f9      	b.n	80043fa <_delay_ms+0xe>
 8004406:	bf00      	nop
 8004408:	20000008 	.word	0x20000008

0800440c <delay_sec>:
#endif

// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	460e      	mov	r6, r1
 	uint16_t i = ceil(1000/DWELL_TIME_STEP*seconds);
 8004410:	490e      	ldr	r1, [pc, #56]	; (800444c <delay_sec+0x40>)
 8004412:	f7fc fcb7 	bl	8000d84 <__aeabi_fmul>
 8004416:	f7fc f80b 	bl	8000430 <__aeabi_f2d>
 800441a:	f003 feb1 	bl	8008180 <ceil>
 800441e:	f7fc fb33 	bl	8000a88 <__aeabi_d2uiz>
	while (i-- > 0) {
		if (sys.abort) { return; }
 8004422:	4d0b      	ldr	r5, [pc, #44]	; (8004450 <delay_sec+0x44>)
 	uint16_t i = ceil(1000/DWELL_TIME_STEP*seconds);
 8004424:	b284      	uxth	r4, r0
	while (i-- > 0) {
 8004426:	b17c      	cbz	r4, 8004448 <delay_sec+0x3c>
		if (sys.abort) { return; }
 8004428:	786b      	ldrb	r3, [r5, #1]
 800442a:	b96b      	cbnz	r3, 8004448 <delay_sec+0x3c>
		if (mode == DELAY_MODE_DWELL) {
 800442c:	b93e      	cbnz	r6, 800443e <delay_sec+0x32>
			protocol_execute_realtime();
 800442e:	f000 fecf 	bl	80051d0 <protocol_execute_realtime>
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8004432:	2032      	movs	r0, #50	; 0x32
 8004434:	3c01      	subs	r4, #1
 8004436:	f7ff ffd9 	bl	80043ec <_delay_ms>
 800443a:	b2a4      	uxth	r4, r4
 800443c:	e7f3      	b.n	8004426 <delay_sec+0x1a>
		  protocol_exec_rt_system();
 800443e:	f000 fd13 	bl	8004e68 <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8004442:	78ab      	ldrb	r3, [r5, #2]
 8004444:	079b      	lsls	r3, r3, #30
 8004446:	d5f4      	bpl.n	8004432 <delay_sec+0x26>
 8004448:	bd70      	pop	{r4, r5, r6, pc}
 800444a:	bf00      	nop
 800444c:	41a00000 	.word	0x41a00000
 8004450:	200038d4 	.word	0x200038d4

08004454 <delay_ms>:


// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
 8004454:	4601      	mov	r1, r0
 8004456:	b508      	push	{r3, lr}
  while ( ms-- ) { _delay_ms(1); }
 8004458:	b901      	cbnz	r1, 800445c <delay_ms+0x8>
}
 800445a:	bd08      	pop	{r3, pc}
  while ( ms-- ) { _delay_ms(1); }
 800445c:	2001      	movs	r0, #1
 800445e:	f7ff ffc5 	bl	80043ec <_delay_ms>
 8004462:	3901      	subs	r1, #1
 8004464:	b289      	uxth	r1, r1
 8004466:	e7f7      	b.n	8004458 <delay_ms+0x4>

08004468 <hypot_f>:
  }
}


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	460d      	mov	r5, r1
 800446c:	4601      	mov	r1, r0
 800446e:	f7fc fc89 	bl	8000d84 <__aeabi_fmul>
 8004472:	4629      	mov	r1, r5
 8004474:	4604      	mov	r4, r0
 8004476:	4628      	mov	r0, r5
 8004478:	f7fc fc84 	bl	8000d84 <__aeabi_fmul>
 800447c:	4601      	mov	r1, r0
 800447e:	4620      	mov	r0, r4
 8004480:	f7fc fb78 	bl	8000b74 <__addsf3>
 8004484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004488:	f004 b93c 	b.w	8008704 <sqrtf>

0800448c <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 800448c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t idx;
  float magnitude = 0.0;
 8004490:	2600      	movs	r6, #0
 8004492:	1f04      	subs	r4, r0, #4
{
 8004494:	4625      	mov	r5, r4
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0) {
 8004496:	46b1      	mov	r9, r6
 8004498:	f100 0714 	add.w	r7, r0, #20
 800449c:	f855 8f04 	ldr.w	r8, [r5, #4]!
 80044a0:	4649      	mov	r1, r9
 80044a2:	4640      	mov	r0, r8
 80044a4:	f7fc fe02 	bl	80010ac <__aeabi_fcmpeq>
 80044a8:	b940      	cbnz	r0, 80044bc <convert_delta_vector_to_unit_vector+0x30>
      magnitude += vector[idx]*vector[idx];
 80044aa:	4641      	mov	r1, r8
 80044ac:	4640      	mov	r0, r8
 80044ae:	f7fc fc69 	bl	8000d84 <__aeabi_fmul>
 80044b2:	4601      	mov	r1, r0
 80044b4:	4630      	mov	r0, r6
 80044b6:	f7fc fb5d 	bl	8000b74 <__addsf3>
 80044ba:	4606      	mov	r6, r0
  for (idx=0; idx<N_AXIS; idx++) {
 80044bc:	42bd      	cmp	r5, r7
 80044be:	d1ed      	bne.n	800449c <convert_delta_vector_to_unit_vector+0x10>
    }
  }
  magnitude = sqrtf(magnitude);
 80044c0:	4630      	mov	r0, r6
 80044c2:	f004 f91f 	bl	8008704 <sqrtf>
  float inv_magnitude = 1.0/magnitude;
 80044c6:	4601      	mov	r1, r0
  magnitude = sqrtf(magnitude);
 80044c8:	4606      	mov	r6, r0
  float inv_magnitude = 1.0/magnitude;
 80044ca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80044ce:	f7fc fd0d 	bl	8000eec <__aeabi_fdiv>
 80044d2:	4607      	mov	r7, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 80044d4:	6861      	ldr	r1, [r4, #4]
 80044d6:	4638      	mov	r0, r7
 80044d8:	f7fc fc54 	bl	8000d84 <__aeabi_fmul>
 80044dc:	f844 0f04 	str.w	r0, [r4, #4]!
 80044e0:	42ac      	cmp	r4, r5
 80044e2:	d1f7      	bne.n	80044d4 <convert_delta_vector_to_unit_vector+0x48>
  return(magnitude);
}
 80044e4:	4630      	mov	r0, r6
 80044e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080044ec <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 80044ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f0:	4607      	mov	r7, r0
 80044f2:	4688      	mov	r8, r1
 80044f4:	2400      	movs	r4, #0
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80044f6:	f04f 0900 	mov.w	r9, #0
  float limit_value = SOME_LARGE_VALUE;
 80044fa:	4d0d      	ldr	r5, [pc, #52]	; (8004530 <limit_value_by_axis_maximum+0x44>)
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80044fc:	f858 6024 	ldr.w	r6, [r8, r4, lsl #2]
 8004500:	4649      	mov	r1, r9
 8004502:	4630      	mov	r0, r6
 8004504:	f7fc fdd2 	bl	80010ac <__aeabi_fcmpeq>
 8004508:	b960      	cbnz	r0, 8004524 <limit_value_by_axis_maximum+0x38>
      limit_value = min(limit_value,fabs(max_value[idx]/unit_vec[idx]));
 800450a:	4631      	mov	r1, r6
 800450c:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8004510:	f7fc fcec 	bl	8000eec <__aeabi_fdiv>
 8004514:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8004518:	4629      	mov	r1, r5
 800451a:	4630      	mov	r0, r6
 800451c:	f7fc fdee 	bl	80010fc <__aeabi_fcmpgt>
 8004520:	b900      	cbnz	r0, 8004524 <limit_value_by_axis_maximum+0x38>
 8004522:	4635      	mov	r5, r6
 8004524:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8004526:	2c06      	cmp	r4, #6
 8004528:	d1e8      	bne.n	80044fc <limit_value_by_axis_maximum+0x10>
    }
  }
  return(limit_value);
}
 800452a:	4628      	mov	r0, r5
 800452c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004530:	7f7fffff 	.word	0x7f7fffff

08004534 <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 8004534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8004538:	4f5c      	ldr	r7, [pc, #368]	; (80046ac <planner_recalculate+0x178>)

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 800453a:	4e5d      	ldr	r6, [pc, #372]	; (80046b0 <planner_recalculate+0x17c>)
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 800453c:	783c      	ldrb	r4, [r7, #0]
  if (block_index == block_buffer_planned) { return; }
 800453e:	f896 9000 	ldrb.w	r9, [r6]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004542:	2c00      	cmp	r4, #0
 8004544:	bf08      	it	eq
 8004546:	24c8      	moveq	r4, #200	; 0xc8
  block_index--;
 8004548:	3c01      	subs	r4, #1
 800454a:	b2e4      	uxtb	r4, r4
  if (block_index == block_buffer_planned) { return; }
 800454c:	45a1      	cmp	r9, r4
{
 800454e:	b085      	sub	sp, #20
  if (block_index == block_buffer_planned) { return; }
 8004550:	d03c      	beq.n	80045cc <planner_recalculate+0x98>
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->pbacceleration*current->millimeters);
 8004552:	4d58      	ldr	r5, [pc, #352]	; (80046b4 <planner_recalculate+0x180>)
 8004554:	ea4f 1884 	mov.w	r8, r4, lsl #6
 8004558:	eb05 0b08 	add.w	fp, r5, r8
 800455c:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
 8004560:	f8db a024 	ldr.w	sl, [fp, #36]	; 0x24
 8004564:	4608      	mov	r0, r1
 8004566:	f7fc fb05 	bl	8000b74 <__addsf3>
 800456a:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 800456e:	f7fc fc09 	bl	8000d84 <__aeabi_fmul>
 8004572:	4683      	mov	fp, r0
 8004574:	4601      	mov	r1, r0
 8004576:	4650      	mov	r0, sl
 8004578:	f7fc fda2 	bl	80010c0 <__aeabi_fcmplt>
 800457c:	b900      	cbnz	r0, 8004580 <planner_recalculate+0x4c>
 800457e:	46da      	mov	sl, fp
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004580:	2c00      	cmp	r4, #0
 8004582:	bf08      	it	eq
 8004584:	24c8      	moveq	r4, #200	; 0xc8
  block_index--;
 8004586:	3c01      	subs	r4, #1
 8004588:	b2e4      	uxtb	r4, r4
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->pbacceleration*current->millimeters);
 800458a:	44a8      	add	r8, r5

  block_index = plan_prev_block_index(block_index);
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 800458c:	45a1      	cmp	r9, r4
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->pbacceleration*current->millimeters);
 800458e:	f8c8 a020 	str.w	sl, [r8, #32]
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8004592:	d14c      	bne.n	800462e <planner_recalculate+0xfa>
    // Check if the first block is the tail. If so, notify stepper to update its current parameters.
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004594:	4b48      	ldr	r3, [pc, #288]	; (80046b8 <planner_recalculate+0x184>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	454b      	cmp	r3, r9
 800459a:	d101      	bne.n	80045a0 <planner_recalculate+0x6c>
 800459c:	f002 fa7a 	bl	8006a94 <st_update_plan_block_parameters>
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80045a0:	f896 a000 	ldrb.w	sl, [r6]
  block_index = plan_next_block_index(block_buffer_planned);
  while (block_index != block_buffer_head) {
 80045a4:	f04f 0800 	mov.w	r8, #0
  block_index++;
 80045a8:	f10a 0401 	add.w	r4, sl, #1
 80045ac:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80045ae:	2cc8      	cmp	r4, #200	; 0xc8
 80045b0:	bf08      	it	eq
 80045b2:	2400      	moveq	r4, #0
  while (block_index != block_buffer_head) {
 80045b4:	783b      	ldrb	r3, [r7, #0]
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80045b6:	eb05 1b8a 	add.w	fp, r5, sl, lsl #6
  while (block_index != block_buffer_head) {
 80045ba:	9303      	str	r3, [sp, #12]
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	429c      	cmp	r4, r3
 80045c0:	d13c      	bne.n	800463c <planner_recalculate+0x108>
 80045c2:	f1b8 0f00 	cmp.w	r8, #0
 80045c6:	d001      	beq.n	80045cc <planner_recalculate+0x98>
 80045c8:	f886 a000 	strb.w	sl, [r6]
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
    block_index = plan_next_block_index( block_index );
  }
}
 80045cc:	b005      	add	sp, #20
 80045ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80045d2:	2c00      	cmp	r4, #0
      current = &block_buffer[block_index];
 80045d4:	46a2      	mov	sl, r4
 80045d6:	eb05 1b84 	add.w	fp, r5, r4, lsl #6
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80045da:	bf08      	it	eq
 80045dc:	24c8      	moveq	r4, #200	; 0xc8
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80045de:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <planner_recalculate+0x184>)
  block_index--;
 80045e0:	3c01      	subs	r4, #1
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80045e2:	781b      	ldrb	r3, [r3, #0]
  block_index--;
 80045e4:	b2e4      	uxtb	r4, r4
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80045e6:	42a3      	cmp	r3, r4
 80045e8:	d101      	bne.n	80045ee <planner_recalculate+0xba>
 80045ea:	f002 fa53 	bl	8006a94 <st_update_plan_block_parameters>
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 80045ee:	eb05 1a8a 	add.w	sl, r5, sl, lsl #6
 80045f2:	f8da 9024 	ldr.w	r9, [sl, #36]	; 0x24
 80045f6:	f8da 0020 	ldr.w	r0, [sl, #32]
 80045fa:	4649      	mov	r1, r9
 80045fc:	f7fc fd56 	bl	80010ac <__aeabi_fcmpeq>
 8004600:	b9a0      	cbnz	r0, 800462c <planner_recalculate+0xf8>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->pbacceleration*current->millimeters;
 8004602:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 8004606:	4608      	mov	r0, r1
 8004608:	f7fc fab4 	bl	8000b74 <__addsf3>
 800460c:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 8004610:	f7fc fbb8 	bl	8000d84 <__aeabi_fmul>
 8004614:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8004618:	f7fc faac 	bl	8000b74 <__addsf3>
 800461c:	4680      	mov	r8, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 800461e:	4601      	mov	r1, r0
 8004620:	4648      	mov	r0, r9
 8004622:	f7fc fd6b 	bl	80010fc <__aeabi_fcmpgt>
 8004626:	b130      	cbz	r0, 8004636 <planner_recalculate+0x102>
          current->entry_speed_sqr = entry_speed_sqr;
 8004628:	f8ca 8020 	str.w	r8, [sl, #32]
  block_index--;
 800462c:	46d8      	mov	r8, fp
    while (block_index != block_buffer_planned) {
 800462e:	7833      	ldrb	r3, [r6, #0]
 8004630:	42a3      	cmp	r3, r4
 8004632:	d1ce      	bne.n	80045d2 <planner_recalculate+0x9e>
 8004634:	e7b4      	b.n	80045a0 <planner_recalculate+0x6c>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 8004636:	f8ca 9020 	str.w	r9, [sl, #32]
 800463a:	e7f7      	b.n	800462c <planner_recalculate+0xf8>
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 800463c:	f8db 3020 	ldr.w	r3, [fp, #32]
    next = &block_buffer[block_index];
 8004640:	01a7      	lsls	r7, r4, #6
 8004642:	eb05 0907 	add.w	r9, r5, r7
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800464c:	9801      	ldr	r0, [sp, #4]
 800464e:	4619      	mov	r1, r3
 8004650:	9302      	str	r3, [sp, #8]
 8004652:	f7fc fd35 	bl	80010c0 <__aeabi_fcmplt>
 8004656:	b1b0      	cbz	r0, 8004686 <planner_recalculate+0x152>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->pbacceleration*current->millimeters;
 8004658:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
 800465c:	4608      	mov	r0, r1
 800465e:	f7fc fa89 	bl	8000b74 <__addsf3>
 8004662:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 8004666:	f7fc fb8d 	bl	8000d84 <__aeabi_fmul>
 800466a:	9901      	ldr	r1, [sp, #4]
 800466c:	f7fc fa82 	bl	8000b74 <__addsf3>
 8004670:	4683      	mov	fp, r0
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8004672:	4601      	mov	r1, r0
 8004674:	9802      	ldr	r0, [sp, #8]
 8004676:	f7fc fd41 	bl	80010fc <__aeabi_fcmpgt>
 800467a:	b120      	cbz	r0, 8004686 <planner_recalculate+0x152>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 800467c:	46a2      	mov	sl, r4
 800467e:	f04f 0801 	mov.w	r8, #1
 8004682:	f8c9 b020 	str.w	fp, [r9, #32]
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 8004686:	442f      	add	r7, r5
 8004688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800468a:	6a38      	ldr	r0, [r7, #32]
 800468c:	f7fc fd0e 	bl	80010ac <__aeabi_fcmpeq>
 8004690:	2800      	cmp	r0, #0
 8004692:	bf18      	it	ne
 8004694:	46a2      	movne	sl, r4
  block_index++;
 8004696:	f104 0401 	add.w	r4, r4, #1
 800469a:	b2e4      	uxtb	r4, r4
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 800469c:	bf18      	it	ne
 800469e:	f04f 0801 	movne.w	r8, #1
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80046a2:	2cc8      	cmp	r4, #200	; 0xc8
 80046a4:	bf08      	it	eq
 80046a6:	2400      	moveq	r4, #0
  while (block_index != block_buffer_head) {
 80046a8:	46cb      	mov	fp, r9
 80046aa:	e787      	b.n	80045bc <planner_recalculate+0x88>
 80046ac:	20003298 	.word	0x20003298
 80046b0:	20003299 	.word	0x20003299
 80046b4:	20000098 	.word	0x20000098
 80046b8:	2000329a 	.word	0x2000329a

080046bc <plan_reset_buffer>:
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 80046bc:	2300      	movs	r3, #0
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80046be:	2101      	movs	r1, #1
  block_buffer_tail = 0;
 80046c0:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <plan_reset_buffer+0x18>)
 80046c2:	7013      	strb	r3, [r2, #0]
  block_buffer_head = 0; // Empty = tail
 80046c4:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <plan_reset_buffer+0x1c>)
 80046c6:	7013      	strb	r3, [r2, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80046c8:	4a04      	ldr	r2, [pc, #16]	; (80046dc <plan_reset_buffer+0x20>)
 80046ca:	7011      	strb	r1, [r2, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 80046cc:	4a04      	ldr	r2, [pc, #16]	; (80046e0 <plan_reset_buffer+0x24>)
 80046ce:	7013      	strb	r3, [r2, #0]
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000329a 	.word	0x2000329a
 80046d8:	20003298 	.word	0x20003298
 80046dc:	2000329b 	.word	0x2000329b
 80046e0:	20003299 	.word	0x20003299

080046e4 <plan_reset>:
{
 80046e4:	b508      	push	{r3, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80046e6:	2234      	movs	r2, #52	; 0x34
 80046e8:	2100      	movs	r1, #0
 80046ea:	4803      	ldr	r0, [pc, #12]	; (80046f8 <plan_reset+0x14>)
 80046ec:	f003 f911 	bl	8007912 <memset>
}
 80046f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  plan_reset_buffer();
 80046f4:	f7ff bfe2 	b.w	80046bc <plan_reset_buffer>
 80046f8:	2000329c 	.word	0x2000329c

080046fc <plan_discard_current_block>:
}


void plan_discard_current_block()
{
 80046fc:	b510      	push	{r4, lr}
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <plan_discard_current_block+0x28>)
 8004700:	4a09      	ldr	r2, [pc, #36]	; (8004728 <plan_discard_current_block+0x2c>)
 8004702:	7819      	ldrb	r1, [r3, #0]
 8004704:	7812      	ldrb	r2, [r2, #0]
 8004706:	428a      	cmp	r2, r1
 8004708:	461a      	mov	r2, r3
 800470a:	d00a      	beq.n	8004722 <plan_discard_current_block+0x26>
  block_index++;
 800470c:	1c4b      	adds	r3, r1, #1
 800470e:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004710:	2bc8      	cmp	r3, #200	; 0xc8
 8004712:	bf08      	it	eq
 8004714:	2300      	moveq	r3, #0
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004716:	4805      	ldr	r0, [pc, #20]	; (800472c <plan_discard_current_block+0x30>)
    block_buffer_tail = block_index;
 8004718:	7013      	strb	r3, [r2, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 800471a:	7804      	ldrb	r4, [r0, #0]
 800471c:	428c      	cmp	r4, r1
 800471e:	bf08      	it	eq
 8004720:	7003      	strbeq	r3, [r0, #0]
 8004722:	bd10      	pop	{r4, pc}
 8004724:	2000329a 	.word	0x2000329a
 8004728:	20003298 	.word	0x20003298
 800472c:	20003299 	.word	0x20003299

08004730 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 8004730:	4b02      	ldr	r3, [pc, #8]	; (800473c <plan_get_system_motion_block+0xc>)
 8004732:	7818      	ldrb	r0, [r3, #0]
}
 8004734:	4b02      	ldr	r3, [pc, #8]	; (8004740 <plan_get_system_motion_block+0x10>)
 8004736:	eb03 1080 	add.w	r0, r3, r0, lsl #6
 800473a:	4770      	bx	lr
 800473c:	20003298 	.word	0x20003298
 8004740:	20000098 	.word	0x20000098

08004744 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <plan_get_current_block+0x18>)
 8004746:	4a06      	ldr	r2, [pc, #24]	; (8004760 <plan_get_current_block+0x1c>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	7812      	ldrb	r2, [r2, #0]
 800474c:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 800474e:	bf1a      	itte	ne
 8004750:	4804      	ldrne	r0, [pc, #16]	; (8004764 <plan_get_current_block+0x20>)
 8004752:	eb00 1083 	addne.w	r0, r0, r3, lsl #6
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004756:	2000      	moveq	r0, #0
}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	2000329a 	.word	0x2000329a
 8004760:	20003298 	.word	0x20003298
 8004764:	20000098 	.word	0x20000098

08004768 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <plan_get_exec_block_exit_speed_sqr+0x24>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <plan_get_exec_block_exit_speed_sqr+0x28>)
  block_index++;
 800476c:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800476e:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 8004770:	3301      	adds	r3, #1
 8004772:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004774:	2bc8      	cmp	r3, #200	; 0xc8
 8004776:	bf08      	it	eq
 8004778:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800477a:	429a      	cmp	r2, r3
  return( block_buffer[block_index].entry_speed_sqr );
 800477c:	bf1d      	ittte	ne
 800477e:	4a05      	ldrne	r2, [pc, #20]	; (8004794 <plan_get_exec_block_exit_speed_sqr+0x2c>)
 8004780:	eb02 1383 	addne.w	r3, r2, r3, lsl #6
 8004784:	6a18      	ldrne	r0, [r3, #32]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8004786:	2000      	moveq	r0, #0
}
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	2000329a 	.word	0x2000329a
 8004790:	20003298 	.word	0x20003298
 8004794:	20000098 	.word	0x20000098

08004798 <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <plan_check_full_buffer+0x10>)
 800479a:	7818      	ldrb	r0, [r3, #0]
 800479c:	4b03      	ldr	r3, [pc, #12]	; (80047ac <plan_check_full_buffer+0x14>)
 800479e:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 80047a0:	1ac3      	subs	r3, r0, r3
 80047a2:	4258      	negs	r0, r3
 80047a4:	4158      	adcs	r0, r3
 80047a6:	4770      	bx	lr
 80047a8:	2000329a 	.word	0x2000329a
 80047ac:	2000329b 	.word	0x2000329b

080047b0 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01*sys.r_override); }
 80047b2:	7f43      	ldrb	r3, [r0, #29]
{
 80047b4:	4605      	mov	r5, r0
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01*sys.r_override); }
 80047b6:	07da      	lsls	r2, r3, #31
  float nominal_speed = block->programmed_rate;
 80047b8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01*sys.r_override); }
 80047ba:	d520      	bpl.n	80047fe <plan_compute_profile_nominal_speed+0x4e>
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <plan_compute_profile_nominal_speed+0xa0>)
 80047be:	7a58      	ldrb	r0, [r3, #9]
 80047c0:	f7fb fe24 	bl	800040c <__aeabi_i2d>
 80047c4:	a320      	add	r3, pc, #128	; (adr r3, 8004848 <plan_compute_profile_nominal_speed+0x98>)
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	f7fb fe85 	bl	80004d8 <__aeabi_dmul>
 80047ce:	4606      	mov	r6, r0
 80047d0:	4620      	mov	r0, r4
 80047d2:	460f      	mov	r7, r1
 80047d4:	f7fb fe2c 	bl	8000430 <__aeabi_f2d>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4630      	mov	r0, r6
 80047de:	4639      	mov	r1, r7
 80047e0:	f7fb fe7a 	bl	80004d8 <__aeabi_dmul>
 80047e4:	f7fc f970 	bl	8000ac8 <__aeabi_d2f>
 80047e8:	4604      	mov	r4, r0
  else {
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 80047ea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7fc fc84 	bl	80010fc <__aeabi_fcmpgt>
 80047f4:	b908      	cbnz	r0, 80047fa <plan_compute_profile_nominal_speed+0x4a>
  return(MINIMUM_FEED_RATE);
 80047f6:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
}
 80047fa:	4620      	mov	r0, r4
 80047fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01*sys.f_override); }
 80047fe:	075b      	lsls	r3, r3, #29
 8004800:	d416      	bmi.n	8004830 <plan_compute_profile_nominal_speed+0x80>
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <plan_compute_profile_nominal_speed+0xa0>)
 8004804:	7a18      	ldrb	r0, [r3, #8]
 8004806:	f7fb fe01 	bl	800040c <__aeabi_i2d>
 800480a:	a30f      	add	r3, pc, #60	; (adr r3, 8004848 <plan_compute_profile_nominal_speed+0x98>)
 800480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004810:	f7fb fe62 	bl	80004d8 <__aeabi_dmul>
 8004814:	4606      	mov	r6, r0
 8004816:	4620      	mov	r0, r4
 8004818:	460f      	mov	r7, r1
 800481a:	f7fb fe09 	bl	8000430 <__aeabi_f2d>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4630      	mov	r0, r6
 8004824:	4639      	mov	r1, r7
 8004826:	f7fb fe57 	bl	80004d8 <__aeabi_dmul>
 800482a:	f7fc f94d 	bl	8000ac8 <__aeabi_d2f>
 800482e:	4604      	mov	r4, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8004830:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8004832:	4620      	mov	r0, r4
 8004834:	4629      	mov	r1, r5
 8004836:	f7fc fc61 	bl	80010fc <__aeabi_fcmpgt>
 800483a:	2800      	cmp	r0, #0
 800483c:	d0d5      	beq.n	80047ea <plan_compute_profile_nominal_speed+0x3a>
 800483e:	462c      	mov	r4, r5
 8004840:	e7d3      	b.n	80047ea <plan_compute_profile_nominal_speed+0x3a>
 8004842:	bf00      	nop
 8004844:	f3af 8000 	nop.w
 8004848:	47ae147b 	.word	0x47ae147b
 800484c:	3f847ae1 	.word	0x3f847ae1
 8004850:	200038d4 	.word	0x200038d4

08004854 <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 8004854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t block_index = block_buffer_tail;
 8004858:	4b18      	ldr	r3, [pc, #96]	; (80048bc <plan_update_velocity_profile_parameters+0x68>)
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 800485a:	4e19      	ldr	r6, [pc, #100]	; (80048c0 <plan_update_velocity_profile_parameters+0x6c>)
  uint8_t block_index = block_buffer_tail;
 800485c:	781c      	ldrb	r4, [r3, #0]
  while (block_index != block_buffer_head) {
 800485e:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <plan_update_velocity_profile_parameters+0x70>)
    block = &block_buffer[block_index];
 8004860:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80048cc <plan_update_velocity_profile_parameters+0x78>
  while (block_index != block_buffer_head) {
 8004864:	f893 9000 	ldrb.w	r9, [r3]
 8004868:	454c      	cmp	r4, r9
 800486a:	d103      	bne.n	8004874 <plan_update_velocity_profile_parameters+0x20>
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 800486c:	4b16      	ldr	r3, [pc, #88]	; (80048c8 <plan_update_velocity_profile_parameters+0x74>)
 800486e:	631e      	str	r6, [r3, #48]	; 0x30
 8004870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    block = &block_buffer[block_index];
 8004874:	01a5      	lsls	r5, r4, #6
 8004876:	eb08 0a05 	add.w	sl, r8, r5
    nominal_speed = plan_compute_profile_nominal_speed(block);
 800487a:	4650      	mov	r0, sl
 800487c:	f7ff ff98 	bl	80047b0 <plan_compute_profile_nominal_speed>
 8004880:	4607      	mov	r7, r0
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004882:	4601      	mov	r1, r0
 8004884:	4630      	mov	r0, r6
 8004886:	f7fc fc1b 	bl	80010c0 <__aeabi_fcmplt>
 800488a:	b1a0      	cbz	r0, 80048b6 <plan_update_velocity_profile_parameters+0x62>
 800488c:	4631      	mov	r1, r6
 800488e:	4630      	mov	r0, r6
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004890:	f7fc fa78 	bl	8000d84 <__aeabi_fmul>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004894:	4445      	add	r5, r8
 8004896:	6b2e      	ldr	r6, [r5, #48]	; 0x30
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004898:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800489c:	4631      	mov	r1, r6
 800489e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80048a0:	f7fc fc2c 	bl	80010fc <__aeabi_fcmpgt>
 80048a4:	b100      	cbz	r0, 80048a8 <plan_update_velocity_profile_parameters+0x54>
 80048a6:	626e      	str	r6, [r5, #36]	; 0x24
  block_index++;
 80048a8:	3401      	adds	r4, #1
 80048aa:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80048ac:	2cc8      	cmp	r4, #200	; 0xc8
 80048ae:	bf08      	it	eq
 80048b0:	2400      	moveq	r4, #0
 80048b2:	463e      	mov	r6, r7
 80048b4:	e7d8      	b.n	8004868 <plan_update_velocity_profile_parameters+0x14>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 80048b6:	4639      	mov	r1, r7
 80048b8:	4638      	mov	r0, r7
 80048ba:	e7e9      	b.n	8004890 <plan_update_velocity_profile_parameters+0x3c>
 80048bc:	2000329a 	.word	0x2000329a
 80048c0:	7f7fffff 	.word	0x7f7fffff
 80048c4:	20003298 	.word	0x20003298
 80048c8:	2000329c 	.word	0x2000329c
 80048cc:	20000098 	.word	0x20000098

080048d0 <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 80048d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 80048d4:	4cb2      	ldr	r4, [pc, #712]	; (8004ba0 <plan_buffer_line+0x2d0>)
{
 80048d6:	468a      	mov	sl, r1
  plan_block_t *block = &block_buffer[block_buffer_head];
 80048d8:	7826      	ldrb	r6, [r4, #0]
 80048da:	4db2      	ldr	r5, [pc, #712]	; (8004ba4 <plan_buffer_line+0x2d4>)
 80048dc:	01b6      	lsls	r6, r6, #6
{
 80048de:	b09d      	sub	sp, #116	; 0x74
  plan_block_t *block = &block_buffer[block_buffer_head];
 80048e0:	19af      	adds	r7, r5, r6
{
 80048e2:	9002      	str	r0, [sp, #8]
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 80048e4:	2240      	movs	r2, #64	; 0x40
 80048e6:	2100      	movs	r1, #0
 80048e8:	4638      	mov	r0, r7
 80048ea:	f003 f812 	bl	8007912 <memset>
{
 80048ee:	f04f 0800 	mov.w	r8, #0
  block->condition = pl_data->condition;
 80048f2:	f89a 3008 	ldrb.w	r3, [sl, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 80048f6:	f8da 2004 	ldr.w	r2, [sl, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) { 
 80048fa:	f013 0f02 	tst.w	r3, #2
    #ifdef COREXY
      position_steps[X_AXIS] = system_convert_corexy_to_x_axis_steps(sys_position);
      position_steps[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      position_steps[Z_AXIS] = sys_position[Z_AXIS];
    #else
      memcpy(position_steps, sys_position, sizeof(sys_position)); 
 80048fe:	bf14      	ite	ne
 8004900:	f8df e2d0 	ldrne.w	lr, [pc, #720]	; 8004bd4 <plan_buffer_line+0x304>
    #endif
  } else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004904:	f8df e2b0 	ldreq.w	lr, [pc, #688]	; 8004bb8 <plan_buffer_line+0x2e8>
 8004908:	9401      	str	r4, [sp, #4]
  block->condition = pl_data->condition;
 800490a:	777b      	strb	r3, [r7, #29]
    block->spindle_speed = pl_data->spindle_speed;
 800490c:	63fa      	str	r2, [r7, #60]	; 0x3c
      memcpy(position_steps, sys_position, sizeof(sys_position)); 
 800490e:	ac0a      	add	r4, sp, #40	; 0x28
  } else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004910:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004916:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800491a:	e884 0003 	stmia.w	r4, {r0, r1}
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lround(target[idx]*settings.steps_per_mm[idx]);
 800491e:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8004bd0 <plan_buffer_line+0x300>
 8004922:	9b02      	ldr	r3, [sp, #8]
 8004924:	f85b 1028 	ldr.w	r1, [fp, r8, lsl #2]
 8004928:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800492c:	f7fc fa2a 	bl	8000d84 <__aeabi_fmul>
 8004930:	f7fb fd7e 	bl	8000430 <__aeabi_f2d>
 8004934:	f003 fd2c 	bl	8008390 <lround>
 8004938:	ab04      	add	r3, sp, #16
 800493a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
 800493e:	ab0a      	add	r3, sp, #40	; 0x28
 8004940:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004944:	1ac0      	subs	r0, r0, r3
 8004946:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 800494a:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800494e:	19ab      	adds	r3, r5, r6
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
 8004950:	f847 4028 	str.w	r4, [r7, r8, lsl #2]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004954:	6999      	ldr	r1, [r3, #24]
 8004956:	9303      	str	r3, [sp, #12]
 8004958:	428c      	cmp	r4, r1
 800495a:	bf38      	it	cc
 800495c:	460c      	movcc	r4, r1
 800495e:	619c      	str	r4, [r3, #24]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004960:	f7fc f9bc 	bl	8000cdc <__aeabi_i2f>
 8004964:	f85b 1028 	ldr.w	r1, [fp, r8, lsl #2]
 8004968:	f7fc fac0 	bl	8000eec <__aeabi_fdiv>
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800496c:	46a1      	mov	r9, r4
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 800496e:	ac10      	add	r4, sp, #64	; 0x40
 8004970:	f844 0028 	str.w	r0, [r4, r8, lsl #2]

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0 )
 8004974:	2100      	movs	r1, #0
 8004976:	f7fc fba3 	bl	80010c0 <__aeabi_fcmplt>
 800497a:	9b03      	ldr	r3, [sp, #12]
 800497c:	b128      	cbz	r0, 800498a <plan_buffer_line+0xba>
    {
      #ifdef STM32
        block->direction_bits |= direction_pin_mask[idx];
 800497e:	498a      	ldr	r1, [pc, #552]	; (8004ba8 <plan_buffer_line+0x2d8>)
 8004980:	f811 0018 	ldrb.w	r0, [r1, r8, lsl #1]
 8004984:	7f19      	ldrb	r1, [r3, #28]
 8004986:	4301      	orrs	r1, r0
 8004988:	7719      	strb	r1, [r3, #28]
 800498a:	f108 0801 	add.w	r8, r8, #1
  for (idx=0; idx<N_AXIS; idx++) {
 800498e:	f1b8 0f06 	cmp.w	r8, #6
 8004992:	d1c6      	bne.n	8004922 <plan_buffer_line+0x52>
      #endif
    }
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004994:	f1b9 0f00 	cmp.w	r9, #0
 8004998:	f000 80f4 	beq.w	8004b84 <plan_buffer_line+0x2b4>

  // Calculate the unit vector of the line move and the block maximum feed rate and acceleration scaled
  // down such that no individual axes maximum values are exceeded with respect to the line direction.
  // NOTE: This calculation assumes all axes are orthogonal (Cartesian) and works with ABC-axes,
  // if they are also orthogonal/independent. Operates on the absolute value of the unit vector.
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff fd75 	bl	800448c <convert_delta_vector_to_unit_vector>
 80049a2:	eb05 0906 	add.w	r9, r5, r6
 80049a6:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
#ifdef ENABLE_ACCEL_SCALING
  block->pbacceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, unit_vec);
 80049aa:	4621      	mov	r1, r4
 80049ac:	487f      	ldr	r0, [pc, #508]	; (8004bac <plan_buffer_line+0x2dc>)
 80049ae:	f7ff fd9d 	bl	80044ec <limit_value_by_axis_maximum>
#else
  block->pbacceleration = limit_value_by_axis_maximum(settings.eeacceleration, unit_vec);
#endif
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 80049b2:	4621      	mov	r1, r4
  block->pbacceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, unit_vec);
 80049b4:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 80049b8:	487d      	ldr	r0, [pc, #500]	; (8004bb0 <plan_buffer_line+0x2e0>)
 80049ba:	f7ff fd97 	bl	80044ec <limit_value_by_axis_maximum>

  // Store programmed rate.
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 80049be:	f899 801d 	ldrb.w	r8, [r9, #29]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 80049c2:	f8c9 0034 	str.w	r0, [r9, #52]	; 0x34
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 80049c6:	f018 0f01 	tst.w	r8, #1
 80049ca:	d051      	beq.n	8004a70 <plan_buffer_line+0x1a0>
  else { 
    block->programmed_rate = pl_data->feed_rate;
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80049cc:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
  }

  // TODO: Need to check this method handling zero junction speeds when starting from rest.
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 80049d0:	9b01      	ldr	r3, [sp, #4]
 80049d2:	f04f 0a00 	mov.w	sl, #0
 80049d6:	781a      	ldrb	r2, [r3, #0]
 80049d8:	4b76      	ldr	r3, [pc, #472]	; (8004bb4 <plan_buffer_line+0x2e4>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d002      	beq.n	80049e6 <plan_buffer_line+0x116>
 80049e0:	f018 0802 	ands.w	r8, r8, #2
 80049e4:	d050      	beq.n	8004a88 <plan_buffer_line+0x1b8>

    // Initialize block entry speed as zero. Assume it will be starting from rest. Planner will correct this later.
    // If system motion, the system motion block always is assumed to start from rest and end at a complete stop.
    block->entry_speed_sqr = 0.0;
 80049e6:	19ab      	adds	r3, r5, r6
 80049e8:	f8c3 a020 	str.w	sl, [r3, #32]
    }

    // NOTE: Computed without any expensive trig, sin() or acos(), by trig half angle identity of cos(theta).
    if (junction_cos_theta > 0.999999) {
      //  For a 0 degree acute junction, just set minimum junction speed.
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 80049ec:	f8c3 a030 	str.w	sl, [r3, #48]	; 0x30
      }
    }
  }

  // Block system motion from updating this data to ensure next g-code motion is computed correctly.
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 80049f0:	eb05 0906 	add.w	r9, r5, r6
 80049f4:	f899 301d 	ldrb.w	r3, [r9, #29]
 80049f8:	079b      	lsls	r3, r3, #30
 80049fa:	d437      	bmi.n	8004a6c <plan_buffer_line+0x19c>
    float nominal_speed = plan_compute_profile_nominal_speed(block);
 80049fc:	4638      	mov	r0, r7
 80049fe:	f7ff fed7 	bl	80047b0 <plan_compute_profile_nominal_speed>
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004a02:	4f6d      	ldr	r7, [pc, #436]	; (8004bb8 <plan_buffer_line+0x2e8>)
    float nominal_speed = plan_compute_profile_nominal_speed(block);
 8004a04:	4680      	mov	r8, r0
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004a06:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004a0a:	4651      	mov	r1, sl
 8004a0c:	f7fc fb76 	bl	80010fc <__aeabi_fcmpgt>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	f000 80b4 	beq.w	8004b7e <plan_buffer_line+0x2ae>
 8004a16:	4651      	mov	r1, sl
 8004a18:	4650      	mov	r0, sl
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004a1a:	f7fc f9b3 	bl	8000d84 <__aeabi_fmul>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004a1e:	4435      	add	r5, r6
 8004a20:	6b2e      	ldr	r6, [r5, #48]	; 0x30
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004a22:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004a26:	4631      	mov	r1, r6
 8004a28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004a2a:	f7fc fb67 	bl	80010fc <__aeabi_fcmpgt>
 8004a2e:	b100      	cbz	r0, 8004a32 <plan_buffer_line+0x162>
 8004a30:	626e      	str	r6, [r5, #36]	; 0x24
    pl.previous_nominal_speed = nominal_speed;

    // Update previous path unit_vector and planner position.
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004a32:	4d62      	ldr	r5, [pc, #392]	; (8004bbc <plan_buffer_line+0x2ec>)
 8004a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    pl.previous_nominal_speed = nominal_speed;
 8004a36:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a3c:	e894 0003 	ldmia.w	r4, {r0, r1}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004a40:	ac04      	add	r4, sp, #16
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004a42:	e885 0003 	stmia.w	r5, {r0, r1}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a48:	3d28      	subs	r5, #40	; 0x28
 8004a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a4c:	e894 0003 	ldmia.w	r4, {r0, r1}

    // New block is all set. Update buffer head and next buffer head indices.
    block_buffer_head = next_buffer_head;
 8004a50:	4a5b      	ldr	r2, [pc, #364]	; (8004bc0 <plan_buffer_line+0x2f0>)
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004a52:	e885 0003 	stmia.w	r5, {r0, r1}
    block_buffer_head = next_buffer_head;
 8004a56:	7813      	ldrb	r3, [r2, #0]
 8004a58:	9901      	ldr	r1, [sp, #4]
 8004a5a:	700b      	strb	r3, [r1, #0]
  block_index++;
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004a60:	2bc8      	cmp	r3, #200	; 0xc8
 8004a62:	bf08      	it	eq
 8004a64:	2300      	moveq	r3, #0
    next_buffer_head = plan_next_block_index(block_buffer_head);
 8004a66:	7013      	strb	r3, [r2, #0]

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
 8004a68:	f7ff fd64 	bl	8004534 <planner_recalculate>
  }
  return(PLAN_OK);
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	e08a      	b.n	8004b86 <plan_buffer_line+0x2b6>
    block->programmed_rate = pl_data->feed_rate;
 8004a70:	f8da 1000 	ldr.w	r1, [sl]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004a74:	f018 0f08 	tst.w	r8, #8
    block->programmed_rate = pl_data->feed_rate;
 8004a78:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004a7c:	d0a8      	beq.n	80049d0 <plan_buffer_line+0x100>
 8004a7e:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8004a82:	f7fc f97f 	bl	8000d84 <__aeabi_fmul>
 8004a86:	e7a1      	b.n	80049cc <plan_buffer_line+0xfc>
 8004a88:	46d1      	mov	r9, sl
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a8a:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a8e:	4b4a      	ldr	r3, [pc, #296]	; (8004bb8 <plan_buffer_line+0x2e8>)
 8004a90:	4443      	add	r3, r8
 8004a92:	699a      	ldr	r2, [r3, #24]
 8004a94:	f854 3008 	ldr.w	r3, [r4, r8]
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	9303      	str	r3, [sp, #12]
 8004a9e:	9202      	str	r2, [sp, #8]
 8004aa0:	f7fc f970 	bl	8000d84 <__aeabi_fmul>
 8004aa4:	4601      	mov	r1, r0
 8004aa6:	4648      	mov	r0, r9
 8004aa8:	f7fc f862 	bl	8000b70 <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004aac:	9a02      	ldr	r2, [sp, #8]
 8004aae:	9b03      	ldr	r3, [sp, #12]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004ab0:	4681      	mov	r9, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fc f85b 	bl	8000b70 <__aeabi_fsub>
 8004aba:	f84b 0008 	str.w	r0, [fp, r8]
 8004abe:	f108 0804 	add.w	r8, r8, #4
    for (idx=0; idx<N_AXIS; idx++) {
 8004ac2:	f1b8 0f18 	cmp.w	r8, #24
 8004ac6:	d1e2      	bne.n	8004a8e <plan_buffer_line+0x1be>
    if (junction_cos_theta > 0.999999) {
 8004ac8:	4648      	mov	r0, r9
 8004aca:	f7fb fcb1 	bl	8000430 <__aeabi_f2d>
 8004ace:	a330      	add	r3, pc, #192	; (adr r3, 8004b90 <plan_buffer_line+0x2c0>)
 8004ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad4:	4680      	mov	r8, r0
 8004ad6:	4689      	mov	r9, r1
 8004ad8:	f7fb ff8e 	bl	80009f8 <__aeabi_dcmpgt>
 8004adc:	b108      	cbz	r0, 8004ae2 <plan_buffer_line+0x212>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8004ade:	19ab      	adds	r3, r5, r6
 8004ae0:	e784      	b.n	80049ec <plan_buffer_line+0x11c>
      if (junction_cos_theta < -0.999999) {
 8004ae2:	a32d      	add	r3, pc, #180	; (adr r3, 8004b98 <plan_buffer_line+0x2c8>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	4640      	mov	r0, r8
 8004aea:	4649      	mov	r1, r9
 8004aec:	f7fb ff66 	bl	80009bc <__aeabi_dcmplt>
 8004af0:	b118      	cbz	r0, 8004afa <plan_buffer_line+0x22a>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8004af2:	4a34      	ldr	r2, [pc, #208]	; (8004bc4 <plan_buffer_line+0x2f4>)
 8004af4:	19ab      	adds	r3, r5, r6
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
 8004af8:	e77a      	b.n	80049f0 <plan_buffer_line+0x120>
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 8004afa:	4658      	mov	r0, fp
 8004afc:	f7ff fcc6 	bl	800448c <convert_delta_vector_to_unit_vector>
        	float junction_acceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, junction_unit_vec);
 8004b00:	4659      	mov	r1, fp
 8004b02:	482a      	ldr	r0, [pc, #168]	; (8004bac <plan_buffer_line+0x2dc>)
 8004b04:	f7ff fcf2 	bl	80044ec <limit_value_by_axis_maximum>
        	float sin_theta_d2 = sqrtf(0.5*(1.0-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
        	float junction_acceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, junction_unit_vec);
 8004b0c:	4683      	mov	fp, r0
        	float sin_theta_d2 = sqrtf(0.5*(1.0-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004b0e:	492e      	ldr	r1, [pc, #184]	; (8004bc8 <plan_buffer_line+0x2f8>)
 8004b10:	2000      	movs	r0, #0
 8004b12:	f7fb fb2d 	bl	8000170 <__aeabi_dsub>
 8004b16:	2200      	movs	r2, #0
 8004b18:	4b2c      	ldr	r3, [pc, #176]	; (8004bcc <plan_buffer_line+0x2fc>)
 8004b1a:	f7fb fcdd 	bl	80004d8 <__aeabi_dmul>
 8004b1e:	f7fb ffd3 	bl	8000ac8 <__aeabi_d2f>
 8004b22:	f003 fdef 	bl	8008704 <sqrtf>
 8004b26:	4682      	mov	sl, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8004b28:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <plan_buffer_line+0x300>)
 8004b2a:	4658      	mov	r0, fp
 8004b2c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004b2e:	f7fc f929 	bl	8000d84 <__aeabi_fmul>
 8004b32:	4651      	mov	r1, sl
 8004b34:	f7fc f926 	bl	8000d84 <__aeabi_fmul>
 8004b38:	f7fb fc7a 	bl	8000430 <__aeabi_f2d>
 8004b3c:	4680      	mov	r8, r0
 8004b3e:	4650      	mov	r0, sl
 8004b40:	4689      	mov	r9, r1
 8004b42:	f7fb fc75 	bl	8000430 <__aeabi_f2d>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	491e      	ldr	r1, [pc, #120]	; (8004bc8 <plan_buffer_line+0x2f8>)
 8004b4e:	f7fb fb0f 	bl	8000170 <__aeabi_dsub>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4640      	mov	r0, r8
 8004b58:	4649      	mov	r1, r9
 8004b5a:	f7fb fde7 	bl	800072c <__aeabi_ddiv>
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2300      	movs	r3, #0
 8004b62:	4680      	mov	r8, r0
 8004b64:	4689      	mov	r9, r1
 8004b66:	f7fb ff29 	bl	80009bc <__aeabi_dcmplt>
 8004b6a:	b930      	cbnz	r0, 8004b7a <plan_buffer_line+0x2aa>
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	4649      	mov	r1, r9
 8004b70:	f7fb ffaa 	bl	8000ac8 <__aeabi_d2f>
 8004b74:	19ab      	adds	r3, r5, r6
 8004b76:	6318      	str	r0, [r3, #48]	; 0x30
 8004b78:	e73a      	b.n	80049f0 <plan_buffer_line+0x120>
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	e7fa      	b.n	8004b74 <plan_buffer_line+0x2a4>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004b7e:	4641      	mov	r1, r8
 8004b80:	4640      	mov	r0, r8
 8004b82:	e74a      	b.n	8004a1a <plan_buffer_line+0x14a>
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004b84:	4648      	mov	r0, r9
}
 8004b86:	b01d      	add	sp, #116	; 0x74
 8004b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8c:	f3af 8000 	nop.w
 8004b90:	e7210be9 	.word	0xe7210be9
 8004b94:	3feffffd 	.word	0x3feffffd
 8004b98:	e7210be9 	.word	0xe7210be9
 8004b9c:	bfeffffd 	.word	0xbfeffffd
 8004ba0:	20003298 	.word	0x20003298
 8004ba4:	20000098 	.word	0x20000098
 8004ba8:	080099f2 	.word	0x080099f2
 8004bac:	20004018 	.word	0x20004018
 8004bb0:	20003f88 	.word	0x20003f88
 8004bb4:	2000329a 	.word	0x2000329a
 8004bb8:	2000329c 	.word	0x2000329c
 8004bbc:	200032b4 	.word	0x200032b4
 8004bc0:	2000329b 	.word	0x2000329b
 8004bc4:	7f7fffff 	.word	0x7f7fffff
 8004bc8:	3ff00000 	.word	0x3ff00000
 8004bcc:	3fe00000 	.word	0x3fe00000
 8004bd0:	20003f70 	.word	0x20003f70
 8004bd4:	20003904 	.word	0x20003904

08004bd8 <plan_sync_position>:


// Reset the planner position vectors. Called by the system abort/initialization routine.
void plan_sync_position()
{
 8004bd8:	2300      	movs	r3, #0
        pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      } else {
        pl.position[idx] = sys_position[idx];
      }
    #else
      pl.position[idx] = sys_position[idx];
 8004bda:	4a05      	ldr	r2, [pc, #20]	; (8004bf0 <plan_sync_position+0x18>)
 8004bdc:	4805      	ldr	r0, [pc, #20]	; (8004bf4 <plan_sync_position+0x1c>)
 8004bde:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8004be2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004be6:	3301      	adds	r3, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8004be8:	2b06      	cmp	r3, #6
 8004bea:	d1f8      	bne.n	8004bde <plan_sync_position+0x6>
    #endif
  }
}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	2000329c 	.word	0x2000329c
 8004bf4:	20003904 	.word	0x20003904

08004bf8 <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <plan_get_block_buffer_available+0x1c>)
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <plan_get_block_buffer_available+0x20>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	bf2c      	ite	cs
 8004c04:	f1a3 0039 	subcs.w	r0, r3, #57	; 0x39
  return((block_buffer_tail-block_buffer_head-1));
 8004c08:	f103 30ff 	addcc.w	r0, r3, #4294967295
 8004c0c:	1a80      	subs	r0, r0, r2
 8004c0e:	b2c0      	uxtb	r0, r0
}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20003298 	.word	0x20003298
 8004c18:	2000329a 	.word	0x2000329a

08004c1c <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8004c1c:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8004c1e:	f001 ff39 	bl	8006a94 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8004c22:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <plan_cycle_reinitialize+0x18>)
 8004c24:	781a      	ldrb	r2, [r3, #0]
 8004c26:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <plan_cycle_reinitialize+0x1c>)
 8004c28:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 8004c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 8004c2e:	f7ff bc81 	b.w	8004534 <planner_recalculate>
 8004c32:	bf00      	nop
 8004c34:	2000329a 	.word	0x2000329a
 8004c38:	20003299 	.word	0x20003299

08004c3c <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8004c3c:	b510      	push	{r4, lr}
 8004c3e:	1e44      	subs	r4, r0, #1
  while (*s)
 8004c40:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004c44:	b900      	cbnz	r0, 8004c48 <printString+0xc>
    serial_write(*s++);
//	uart_sendstr(s);
}
 8004c46:	bd10      	pop	{r4, pc}
    serial_write(*s++);
 8004c48:	f001 f8a9 	bl	8005d9e <serial_write>
 8004c4c:	e7f8      	b.n	8004c40 <printString+0x4>

08004c4e <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8004c4e:	2863      	cmp	r0, #99	; 0x63
{
 8004c50:	b538      	push	{r3, r4, r5, lr}
  if (n >= 100) { // 100-255
 8004c52:	d91d      	bls.n	8004c90 <print_uint8_base10+0x42>
    digit_a = '0' + n % 10;
 8004c54:	240a      	movs	r4, #10
 8004c56:	fbb0 f3f4 	udiv	r3, r0, r4
 8004c5a:	fb04 0413 	mls	r4, r4, r3, r0
 8004c5e:	3430      	adds	r4, #48	; 0x30
 8004c60:	b2e4      	uxtb	r4, r4
    n /= 10;
 8004c62:	b2d8      	uxtb	r0, r3
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
 8004c64:	250a      	movs	r5, #10
 8004c66:	fbb0 f3f5 	udiv	r3, r0, r5
 8004c6a:	fb05 0513 	mls	r5, r5, r3, r0
 8004c6e:	3530      	adds	r5, #48	; 0x30
 8004c70:	b2ed      	uxtb	r5, r5
    n /= 10;
 8004c72:	b2d8      	uxtb	r0, r3
  }
  serial_write('0' + n);
 8004c74:	3030      	adds	r0, #48	; 0x30
 8004c76:	b2c0      	uxtb	r0, r0
 8004c78:	f001 f891 	bl	8005d9e <serial_write>
  if (digit_b) { serial_write(digit_b); }
 8004c7c:	b115      	cbz	r5, 8004c84 <print_uint8_base10+0x36>
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f001 f88d 	bl	8005d9e <serial_write>
  if (digit_a) { serial_write(digit_a); }
 8004c84:	b154      	cbz	r4, 8004c9c <print_uint8_base10+0x4e>
 8004c86:	4620      	mov	r0, r4
}
 8004c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (digit_a) { serial_write(digit_a); }
 8004c8c:	f001 b887 	b.w	8005d9e <serial_write>
  if (n >= 10) { // 10-99
 8004c90:	2809      	cmp	r0, #9
  uint8_t digit_a = 0;
 8004c92:	f04f 0400 	mov.w	r4, #0
  if (n >= 10) { // 10-99
 8004c96:	d8e5      	bhi.n	8004c64 <print_uint8_base10+0x16>
  uint8_t digit_b = 0;
 8004c98:	4625      	mov	r5, r4
 8004c9a:	e7eb      	b.n	8004c74 <print_uint8_base10+0x26>
 8004c9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004ca0 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8004ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca2:	460d      	mov	r5, r1
 8004ca4:	b085      	sub	sp, #20
  if (n < 0) {
 8004ca6:	2100      	movs	r1, #0
{
 8004ca8:	4604      	mov	r4, r0
  if (n < 0) {
 8004caa:	f7fc fa09 	bl	80010c0 <__aeabi_fcmplt>
 8004cae:	b120      	cbz	r0, 8004cba <printFloat+0x1a>
    serial_write('-');
 8004cb0:	202d      	movs	r0, #45	; 0x2d
 8004cb2:	f001 f874 	bl	8005d9e <serial_write>
    n = -n;
 8004cb6:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004cba:	462e      	mov	r6, r5
    n *= 100;
 8004cbc:	4f28      	ldr	r7, [pc, #160]	; (8004d60 <printFloat+0xc0>)
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004cbe:	2e01      	cmp	r6, #1
 8004cc0:	d82a      	bhi.n	8004d18 <printFloat+0x78>
    decimals -= 2;
  }
  if (decimals) { n *= 10; }
 8004cc2:	086b      	lsrs	r3, r5, #1
 8004cc4:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8004cc8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8004ccc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004cd0:	d004      	beq.n	8004cdc <printFloat+0x3c>
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	4923      	ldr	r1, [pc, #140]	; (8004d64 <printFloat+0xc4>)
 8004cd6:	f7fc f855 	bl	8000d84 <__aeabi_fmul>
 8004cda:	4604      	mov	r4, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004cdc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f7fb ff47 	bl	8000b74 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8004ce6:	f7fc fa29 	bl	800113c <__aeabi_f2iz>
  while(a > 0) {
 8004cea:	2300      	movs	r3, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004cec:	220a      	movs	r2, #10
 8004cee:	b2dc      	uxtb	r4, r3
 8004cf0:	3301      	adds	r3, #1
  while(a > 0) {
 8004cf2:	b9c8      	cbnz	r0, 8004d28 <printFloat+0x88>
    a /= 10;
  }
  while (i < decimal_places) {
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004cf4:	2230      	movs	r2, #48	; 0x30
 8004cf6:	1e63      	subs	r3, r4, #1
 8004cf8:	446b      	add	r3, sp
  while (i < decimal_places) {
 8004cfa:	42ac      	cmp	r4, r5
 8004cfc:	d31f      	bcc.n	8004d3e <printFloat+0x9e>
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004cfe:	d106      	bne.n	8004d0e <printFloat+0x6e>
    buf[i++] = '0';
 8004d00:	aa04      	add	r2, sp, #16
 8004d02:	1c63      	adds	r3, r4, #1
 8004d04:	4414      	add	r4, r2
 8004d06:	2230      	movs	r2, #48	; 0x30
 8004d08:	f804 2c10 	strb.w	r2, [r4, #-16]
 8004d0c:	b2dc      	uxtb	r4, r3
 8004d0e:	eb0d 0604 	add.w	r6, sp, r4
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8004d12:	b9cc      	cbnz	r4, 8004d48 <printFloat+0xa8>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
    serial_write(buf[i-1]);
  }
}
 8004d14:	b005      	add	sp, #20
 8004d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    n *= 100;
 8004d18:	4620      	mov	r0, r4
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	f7fc f832 	bl	8000d84 <__aeabi_fmul>
    decimals -= 2;
 8004d20:	3e02      	subs	r6, #2
    n *= 100;
 8004d22:	4604      	mov	r4, r0
    decimals -= 2;
 8004d24:	b2f6      	uxtb	r6, r6
 8004d26:	e7ca      	b.n	8004cbe <printFloat+0x1e>
    buf[i++] = (a % 10) + '0'; // Get digit
 8004d28:	a904      	add	r1, sp, #16
 8004d2a:	440c      	add	r4, r1
 8004d2c:	fbb0 f1f2 	udiv	r1, r0, r2
 8004d30:	fb02 0011 	mls	r0, r2, r1, r0
 8004d34:	3030      	adds	r0, #48	; 0x30
 8004d36:	f804 0c10 	strb.w	r0, [r4, #-16]
    a /= 10;
 8004d3a:	4608      	mov	r0, r1
 8004d3c:	e7d7      	b.n	8004cee <printFloat+0x4e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004d3e:	3401      	adds	r4, #1
 8004d40:	b2e4      	uxtb	r4, r4
 8004d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d46:	e7d8      	b.n	8004cfa <printFloat+0x5a>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d48:	42ac      	cmp	r4, r5
 8004d4a:	d102      	bne.n	8004d52 <printFloat+0xb2>
 8004d4c:	202e      	movs	r0, #46	; 0x2e
 8004d4e:	f001 f826 	bl	8005d9e <serial_write>
    serial_write(buf[i-1]);
 8004d52:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8004d56:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004d58:	f001 f821 	bl	8005d9e <serial_write>
  for (; i > 0; i--) {
 8004d5c:	b2e4      	uxtb	r4, r4
 8004d5e:	e7d8      	b.n	8004d12 <printFloat+0x72>
 8004d60:	42c80000 	.word	0x42c80000
 8004d64:	41200000 	.word	0x41200000

08004d68 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8004d68:	b508      	push	{r3, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <printFloat_CoordValue+0x38>)
 8004d6c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8004d70:	07db      	lsls	r3, r3, #31
 8004d72:	d50d      	bpl.n	8004d90 <printFloat_CoordValue+0x28>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004d74:	f7fb fb5c 	bl	8000430 <__aeabi_f2d>
 8004d78:	a307      	add	r3, pc, #28	; (adr r3, 8004d98 <printFloat_CoordValue+0x30>)
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb fbab 	bl	80004d8 <__aeabi_dmul>
 8004d82:	f7fb fea1 	bl	8000ac8 <__aeabi_d2f>
 8004d86:	2104      	movs	r1, #4
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8004d88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
 8004d8c:	f7ff bf88 	b.w	8004ca0 <printFloat>
 8004d90:	2103      	movs	r1, #3
 8004d92:	e7f9      	b.n	8004d88 <printFloat_CoordValue+0x20>
 8004d94:	f3af 8000 	nop.w
 8004d98:	57e16865 	.word	0x57e16865
 8004d9c:	3fa42851 	.word	0x3fa42851
 8004da0:	20003f70 	.word	0x20003f70
 8004da4:	00000000 	.word	0x00000000

08004da8 <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 8004da8:	b508      	push	{r3, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004daa:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <printFloat_RateValue+0x38>)
 8004dac:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
 8004db0:	f011 0101 	ands.w	r1, r1, #1
 8004db4:	d009      	beq.n	8004dca <printFloat_RateValue+0x22>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004db6:	f7fb fb3b 	bl	8000430 <__aeabi_f2d>
 8004dba:	a307      	add	r3, pc, #28	; (adr r3, 8004dd8 <printFloat_RateValue+0x30>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f7fb fb8a 	bl	80004d8 <__aeabi_dmul>
 8004dc4:	f7fb fe80 	bl	8000ac8 <__aeabi_d2f>
 8004dc8:	2101      	movs	r1, #1
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8004dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
 8004dce:	f7ff bf67 	b.w	8004ca0 <printFloat>
 8004dd2:	bf00      	nop
 8004dd4:	f3af 8000 	nop.w
 8004dd8:	57e16865 	.word	0x57e16865
 8004ddc:	3fa42851 	.word	0x3fa42851
 8004de0:	20003f70 	.word	0x20003f70

08004de4 <probe_init>:
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 8004de4:	2200      	movs	r2, #0
 8004de6:	4b01      	ldr	r3, [pc, #4]	; (8004dec <probe_init+0x8>)
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	4770      	bx	lr
 8004dec:	20003df0 	.word	0x20003df0

08004df0 <probe_configure_invert_mask>:
 8004df0:	2200      	movs	r2, #0
 8004df2:	4b01      	ldr	r3, [pc, #4]	; (8004df8 <probe_configure_invert_mask+0x8>)
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	4770      	bx	lr
 8004df8:	20003df0 	.word	0x20003df0

08004dfc <probe_get_state>:
 8004dfc:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <probe_get_state+0x14>)

// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state()
{
#ifdef STM32
  return !((GPIO_ReadInputData(PROBE_GPIO_Port) & PROBE_Pin) ^ probe_invert_mask);
 8004dfe:	4a05      	ldr	r2, [pc, #20]	; (8004e14 <probe_get_state+0x18>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	7810      	ldrb	r0, [r2, #0]
 8004e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
#elif ATMEGA328P
  return((PROBE_PIN & PROBE_MASK) ^ probe_invert_mask);
#endif
}
 8004e08:	1a1b      	subs	r3, r3, r0
 8004e0a:	4258      	negs	r0, r3
 8004e0c:	4158      	adcs	r0, r3
 8004e0e:	4770      	bx	lr
 8004e10:	40010800 	.word	0x40010800
 8004e14:	20003df0 	.word	0x20003df0

08004e18 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8004e18:	b538      	push	{r3, r4, r5, lr}
  if (probe_get_state()) {
 8004e1a:	f7ff ffef 	bl	8004dfc <probe_get_state>
 8004e1e:	b178      	cbz	r0, 8004e40 <probe_state_monitor+0x28>
    sys_probe_state = PROBE_OFF;
 8004e20:	2200      	movs	r2, #0
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <probe_state_monitor+0x2c>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8004e24:	4c08      	ldr	r4, [pc, #32]	; (8004e48 <probe_state_monitor+0x30>)
 8004e26:	4d09      	ldr	r5, [pc, #36]	; (8004e4c <probe_state_monitor+0x34>)
    sys_probe_state = PROBE_OFF;
 8004e28:	701a      	strb	r2, [r3, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8004e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e2e:	e895 0003 	ldmia.w	r5, {r0, r1}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004e32:	4a07      	ldr	r2, [pc, #28]	; (8004e50 <probe_state_monitor+0x38>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8004e34:	e884 0003 	stmia.w	r4, {r0, r1}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004e38:	7813      	ldrb	r3, [r2, #0]
 8004e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e3e:	7013      	strb	r3, [r2, #0]
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	bf00      	nop
 8004e44:	200038ea 	.word	0x200038ea
 8004e48:	200038ec 	.word	0x200038ec
 8004e4c:	20003904 	.word	0x20003904
 8004e50:	200038e9 	.word	0x200038e9

08004e54 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 8004e54:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8004e56:	f7ff fc75 	bl	8004744 <plan_get_current_block>
 8004e5a:	b120      	cbz	r0, 8004e66 <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 8004e5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8004e60:	2002      	movs	r0, #2
 8004e62:	f002 ba8d 	b.w	8007380 <system_set_exec_state_flag>
 8004e66:	bd08      	pop	{r3, pc}

08004e68 <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8004e6a:	4b38      	ldr	r3, [pc, #224]	; (8004f4c <protocol_exec_rt_system+0xe4>)
 8004e6c:	4c38      	ldr	r4, [pc, #224]	; (8004f50 <protocol_exec_rt_system+0xe8>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	4e38      	ldr	r6, [pc, #224]	; (8004f54 <protocol_exec_rt_system+0xec>)
  if (rt_exec) { // Enter only if any bit flag is true
 8004e72:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004e76:	b14b      	cbz	r3, 8004e8c <protocol_exec_rt_system+0x24>
    // System alarm. Everything has shutdown by something that has gone severely wrong. Report
    // the source of the error to the user. If critical, Grbl disables by entering an infinite
    // loop until system reset/abort.
    sys.state = STATE_ALARM; // Set system alarm state
 8004e78:	2701      	movs	r7, #1
    report_alarm_message(rt_exec);
 8004e7a:	4628      	mov	r0, r5
    // Halt everything upon a critical event flag. Currently hard and soft limits flag this.
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8004e7c:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8004e7e:	7027      	strb	r7, [r4, #0]
    report_alarm_message(rt_exec);
 8004e80:	f000 fb7a 	bl	8005578 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8004e84:	42bd      	cmp	r5, r7
 8004e86:	d90c      	bls.n	8004ea2 <protocol_exec_rt_system+0x3a>
        // the user and a GUI time to do what is needed before resetting, like killing the
        // incoming stream. The same could be said about soft limits. While the position is not
        // lost, continued streaming could cause a serious crash if by chance it gets executed.
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
 8004e88:	f002 fc1e 	bl	80076c8 <system_clear_exec_alarm>
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8004e8c:	7833      	ldrb	r3, [r6, #0]
  if (rt_exec) {
 8004e8e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80ba 	beq.w	800500c <protocol_exec_rt_system+0x1a4>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 8004e98:	06e8      	lsls	r0, r5, #27
 8004e9a:	d50c      	bpl.n	8004eb6 <protocol_exec_rt_system+0x4e>
      sys.abort = true;  // Only place this is set true.
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	7063      	strb	r3, [r4, #1]
      return; // Nothing else to do but exit.
 8004ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	f000 fb7a 	bl	800559c <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8004ea8:	2010      	movs	r0, #16
 8004eaa:	f002 fbf9 	bl	80076a0 <system_clear_exec_state_flag>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8004eae:	7833      	ldrb	r3, [r6, #0]
 8004eb0:	06dd      	lsls	r5, r3, #27
 8004eb2:	d5fc      	bpl.n	8004eae <protocol_exec_rt_system+0x46>
 8004eb4:	e7e8      	b.n	8004e88 <protocol_exec_rt_system+0x20>
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 8004eb6:	07e9      	lsls	r1, r5, #31
 8004eb8:	d504      	bpl.n	8004ec4 <protocol_exec_rt_system+0x5c>
      report_realtime_status();
 8004eba:	f000 fde5 	bl	8005a88 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	f002 fbee 	bl	80076a0 <system_clear_exec_state_flag>
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8004ec4:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8004ec8:	d05a      	beq.n	8004f80 <protocol_exec_rt_system+0x118>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8004eca:	7823      	ldrb	r3, [r4, #0]
 8004ecc:	b26e      	sxtb	r6, r5
 8004ece:	f013 0f03 	tst.w	r3, #3
 8004ed2:	d147      	bne.n	8004f64 <protocol_exec_rt_system+0xfc>
      
        // If in CYCLE or JOG states, immediately initiate a motion HOLD.
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8004ed4:	f013 0f28 	tst.w	r3, #40	; 0x28
 8004ed8:	d010      	beq.n	8004efc <protocol_exec_rt_system+0x94>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8004eda:	78a3      	ldrb	r3, [r4, #2]
 8004edc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8004ee0:	d10c      	bne.n	8004efc <protocol_exec_rt_system+0x94>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8004ee2:	f001 fdd7 	bl	8006a94 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	7123      	strb	r3, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8004eea:	7823      	ldrb	r3, [r4, #0]
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d105      	bne.n	8004efc <protocol_exec_rt_system+0x94>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8004ef0:	2e00      	cmp	r6, #0
 8004ef2:	db07      	blt.n	8004f04 <protocol_exec_rt_system+0x9c>
 8004ef4:	78a3      	ldrb	r3, [r4, #2]
 8004ef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004efa:	70a3      	strb	r3, [r4, #2]
            }
          }
        }
        // If IDLE, Grbl is not in motion. Simply indicate suspend state and hold is complete.
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8004efc:	7823      	ldrb	r3, [r4, #0]
 8004efe:	b90b      	cbnz	r3, 8004f04 <protocol_exec_rt_system+0x9c>
 8004f00:	2201      	movs	r2, #1
 8004f02:	70a2      	strb	r2, [r4, #2]

        // Execute and flag a motion cancel with deceleration and return to idle. Used primarily by probing cycle
        // to halt and cancel the remainder of the motion.
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8004f04:	066a      	lsls	r2, r5, #25
 8004f06:	d505      	bpl.n	8004f14 <protocol_exec_rt_system+0xac>
          // MOTION_CANCEL only occurs during a CYCLE, but a HOLD and SAFETY_DOOR may been initiated beforehand
          // to hold the CYCLE. Motion cancel is valid for a single planner block motion only, while jog cancel
          // will handle and clear multiple planner block motions.
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8004f08:	069f      	lsls	r7, r3, #26
 8004f0a:	bf5e      	ittt	pl
 8004f0c:	78a2      	ldrbpl	r2, [r4, #2]
 8004f0e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004f12:	70a2      	strbpl	r2, [r4, #2]
        }

        // Execute a feed hold with deceleration, if required. Then, suspend system.
        if (rt_exec & EXEC_FEED_HOLD) {
 8004f14:	0728      	lsls	r0, r5, #28
 8004f16:	d504      	bpl.n	8004f22 <protocol_exec_rt_system+0xba>
          // Block SAFETY_DOOR, JOG, and SLEEP states from changing to HOLD state.
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8004f18:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8004f1c:	bf04      	itt	eq
 8004f1e:	2310      	moveq	r3, #16
 8004f20:	7023      	strbeq	r3, [r4, #0]
        }

        // Execute a safety door stop with a feed hold and disable spindle/coolant.
        // NOTE: Safety door differs from feed holds by stopping everything no matter state, disables powered
        // devices (spindle/coolant), and blocks resuming until switch is re-engaged.
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8004f22:	06a9      	lsls	r1, r5, #26
 8004f24:	d51e      	bpl.n	8004f64 <protocol_exec_rt_system+0xfc>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8004f26:	2006      	movs	r0, #6
 8004f28:	f000 fb38 	bl	800559c <report_feedback_message>
          // If jogging, block safety door methods until jog cancel is complete. Just flag that it happened.
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8004f2c:	78a3      	ldrb	r3, [r4, #2]
 8004f2e:	061a      	lsls	r2, r3, #24
 8004f30:	d414      	bmi.n	8004f5c <protocol_exec_rt_system+0xf4>
            // Check if the safety re-opened during a restore parking motion only. Ignore if
            // already retracting, parked or in sleep state.
            if (sys.state == STATE_SAFETY_DOOR) {
 8004f32:	7822      	ldrb	r2, [r4, #0]
 8004f34:	2a40      	cmp	r2, #64	; 0x40
 8004f36:	d10f      	bne.n	8004f58 <protocol_exec_rt_system+0xf0>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8004f38:	071f      	lsls	r7, r3, #28
 8004f3a:	d504      	bpl.n	8004f46 <protocol_exec_rt_system+0xde>
                    st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
                    sys.step_control = (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION);
                    sys.suspend &= ~(SUSPEND_HOLD_COMPLETE);
                  } // else NO_MOTION is active.
                #endif
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8004f3c:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8004f40:	f043 0302 	orr.w	r3, r3, #2
 8004f44:	70a3      	strb	r3, [r4, #2]
              }
            }
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8004f46:	2340      	movs	r3, #64	; 0x40
 8004f48:	7023      	strb	r3, [r4, #0]
 8004f4a:	e007      	b.n	8004f5c <protocol_exec_rt_system+0xf4>
 8004f4c:	2000391c 	.word	0x2000391c
 8004f50:	200038d4 	.word	0x200038d4
 8004f54:	200038e9 	.word	0x200038e9
 8004f58:	2a80      	cmp	r2, #128	; 0x80
 8004f5a:	d1f4      	bne.n	8004f46 <protocol_exec_rt_system+0xde>
          }
          // NOTE: This flag doesn't change when the door closes, unlike sys.state. Ensures any parking motions
          // are executed if the door switch closes and the state returns to HOLD.
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8004f5c:	78a3      	ldrb	r3, [r4, #2]
 8004f5e:	f043 0320 	orr.w	r3, r3, #32
 8004f62:	70a3      	strb	r3, [r4, #2]
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 8004f64:	2e00      	cmp	r6, #0
 8004f66:	da08      	bge.n	8004f7a <protocol_exec_rt_system+0x112>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8004f68:	7823      	ldrb	r3, [r4, #0]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	bf02      	ittt	eq
 8004f6e:	78a3      	ldrbeq	r3, [r4, #2]
 8004f70:	f043 0305 	orreq.w	r3, r3, #5
 8004f74:	70a3      	strbeq	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	7023      	strb	r3, [r4, #0]
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8004f7a:	20e8      	movs	r0, #232	; 0xe8
 8004f7c:	f002 fb90 	bl	80076a0 <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 8004f80:	07a8      	lsls	r0, r5, #30
 8004f82:	d523      	bpl.n	8004fcc <protocol_exec_rt_system+0x164>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8004f84:	f015 0f68 	tst.w	r5, #104	; 0x68
 8004f88:	d11d      	bne.n	8004fc6 <protocol_exec_rt_system+0x15e>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8004f8a:	7823      	ldrb	r3, [r4, #0]
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d107      	bne.n	8004fa0 <protocol_exec_rt_system+0x138>
 8004f90:	78a3      	ldrb	r3, [r4, #2]
 8004f92:	f013 0220 	ands.w	r2, r3, #32
 8004f96:	d103      	bne.n	8004fa0 <protocol_exec_rt_system+0x138>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8004f98:	06d9      	lsls	r1, r3, #27
 8004f9a:	f140 80d4 	bpl.w	8005146 <protocol_exec_rt_system+0x2de>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8004f9e:	7022      	strb	r2, [r4, #0]
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8004fa0:	7823      	ldrb	r3, [r4, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80d5 	beq.w	8005152 <protocol_exec_rt_system+0x2ea>
 8004fa8:	06df      	lsls	r7, r3, #27
 8004faa:	d50c      	bpl.n	8004fc6 <protocol_exec_rt_system+0x15e>
 8004fac:	78a2      	ldrb	r2, [r4, #2]
 8004fae:	07d6      	lsls	r6, r2, #31
 8004fb0:	d509      	bpl.n	8004fc6 <protocol_exec_rt_system+0x15e>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	f040 80cd 	bne.w	8005152 <protocol_exec_rt_system+0x2ea>
 8004fb8:	7ae3      	ldrb	r3, [r4, #11]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 80c9 	beq.w	8005152 <protocol_exec_rt_system+0x2ea>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8004fc0:	f043 0308 	orr.w	r3, r3, #8
 8004fc4:	72e3      	strb	r3, [r4, #11]
              sys.state = STATE_IDLE;
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8004fc6:	2002      	movs	r0, #2
 8004fc8:	f002 fb6a 	bl	80076a0 <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 8004fcc:	0768      	lsls	r0, r5, #29
 8004fce:	d51d      	bpl.n	800500c <protocol_exec_rt_system+0x1a4>
      // Reinitializes the cycle plan and stepper system after a feed hold for a resume. Called by
      // realtime command execution in the main program, ensuring that the planner re-plans safely.
      // NOTE: Bresenham algorithm variables are still maintained through both the planner and stepper
      // cycle reinitializations. The stepper path should continue exactly as if nothing has happened.
      // NOTE: EXEC_CYCLE_STOP is set by the stepper subsystem when a cycle or feed hold completes.
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8004fd0:	7823      	ldrb	r3, [r4, #0]
 8004fd2:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8004fd6:	f000 80d1 	beq.w	800517c <protocol_exec_rt_system+0x314>
 8004fda:	78e3      	ldrb	r3, [r4, #3]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 80cd 	bne.w	800517c <protocol_exec_rt_system+0x314>
 8004fe2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f2c0 80c8 	blt.w	800517c <protocol_exec_rt_system+0x314>
        // Hold complete. Set to indicate ready to resume.  Remain in HOLD or DOOR states until user
        // has issued a resume command or reset.
        plan_cycle_reinitialize();
 8004fec:	f7ff fe16 	bl	8004c1c <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8004ff0:	7923      	ldrb	r3, [r4, #4]
 8004ff2:	0799      	lsls	r1, r3, #30
 8004ff4:	bf48      	it	mi
 8004ff6:	78a2      	ldrbmi	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8004ff8:	f023 0306 	bic.w	r3, r3, #6
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8004ffc:	bf44      	itt	mi
 8004ffe:	f042 0201 	orrmi.w	r2, r2, #1
 8005002:	70a2      	strbmi	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005004:	7123      	strb	r3, [r4, #4]
        } else {
          sys.suspend = SUSPEND_DISABLE;
          sys.state = STATE_IDLE;
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005006:	2004      	movs	r0, #4
 8005008:	f002 fb4a 	bl	80076a0 <system_clear_exec_state_flag>
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 800500c:	4b6d      	ldr	r3, [pc, #436]	; (80051c4 <protocol_exec_rt_system+0x35c>)
 800500e:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005010:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005014:	2b00      	cmp	r3, #0
 8005016:	d038      	beq.n	800508a <protocol_exec_rt_system+0x222>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005018:	f002 fb72 	bl	8007700 <system_clear_exec_motion_overrides>

    uint8_t new_f_override =  sys.f_override;
 800501c:	7a20      	ldrb	r0, [r4, #8]
    if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 800501e:	f015 0f01 	tst.w	r5, #1
 8005022:	bf0c      	ite	eq
 8005024:	4603      	moveq	r3, r0
 8005026:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005028:	07aa      	lsls	r2, r5, #30
 800502a:	bf44      	itt	mi
 800502c:	330a      	addmi	r3, #10
 800502e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005030:	076f      	lsls	r7, r5, #29
 8005032:	bf44      	itt	mi
 8005034:	3b0a      	submi	r3, #10
 8005036:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005038:	072e      	lsls	r6, r5, #28
 800503a:	bf44      	itt	mi
 800503c:	3301      	addmi	r3, #1
 800503e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005040:	06e9      	lsls	r1, r5, #27
 8005042:	bf44      	itt	mi
 8005044:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005048:	b2db      	uxtbmi	r3, r3
    new_f_override = min(new_f_override,MAX_FEED_RATE_OVERRIDE);
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 800504a:	2bc8      	cmp	r3, #200	; 0xc8
 800504c:	bf28      	it	cs
 800504e:	23c8      	movcs	r3, #200	; 0xc8
 8005050:	2b0a      	cmp	r3, #10
 8005052:	bf38      	it	cc
 8005054:	230a      	movcc	r3, #10

    uint8_t new_r_override = sys.r_override;
 8005056:	7a61      	ldrb	r1, [r4, #9]
    if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 8005058:	f015 0f20 	tst.w	r5, #32
 800505c:	bf14      	ite	ne
 800505e:	2264      	movne	r2, #100	; 0x64
 8005060:	460a      	moveq	r2, r1
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005062:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005066:	bf18      	it	ne
 8005068:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 800506a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800506e:	bf18      	it	ne
 8005070:	2219      	movne	r2, #25

    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005072:	4298      	cmp	r0, r3
 8005074:	d101      	bne.n	800507a <protocol_exec_rt_system+0x212>
 8005076:	428a      	cmp	r2, r1
 8005078:	d007      	beq.n	800508a <protocol_exec_rt_system+0x222>
      sys.f_override = new_f_override;
 800507a:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
      sys.report_ovr_counter = 0; // Set to report change immediately
 800507c:	2300      	movs	r3, #0
      sys.r_override = new_r_override;
 800507e:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005080:	7323      	strb	r3, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005082:	f7ff fbe7 	bl	8004854 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005086:	f7ff fdc9 	bl	8004c1c <plan_cycle_reinitialize>
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 800508a:	4b4f      	ldr	r3, [pc, #316]	; (80051c8 <protocol_exec_rt_system+0x360>)
 800508c:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800508e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8005092:	2b00      	cmp	r3, #0
 8005094:	d04f      	beq.n	8005136 <protocol_exec_rt_system+0x2ce>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005096:	f002 fb3b 	bl	8007710 <system_clear_exec_accessory_overrides>

    // NOTE: Unlike motion overrides, spindle overrides do not require a planner reinitialization.
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 800509a:	7aa2      	ldrb	r2, [r4, #10]
    if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 800509c:	f016 0f01 	tst.w	r6, #1
 80050a0:	bf0c      	ite	eq
 80050a2:	4613      	moveq	r3, r2
 80050a4:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80050a6:	07b7      	lsls	r7, r6, #30
 80050a8:	bf44      	itt	mi
 80050aa:	330a      	addmi	r3, #10
 80050ac:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80050ae:	0775      	lsls	r5, r6, #29
 80050b0:	bf44      	itt	mi
 80050b2:	3b0a      	submi	r3, #10
 80050b4:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80050b6:	0730      	lsls	r0, r6, #28
 80050b8:	bf44      	itt	mi
 80050ba:	3301      	addmi	r3, #1
 80050bc:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80050be:	06f1      	lsls	r1, r6, #27
 80050c0:	bf44      	itt	mi
 80050c2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80050c6:	b2db      	uxtbmi	r3, r3
    last_s_override = min(last_s_override,MAX_SPINDLE_SPEED_OVERRIDE);
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 80050c8:	2bc8      	cmp	r3, #200	; 0xc8
 80050ca:	bf28      	it	cs
 80050cc:	23c8      	movcs	r3, #200	; 0xc8
 80050ce:	2b0a      	cmp	r3, #10
 80050d0:	bf38      	it	cc
 80050d2:	230a      	movcc	r3, #10

    if (last_s_override != sys.spindle_speed_ovr) {
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d006      	beq.n	80050e6 <protocol_exec_rt_system+0x27e>
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
      sys.spindle_speed_ovr = last_s_override;
 80050d8:	72a3      	strb	r3, [r4, #10]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80050da:	2300      	movs	r3, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80050dc:	7922      	ldrb	r2, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80050de:	7323      	strb	r3, [r4, #12]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80050e0:	f042 0208 	orr.w	r2, r2, #8
 80050e4:	7122      	strb	r2, [r4, #4]
    }

    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80050e6:	06b7      	lsls	r7, r6, #26
 80050e8:	d507      	bpl.n	80050fa <protocol_exec_rt_system+0x292>
      // Spindle stop override allowed only while in HOLD state.
      // NOTE: Report counters are set in spindle_set_state() when spindle stop is executed.
      if (sys.state == STATE_HOLD) {
 80050ea:	7823      	ldrb	r3, [r4, #0]
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d104      	bne.n	80050fa <protocol_exec_rt_system+0x292>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 80050f0:	7ae3      	ldrb	r3, [r4, #11]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d15f      	bne.n	80051b6 <protocol_exec_rt_system+0x34e>
 80050f6:	2302      	movs	r3, #2
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80050f8:	72e3      	strb	r3, [r4, #11]
      }
    }

    // NOTE: Since coolant state always performs a planner sync whenever it changes, the current
    // run state can be determined by checking the parser state.
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80050fa:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80050fe:	d01a      	beq.n	8005136 <protocol_exec_rt_system+0x2ce>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005100:	7823      	ldrb	r3, [r4, #0]
 8005102:	b113      	cbz	r3, 800510a <protocol_exec_rt_system+0x2a2>
 8005104:	f013 0f18 	tst.w	r3, #24
 8005108:	d015      	beq.n	8005136 <protocol_exec_rt_system+0x2ce>
        uint8_t coolant_state = gc_state.modal.coolant;
 800510a:	4f30      	ldr	r7, [pc, #192]	; (80051cc <protocol_exec_rt_system+0x364>)
        #ifdef ENABLE_M7
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 800510c:	0630      	lsls	r0, r6, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 800510e:	7a3d      	ldrb	r5, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005110:	d505      	bpl.n	800511e <protocol_exec_rt_system+0x2b6>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005112:	0629      	lsls	r1, r5, #24
 8005114:	bf4c      	ite	mi
 8005116:	f005 057f 	andmi.w	r5, r5, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 800511a:	f045 0580 	orrpl.w	r5, r5, #128	; 0x80
          }
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 800511e:	0672      	lsls	r2, r6, #25
 8005120:	d505      	bpl.n	800512e <protocol_exec_rt_system+0x2c6>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005122:	066b      	lsls	r3, r5, #25
 8005124:	bf4c      	ite	mi
 8005126:	f005 05bf 	andmi.w	r5, r5, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 800512a:	f045 0540 	orrpl.w	r5, r5, #64	; 0x40
          }
        #else
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
          else { coolant_state |= COOLANT_FLOOD_ENABLE; }
        #endif
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 800512e:	4628      	mov	r0, r5
 8005130:	f7fd fb6a 	bl	8002808 <coolant_set_state>
        gc_state.modal.coolant = coolant_state;
 8005134:	723d      	strb	r5, [r7, #8]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005136:	7823      	ldrb	r3, [r4, #0]
 8005138:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 800513c:	d040      	beq.n	80051c0 <protocol_exec_rt_system+0x358>
    st_prep_buffer();
  }

}
 800513e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 8005142:	f001 bcbd 	b.w	8006ac0 <st_prep_buffer>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005146:	075a      	lsls	r2, r3, #29
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005148:	bf44      	itt	mi
 800514a:	f043 0308 	orrmi.w	r3, r3, #8
 800514e:	70a3      	strbmi	r3, [r4, #2]
 8005150:	e726      	b.n	8004fa0 <protocol_exec_rt_system+0x138>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005152:	2300      	movs	r3, #0
 8005154:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005156:	f7ff faf5 	bl	8004744 <plan_get_current_block>
 800515a:	b158      	cbz	r0, 8005174 <protocol_exec_rt_system+0x30c>
 800515c:	78a3      	ldrb	r3, [r4, #2]
 800515e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005162:	d107      	bne.n	8005174 <protocol_exec_rt_system+0x30c>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005164:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005166:	2308      	movs	r3, #8
 8005168:	7023      	strb	r3, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 800516a:	f001 fca9 	bl	8006ac0 <st_prep_buffer>
              st_wake_up();
 800516e:	f001 fa0f 	bl	8006590 <st_wake_up>
 8005172:	e728      	b.n	8004fc6 <protocol_exec_rt_system+0x15e>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005174:	2300      	movs	r3, #0
 8005176:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005178:	7023      	strb	r3, [r4, #0]
 800517a:	e724      	b.n	8004fc6 <protocol_exec_rt_system+0x15e>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 800517c:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005180:	2b00      	cmp	r3, #0
 8005182:	da09      	bge.n	8005198 <protocol_exec_rt_system+0x330>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005184:	2300      	movs	r3, #0
 8005186:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005188:	f7ff faac 	bl	80046e4 <plan_reset>
          st_reset();
 800518c:	f001 fc14 	bl	80069b8 <st_reset>
          gc_sync_position();
 8005190:	f7fd fc22 	bl	80029d8 <gc_sync_position>
          plan_sync_position();
 8005194:	f7ff fd20 	bl	8004bd8 <plan_sync_position>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005198:	78a3      	ldrb	r3, [r4, #2]
 800519a:	f013 0220 	ands.w	r2, r3, #32
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 800519e:	bf1f      	itttt	ne
 80051a0:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80051a4:	f043 0301 	orrne.w	r3, r3, #1
 80051a8:	70a3      	strbne	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 80051aa:	2340      	movne	r3, #64	; 0x40
          sys.suspend = SUSPEND_DISABLE;
 80051ac:	bf0a      	itet	eq
 80051ae:	70a2      	strbeq	r2, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 80051b0:	7023      	strbne	r3, [r4, #0]
          sys.state = STATE_IDLE;
 80051b2:	7022      	strbeq	r2, [r4, #0]
 80051b4:	e727      	b.n	8005006 <protocol_exec_rt_system+0x19e>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80051b6:	07dd      	lsls	r5, r3, #31
 80051b8:	d59f      	bpl.n	80050fa <protocol_exec_rt_system+0x292>
 80051ba:	f043 0304 	orr.w	r3, r3, #4
 80051be:	e79b      	b.n	80050f8 <protocol_exec_rt_system+0x290>
 80051c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c2:	bf00      	nop
 80051c4:	200038d0 	.word	0x200038d0
 80051c8:	200038e8 	.word	0x200038e8
 80051cc:	20003d20 	.word	0x20003d20

080051d0 <protocol_execute_realtime>:
{
 80051d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80051d4:	4c66      	ldr	r4, [pc, #408]	; (8005370 <protocol_execute_realtime+0x1a0>)
  protocol_exec_rt_system();
 80051d6:	f7ff fe47 	bl	8004e68 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80051da:	78a3      	ldrb	r3, [r4, #2]
 80051dc:	b1ab      	cbz	r3, 800520a <protocol_execute_realtime+0x3a>
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 80051de:	f7ff fab1 	bl	8004744 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 80051e2:	b9a0      	cbnz	r0, 800520e <protocol_execute_realtime+0x3e>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80051e4:	4b63      	ldr	r3, [pc, #396]	; (8005374 <protocol_execute_realtime+0x1a4>)
 80051e6:	7a5d      	ldrb	r5, [r3, #9]
 80051e8:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 80051ea:	691f      	ldr	r7, [r3, #16]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80051ec:	4315      	orrs	r5, r2
    } else {
      restore_condition = block->condition;
      restore_spindle_speed = block->spindle_speed;
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) { 
 80051ee:	4e62      	ldr	r6, [pc, #392]	; (8005378 <protocol_execute_realtime+0x1a8>)
 80051f0:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
 80051f4:	079b      	lsls	r3, r3, #30
 80051f6:	d502      	bpl.n	80051fe <protocol_execute_realtime+0x2e>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 80051f8:	2020      	movs	r0, #32
 80051fa:	f002 fa77 	bl	80076ec <system_set_exec_accessory_override_flag>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 80051fe:	f04f 0800 	mov.w	r8, #0
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005202:	f04f 4a81 	mov.w	sl, #1082130432	; 0x40800000
  while (sys.suspend) {
 8005206:	78a3      	ldrb	r3, [r4, #2]
 8005208:	b923      	cbnz	r3, 8005214 <protocol_execute_realtime+0x44>
 800520a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      restore_condition = block->condition;
 800520e:	7f45      	ldrb	r5, [r0, #29]
      restore_spindle_speed = block->spindle_speed;
 8005210:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8005212:	e7ec      	b.n	80051ee <protocol_execute_realtime+0x1e>
    if (sys.abort) { return; }
 8005214:	f894 9001 	ldrb.w	r9, [r4, #1]
 8005218:	f1b9 0f00 	cmp.w	r9, #0
 800521c:	d1f5      	bne.n	800520a <protocol_execute_realtime+0x3a>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 800521e:	07d8      	lsls	r0, r3, #31
 8005220:	d515      	bpl.n	800524e <protocol_execute_realtime+0x7e>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 8005222:	7821      	ldrb	r1, [r4, #0]
 8005224:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 8005228:	d067      	beq.n	80052fa <protocol_execute_realtime+0x12a>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 800522a:	f013 0b04 	ands.w	fp, r3, #4
 800522e:	d111      	bne.n	8005254 <protocol_execute_realtime+0x84>
            spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 8005230:	4641      	mov	r1, r8
 8005232:	4658      	mov	r0, fp
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 8005234:	f884 b00b 	strb.w	fp, [r4, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 8005238:	f001 f96c 	bl	8006514 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 800523c:	4658      	mov	r0, fp
 800523e:	f7fd fae3 	bl	8002808 <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 8005242:	78a3      	ldrb	r3, [r4, #2]
 8005244:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	70a3      	strb	r3, [r4, #2]
        }

      }
    }

    protocol_exec_rt_system();
 800524e:	f7ff fe0b 	bl	8004e68 <protocol_exec_rt_system>
 8005252:	e7d8      	b.n	8005206 <protocol_execute_realtime+0x36>
          if (sys.state == STATE_SLEEP) {
 8005254:	2980      	cmp	r1, #128	; 0x80
 8005256:	d112      	bne.n	800527e <protocol_execute_realtime+0xae>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 8005258:	200b      	movs	r0, #11
 800525a:	f000 f99f 	bl	800559c <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 800525e:	2100      	movs	r1, #0
 8005260:	4648      	mov	r0, r9
 8005262:	f001 f957 	bl	8006514 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 8005266:	4648      	mov	r0, r9
 8005268:	f7fd face 	bl	8002808 <coolant_set_state>
            st_go_idle(); // Disable steppers
 800526c:	f001 f9d4 	bl	8006618 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 8005270:	7863      	ldrb	r3, [r4, #1]
 8005272:	b10b      	cbz	r3, 8005278 <protocol_execute_realtime+0xa8>
 8005274:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005278:	f7ff fdf6 	bl	8004e68 <protocol_exec_rt_system>
 800527c:	e7f8      	b.n	8005270 <protocol_execute_realtime+0xa0>
          if (sys.state == STATE_SAFETY_DOOR) {
 800527e:	2940      	cmp	r1, #64	; 0x40
 8005280:	d106      	bne.n	8005290 <protocol_execute_realtime+0xc0>
            if (!(system_check_safety_door_ajar())) {
 8005282:	f002 f819 	bl	80072b8 <system_check_safety_door_ajar>
 8005286:	b918      	cbnz	r0, 8005290 <protocol_execute_realtime+0xc0>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005288:	78a3      	ldrb	r3, [r4, #2]
 800528a:	f023 0320 	bic.w	r3, r3, #32
 800528e:	70a3      	strb	r3, [r4, #2]
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8005290:	78a3      	ldrb	r3, [r4, #2]
 8005292:	0719      	lsls	r1, r3, #28
 8005294:	d5db      	bpl.n	800524e <protocol_execute_realtime+0x7e>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005296:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8005374 <protocol_execute_realtime+0x1a4>
 800529a:	f89b 2009 	ldrb.w	r2, [fp, #9]
 800529e:	b14a      	cbz	r2, 80052b4 <protocol_execute_realtime+0xe4>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 80052a0:	079a      	lsls	r2, r3, #30
 80052a2:	d407      	bmi.n	80052b4 <protocol_execute_realtime+0xe4>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80052a4:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
 80052a8:	079b      	lsls	r3, r3, #30
 80052aa:	d51c      	bpl.n	80052e6 <protocol_execute_realtime+0x116>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80052ac:	7923      	ldrb	r3, [r4, #4]
 80052ae:	f043 0308 	orr.w	r3, r3, #8
 80052b2:	7123      	strb	r3, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 80052b4:	f89b 3008 	ldrb.w	r3, [fp, #8]
 80052b8:	b15b      	cbz	r3, 80052d2 <protocol_execute_realtime+0x102>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 80052ba:	78a3      	ldrb	r3, [r4, #2]
 80052bc:	0798      	lsls	r0, r3, #30
 80052be:	d408      	bmi.n	80052d2 <protocol_execute_realtime+0x102>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 80052c0:	f005 0040 	and.w	r0, r5, #64	; 0x40
 80052c4:	f7fd faa0 	bl	8002808 <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 80052c8:	2101      	movs	r1, #1
 80052ca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80052ce:	f7ff f89d 	bl	800440c <delay_sec>
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 80052d2:	78a3      	ldrb	r3, [r4, #2]
 80052d4:	0799      	lsls	r1, r3, #30
 80052d6:	d4ba      	bmi.n	800524e <protocol_execute_realtime+0x7e>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 80052d8:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 80052dc:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 80052de:	70a3      	strb	r3, [r4, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 80052e0:	f002 f84e 	bl	8007380 <system_set_exec_state_flag>
 80052e4:	e7b3      	b.n	800524e <protocol_execute_realtime+0x7e>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80052e6:	4639      	mov	r1, r7
 80052e8:	f005 0030 	and.w	r0, r5, #48	; 0x30
 80052ec:	f001 f912 	bl	8006514 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 80052f0:	2101      	movs	r1, #1
 80052f2:	4650      	mov	r0, sl
 80052f4:	f7ff f88a 	bl	800440c <delay_sec>
 80052f8:	e7dc      	b.n	80052b4 <protocol_execute_realtime+0xe4>
        if (sys.spindle_stop_ovr) {
 80052fa:	7ae3      	ldrb	r3, [r4, #11]
 80052fc:	b34b      	cbz	r3, 8005352 <protocol_execute_realtime+0x182>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 80052fe:	079a      	lsls	r2, r3, #30
 8005300:	d508      	bpl.n	8005314 <protocol_execute_realtime+0x144>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <protocol_execute_realtime+0x1a4>)
 8005304:	7a5b      	ldrb	r3, [r3, #9]
 8005306:	b1e3      	cbz	r3, 8005342 <protocol_execute_realtime+0x172>
              spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 8005308:	4641      	mov	r1, r8
 800530a:	f001 f903 	bl	8006514 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 800530e:	2301      	movs	r3, #1
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 8005310:	72e3      	strb	r3, [r4, #11]
 8005312:	e79c      	b.n	800524e <protocol_execute_realtime+0x7e>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 8005314:	f013 0f0c 	tst.w	r3, #12
 8005318:	d099      	beq.n	800524e <protocol_execute_realtime+0x7e>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800531a:	4b16      	ldr	r3, [pc, #88]	; (8005374 <protocol_execute_realtime+0x1a4>)
 800531c:	7a5b      	ldrb	r3, [r3, #9]
 800531e:	b153      	cbz	r3, 8005336 <protocol_execute_realtime+0x166>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 8005320:	200a      	movs	r0, #10
 8005322:	f000 f93b 	bl	800559c <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8005326:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
 800532a:	0799      	lsls	r1, r3, #30
 800532c:	d50b      	bpl.n	8005346 <protocol_execute_realtime+0x176>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800532e:	7923      	ldrb	r3, [r4, #4]
 8005330:	f043 0308 	orr.w	r3, r3, #8
 8005334:	7123      	strb	r3, [r4, #4]
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005336:	7ae3      	ldrb	r3, [r4, #11]
 8005338:	071a      	lsls	r2, r3, #28
 800533a:	d502      	bpl.n	8005342 <protocol_execute_realtime+0x172>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 800533c:	2002      	movs	r0, #2
 800533e:	f002 f81f 	bl	8007380 <system_set_exec_state_flag>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 8005342:	2300      	movs	r3, #0
 8005344:	e7e4      	b.n	8005310 <protocol_execute_realtime+0x140>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005346:	4639      	mov	r1, r7
 8005348:	f005 0030 	and.w	r0, r5, #48	; 0x30
 800534c:	f001 f8e2 	bl	8006514 <spindle_set_state>
 8005350:	e7f1      	b.n	8005336 <protocol_execute_realtime+0x166>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8005352:	7923      	ldrb	r3, [r4, #4]
 8005354:	071b      	lsls	r3, r3, #28
 8005356:	f57f af7a 	bpl.w	800524e <protocol_execute_realtime+0x7e>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800535a:	4639      	mov	r1, r7
 800535c:	f005 0030 	and.w	r0, r5, #48	; 0x30
 8005360:	f001 f8d8 	bl	8006514 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005364:	7923      	ldrb	r3, [r4, #4]
 8005366:	f023 0308 	bic.w	r3, r3, #8
 800536a:	7123      	strb	r3, [r4, #4]
 800536c:	e76f      	b.n	800524e <protocol_execute_realtime+0x7e>
 800536e:	bf00      	nop
 8005370:	200038d4 	.word	0x200038d4
 8005374:	20003d20 	.word	0x20003d20
 8005378:	20003f70 	.word	0x20003f70

0800537c <protocol_main_loop>:
{
 800537c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 8005380:	4b43      	ldr	r3, [pc, #268]	; (8005490 <protocol_main_loop+0x114>)
 8005382:	4e44      	ldr	r6, [pc, #272]	; (8005494 <protocol_main_loop+0x118>)
 8005384:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8005388:	f013 0f08 	tst.w	r3, #8
 800538c:	d007      	beq.n	800539e <protocol_main_loop+0x22>
      if (limits_get_state()) {
 800538e:	f7fe fb77 	bl	8003a80 <limits_get_state>
 8005392:	b120      	cbz	r0, 800539e <protocol_main_loop+0x22>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8005394:	2301      	movs	r3, #1
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8005396:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8005398:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 800539a:	f000 f8ff 	bl	800559c <report_feedback_message>
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 800539e:	7833      	ldrb	r3, [r6, #0]
 80053a0:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 80053a4:	d014      	beq.n	80053d0 <protocol_main_loop+0x54>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 80053a6:	2002      	movs	r0, #2
 80053a8:	f000 f8f8 	bl	800559c <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 80053ac:	2301      	movs	r3, #1
 80053ae:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 80053b0:	2400      	movs	r4, #0
 80053b2:	4625      	mov	r5, r4
        line[char_counter] = 0; // Set string termination character.
 80053b4:	4f38      	ldr	r7, [pc, #224]	; (8005498 <protocol_main_loop+0x11c>)
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80053b6:	f000 fcf5 	bl	8005da4 <serial_read>
 80053ba:	28ff      	cmp	r0, #255	; 0xff
 80053bc:	d117      	bne.n	80053ee <protocol_main_loop+0x72>
    protocol_auto_cycle_start();
 80053be:	f7ff fd49 	bl	8004e54 <protocol_auto_cycle_start>
    protocol_execute_realtime();  // Runtime command check point.
 80053c2:	f7ff ff05 	bl	80051d0 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 80053c6:	7873      	ldrb	r3, [r6, #1]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f4      	beq.n	80053b6 <protocol_main_loop+0x3a>
 80053cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sys.state = STATE_IDLE;
 80053d0:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 80053d2:	f001 ff71 	bl	80072b8 <system_check_safety_door_ajar>
 80053d6:	b130      	cbz	r0, 80053e6 <protocol_main_loop+0x6a>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 80053d8:	4a30      	ldr	r2, [pc, #192]	; (800549c <protocol_main_loop+0x120>)
 80053da:	7813      	ldrb	r3, [r2, #0]
 80053dc:	f043 0320 	orr.w	r3, r3, #32
 80053e0:	7013      	strb	r3, [r2, #0]
      protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 80053e2:	f7ff fef5 	bl	80051d0 <protocol_execute_realtime>
    system_execute_startup(line); // Execute startup script.
 80053e6:	482c      	ldr	r0, [pc, #176]	; (8005498 <protocol_main_loop+0x11c>)
 80053e8:	f001 ff6c 	bl	80072c4 <system_execute_startup>
 80053ec:	e7e0      	b.n	80053b0 <protocol_main_loop+0x34>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 80053ee:	280a      	cmp	r0, #10
 80053f0:	d001      	beq.n	80053f6 <protocol_main_loop+0x7a>
 80053f2:	280d      	cmp	r0, #13
 80053f4:	d12a      	bne.n	800544c <protocol_main_loop+0xd0>
        protocol_execute_realtime(); // Runtime command check point.
 80053f6:	f7ff feeb 	bl	80051d0 <protocol_execute_realtime>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 80053fa:	f896 8001 	ldrb.w	r8, [r6, #1]
 80053fe:	f1b8 0f00 	cmp.w	r8, #0
 8005402:	d1e3      	bne.n	80053cc <protocol_main_loop+0x50>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 8005404:	f015 0501 	ands.w	r5, r5, #1
        line[char_counter] = 0; // Set string termination character.
 8005408:	f807 8004 	strb.w	r8, [r7, r4]
        if (line_flags & LINE_FLAG_OVERFLOW) {
 800540c:	d005      	beq.n	800541a <protocol_main_loop+0x9e>
          report_status_message(STATUS_OVERFLOW);
 800540e:	200b      	movs	r0, #11
 8005410:	f000 f89c 	bl	800554c <report_status_message>
        char_counter = 0;
 8005414:	4644      	mov	r4, r8
        line_flags = 0;
 8005416:	4625      	mov	r5, r4
 8005418:	e7cd      	b.n	80053b6 <protocol_main_loop+0x3a>
        } else if (line[0] == 0) {
 800541a:	783c      	ldrb	r4, [r7, #0]
 800541c:	b91c      	cbnz	r4, 8005426 <protocol_main_loop+0xaa>
          report_status_message(STATUS_OK);
 800541e:	4620      	mov	r0, r4
 8005420:	f000 f894 	bl	800554c <report_status_message>
 8005424:	e7f7      	b.n	8005416 <protocol_main_loop+0x9a>
        } else if (line[0] == '$') {
 8005426:	2c24      	cmp	r4, #36	; 0x24
 8005428:	d106      	bne.n	8005438 <protocol_main_loop+0xbc>
          report_status_message(system_execute_line(line));
 800542a:	4638      	mov	r0, r7
 800542c:	f001 ffb2 	bl	8007394 <system_execute_line>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8005430:	f000 f88c 	bl	800554c <report_status_message>
        char_counter = 0;
 8005434:	462c      	mov	r4, r5
 8005436:	e7ee      	b.n	8005416 <protocol_main_loop+0x9a>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 8005438:	7833      	ldrb	r3, [r6, #0]
 800543a:	f013 0421 	ands.w	r4, r3, #33	; 0x21
 800543e:	d001      	beq.n	8005444 <protocol_main_loop+0xc8>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8005440:	2009      	movs	r0, #9
 8005442:	e7f5      	b.n	8005430 <protocol_main_loop+0xb4>
          report_status_message(gc_execute_line(line));
 8005444:	4638      	mov	r0, r7
 8005446:	f7fd facf 	bl	80029e8 <gc_execute_line>
 800544a:	e7e9      	b.n	8005420 <protocol_main_loop+0xa4>
        if (line_flags) {
 800544c:	b135      	cbz	r5, 800545c <protocol_main_loop+0xe0>
          if (c == ')') {
 800544e:	2829      	cmp	r0, #41	; 0x29
 8005450:	d1b1      	bne.n	80053b6 <protocol_main_loop+0x3a>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8005452:	07ab      	lsls	r3, r5, #30
 8005454:	d5af      	bpl.n	80053b6 <protocol_main_loop+0x3a>
 8005456:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800545a:	e7ac      	b.n	80053b6 <protocol_main_loop+0x3a>
          if (c <= ' ') {
 800545c:	2820      	cmp	r0, #32
 800545e:	d9aa      	bls.n	80053b6 <protocol_main_loop+0x3a>
          } else if (c == '/') {
 8005460:	282f      	cmp	r0, #47	; 0x2f
 8005462:	d0a8      	beq.n	80053b6 <protocol_main_loop+0x3a>
          } else if (c == '(') {
 8005464:	2828      	cmp	r0, #40	; 0x28
 8005466:	d00d      	beq.n	8005484 <protocol_main_loop+0x108>
          } else if (c == ';') {
 8005468:	283b      	cmp	r0, #59	; 0x3b
 800546a:	d00d      	beq.n	8005488 <protocol_main_loop+0x10c>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 800546c:	2c4e      	cmp	r4, #78	; 0x4e
 800546e:	d80d      	bhi.n	800548c <protocol_main_loop+0x110>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 8005470:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 8005478:	bf98      	it	ls
 800547a:	3820      	subls	r0, #32
 800547c:	1c63      	adds	r3, r4, #1
            line[char_counter++] = c;
 800547e:	5538      	strb	r0, [r7, r4]
 8005480:	b2dc      	uxtb	r4, r3
 8005482:	e798      	b.n	80053b6 <protocol_main_loop+0x3a>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 8005484:	2502      	movs	r5, #2
 8005486:	e796      	b.n	80053b6 <protocol_main_loop+0x3a>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 8005488:	2504      	movs	r5, #4
 800548a:	e794      	b.n	80053b6 <protocol_main_loop+0x3a>
            line_flags |= LINE_FLAG_OVERFLOW;
 800548c:	2501      	movs	r5, #1
 800548e:	e792      	b.n	80053b6 <protocol_main_loop+0x3a>
 8005490:	20003f70 	.word	0x20003f70
 8005494:	200038d4 	.word	0x200038d4
 8005498:	200032d0 	.word	0x200032d0
 800549c:	200038e9 	.word	0x200038e9

080054a0 <protocol_buffer_synchronize>:
{
 80054a0:	b510      	push	{r4, lr}
  protocol_auto_cycle_start();
 80054a2:	f7ff fcd7 	bl	8004e54 <protocol_auto_cycle_start>
    if (sys.abort) { return; } // Check for system abort
 80054a6:	4c06      	ldr	r4, [pc, #24]	; (80054c0 <protocol_buffer_synchronize+0x20>)
    protocol_execute_realtime();   // Check and execute run-time commands
 80054a8:	f7ff fe92 	bl	80051d0 <protocol_execute_realtime>
    if (sys.abort) { return; } // Check for system abort
 80054ac:	7863      	ldrb	r3, [r4, #1]
 80054ae:	b933      	cbnz	r3, 80054be <protocol_buffer_synchronize+0x1e>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 80054b0:	f7ff f948 	bl	8004744 <plan_get_current_block>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d1f7      	bne.n	80054a8 <protocol_buffer_synchronize+0x8>
 80054b8:	7823      	ldrb	r3, [r4, #0]
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d0f4      	beq.n	80054a8 <protocol_buffer_synchronize+0x8>
 80054be:	bd10      	pop	{r4, pc}
 80054c0:	200038d4 	.word	0x200038d4

080054c4 <report_util_line_feed>:

#include "grbl.h"

// Internal report utilities to reduce flash with repetitive tasks turned into functions.
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80054c4:	4801      	ldr	r0, [pc, #4]	; (80054cc <report_util_line_feed+0x8>)
 80054c6:	f7ff bbb9 	b.w	8004c3c <printString>
 80054ca:	bf00      	nop
 80054cc:	08009969 	.word	0x08009969

080054d0 <report_util_feedback_line_feed>:
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80054d0:	b508      	push	{r3, lr}
 80054d2:	205d      	movs	r0, #93	; 0x5d
 80054d4:	f000 fc63 	bl	8005d9e <serial_write>
 80054d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80054dc:	f7ff bff2 	b.w	80054c4 <report_util_line_feed>

080054e0 <report_util_axis_values>:
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
// static void report_util_comment_line_feed() { serial_write(')'); report_util_line_feed(); }
static void report_util_axis_values(float *axis_value) {
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4605      	mov	r5, r0
 80054e4:	2400      	movs	r4, #0
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
    printFloat_CoordValue(axis_value[idx]);
 80054e6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80054ea:	f7ff fc3d 	bl	8004d68 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80054ee:	2c05      	cmp	r4, #5
 80054f0:	d002      	beq.n	80054f8 <report_util_axis_values+0x18>
 80054f2:	202c      	movs	r0, #44	; 0x2c
 80054f4:	f000 fc53 	bl	8005d9e <serial_write>
 80054f8:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 80054fa:	2c06      	cmp	r4, #6
 80054fc:	d1f3      	bne.n	80054e6 <report_util_axis_values+0x6>
  }
}
 80054fe:	bd38      	pop	{r3, r4, r5, pc}

08005500 <report_util_setting_prefix>:
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005500:	b510      	push	{r4, lr}
 8005502:	4604      	mov	r4, r0
 8005504:	2024      	movs	r0, #36	; 0x24
 8005506:	f000 fc4a 	bl	8005d9e <serial_write>
 800550a:	4620      	mov	r0, r4
 800550c:	f7ff fb9f 	bl	8004c4e <print_uint8_base10>
 8005510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005514:	203d      	movs	r0, #61	; 0x3d
 8005516:	f000 bc42 	b.w	8005d9e <serial_write>

0800551a <report_util_uint8_setting>:
  }
  report_util_comment_line_feed();
}
*/

static void report_util_uint8_setting(uint8_t n, int val) { 
 800551a:	b510      	push	{r4, lr}
 800551c:	460c      	mov	r4, r1
  report_util_setting_prefix(n); 
 800551e:	f7ff ffef 	bl	8005500 <report_util_setting_prefix>
  print_uint8_base10(val); 
 8005522:	b2e0      	uxtb	r0, r4
 8005524:	f7ff fb93 	bl	8004c4e <print_uint8_base10>
  report_util_line_feed(); // report_util_setting_string(n); 
}
 8005528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_line_feed(); // report_util_setting_string(n); 
 800552c:	f7ff bfca 	b.w	80054c4 <report_util_line_feed>

08005530 <report_util_float_setting>:
static void report_util_float_setting(uint8_t n, float val, uint8_t n_decimal) { 
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	460c      	mov	r4, r1
 8005534:	4615      	mov	r5, r2
  report_util_setting_prefix(n); 
 8005536:	f7ff ffe3 	bl	8005500 <report_util_setting_prefix>
  printFloat(val,n_decimal);
 800553a:	4629      	mov	r1, r5
 800553c:	4620      	mov	r0, r4
 800553e:	f7ff fbaf 	bl	8004ca0 <printFloat>
  report_util_line_feed(); // report_util_setting_string(n);
}
 8005542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  report_util_line_feed(); // report_util_setting_string(n);
 8005546:	f7ff bfbd 	b.w	80054c4 <report_util_line_feed>
	...

0800554c <report_status_message>:
// 'error:'  to indicate some error event with the line or some critical system error during
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
 800554c:	b510      	push	{r4, lr}
  switch(status_code) {
 800554e:	4604      	mov	r4, r0
 8005550:	b920      	cbnz	r0, 800555c <report_status_message+0x10>
    default:
      printPgmString(PSTR("error:"));
      print_uint8_base10(status_code);
      report_util_line_feed();
  }
}
 8005552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      printPgmString(PSTR("ok\r\n")); break;
 8005556:	4806      	ldr	r0, [pc, #24]	; (8005570 <report_status_message+0x24>)
 8005558:	f7ff bb70 	b.w	8004c3c <printString>
      printPgmString(PSTR("error:"));
 800555c:	4805      	ldr	r0, [pc, #20]	; (8005574 <report_status_message+0x28>)
 800555e:	f7ff fb6d 	bl	8004c3c <printString>
      print_uint8_base10(status_code);
 8005562:	4620      	mov	r0, r4
 8005564:	f7ff fb73 	bl	8004c4e <print_uint8_base10>
}
 8005568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      report_util_line_feed();
 800556c:	f7ff bfaa 	b.w	80054c4 <report_util_line_feed>
 8005570:	080099e6 	.word	0x080099e6
 8005574:	080099eb 	.word	0x080099eb

08005578 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8005578:	b510      	push	{r4, lr}
 800557a:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 800557c:	4806      	ldr	r0, [pc, #24]	; (8005598 <report_alarm_message+0x20>)
 800557e:	f7ff fb5d 	bl	8004c3c <printString>
  print_uint8_base10(alarm_code);
 8005582:	4620      	mov	r0, r4
 8005584:	f7ff fb63 	bl	8004c4e <print_uint8_base10>
  report_util_line_feed();
 8005588:	f7ff ff9c 	bl	80054c4 <report_util_line_feed>
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 800558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 8005590:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005594:	f7fe bf5e 	b.w	8004454 <delay_ms>
 8005598:	08009824 	.word	0x08009824

0800559c <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 800559c:	b510      	push	{r4, lr}
 800559e:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 80055a0:	4814      	ldr	r0, [pc, #80]	; (80055f4 <report_feedback_message+0x58>)
 80055a2:	f7ff fb4b 	bl	8004c3c <printString>
  switch(message_code) {
 80055a6:	1e60      	subs	r0, r4, #1
 80055a8:	280a      	cmp	r0, #10
 80055aa:	d80a      	bhi.n	80055c2 <report_feedback_message+0x26>
 80055ac:	e8df f000 	tbb	[pc, r0]
 80055b0:	110f0d06 	.word	0x110f0d06
 80055b4:	19171513 	.word	0x19171513
 80055b8:	1d1b      	.short	0x1d1b
 80055ba:	1f          	.byte	0x1f
 80055bb:	00          	.byte	0x00
    case MESSAGE_CRITICAL_EVENT:
      printPgmString(PSTR("Reset to continue")); break;
 80055bc:	480e      	ldr	r0, [pc, #56]	; (80055f8 <report_feedback_message+0x5c>)
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 80055be:	f7ff fb3d 	bl	8004c3c <printString>
  }
  report_util_feedback_line_feed();
}
 80055c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_feedback_line_feed();
 80055c6:	f7ff bf83 	b.w	80054d0 <report_util_feedback_line_feed>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 80055ca:	480c      	ldr	r0, [pc, #48]	; (80055fc <report_feedback_message+0x60>)
 80055cc:	e7f7      	b.n	80055be <report_feedback_message+0x22>
      printPgmString(PSTR("Caution: Unlocked")); break;
 80055ce:	480c      	ldr	r0, [pc, #48]	; (8005600 <report_feedback_message+0x64>)
 80055d0:	e7f5      	b.n	80055be <report_feedback_message+0x22>
      printPgmString(PSTR("Enabled")); break;
 80055d2:	480c      	ldr	r0, [pc, #48]	; (8005604 <report_feedback_message+0x68>)
 80055d4:	e7f3      	b.n	80055be <report_feedback_message+0x22>
      printPgmString(PSTR("Disabled")); break;
 80055d6:	480c      	ldr	r0, [pc, #48]	; (8005608 <report_feedback_message+0x6c>)
 80055d8:	e7f1      	b.n	80055be <report_feedback_message+0x22>
      printPgmString(PSTR("Check Door")); break;
 80055da:	480c      	ldr	r0, [pc, #48]	; (800560c <report_feedback_message+0x70>)
 80055dc:	e7ef      	b.n	80055be <report_feedback_message+0x22>
      printPgmString(PSTR("Check Limits")); break;
 80055de:	480c      	ldr	r0, [pc, #48]	; (8005610 <report_feedback_message+0x74>)
 80055e0:	e7ed      	b.n	80055be <report_feedback_message+0x22>
      printPgmString(PSTR("Pgm End")); break;
 80055e2:	480c      	ldr	r0, [pc, #48]	; (8005614 <report_feedback_message+0x78>)
 80055e4:	e7eb      	b.n	80055be <report_feedback_message+0x22>
      printPgmString(PSTR("Restoring defaults")); break;
 80055e6:	480c      	ldr	r0, [pc, #48]	; (8005618 <report_feedback_message+0x7c>)
 80055e8:	e7e9      	b.n	80055be <report_feedback_message+0x22>
      printPgmString(PSTR("Restoring spindle")); break;
 80055ea:	480c      	ldr	r0, [pc, #48]	; (800561c <report_feedback_message+0x80>)
 80055ec:	e7e7      	b.n	80055be <report_feedback_message+0x22>
      printPgmString(PSTR("Sleeping")); break;
 80055ee:	480c      	ldr	r0, [pc, #48]	; (8005620 <report_feedback_message+0x84>)
 80055f0:	e7e5      	b.n	80055be <report_feedback_message+0x22>
 80055f2:	bf00      	nop
 80055f4:	0800984a 	.word	0x0800984a
 80055f8:	08009850 	.word	0x08009850
 80055fc:	08009862 	.word	0x08009862
 8005600:	08009876 	.word	0x08009876
 8005604:	08009888 	.word	0x08009888
 8005608:	08009890 	.word	0x08009890
 800560c:	08009899 	.word	0x08009899
 8005610:	080098a4 	.word	0x080098a4
 8005614:	080098b1 	.word	0x080098b1
 8005618:	080098b9 	.word	0x080098b9
 800561c:	080098cc 	.word	0x080098cc
 8005620:	080098de 	.word	0x080098de

08005624 <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 8005624:	4801      	ldr	r0, [pc, #4]	; (800562c <report_init_message+0x8>)
 8005626:	f7ff bb09 	b.w	8004c3c <printString>
 800562a:	bf00      	nop
 800562c:	0800994a 	.word	0x0800994a

08005630 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 8005630:	4801      	ldr	r0, [pc, #4]	; (8005638 <report_grbl_help+0x8>)
 8005632:	f7ff bb03 	b.w	8004c3c <printString>
 8005636:	bf00      	nop
 8005638:	08009900 	.word	0x08009900

0800563c <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 800563c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // Print Grbl settings.
//  report_util_uint8_setting(0,settings.pulse_microseconds);
	report_util_float_setting(0,settings.fpulse_microseconds,N_DECIMAL_SETTINGVALUE);
 8005640:	4c5c      	ldr	r4, [pc, #368]	; (80057b4 <report_grbl_settings+0x178>)
 8005642:	2203      	movs	r2, #3
 8005644:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005646:	2000      	movs	r0, #0
 8005648:	f7ff ff72 	bl	8005530 <report_util_float_setting>
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 800564c:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
 8005650:	2001      	movs	r0, #1
 8005652:	f7ff ff62 	bl	800551a <report_util_uint8_setting>
  report_util_uint8_setting(2,settings.step_invert_mask);
 8005656:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 800565a:	2002      	movs	r0, #2
 800565c:	f7ff ff5d 	bl	800551a <report_util_uint8_setting>
  report_util_uint8_setting(3,settings.dir_invert_mask);
 8005660:	f894 1065 	ldrb.w	r1, [r4, #101]	; 0x65
 8005664:	2003      	movs	r0, #3
 8005666:	f7ff ff58 	bl	800551a <report_util_uint8_setting>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 800566a:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800566e:	2004      	movs	r0, #4
 8005670:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8005674:	f7ff ff51 	bl	800551a <report_util_uint8_setting>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8005678:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800567c:	2005      	movs	r0, #5
 800567e:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8005682:	f7ff ff4a 	bl	800551a <report_util_uint8_setting>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8005686:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800568a:	2006      	movs	r0, #6
 800568c:	0fc9      	lsrs	r1, r1, #31
 800568e:	f7ff ff44 	bl	800551a <report_util_uint8_setting>
  report_util_uint8_setting(10,settings.status_report_mask);
 8005692:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
 8005696:	200a      	movs	r0, #10
 8005698:	f7ff ff3f 	bl	800551a <report_util_uint8_setting>
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 800569c:	2203      	movs	r2, #3
 800569e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80056a0:	200b      	movs	r0, #11
 80056a2:	f7ff ff45 	bl	8005530 <report_util_float_setting>
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 80056a6:	2203      	movs	r2, #3
 80056a8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80056aa:	200c      	movs	r0, #12
 80056ac:	f7ff ff40 	bl	8005530 <report_util_float_setting>
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 80056b0:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80056b4:	200d      	movs	r0, #13
 80056b6:	f001 0101 	and.w	r1, r1, #1
 80056ba:	f7ff ff2e 	bl	800551a <report_util_uint8_setting>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 80056be:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80056c2:	2014      	movs	r0, #20
 80056c4:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80056c8:	f7ff ff27 	bl	800551a <report_util_uint8_setting>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 80056cc:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80056d0:	2015      	movs	r0, #21
 80056d2:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80056d6:	f7ff ff20 	bl	800551a <report_util_uint8_setting>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 80056da:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80056de:	2016      	movs	r0, #22
 80056e0:	f3c1 1100 	ubfx	r1, r1, #4, #1
 80056e4:	f7ff ff19 	bl	800551a <report_util_uint8_setting>
  report_util_uint8_setting(23,settings.homing_dir_mask);
 80056e8:	f894 1079 	ldrb.w	r1, [r4, #121]	; 0x79
 80056ec:	2017      	movs	r0, #23
 80056ee:	f7ff ff14 	bl	800551a <report_util_uint8_setting>
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 80056f2:	2203      	movs	r2, #3
 80056f4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80056f6:	2018      	movs	r0, #24
 80056f8:	f7ff ff1a 	bl	8005530 <report_util_float_setting>
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 80056fc:	2203      	movs	r2, #3
 80056fe:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005702:	2019      	movs	r0, #25
 8005704:	f7ff ff14 	bl	8005530 <report_util_float_setting>
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 8005708:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 800570c:	201a      	movs	r0, #26
 800570e:	f7ff ff04 	bl	800551a <report_util_uint8_setting>
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8005712:	2203      	movs	r2, #3
 8005714:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005718:	201b      	movs	r0, #27
 800571a:	f7ff ff09 	bl	8005530 <report_util_float_setting>
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 800571e:	2200      	movs	r2, #0
 8005720:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005722:	201e      	movs	r0, #30
 8005724:	f7ff ff04 	bl	8005530 <report_util_float_setting>
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 8005728:	2200      	movs	r2, #0
 800572a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800572c:	201f      	movs	r0, #31
 800572e:	f7ff feff 	bl	8005530 <report_util_float_setting>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8005732:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8005736:	2020      	movs	r0, #32
 8005738:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800573c:	f7ff feed 	bl	800551a <report_util_uint8_setting>
  #else
    report_util_uint8_setting(32,0);
  #endif

	#ifdef ENABLE_ANALOG_OUTPUT
    report_util_float_setting(40,settings.analog_max,N_DECIMAL_SETTINGVALUE);
 8005740:	2203      	movs	r2, #3
 8005742:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005746:	2028      	movs	r0, #40	; 0x28
 8005748:	f7ff fef2 	bl	8005530 <report_util_float_setting>
 800574c:	f04f 0900 	mov.w	r9, #0
	#endif

  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 8005750:	2564      	movs	r5, #100	; 0x64
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.eeacceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8005752:	f8df a064 	ldr.w	sl, [pc, #100]	; 80057b8 <report_grbl_settings+0x17c>
void report_grbl_settings() {
 8005756:	462c      	mov	r4, r5
 8005758:	f105 0806 	add.w	r8, r5, #6
 800575c:	4e15      	ldr	r6, [pc, #84]	; (80057b4 <report_grbl_settings+0x178>)
 800575e:	fa5f f789 	uxtb.w	r7, r9
 8005762:	fa5f f888 	uxtb.w	r8, r8
      switch (set_idx) {
 8005766:	2f02      	cmp	r7, #2
 8005768:	d017      	beq.n	800579a <report_grbl_settings+0x15e>
 800576a:	2f03      	cmp	r7, #3
 800576c:	d01c      	beq.n	80057a8 <report_grbl_settings+0x16c>
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 800576e:	2203      	movs	r2, #3
      switch (set_idx) {
 8005770:	2f01      	cmp	r7, #1
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8005772:	bf14      	ite	ne
 8005774:	6831      	ldrne	r1, [r6, #0]
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8005776:	69b1      	ldreq	r1, [r6, #24]
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8005778:	4620      	mov	r0, r4
 800577a:	3401      	adds	r4, #1
 800577c:	b2e4      	uxtb	r4, r4
 800577e:	f7ff fed7 	bl	8005530 <report_util_float_setting>
    for (idx=0; idx<N_AXIS; idx++) {
 8005782:	4544      	cmp	r4, r8
 8005784:	f106 0604 	add.w	r6, r6, #4
 8005788:	d1ed      	bne.n	8005766 <report_grbl_settings+0x12a>
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
 800578a:	350a      	adds	r5, #10
 800578c:	b2ed      	uxtb	r5, r5
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 800578e:	2d8c      	cmp	r5, #140	; 0x8c
 8005790:	f109 0901 	add.w	r9, r9, #1
 8005794:	d1df      	bne.n	8005756 <report_grbl_settings+0x11a>
 8005796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        case 2: report_util_float_setting(val+idx,settings.eeacceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 800579a:	4651      	mov	r1, sl
 800579c:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800579e:	f7fb fba5 	bl	8000eec <__aeabi_fdiv>
 80057a2:	2203      	movs	r2, #3
 80057a4:	4601      	mov	r1, r0
 80057a6:	e7e7      	b.n	8005778 <report_grbl_settings+0x13c>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 80057a8:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80057aa:	463a      	mov	r2, r7
 80057ac:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80057b0:	e7e2      	b.n	8005778 <report_grbl_settings+0x13c>
 80057b2:	bf00      	nop
 80057b4:	20003f70 	.word	0x20003f70
 80057b8:	45610000 	.word	0x45610000

080057bc <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 80057bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 80057be:	480b      	ldr	r0, [pc, #44]	; (80057ec <report_probe_parameters+0x30>)
 80057c0:	f7ff fa3c 	bl	8004c3c <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 80057c4:	490a      	ldr	r1, [pc, #40]	; (80057f0 <report_probe_parameters+0x34>)
 80057c6:	4668      	mov	r0, sp
 80057c8:	f001 fdae 	bl	8007328 <system_convert_array_steps_to_mpos>
  report_util_axis_values(print_position);
 80057cc:	4668      	mov	r0, sp
 80057ce:	f7ff fe87 	bl	80054e0 <report_util_axis_values>
  serial_write(':');
 80057d2:	203a      	movs	r0, #58	; 0x3a
 80057d4:	f000 fae3 	bl	8005d9e <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <report_probe_parameters+0x38>)
 80057da:	7958      	ldrb	r0, [r3, #5]
 80057dc:	f7ff fa37 	bl	8004c4e <print_uint8_base10>
  report_util_feedback_line_feed();
 80057e0:	f7ff fe76 	bl	80054d0 <report_util_feedback_line_feed>
}
 80057e4:	b007      	add	sp, #28
 80057e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80057ea:	bf00      	nop
 80057ec:	08009981 	.word	0x08009981
 80057f0:	200038ec 	.word	0x200038ec
 80057f4:	200038d4 	.word	0x200038d4

080057f8 <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 80057f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fc:	2500      	movs	r5, #0
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 80057fe:	4e23      	ldr	r6, [pc, #140]	; (800588c <report_ngc_parameters+0x94>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 8005800:	4f23      	ldr	r7, [pc, #140]	; (8005890 <report_ngc_parameters+0x98>)
      case 7: printPgmString(PSTR("30")); break;
 8005802:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80058a8 <report_ngc_parameters+0xb0>
{
 8005806:	b086      	sub	sp, #24
 8005808:	b2ec      	uxtb	r4, r5
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 800580a:	4669      	mov	r1, sp
 800580c:	4620      	mov	r0, r4
 800580e:	f000 fc4a 	bl	80060a6 <settings_read_coord_data>
 8005812:	b950      	cbnz	r0, 800582a <report_ngc_parameters+0x32>
      printPgmString(PSTR("error:"));
 8005814:	481f      	ldr	r0, [pc, #124]	; (8005894 <report_ngc_parameters+0x9c>)
 8005816:	f7ff fa11 	bl	8004c3c <printString>
      print_uint8_base10(status_code);
 800581a:	2007      	movs	r0, #7
 800581c:	f7ff fa17 	bl	8004c4e <print_uint8_base10>
      report_util_line_feed();
 8005820:	f7ff fe50 	bl	80054c4 <report_util_line_feed>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
  printFloat_CoordValue(gc_state.tool_length_offset);
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 8005824:	b006      	add	sp, #24
 8005826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printPgmString(PSTR("[G"));
 800582a:	4630      	mov	r0, r6
 800582c:	f7ff fa06 	bl	8004c3c <printString>
    switch (coord_select) {
 8005830:	2c06      	cmp	r4, #6
 8005832:	d007      	beq.n	8005844 <report_ngc_parameters+0x4c>
 8005834:	2c07      	cmp	r4, #7
 8005836:	d027      	beq.n	8005888 <report_ngc_parameters+0x90>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8005838:	f104 0036 	add.w	r0, r4, #54	; 0x36
 800583c:	b2c0      	uxtb	r0, r0
 800583e:	f7ff fa06 	bl	8004c4e <print_uint8_base10>
 8005842:	e002      	b.n	800584a <report_ngc_parameters+0x52>
      case 6: printPgmString(PSTR("28")); break;
 8005844:	4638      	mov	r0, r7
      case 7: printPgmString(PSTR("30")); break;
 8005846:	f7ff f9f9 	bl	8004c3c <printString>
    serial_write(':');
 800584a:	203a      	movs	r0, #58	; 0x3a
 800584c:	f000 faa7 	bl	8005d9e <serial_write>
 8005850:	3501      	adds	r5, #1
    report_util_axis_values(coord_data);
 8005852:	4668      	mov	r0, sp
 8005854:	f7ff fe44 	bl	80054e0 <report_util_axis_values>
    report_util_feedback_line_feed();
 8005858:	f7ff fe3a 	bl	80054d0 <report_util_feedback_line_feed>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 800585c:	2d08      	cmp	r5, #8
 800585e:	d1d3      	bne.n	8005808 <report_ngc_parameters+0x10>
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8005860:	480d      	ldr	r0, [pc, #52]	; (8005898 <report_ngc_parameters+0xa0>)
 8005862:	f7ff f9eb 	bl	8004c3c <printString>
  report_util_axis_values(gc_state.coord_offset);
 8005866:	480d      	ldr	r0, [pc, #52]	; (800589c <report_ngc_parameters+0xa4>)
 8005868:	f7ff fe3a 	bl	80054e0 <report_util_axis_values>
  report_util_feedback_line_feed();
 800586c:	f7ff fe30 	bl	80054d0 <report_util_feedback_line_feed>
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8005870:	480b      	ldr	r0, [pc, #44]	; (80058a0 <report_ngc_parameters+0xa8>)
 8005872:	f7ff f9e3 	bl	8004c3c <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8005876:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <report_ngc_parameters+0xac>)
 8005878:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800587a:	f7ff fa75 	bl	8004d68 <printFloat_CoordValue>
  report_util_feedback_line_feed();
 800587e:	f7ff fe27 	bl	80054d0 <report_util_feedback_line_feed>
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
 8005882:	f7ff ff9b 	bl	80057bc <report_probe_parameters>
 8005886:	e7cd      	b.n	8005824 <report_ngc_parameters+0x2c>
      case 7: printPgmString(PSTR("30")); break;
 8005888:	4640      	mov	r0, r8
 800588a:	e7dc      	b.n	8005846 <report_ngc_parameters+0x4e>
 800588c:	0800996c 	.word	0x0800996c
 8005890:	0800996f 	.word	0x0800996f
 8005894:	080099eb 	.word	0x080099eb
 8005898:	08009975 	.word	0x08009975
 800589c:	20003d70 	.word	0x20003d70
 80058a0:	0800997b 	.word	0x0800997b
 80058a4:	20003d20 	.word	0x20003d20
 80058a8:	08009972 	.word	0x08009972

080058ac <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 80058ac:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 80058ae:	4c45      	ldr	r4, [pc, #276]	; (80059c4 <report_gcode_modes+0x118>)
  printPgmString(PSTR("[GC:G"));
 80058b0:	4845      	ldr	r0, [pc, #276]	; (80059c8 <report_gcode_modes+0x11c>)
 80058b2:	f7ff f9c3 	bl	8004c3c <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 80058b6:	7820      	ldrb	r0, [r4, #0]
 80058b8:	288b      	cmp	r0, #139	; 0x8b
 80058ba:	d905      	bls.n	80058c8 <report_gcode_modes+0x1c>
    printPgmString(PSTR("38."));
 80058bc:	4843      	ldr	r0, [pc, #268]	; (80059cc <report_gcode_modes+0x120>)
 80058be:	f7ff f9bd 	bl	8004c3c <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 80058c2:	7820      	ldrb	r0, [r4, #0]
 80058c4:	3076      	adds	r0, #118	; 0x76
 80058c6:	b2c0      	uxtb	r0, r0
  } else {
    print_uint8_base10(gc_state.modal.motion);
 80058c8:	f7ff f9c1 	bl	8004c4e <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80058cc:	4840      	ldr	r0, [pc, #256]	; (80059d0 <report_gcode_modes+0x124>)
 80058ce:	f7ff f9b5 	bl	8004c3c <printString>
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 80058d2:	79a0      	ldrb	r0, [r4, #6]
 80058d4:	3036      	adds	r0, #54	; 0x36
 80058d6:	b2c0      	uxtb	r0, r0
 80058d8:	f7ff f9b9 	bl	8004c4e <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80058dc:	483c      	ldr	r0, [pc, #240]	; (80059d0 <report_gcode_modes+0x124>)
 80058de:	f7ff f9ad 	bl	8004c3c <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 80058e2:	7920      	ldrb	r0, [r4, #4]
 80058e4:	3011      	adds	r0, #17
 80058e6:	b2c0      	uxtb	r0, r0
 80058e8:	f7ff f9b1 	bl	8004c4e <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80058ec:	4838      	ldr	r0, [pc, #224]	; (80059d0 <report_gcode_modes+0x124>)
 80058ee:	f7ff f9a5 	bl	8004c3c <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 80058f2:	78a0      	ldrb	r0, [r4, #2]
 80058f4:	f1c0 0015 	rsb	r0, r0, #21
 80058f8:	b2c0      	uxtb	r0, r0
 80058fa:	f7ff f9a8 	bl	8004c4e <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80058fe:	4834      	ldr	r0, [pc, #208]	; (80059d0 <report_gcode_modes+0x124>)
 8005900:	f7ff f99c 	bl	8004c3c <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8005904:	78e0      	ldrb	r0, [r4, #3]
 8005906:	305a      	adds	r0, #90	; 0x5a
 8005908:	b2c0      	uxtb	r0, r0
 800590a:	f7ff f9a0 	bl	8004c4e <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 800590e:	4830      	ldr	r0, [pc, #192]	; (80059d0 <report_gcode_modes+0x124>)
 8005910:	f7ff f994 	bl	8004c3c <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8005914:	7860      	ldrb	r0, [r4, #1]
 8005916:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 800591a:	b2c0      	uxtb	r0, r0
 800591c:	f7ff f997 	bl	8004c4e <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8005920:	79e3      	ldrb	r3, [r4, #7]
 8005922:	b17b      	cbz	r3, 8005944 <report_gcode_modes+0x98>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005924:	482b      	ldr	r0, [pc, #172]	; (80059d4 <report_gcode_modes+0x128>)
 8005926:	f7ff f989 	bl	8004c3c <printString>
    report_util_gcode_modes_M();
    switch (gc_state.modal.program_flow) {
 800592a:	79e0      	ldrb	r0, [r4, #7]
 800592c:	2803      	cmp	r0, #3
 800592e:	d006      	beq.n	800593e <report_gcode_modes+0x92>
 8005930:	281e      	cmp	r0, #30
 8005932:	d001      	beq.n	8005938 <report_gcode_modes+0x8c>
 8005934:	2802      	cmp	r0, #2
 8005936:	d105      	bne.n	8005944 <report_gcode_modes+0x98>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
      // case PROGRAM_FLOW_OPTIONAL_STOP : serial_write('1'); break; // M1 is ignored and not supported.
      case PROGRAM_FLOW_COMPLETED_M2 : 
      case PROGRAM_FLOW_COMPLETED_M30 : 
        print_uint8_base10(gc_state.modal.program_flow);
 8005938:	f7ff f989 	bl	8004c4e <print_uint8_base10>
        break;
 800593c:	e002      	b.n	8005944 <report_gcode_modes+0x98>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 800593e:	2030      	movs	r0, #48	; 0x30
 8005940:	f000 fa2d 	bl	8005d9e <serial_write>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005944:	4823      	ldr	r0, [pc, #140]	; (80059d4 <report_gcode_modes+0x128>)
 8005946:	f7ff f979 	bl	8004c3c <printString>
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 800594a:	7a63      	ldrb	r3, [r4, #9]
 800594c:	2b10      	cmp	r3, #16
 800594e:	d004      	beq.n	800595a <report_gcode_modes+0xae>
 8005950:	2b20      	cmp	r3, #32
 8005952:	d02f      	beq.n	80059b4 <report_gcode_modes+0x108>
 8005954:	b923      	cbnz	r3, 8005960 <report_gcode_modes+0xb4>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
    case SPINDLE_DISABLE : serial_write('5'); break;
 8005956:	2035      	movs	r0, #53	; 0x35
 8005958:	e000      	b.n	800595c <report_gcode_modes+0xb0>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 800595a:	2033      	movs	r0, #51	; 0x33
    case SPINDLE_DISABLE : serial_write('5'); break;
 800595c:	f000 fa1f 	bl	8005d9e <serial_write>
  }

  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8005960:	7a23      	ldrb	r3, [r4, #8]
 8005962:	b34b      	cbz	r3, 80059b8 <report_gcode_modes+0x10c>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8005964:	061a      	lsls	r2, r3, #24
 8005966:	d505      	bpl.n	8005974 <report_gcode_modes+0xc8>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005968:	481a      	ldr	r0, [pc, #104]	; (80059d4 <report_gcode_modes+0x128>)
 800596a:	f7ff f967 	bl	8004c3c <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 800596e:	2037      	movs	r0, #55	; 0x37
 8005970:	f000 fa15 	bl	8005d9e <serial_write>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8005974:	7a23      	ldrb	r3, [r4, #8]
 8005976:	065b      	lsls	r3, r3, #25
 8005978:	d505      	bpl.n	8005986 <report_gcode_modes+0xda>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 800597a:	4816      	ldr	r0, [pc, #88]	; (80059d4 <report_gcode_modes+0x128>)
 800597c:	f7ff f95e 	bl	8004c3c <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8005980:	2038      	movs	r0, #56	; 0x38
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8005982:	f000 fa0c 	bl	8005d9e <serial_write>
      report_util_gcode_modes_M();
      print_uint8_base10(56);
    }
  #endif
  
  printPgmString(PSTR(" T"));
 8005986:	4814      	ldr	r0, [pc, #80]	; (80059d8 <report_gcode_modes+0x12c>)
 8005988:	f7ff f958 	bl	8004c3c <printString>
  print_uint8_base10(gc_state.tool);
 800598c:	7e20      	ldrb	r0, [r4, #24]
 800598e:	f7ff f95e 	bl	8004c4e <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8005992:	4812      	ldr	r0, [pc, #72]	; (80059dc <report_gcode_modes+0x130>)
 8005994:	f7ff f952 	bl	8004c3c <printString>
  printFloat_RateValue(gc_state.feed_rate);
 8005998:	6960      	ldr	r0, [r4, #20]
 800599a:	f7ff fa05 	bl	8004da8 <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 800599e:	4810      	ldr	r0, [pc, #64]	; (80059e0 <report_gcode_modes+0x134>)
 80059a0:	f7ff f94c 	bl	8004c3c <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 80059a4:	6920      	ldr	r0, [r4, #16]
 80059a6:	2100      	movs	r1, #0
 80059a8:	f7ff f97a 	bl	8004ca0 <printFloat>
  #endif

  report_util_feedback_line_feed();
}
 80059ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_feedback_line_feed();
 80059b0:	f7ff bd8e 	b.w	80054d0 <report_util_feedback_line_feed>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 80059b4:	2034      	movs	r0, #52	; 0x34
 80059b6:	e7d1      	b.n	800595c <report_gcode_modes+0xb0>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80059b8:	4806      	ldr	r0, [pc, #24]	; (80059d4 <report_gcode_modes+0x128>)
 80059ba:	f7ff f93f 	bl	8004c3c <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 80059be:	2039      	movs	r0, #57	; 0x39
 80059c0:	e7df      	b.n	8005982 <report_gcode_modes+0xd6>
 80059c2:	bf00      	nop
 80059c4:	20003d20 	.word	0x20003d20
 80059c8:	080098e7 	.word	0x080098e7
 80059cc:	080098ed 	.word	0x080098ed
 80059d0:	080098f1 	.word	0x080098f1
 80059d4:	080098f4 	.word	0x080098f4
 80059d8:	080098f7 	.word	0x080098f7
 80059dc:	080098fa 	.word	0x080098fa
 80059e0:	080098fd 	.word	0x080098fd

080059e4 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4605      	mov	r5, r0
 80059e8:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 80059ea:	4808      	ldr	r0, [pc, #32]	; (8005a0c <report_startup_line+0x28>)
 80059ec:	f7ff f926 	bl	8004c3c <printString>
  print_uint8_base10(n);
 80059f0:	4628      	mov	r0, r5
 80059f2:	f7ff f92c 	bl	8004c4e <print_uint8_base10>
  serial_write('=');
 80059f6:	203d      	movs	r0, #61	; 0x3d
 80059f8:	f000 f9d1 	bl	8005d9e <serial_write>
  printString(line);
 80059fc:	4620      	mov	r0, r4
 80059fe:	f7ff f91d 	bl	8004c3c <printString>
  report_util_line_feed();
}
 8005a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  report_util_line_feed();
 8005a06:	f7ff bd5d 	b.w	80054c4 <report_util_line_feed>
 8005a0a:	bf00      	nop
 8005a0c:	080099e3 	.word	0x080099e3

08005a10 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4605      	mov	r5, r0
 8005a14:	460c      	mov	r4, r1
  serial_write('>');
 8005a16:	203e      	movs	r0, #62	; 0x3e
 8005a18:	f000 f9c1 	bl	8005d9e <serial_write>
  printString(line);
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	f7ff f90d 	bl	8004c3c <printString>
  serial_write(':');
 8005a22:	203a      	movs	r0, #58	; 0x3a
 8005a24:	f000 f9bb 	bl	8005d9e <serial_write>
  report_status_message(status_code);
 8005a28:	4620      	mov	r0, r4
}
 8005a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  report_status_message(status_code);
 8005a2e:	f7ff bd8d 	b.w	800554c <report_status_message>
	...

08005a34 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 8005a34:	b510      	push	{r4, lr}
 8005a36:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 8005a38:	4811      	ldr	r0, [pc, #68]	; (8005a80 <report_build_info+0x4c>)
 8005a3a:	f7ff f8ff 	bl	8004c3c <printString>
  printString(line);
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f7ff f8fc 	bl	8004c3c <printString>
  report_util_feedback_line_feed();
 8005a44:	f7ff fd44 	bl	80054d0 <report_util_feedback_line_feed>
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 8005a48:	480e      	ldr	r0, [pc, #56]	; (8005a84 <report_build_info+0x50>)
 8005a4a:	f7ff f8f7 	bl	8004c3c <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 8005a4e:	2056      	movs	r0, #86	; 0x56
 8005a50:	f000 f9a5 	bl	8005d9e <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 8005a54:	204d      	movs	r0, #77	; 0x4d
 8005a56:	f000 f9a2 	bl	8005d9e <serial_write>
  #endif
  #ifdef HOMING_FORCE_SET_ORIGIN
    serial_write('Z');
  #endif
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    serial_write('H');
 8005a5a:	2048      	movs	r0, #72	; 0x48
 8005a5c:	f000 f99f 	bl	8005d9e <serial_write>
  #ifndef HOMING_INIT_LOCK
    serial_write('L');
  #endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
  serial_write(',');
 8005a60:	202c      	movs	r0, #44	; 0x2c
 8005a62:	f000 f99c 	bl	8005d9e <serial_write>
  print_uint8_base10(BLOCK_BUFFER_SIZE-1);
 8005a66:	20c7      	movs	r0, #199	; 0xc7
 8005a68:	f7ff f8f1 	bl	8004c4e <print_uint8_base10>
  serial_write(',');
 8005a6c:	202c      	movs	r0, #44	; 0x2c
 8005a6e:	f000 f996 	bl	8005d9e <serial_write>
  print_uint8_base10(RX_BUFFER_SIZE);
 8005a72:	20fe      	movs	r0, #254	; 0xfe
 8005a74:	f7ff f8eb 	bl	8004c4e <print_uint8_base10>

  report_util_feedback_line_feed();
}
 8005a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_feedback_line_feed();
 8005a7c:	f7ff bd28 	b.w	80054d0 <report_util_feedback_line_feed>
 8005a80:	0800982b 	.word	0x0800982b
 8005a84:	08009844 	.word	0x08009844

08005a88 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8005a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8c:	b093      	sub	sp, #76	; 0x4c
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position,sys_position,sizeof(sys_position));
 8005a8e:	466c      	mov	r4, sp
 8005a90:	4da4      	ldr	r5, [pc, #656]	; (8005d24 <report_realtime_status+0x29c>)
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,current_position);
 8005a92:	f10d 0918 	add.w	r9, sp, #24
  memcpy(current_position,sys_position,sizeof(sys_position));
 8005a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a9e:	e884 0003 	stmia.w	r4, {r0, r1}
  system_convert_array_steps_to_mpos(print_position,current_position);
 8005aa2:	4669      	mov	r1, sp
 8005aa4:	4648      	mov	r0, r9

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8005aa6:	4ca0      	ldr	r4, [pc, #640]	; (8005d28 <report_realtime_status+0x2a0>)
  system_convert_array_steps_to_mpos(print_position,current_position);
 8005aa8:	f001 fc3e 	bl	8007328 <system_convert_array_steps_to_mpos>
  serial_write('<');
 8005aac:	203c      	movs	r0, #60	; 0x3c
 8005aae:	f000 f976 	bl	8005d9e <serial_write>
  switch (sys.state) {
 8005ab2:	7823      	ldrb	r3, [r4, #0]
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d04f      	beq.n	8005b58 <report_realtime_status+0xd0>
 8005ab8:	d831      	bhi.n	8005b1e <report_realtime_status+0x96>
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d052      	beq.n	8005b64 <report_realtime_status+0xdc>
 8005abe:	d347      	bcc.n	8005b50 <report_realtime_status+0xc8>
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d051      	beq.n	8005b68 <report_realtime_status+0xe0>
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d04b      	beq.n	8005b60 <report_realtime_status+0xd8>
      break;
    case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8005ac8:	4b98      	ldr	r3, [pc, #608]	; (8005d2c <report_realtime_status+0x2a4>)
 8005aca:	f893 7067 	ldrb.w	r7, [r3, #103]	; 0x67
 8005ace:	4698      	mov	r8, r3
 8005ad0:	f017 0701 	ands.w	r7, r7, #1
 8005ad4:	d15a      	bne.n	8005b8c <report_realtime_status+0x104>
      (sys.report_wco_counter == 0) ) {
    for (idx=0; idx< N_AXIS; idx++) {
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005ad6:	2500      	movs	r5, #0
 8005ad8:	4e95      	ldr	r6, [pc, #596]	; (8005d30 <report_realtime_status+0x2a8>)
      wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
 8005ada:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005ade:	f8d6 a068 	ldr.w	sl, [r6, #104]	; 0x68
 8005ae2:	3634      	adds	r6, #52	; 0x34
 8005ae4:	3604      	adds	r6, #4
      wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
 8005ae6:	69b1      	ldr	r1, [r6, #24]
 8005ae8:	6830      	ldr	r0, [r6, #0]
 8005aea:	f7fb f843 	bl	8000b74 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005aee:	2d02      	cmp	r5, #2
      wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
 8005af0:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005af4:	d103      	bne.n	8005afe <report_realtime_status+0x76>
 8005af6:	4651      	mov	r1, sl
 8005af8:	f7fb f83c 	bl	8000b74 <__addsf3>
 8005afc:	900e      	str	r0, [sp, #56]	; 0x38
      if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE)) {
 8005afe:	b93f      	cbnz	r7, 8005b10 <report_realtime_status+0x88>
        print_position[idx] -= wco[idx];
 8005b00:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005b04:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8005b08:	f7fb f832 	bl	8000b70 <__aeabi_fsub>
 8005b0c:	f849 0025 	str.w	r0, [r9, r5, lsl #2]
 8005b10:	3501      	adds	r5, #1
    for (idx=0; idx< N_AXIS; idx++) {
 8005b12:	2d06      	cmp	r5, #6
 8005b14:	d1e6      	bne.n	8005ae4 <report_realtime_status+0x5c>
      }
    }
  }

  // Report machine position
  if (bit_istrue(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE)) {
 8005b16:	2f00      	cmp	r7, #0
 8005b18:	d13b      	bne.n	8005b92 <report_realtime_status+0x10a>
    printPgmString(PSTR("|MPos:"));
  } else {
    printPgmString(PSTR("|WPos:"));
 8005b1a:	4886      	ldr	r0, [pc, #536]	; (8005d34 <report_realtime_status+0x2ac>)
 8005b1c:	e03a      	b.n	8005b94 <report_realtime_status+0x10c>
  switch (sys.state) {
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d01c      	beq.n	8005b5c <report_realtime_status+0xd4>
 8005b22:	d80f      	bhi.n	8005b44 <report_realtime_status+0xbc>
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d1cf      	bne.n	8005ac8 <report_realtime_status+0x40>
      if (!(sys.suspend & SUSPEND_JOG_CANCEL))
 8005b28:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	dbcb      	blt.n	8005ac8 <report_realtime_status+0x40>
        printPgmString(PSTR("Hold:"));
 8005b30:	4881      	ldr	r0, [pc, #516]	; (8005d38 <report_realtime_status+0x2b0>)
 8005b32:	f7ff f883 	bl	8004c3c <printString>
        if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 8005b36:	78a3      	ldrb	r3, [r4, #2]
 8005b38:	07de      	lsls	r6, r3, #31
 8005b3a:	d523      	bpl.n	8005b84 <report_realtime_status+0xfc>
 8005b3c:	2030      	movs	r0, #48	; 0x30
          serial_write('2'); // Retracting
 8005b3e:	f000 f92e 	bl	8005d9e <serial_write>
 8005b42:	e7c1      	b.n	8005ac8 <report_realtime_status+0x40>
  switch (sys.state) {
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d011      	beq.n	8005b6c <report_realtime_status+0xe4>
 8005b48:	2b80      	cmp	r3, #128	; 0x80
 8005b4a:	d1bd      	bne.n	8005ac8 <report_realtime_status+0x40>
    case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8005b4c:	487b      	ldr	r0, [pc, #492]	; (8005d3c <report_realtime_status+0x2b4>)
 8005b4e:	e000      	b.n	8005b52 <report_realtime_status+0xca>
    case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 8005b50:	487b      	ldr	r0, [pc, #492]	; (8005d40 <report_realtime_status+0x2b8>)
    case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8005b52:	f7ff f873 	bl	8004c3c <printString>
 8005b56:	e7b7      	b.n	8005ac8 <report_realtime_status+0x40>
    case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 8005b58:	487a      	ldr	r0, [pc, #488]	; (8005d44 <report_realtime_status+0x2bc>)
 8005b5a:	e7fa      	b.n	8005b52 <report_realtime_status+0xca>
    case STATE_JOG: printPgmString(PSTR("Jog")); break;
 8005b5c:	487a      	ldr	r0, [pc, #488]	; (8005d48 <report_realtime_status+0x2c0>)
 8005b5e:	e7f8      	b.n	8005b52 <report_realtime_status+0xca>
    case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8005b60:	487a      	ldr	r0, [pc, #488]	; (8005d4c <report_realtime_status+0x2c4>)
 8005b62:	e7f6      	b.n	8005b52 <report_realtime_status+0xca>
    case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 8005b64:	487a      	ldr	r0, [pc, #488]	; (8005d50 <report_realtime_status+0x2c8>)
 8005b66:	e7f4      	b.n	8005b52 <report_realtime_status+0xca>
    case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 8005b68:	487a      	ldr	r0, [pc, #488]	; (8005d54 <report_realtime_status+0x2cc>)
 8005b6a:	e7f2      	b.n	8005b52 <report_realtime_status+0xca>
      printPgmString(PSTR("Door:"));
 8005b6c:	487a      	ldr	r0, [pc, #488]	; (8005d58 <report_realtime_status+0x2d0>)
 8005b6e:	f7ff f865 	bl	8004c3c <printString>
      if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8005b72:	78a3      	ldrb	r3, [r4, #2]
 8005b74:	071d      	lsls	r5, r3, #28
 8005b76:	d501      	bpl.n	8005b7c <report_realtime_status+0xf4>
        serial_write('3'); // Restoring
 8005b78:	2033      	movs	r0, #51	; 0x33
 8005b7a:	e7e0      	b.n	8005b3e <report_realtime_status+0xb6>
        if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005b7c:	0758      	lsls	r0, r3, #29
 8005b7e:	d503      	bpl.n	8005b88 <report_realtime_status+0x100>
          if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 8005b80:	0699      	lsls	r1, r3, #26
 8005b82:	d5db      	bpl.n	8005b3c <report_realtime_status+0xb4>
        else { serial_write('1'); } // Actively holding
 8005b84:	2031      	movs	r0, #49	; 0x31
 8005b86:	e7da      	b.n	8005b3e <report_realtime_status+0xb6>
          serial_write('2'); // Retracting
 8005b88:	2032      	movs	r0, #50	; 0x32
 8005b8a:	e7d8      	b.n	8005b3e <report_realtime_status+0xb6>
  if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8005b8c:	7b63      	ldrb	r3, [r4, #13]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0a1      	beq.n	8005ad6 <report_realtime_status+0x4e>
    printPgmString(PSTR("|MPos:"));
 8005b92:	4872      	ldr	r0, [pc, #456]	; (8005d5c <report_realtime_status+0x2d4>)
    printPgmString(PSTR("|WPos:"));
 8005b94:	f7ff f852 	bl	8004c3c <printString>
  }
  report_util_axis_values(print_position);
 8005b98:	4648      	mov	r0, r9
 8005b9a:	f7ff fca1 	bl	80054e0 <report_util_axis_values>

  // Returns planner and serial read buffer states.
  #ifdef REPORT_FIELD_BUFFER_STATE
    if (bit_istrue(settings.status_report_mask,BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8005b9e:	f898 3067 	ldrb.w	r3, [r8, #103]	; 0x67
 8005ba2:	079a      	lsls	r2, r3, #30
 8005ba4:	d50d      	bpl.n	8005bc2 <report_realtime_status+0x13a>
      printPgmString(PSTR("|Bf:"));
 8005ba6:	486e      	ldr	r0, [pc, #440]	; (8005d60 <report_realtime_status+0x2d8>)
 8005ba8:	f7ff f848 	bl	8004c3c <printString>
      print_uint8_base10(plan_get_block_buffer_available());
 8005bac:	f7ff f824 	bl	8004bf8 <plan_get_block_buffer_available>
 8005bb0:	f7ff f84d 	bl	8004c4e <print_uint8_base10>
      serial_write(',');
 8005bb4:	202c      	movs	r0, #44	; 0x2c
 8005bb6:	f000 f8f2 	bl	8005d9e <serial_write>
      print_uint8_base10(serial_get_rx_buffer_available());
 8005bba:	f000 f8dd 	bl	8005d78 <serial_get_rx_buffer_available>
 8005bbe:	f7ff f846 	bl	8004c4e <print_uint8_base10>
  #endif

  // Report realtime feed speed
  #ifdef REPORT_FIELD_CURRENT_FEED_SPEED
    #ifdef VARIABLE_SPINDLE
      printPgmString(PSTR("|FS:"));
 8005bc2:	4868      	ldr	r0, [pc, #416]	; (8005d64 <report_realtime_status+0x2dc>)
 8005bc4:	f7ff f83a 	bl	8004c3c <printString>
      printFloat_RateValue(st_get_realtime_rate());
 8005bc8:	f001 fb20 	bl	800720c <st_get_realtime_rate>
 8005bcc:	f7ff f8ec 	bl	8004da8 <printFloat_RateValue>
      serial_write(',');
 8005bd0:	202c      	movs	r0, #44	; 0x2c
 8005bd2:	f000 f8e4 	bl	8005d9e <serial_write>
      printFloat(sys.spindle_speed,N_DECIMAL_RPMVALUE);
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	6920      	ldr	r0, [r4, #16]
 8005bda:	f7ff f861 	bl	8004ca0 <printFloat>
      printFloat_RateValue(st_get_realtime_rate());
    #endif      
  #endif

  #ifdef REPORT_FIELD_PIN_STATE
    uint8_t lim_pin_state = limits_get_state();
 8005bde:	f7fd ff4f 	bl	8003a80 <limits_get_state>
 8005be2:	4605      	mov	r5, r0
    uint8_t ctrl_pin_state = system_control_get_state();
 8005be4:	f001 fb22 	bl	800722c <system_control_get_state>
 8005be8:	4606      	mov	r6, r0
    uint8_t prb_pin_state = probe_get_state();
 8005bea:	f7ff f907 	bl	8004dfc <probe_get_state>
    if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8005bee:	ea45 0306 	orr.w	r3, r5, r6
 8005bf2:	4303      	orrs	r3, r0
 8005bf4:	f013 0fff 	tst.w	r3, #255	; 0xff
    uint8_t prb_pin_state = probe_get_state();
 8005bf8:	4607      	mov	r7, r0
    if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8005bfa:	d03a      	beq.n	8005c72 <report_realtime_status+0x1ea>
      printPgmString(PSTR("|Pn:"));
 8005bfc:	485a      	ldr	r0, [pc, #360]	; (8005d68 <report_realtime_status+0x2e0>)
 8005bfe:	f7ff f81d 	bl	8004c3c <printString>
      if (prb_pin_state) { serial_write('P'); }
 8005c02:	b117      	cbz	r7, 8005c0a <report_realtime_status+0x182>
 8005c04:	2050      	movs	r0, #80	; 0x50
 8005c06:	f000 f8ca 	bl	8005d9e <serial_write>
      if (lim_pin_state) {
 8005c0a:	b1ed      	cbz	r5, 8005c48 <report_realtime_status+0x1c0>
        if (bit_istrue(lim_pin_state,bit(X_AXIS))) { serial_write('X'); }
 8005c0c:	07eb      	lsls	r3, r5, #31
 8005c0e:	d502      	bpl.n	8005c16 <report_realtime_status+0x18e>
 8005c10:	2058      	movs	r0, #88	; 0x58
 8005c12:	f000 f8c4 	bl	8005d9e <serial_write>
        if (bit_istrue(lim_pin_state,bit(Y_AXIS))) { serial_write('Y'); }
 8005c16:	07af      	lsls	r7, r5, #30
 8005c18:	d502      	bpl.n	8005c20 <report_realtime_status+0x198>
 8005c1a:	2059      	movs	r0, #89	; 0x59
 8005c1c:	f000 f8bf 	bl	8005d9e <serial_write>
        if (bit_istrue(lim_pin_state,bit(Z_AXIS))) { serial_write('Z'); }
 8005c20:	0768      	lsls	r0, r5, #29
 8005c22:	d502      	bpl.n	8005c2a <report_realtime_status+0x1a2>
 8005c24:	205a      	movs	r0, #90	; 0x5a
 8005c26:	f000 f8ba 	bl	8005d9e <serial_write>
        #if ( defined(STM32F1_5) || defined(STM32F4_5) )
          if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
          if (bit_istrue(lim_pin_state, bit(B_AXIS))) { serial_write('B'); }
        #endif
        #if ( defined(STM32F1_6) || defined(STM32F4_6) )
          if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 8005c2a:	0729      	lsls	r1, r5, #28
 8005c2c:	d502      	bpl.n	8005c34 <report_realtime_status+0x1ac>
 8005c2e:	2041      	movs	r0, #65	; 0x41
 8005c30:	f000 f8b5 	bl	8005d9e <serial_write>
          if (bit_istrue(lim_pin_state, bit(B_AXIS))) { serial_write('B'); }
 8005c34:	06ea      	lsls	r2, r5, #27
 8005c36:	d502      	bpl.n	8005c3e <report_realtime_status+0x1b6>
 8005c38:	2042      	movs	r0, #66	; 0x42
 8005c3a:	f000 f8b0 	bl	8005d9e <serial_write>
          if (bit_istrue(lim_pin_state, bit(C_AXIS))) { serial_write('C'); }
 8005c3e:	06ab      	lsls	r3, r5, #26
 8005c40:	d502      	bpl.n	8005c48 <report_realtime_status+0x1c0>
 8005c42:	2043      	movs	r0, #67	; 0x43
 8005c44:	f000 f8ab 	bl	8005d9e <serial_write>
        #endif
      }
      if (ctrl_pin_state) {
 8005c48:	b19e      	cbz	r6, 8005c72 <report_realtime_status+0x1ea>
        #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
          if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_SAFETY_DOOR)) { serial_write('D'); }
 8005c4a:	07f7      	lsls	r7, r6, #31
 8005c4c:	d502      	bpl.n	8005c54 <report_realtime_status+0x1cc>
 8005c4e:	2044      	movs	r0, #68	; 0x44
 8005c50:	f000 f8a5 	bl	8005d9e <serial_write>
        #endif
        if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8005c54:	07b5      	lsls	r5, r6, #30
 8005c56:	d502      	bpl.n	8005c5e <report_realtime_status+0x1d6>
 8005c58:	2052      	movs	r0, #82	; 0x52
 8005c5a:	f000 f8a0 	bl	8005d9e <serial_write>
        if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8005c5e:	0770      	lsls	r0, r6, #29
 8005c60:	d502      	bpl.n	8005c68 <report_realtime_status+0x1e0>
 8005c62:	2048      	movs	r0, #72	; 0x48
 8005c64:	f000 f89b 	bl	8005d9e <serial_write>
        if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 8005c68:	0731      	lsls	r1, r6, #28
 8005c6a:	d502      	bpl.n	8005c72 <report_realtime_status+0x1ea>
 8005c6c:	2053      	movs	r0, #83	; 0x53
 8005c6e:	f000 f896 	bl	8005d9e <serial_write>
      }
    }
  #endif

  #ifdef REPORT_FIELD_WORK_COORD_OFFSET
    if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 8005c72:	7b63      	ldrb	r3, [r4, #13]
 8005c74:	b16b      	cbz	r3, 8005c92 <report_realtime_status+0x20a>
 8005c76:	3b01      	subs	r3, #1
 8005c78:	7363      	strb	r3, [r4, #13]
      report_util_axis_values(wco);
    }
  #endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 8005c7a:	7b23      	ldrb	r3, [r4, #12]
 8005c7c:	b1db      	cbz	r3, 8005cb6 <report_realtime_status+0x22e>
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	7323      	strb	r3, [r4, #12]
        #endif
      }  
    }
  #endif

  serial_write('>');
 8005c82:	203e      	movs	r0, #62	; 0x3e
 8005c84:	f000 f88b 	bl	8005d9e <serial_write>
  report_util_line_feed();
 8005c88:	f7ff fc1c 	bl	80054c4 <report_util_line_feed>
}
 8005c8c:	b013      	add	sp, #76	; 0x4c
 8005c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8005c92:	7823      	ldrb	r3, [r4, #0]
 8005c94:	f013 0f7c 	tst.w	r3, #124	; 0x7c
        sys.report_wco_counter = (REPORT_WCO_REFRESH_BUSY_COUNT-1); // Reset counter for slow refresh
 8005c98:	bf14      	ite	ne
 8005c9a:	231d      	movne	r3, #29
      } else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT-1); }
 8005c9c:	2309      	moveq	r3, #9
 8005c9e:	7363      	strb	r3, [r4, #13]
      if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8005ca0:	7b23      	ldrb	r3, [r4, #12]
 8005ca2:	b90b      	cbnz	r3, 8005ca8 <report_realtime_status+0x220>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|WCO:"));
 8005ca8:	4830      	ldr	r0, [pc, #192]	; (8005d6c <report_realtime_status+0x2e4>)
 8005caa:	f7fe ffc7 	bl	8004c3c <printString>
      report_util_axis_values(wco);
 8005cae:	a80c      	add	r0, sp, #48	; 0x30
 8005cb0:	f7ff fc16 	bl	80054e0 <report_util_axis_values>
 8005cb4:	e7e1      	b.n	8005c7a <report_realtime_status+0x1f2>
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8005cb6:	7823      	ldrb	r3, [r4, #0]
      printPgmString(PSTR("|Ov:"));
 8005cb8:	482d      	ldr	r0, [pc, #180]	; (8005d70 <report_realtime_status+0x2e8>)
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8005cba:	f013 0f7c 	tst.w	r3, #124	; 0x7c
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT-1); // Reset counter for slow refresh
 8005cbe:	bf14      	ite	ne
 8005cc0:	2313      	movne	r3, #19
      } else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT-1); }
 8005cc2:	2309      	moveq	r3, #9
 8005cc4:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|Ov:"));
 8005cc6:	f7fe ffb9 	bl	8004c3c <printString>
      print_uint8_base10(sys.f_override);
 8005cca:	7a20      	ldrb	r0, [r4, #8]
 8005ccc:	f7fe ffbf 	bl	8004c4e <print_uint8_base10>
      serial_write(',');
 8005cd0:	202c      	movs	r0, #44	; 0x2c
 8005cd2:	f000 f864 	bl	8005d9e <serial_write>
      print_uint8_base10(sys.r_override);
 8005cd6:	7a60      	ldrb	r0, [r4, #9]
 8005cd8:	f7fe ffb9 	bl	8004c4e <print_uint8_base10>
      serial_write(',');
 8005cdc:	202c      	movs	r0, #44	; 0x2c
 8005cde:	f000 f85e 	bl	8005d9e <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 8005ce2:	7aa0      	ldrb	r0, [r4, #10]
 8005ce4:	f7fe ffb3 	bl	8004c4e <print_uint8_base10>
      uint8_t sp_state = spindle_get_state();
 8005ce8:	f000 fb74 	bl	80063d4 <spindle_get_state>
 8005cec:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 8005cee:	f7fc fd6d 	bl	80027cc <coolant_get_state>
 8005cf2:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 8005cf4:	b90d      	cbnz	r5, 8005cfa <report_realtime_status+0x272>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d0c3      	beq.n	8005c82 <report_realtime_status+0x1fa>
        printPgmString(PSTR("|A:"));
 8005cfa:	481e      	ldr	r0, [pc, #120]	; (8005d74 <report_realtime_status+0x2ec>)
 8005cfc:	f7fe ff9e 	bl	8004c3c <printString>
        if (sp_state) { // != SPINDLE_STATE_DISABLE
 8005d00:	b12d      	cbz	r5, 8005d0e <report_realtime_status+0x286>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8005d02:	2d01      	cmp	r5, #1
 8005d04:	bf0c      	ite	eq
 8005d06:	2053      	moveq	r0, #83	; 0x53
              else { serial_write('C'); } // CCW
 8005d08:	2043      	movne	r0, #67	; 0x43
 8005d0a:	f000 f848 	bl	8005d9e <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8005d0e:	07e2      	lsls	r2, r4, #31
 8005d10:	d502      	bpl.n	8005d18 <report_realtime_status+0x290>
 8005d12:	2046      	movs	r0, #70	; 0x46
 8005d14:	f000 f843 	bl	8005d9e <serial_write>
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 8005d18:	07a3      	lsls	r3, r4, #30
 8005d1a:	d5b2      	bpl.n	8005c82 <report_realtime_status+0x1fa>
 8005d1c:	204d      	movs	r0, #77	; 0x4d
 8005d1e:	f000 f83e 	bl	8005d9e <serial_write>
 8005d22:	e7ae      	b.n	8005c82 <report_realtime_status+0x1fa>
 8005d24:	20003904 	.word	0x20003904
 8005d28:	200038d4 	.word	0x200038d4
 8005d2c:	20003f70 	.word	0x20003f70
 8005d30:	20003d20 	.word	0x20003d20
 8005d34:	080099be 	.word	0x080099be
 8005d38:	08009990 	.word	0x08009990
 8005d3c:	080099b1 	.word	0x080099b1
 8005d40:	08009987 	.word	0x08009987
 8005d44:	0800998c 	.word	0x0800998c
 8005d48:	08009996 	.word	0x08009996
 8005d4c:	0800999a 	.word	0x0800999a
 8005d50:	0800999f 	.word	0x0800999f
 8005d54:	080099a5 	.word	0x080099a5
 8005d58:	080099ab 	.word	0x080099ab
 8005d5c:	080099b7 	.word	0x080099b7
 8005d60:	080099c5 	.word	0x080099c5
 8005d64:	080099ca 	.word	0x080099ca
 8005d68:	080099cf 	.word	0x080099cf
 8005d6c:	080099d4 	.word	0x080099d4
 8005d70:	080099da 	.word	0x080099da
 8005d74:	080099df 	.word	0x080099df

08005d78 <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8005d7a:	4a07      	ldr	r2, [pc, #28]	; (8005d98 <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8005d7c:	781b      	ldrb	r3, [r3, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8005d7e:	7812      	ldrb	r2, [r2, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8005d80:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8005d82:	4293      	cmp	r3, r2
 8005d84:	bf94      	ite	ls
 8005d86:	1e98      	subls	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 8005d88:	f103 30ff 	addhi.w	r0, r3, #4294967295
 8005d8c:	1a80      	subs	r0, r0, r2
 8005d8e:	b2c0      	uxtb	r0, r0
}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20003321 	.word	0x20003321
 8005d98:	20003320 	.word	0x20003320

08005d9c <serial_init>:
  if (serial_tx_buffer_head >= ttail) { return(serial_tx_buffer_head-ttail); }
  return (TX_RING_BUFFER - (ttail-serial_tx_buffer_head));
}

void serial_init()
{
 8005d9c:	4770      	bx	lr

08005d9e <serial_write>:

// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data)
{
#ifdef STM32
	uart_sendch(data);
 8005d9e:	f001 bd47 	b.w	8007830 <uart_sendch>
	...

08005da4 <serial_read>:
#endif

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8005da4:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <serial_read+0x24>)
  if (serial_rx_buffer_head == tail) {
 8005da6:	4909      	ldr	r1, [pc, #36]	; (8005dcc <serial_read+0x28>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8005da8:	7813      	ldrb	r3, [r2, #0]
  if (serial_rx_buffer_head == tail) {
 8005daa:	7809      	ldrb	r1, [r1, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8005dac:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head == tail) {
 8005dae:	4299      	cmp	r1, r3
 8005db0:	d008      	beq.n	8005dc4 <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];
 8005db2:	4907      	ldr	r1, [pc, #28]	; (8005dd0 <serial_read+0x2c>)
 8005db4:	5cc8      	ldrb	r0, [r1, r3]

    tail++;
 8005db6:	3301      	adds	r3, #1
 8005db8:	b2db      	uxtb	r3, r3
    if (tail == RX_RING_BUFFER) { tail = 0; }
 8005dba:	2bfe      	cmp	r3, #254	; 0xfe
 8005dbc:	bf08      	it	eq
 8005dbe:	2300      	moveq	r3, #0
    serial_rx_buffer_tail = tail;
 8005dc0:	7013      	strb	r3, [r2, #0]

    return data;
 8005dc2:	4770      	bx	lr
    return SERIAL_NO_DATA;
 8005dc4:	20ff      	movs	r0, #255	; 0xff
  }
}
 8005dc6:	4770      	bx	lr
 8005dc8:	20003321 	.word	0x20003321
 8005dcc:	20003320 	.word	0x20003320
 8005dd0:	20003e71 	.word	0x20003e71

08005dd4 <HandleUartIT>:
void HandleUartIT(uint8_t data)
{
	uint8_t next_head;
  // Pick off realtime command characters directly from the serial stream. These characters are
  // not passed into the main buffer, but these set system state flag bits for realtime execution.
	switch (data) {
 8005dd4:	2821      	cmp	r0, #33	; 0x21
{
 8005dd6:	b410      	push	{r4}
	switch (data) {
 8005dd8:	d025      	beq.n	8005e26 <HandleUartIT+0x52>
 8005dda:	d817      	bhi.n	8005e0c <HandleUartIT+0x38>
 8005ddc:	2818      	cmp	r0, #24
 8005dde:	d01b      	beq.n	8005e18 <HandleUartIT+0x44>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
    default :
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 8005de0:	0602      	lsls	r2, r0, #24
 8005de2:	d54e      	bpl.n	8005e82 <HandleUartIT+0xae>
        switch(data) {
 8005de4:	3884      	subs	r0, #132	; 0x84
 8005de6:	281d      	cmp	r0, #29
 8005de8:	d859      	bhi.n	8005e9e <HandleUartIT+0xca>
 8005dea:	e8df f000 	tbb	[pc, r0]
 8005dee:	201e      	.short	0x201e
 8005df0:	58585858 	.word	0x58585858
 8005df4:	58585858 	.word	0x58585858
 8005df8:	2a265858 	.word	0x2a265858
 8005dfc:	32302e2c 	.word	0x32302e2c
 8005e00:	38583634 	.word	0x38583634
 8005e04:	42403e3c 	.word	0x42403e3c
 8005e08:	48465844 	.word	0x48465844
	switch (data) {
 8005e0c:	283f      	cmp	r0, #63	; 0x3f
 8005e0e:	d006      	beq.n	8005e1e <HandleUartIT+0x4a>
 8005e10:	287e      	cmp	r0, #126	; 0x7e
 8005e12:	d1e5      	bne.n	8005de0 <HandleUartIT+0xc>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 8005e14:	2002      	movs	r0, #2
 8005e16:	e003      	b.n	8005e20 <HandleUartIT+0x4c>
          serial_rx_buffer[serial_rx_buffer_head] = data;
          serial_rx_buffer_head = next_head;
        }
      }
  }
}
 8005e18:	bc10      	pop	{r4}
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 8005e1a:	f7fe ba37 	b.w	800428c <mc_reset>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 8005e1e:	2001      	movs	r0, #1
}
 8005e20:	bc10      	pop	{r4}
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 8005e22:	f001 baad 	b.w	8007380 <system_set_exec_state_flag>
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 8005e26:	2008      	movs	r0, #8
 8005e28:	e7fa      	b.n	8005e20 <HandleUartIT+0x4c>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 8005e2a:	2020      	movs	r0, #32
 8005e2c:	e7f8      	b.n	8005e20 <HandleUartIT+0x4c>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 8005e2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ea4 <HandleUartIT+0xd0>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	069b      	lsls	r3, r3, #26
 8005e34:	d533      	bpl.n	8005e9e <HandleUartIT+0xca>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 8005e36:	2040      	movs	r0, #64	; 0x40
 8005e38:	e7f2      	b.n	8005e20 <HandleUartIT+0x4c>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 8005e3a:	2001      	movs	r0, #1
}
 8005e3c:	bc10      	pop	{r4}
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 8005e3e:	f001 bc4b 	b.w	80076d8 <system_set_exec_motion_override_flag>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 8005e42:	2002      	movs	r0, #2
 8005e44:	e7fa      	b.n	8005e3c <HandleUartIT+0x68>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 8005e46:	2004      	movs	r0, #4
 8005e48:	e7f8      	b.n	8005e3c <HandleUartIT+0x68>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 8005e4a:	2008      	movs	r0, #8
 8005e4c:	e7f6      	b.n	8005e3c <HandleUartIT+0x68>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 8005e4e:	2010      	movs	r0, #16
 8005e50:	e7f4      	b.n	8005e3c <HandleUartIT+0x68>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 8005e52:	2020      	movs	r0, #32
 8005e54:	e7f2      	b.n	8005e3c <HandleUartIT+0x68>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 8005e56:	2040      	movs	r0, #64	; 0x40
 8005e58:	e7f0      	b.n	8005e3c <HandleUartIT+0x68>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 8005e5a:	2080      	movs	r0, #128	; 0x80
 8005e5c:	e7ee      	b.n	8005e3c <HandleUartIT+0x68>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 8005e5e:	2001      	movs	r0, #1
}
 8005e60:	bc10      	pop	{r4}
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8005e62:	f001 bc43 	b.w	80076ec <system_set_exec_accessory_override_flag>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 8005e66:	2002      	movs	r0, #2
 8005e68:	e7fa      	b.n	8005e60 <HandleUartIT+0x8c>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 8005e6a:	2004      	movs	r0, #4
 8005e6c:	e7f8      	b.n	8005e60 <HandleUartIT+0x8c>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 8005e6e:	2008      	movs	r0, #8
 8005e70:	e7f6      	b.n	8005e60 <HandleUartIT+0x8c>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 8005e72:	2010      	movs	r0, #16
 8005e74:	e7f4      	b.n	8005e60 <HandleUartIT+0x8c>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 8005e76:	2020      	movs	r0, #32
 8005e78:	e7f2      	b.n	8005e60 <HandleUartIT+0x8c>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 8005e7a:	2040      	movs	r0, #64	; 0x40
 8005e7c:	e7f0      	b.n	8005e60 <HandleUartIT+0x8c>
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8005e7e:	2080      	movs	r0, #128	; 0x80
 8005e80:	e7ee      	b.n	8005e60 <HandleUartIT+0x8c>
        next_head = serial_rx_buffer_head + 1;
 8005e82:	4a09      	ldr	r2, [pc, #36]	; (8005ea8 <HandleUartIT+0xd4>)
        if (next_head != serial_rx_buffer_tail) {
 8005e84:	4c09      	ldr	r4, [pc, #36]	; (8005eac <HandleUartIT+0xd8>)
        next_head = serial_rx_buffer_head + 1;
 8005e86:	7811      	ldrb	r1, [r2, #0]
        if (next_head != serial_rx_buffer_tail) {
 8005e88:	7824      	ldrb	r4, [r4, #0]
        next_head = serial_rx_buffer_head + 1;
 8005e8a:	1c4b      	adds	r3, r1, #1
 8005e8c:	b2db      	uxtb	r3, r3
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 8005e8e:	2bfe      	cmp	r3, #254	; 0xfe
 8005e90:	bf08      	it	eq
 8005e92:	2300      	moveq	r3, #0
        if (next_head != serial_rx_buffer_tail) {
 8005e94:	42a3      	cmp	r3, r4
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8005e96:	bf1e      	ittt	ne
 8005e98:	4c05      	ldrne	r4, [pc, #20]	; (8005eb0 <HandleUartIT+0xdc>)
          serial_rx_buffer_head = next_head;
 8005e9a:	7013      	strbne	r3, [r2, #0]
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8005e9c:	5460      	strbne	r0, [r4, r1]
}
 8005e9e:	bc10      	pop	{r4}
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	200038d4 	.word	0x200038d4
 8005ea8:	20003320 	.word	0x20003320
 8005eac:	20003321 	.word	0x20003321
 8005eb0:	20003e71 	.word	0x20003e71

08005eb4 <serial_reset_read_buffer>:
}
#endif

void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 8005eb4:	4b02      	ldr	r3, [pc, #8]	; (8005ec0 <serial_reset_read_buffer+0xc>)
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	4b02      	ldr	r3, [pc, #8]	; (8005ec4 <serial_reset_read_buffer+0x10>)
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20003320 	.word	0x20003320
 8005ec4:	20003321 	.word	0x20003321

08005ec8 <settings_store_startup_line>:



// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4605      	mov	r5, r0
 8005ecc:	460c      	mov	r4, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 8005ece:	f7ff fae7 	bl	80054a0 <protocol_buffer_synchronize>
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8005ed2:	2351      	movs	r3, #81	; 0x51
 8005ed4:	fb03 f005 	mul.w	r0, r3, r5
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8005ed8:	4621      	mov	r1, r4
}
 8005eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8005ede:	2250      	movs	r2, #80	; 0x50
 8005ee0:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8005ee4:	f7fc bd2c 	b.w	8002940 <memcpy_to_eeprom_with_checksum>

08005ee8 <settings_store_build_info>:
// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8005ee8:	4601      	mov	r1, r0
 8005eea:	2250      	movs	r2, #80	; 0x50
 8005eec:	f240 30ae 	movw	r0, #942	; 0x3ae
 8005ef0:	f7fc bd26 	b.w	8002940 <memcpy_to_eeprom_with_checksum>

08005ef4 <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	460c      	mov	r4, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
 8005efa:	f7ff fad1 	bl	80054a0 <protocol_buffer_synchronize>
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8005efe:	2319      	movs	r3, #25
 8005f00:	fb03 f005 	mul.w	r0, r3, r5
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8005f04:	4621      	mov	r1, r4
}
 8005f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8005f0a:	2218      	movs	r2, #24
 8005f0c:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8005f10:	f7fc bd16 	b.w	8002940 <memcpy_to_eeprom_with_checksum>

08005f14 <write_global_settings>:


// Method to store Grbl global settings struct and version number into EEPROM
// NOTE: This function can only be called in IDLE state.
void write_global_settings()
{
 8005f14:	b508      	push	{r3, lr}
  eeprom_put_char(0, SETTINGS_VERSION);
 8005f16:	210a      	movs	r1, #10
 8005f18:	2000      	movs	r0, #0
 8005f1a:	f7fc fd0b 	bl	8002934 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
}
 8005f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8005f22:	2290      	movs	r2, #144	; 0x90
 8005f24:	4901      	ldr	r1, [pc, #4]	; (8005f2c <write_global_settings+0x18>)
 8005f26:	2001      	movs	r0, #1
 8005f28:	f7fc bd0a 	b.w	8002940 <memcpy_to_eeprom_with_checksum>
 8005f2c:	20003f70 	.word	0x20003f70

08005f30 <settings_restore>:


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 8005f30:	b530      	push	{r4, r5, lr}
 8005f32:	4604      	mov	r4, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8005f34:	07e0      	lsls	r0, r4, #31
void settings_restore(uint8_t restore_flag) {
 8005f36:	b087      	sub	sp, #28
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8005f38:	d546      	bpl.n	8005fc8 <settings_restore+0x98>
//    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    settings.fpulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8005f3a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005f3e:	4b3c      	ldr	r3, [pc, #240]	; (8006030 <settings_restore+0x100>)
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8005f40:	2101      	movs	r1, #1
    settings.fpulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8005f42:	661a      	str	r2, [r3, #96]	; 0x60
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    settings.dir_invert_mask = DEFAULT_DIRECTION_INVERT_MASK;
 8005f4a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;

    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;

    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8005f4e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8005f52:	4a38      	ldr	r2, [pc, #224]	; (8006034 <settings_restore+0x104>)
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8005f54:	f883 1066 	strb.w	r1, [r3, #102]	; 0x66
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8005f58:	67da      	str	r2, [r3, #124]	; 0x7c
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8005f5a:	4a37      	ldr	r2, [pc, #220]	; (8006038 <settings_restore+0x108>)
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8005f5c:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8005f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8005f64:	22fa      	movs	r2, #250	; 0xfa
 8005f66:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8005f6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8005f6e:	4933      	ldr	r1, [pc, #204]	; (800603c <settings_restore+0x10c>)
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8005f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8005f74:	6699      	str	r1, [r3, #104]	; 0x68
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8005f76:	4932      	ldr	r1, [pc, #200]	; (8006040 <settings_restore+0x110>)

    settings.analog_max = DEFAULT_ANALOG_MAX;
 8005f78:	4a32      	ldr	r2, [pc, #200]	; (8006044 <settings_restore+0x114>)
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8005f7a:	66d9      	str	r1, [r3, #108]	; 0x6c
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8005f7c:	4932      	ldr	r1, [pc, #200]	; (8006048 <settings_restore+0x118>)
    settings.analog_max = DEFAULT_ANALOG_MAX;
 8005f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8005f82:	6719      	str	r1, [r3, #112]	; 0x70
    if (DEFAULT_INVERT_ST_ENABLE) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
    if (DEFAULT_HARD_LIMIT_ENABLE) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
    if (DEFAULT_HOMING_ENABLE) { settings.flags |= BITFLAG_HOMING_ENABLE; }
    if (DEFAULT_SOFT_LIMIT_ENABLE) { settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE; }
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
    if (DEFAULT_INVERT_PROBE_PIN) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8005f84:	228c      	movs	r2, #140	; 0x8c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8005f86:	2100      	movs	r1, #0
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
    settings.eeacceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8005f88:	4830      	ldr	r0, [pc, #192]	; (800604c <settings_restore+0x11c>)
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8005f8a:	6759      	str	r1, [r3, #116]	; 0x74
    if (DEFAULT_INVERT_PROBE_PIN) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8005f8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    settings.eeacceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
    settings.eeacceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8005f90:	492f      	ldr	r1, [pc, #188]	; (8006050 <settings_restore+0x120>)
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8005f92:	4a30      	ldr	r2, [pc, #192]	; (8006054 <settings_restore+0x124>)
    settings.eeacceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8005f94:	6318      	str	r0, [r3, #48]	; 0x30
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8005f96:	601a      	str	r2, [r3, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8005f98:	605a      	str	r2, [r3, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8005f9a:	609a      	str	r2, [r3, #8]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8005f9c:	619a      	str	r2, [r3, #24]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8005f9e:	61da      	str	r2, [r3, #28]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8005fa0:	621a      	str	r2, [r3, #32]
    settings.eeacceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8005fa2:	6358      	str	r0, [r3, #52]	; 0x34
    settings.eeacceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8005fa4:	6398      	str	r0, [r3, #56]	; 0x38
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8005fa6:	6499      	str	r1, [r3, #72]	; 0x48
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8005fa8:	64d9      	str	r1, [r3, #76]	; 0x4c
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8005faa:	6519      	str	r1, [r3, #80]	; 0x50
      settings.eeacceleration[B_AXIS] = DEFAULT_B_ACCELERATION;
      settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
      settings.max_travel[B_AXIS] = (-DEFAULT_B_MAX_TRAVEL);
    #endif
    #if ( defined(STM32F1_6) || defined(STM32F4_6) )
      settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8005fac:	60da      	str	r2, [r3, #12]
      settings.steps_per_mm[B_AXIS] = DEFAULT_B_STEPS_PER_MM;
 8005fae:	611a      	str	r2, [r3, #16]
      settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
 8005fb0:	615a      	str	r2, [r3, #20]
      settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8005fb2:	625a      	str	r2, [r3, #36]	; 0x24
      settings.max_rate[B_AXIS] = DEFAULT_B_MAX_RATE;
 8005fb4:	629a      	str	r2, [r3, #40]	; 0x28
      settings.max_rate[C_AXIS] = DEFAULT_C_MAX_RATE;
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      settings.eeacceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8005fb8:	63d8      	str	r0, [r3, #60]	; 0x3c
      settings.eeacceleration[B_AXIS] = DEFAULT_B_ACCELERATION;
 8005fba:	6418      	str	r0, [r3, #64]	; 0x40
      settings.eeacceleration[C_AXIS] = DEFAULT_C_ACCELERATION;
 8005fbc:	6458      	str	r0, [r3, #68]	; 0x44
      settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8005fbe:	6559      	str	r1, [r3, #84]	; 0x54
      settings.max_travel[B_AXIS] = (-DEFAULT_B_MAX_TRAVEL);
 8005fc0:	6599      	str	r1, [r3, #88]	; 0x58
      settings.max_travel[C_AXIS] = (-DEFAULT_C_MAX_TRAVEL);
 8005fc2:	65d9      	str	r1, [r3, #92]	; 0x5c
    #endif

    write_global_settings();
 8005fc4:	f7ff ffa6 	bl	8005f14 <write_global_settings>
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 8005fc8:	07a1      	lsls	r1, r4, #30
 8005fca:	d50c      	bpl.n	8005fe6 <settings_restore+0xb6>
    uint8_t idx;
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
 8005fcc:	2218      	movs	r2, #24
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4668      	mov	r0, sp
 8005fd2:	f001 fc9e 	bl	8007912 <memset>
 8005fd6:	2500      	movs	r5, #0
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8005fd8:	b2e8      	uxtb	r0, r5
 8005fda:	4669      	mov	r1, sp
 8005fdc:	3501      	adds	r5, #1
 8005fde:	f7ff ff89 	bl	8005ef4 <settings_write_coord_data>
 8005fe2:	2d08      	cmp	r5, #8
 8005fe4:	d1f8      	bne.n	8005fd8 <settings_restore+0xa8>
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8005fe6:	0762      	lsls	r2, r4, #29
 8005fe8:	d513      	bpl.n	8006012 <settings_restore+0xe2>
    #if N_STARTUP_LINE > 0
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8005fea:	2100      	movs	r1, #0
 8005fec:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005ff0:	f7fc fca0 	bl	8002934 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f240 3001 	movw	r0, #769	; 0x301
 8005ffa:	f7fc fc9b 	bl	8002934 <eeprom_put_char>
    #endif
    #if N_STARTUP_LINE > 1
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8005ffe:	2100      	movs	r1, #0
 8006000:	f240 3051 	movw	r0, #849	; 0x351
 8006004:	f7fc fc96 	bl	8002934 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8006008:	2100      	movs	r1, #0
 800600a:	f240 3052 	movw	r0, #850	; 0x352
 800600e:	f7fc fc91 	bl	8002934 <eeprom_put_char>
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 8006012:	0723      	lsls	r3, r4, #28
 8006014:	d509      	bpl.n	800602a <settings_restore+0xfa>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8006016:	2100      	movs	r1, #0
 8006018:	f240 30ae 	movw	r0, #942	; 0x3ae
 800601c:	f7fc fc8a 	bl	8002934 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8006020:	2100      	movs	r1, #0
 8006022:	f240 30af 	movw	r0, #943	; 0x3af
 8006026:	f7fc fc85 	bl	8002934 <eeprom_put_char>
  }
}
 800602a:	b007      	add	sp, #28
 800602c:	bd30      	pop	{r4, r5, pc}
 800602e:	bf00      	nop
 8006030:	20003f70 	.word	0x20003f70
 8006034:	41c80000 	.word	0x41c80000
 8006038:	43fa0000 	.word	0x43fa0000
 800603c:	3c23d70a 	.word	0x3c23d70a
 8006040:	3b03126f 	.word	0x3b03126f
 8006044:	461c4000 	.word	0x461c4000
 8006048:	459c4000 	.word	0x459c4000
 800604c:	4bdbba00 	.word	0x4bdbba00
 8006050:	c3480000 	.word	0xc3480000
 8006054:	46c35000 	.word	0x46c35000

08006058 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	460d      	mov	r5, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 800605c:	2151      	movs	r1, #81	; 0x51
 800605e:	4341      	muls	r1, r0
{
 8006060:	4606      	mov	r6, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8006062:	2250      	movs	r2, #80	; 0x50
 8006064:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8006068:	4628      	mov	r0, r5
 800606a:	f7fc fc83 	bl	8002974 <memcpy_from_eeprom_with_checksum>
 800606e:	4604      	mov	r4, r0
 8006070:	b930      	cbnz	r0, 8006080 <settings_read_startup_line+0x28>
    // Reset line with default value
    line[0] = 0; // Empty line
 8006072:	7028      	strb	r0, [r5, #0]
    settings_store_startup_line(n, line);
 8006074:	4629      	mov	r1, r5
 8006076:	4630      	mov	r0, r6
 8006078:	f7ff ff26 	bl	8005ec8 <settings_store_startup_line>
    return(false);
 800607c:	4620      	mov	r0, r4
 800607e:	bd70      	pop	{r4, r5, r6, pc}
  }
  return(true);
 8006080:	2001      	movs	r0, #1
}
 8006082:	bd70      	pop	{r4, r5, r6, pc}

08006084 <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 8006084:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8006086:	2250      	movs	r2, #80	; 0x50
 8006088:	f240 31ae 	movw	r1, #942	; 0x3ae
{
 800608c:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 800608e:	f7fc fc71 	bl	8002974 <memcpy_from_eeprom_with_checksum>
 8006092:	4604      	mov	r4, r0
 8006094:	b928      	cbnz	r0, 80060a2 <settings_read_build_info+0x1e>
    // Reset line with default value
    line[0] = 0; // Empty line
 8006096:	7028      	strb	r0, [r5, #0]
    settings_store_build_info(line);
 8006098:	4628      	mov	r0, r5
 800609a:	f7ff ff25 	bl	8005ee8 <settings_store_build_info>
    return(false);
 800609e:	4620      	mov	r0, r4
 80060a0:	bd38      	pop	{r3, r4, r5, pc}
  }
  return(true);
 80060a2:	2001      	movs	r0, #1
}
 80060a4:	bd38      	pop	{r3, r4, r5, pc}

080060a6 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 80060a6:	b570      	push	{r4, r5, r6, lr}
 80060a8:	460c      	mov	r4, r1
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 80060aa:	2119      	movs	r1, #25
 80060ac:	4341      	muls	r1, r0
{
 80060ae:	4606      	mov	r6, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 80060b0:	2218      	movs	r2, #24
 80060b2:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80060b6:	4620      	mov	r0, r4
 80060b8:	f7fc fc5c 	bl	8002974 <memcpy_from_eeprom_with_checksum>
 80060bc:	4605      	mov	r5, r0
 80060be:	b960      	cbnz	r0, 80060da <settings_read_coord_data+0x34>
    // Reset with default zero vector
    //clear_vector_float(coord_data);
		coord_data[X_AXIS] = 0.0f;
 80060c0:	2300      	movs	r3, #0
    #if ( defined(STM32F1_6) || defined(STM32F4_6) )
      coord_data[A_AXIS] = 0.0f;
      coord_data[B_AXIS] = 0.0f;
      coord_data[C_AXIS] = 0.0f;
    #endif
    settings_write_coord_data(coord_select,coord_data);
 80060c2:	4630      	mov	r0, r6
		coord_data[X_AXIS] = 0.0f;
 80060c4:	6023      	str	r3, [r4, #0]
		coord_data[Y_AXIS] = 0.0f;
 80060c6:	6063      	str	r3, [r4, #4]
		coord_data[Z_AXIS] = 0.0f;
 80060c8:	60a3      	str	r3, [r4, #8]
      coord_data[A_AXIS] = 0.0f;
 80060ca:	60e3      	str	r3, [r4, #12]
      coord_data[B_AXIS] = 0.0f;
 80060cc:	6123      	str	r3, [r4, #16]
      coord_data[C_AXIS] = 0.0f;
 80060ce:	6163      	str	r3, [r4, #20]
    settings_write_coord_data(coord_select,coord_data);
 80060d0:	4621      	mov	r1, r4
 80060d2:	f7ff ff0f 	bl	8005ef4 <settings_write_coord_data>
    return(false);
 80060d6:	4628      	mov	r0, r5
 80060d8:	bd70      	pop	{r4, r5, r6, pc}
  }
  return(true);
 80060da:	2001      	movs	r0, #1
}
 80060dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080060e0 <read_global_settings>:


// Reads Grbl global settings struct from EEPROM.
uint8_t read_global_settings() {
 80060e0:	b508      	push	{r3, lr}
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
 80060e2:	2000      	movs	r0, #0
 80060e4:	f7fc fc20 	bl	8002928 <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 80060e8:	280a      	cmp	r0, #10
 80060ea:	d108      	bne.n	80060fe <read_global_settings+0x1e>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 80060ec:	2290      	movs	r2, #144	; 0x90
 80060ee:	2101      	movs	r1, #1
 80060f0:	4804      	ldr	r0, [pc, #16]	; (8006104 <read_global_settings+0x24>)
 80060f2:	f7fc fc3f 	bl	8002974 <memcpy_from_eeprom_with_checksum>
      return(false);
    }
  } else {
    return(false);
  }
  return(true);
 80060f6:	3000      	adds	r0, #0
 80060f8:	bf18      	it	ne
 80060fa:	2001      	movne	r0, #1
 80060fc:	bd08      	pop	{r3, pc}
    return(false);
 80060fe:	2000      	movs	r0, #0
}
 8006100:	bd08      	pop	{r3, pc}
 8006102:	bf00      	nop
 8006104:	20003f70 	.word	0x20003f70

08006108 <settings_store_global_setting>:


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	460d      	mov	r5, r1
 800610c:	4604      	mov	r4, r0
  if (value < 0.0) { return(STATUS_NEGATIVE_VALUE); }
 800610e:	2100      	movs	r1, #0
 8006110:	4628      	mov	r0, r5
 8006112:	f7fa ffd5 	bl	80010c0 <__aeabi_fcmplt>
 8006116:	2800      	cmp	r0, #0
 8006118:	f040 80f5 	bne.w	8006306 <settings_store_global_setting+0x1fe>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 800611c:	2c63      	cmp	r4, #99	; 0x63
 800611e:	d92c      	bls.n	800617a <settings_store_global_setting+0x72>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 8006120:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
        parameter -= AXIS_SETTINGS_INCREMENT;
 8006124:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8006126:	2b05      	cmp	r3, #5
 8006128:	b2c2      	uxtb	r2, r0
 800612a:	d81d      	bhi.n	8006168 <settings_store_global_setting+0x60>
        switch (set_idx) {
 800612c:	2a02      	cmp	r2, #2
 800612e:	4e7a      	ldr	r6, [pc, #488]	; (8006318 <settings_store_global_setting+0x210>)
 8006130:	d007      	beq.n	8006142 <settings_store_global_setting+0x3a>
 8006132:	2a03      	cmp	r2, #3
 8006134:	d014      	beq.n	8006160 <settings_store_global_setting+0x58>
 8006136:	2a01      	cmp	r2, #1
            settings.max_rate[parameter] = value;
 8006138:	bf08      	it	eq
 800613a:	3306      	addeq	r3, #6
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 800613c:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
 8006140:	e00a      	b.n	8006158 <settings_store_global_setting+0x50>
          case 2: settings.eeacceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8006142:	4976      	ldr	r1, [pc, #472]	; (800631c <settings_store_global_setting+0x214>)
 8006144:	4628      	mov	r0, r5
 8006146:	f103 040c 	add.w	r4, r3, #12
 800614a:	f7fa fe1b 	bl	8000d84 <__aeabi_fmul>
 800614e:	4973      	ldr	r1, [pc, #460]	; (800631c <settings_store_global_setting+0x214>)
 8006150:	f7fa fe18 	bl	8000d84 <__aeabi_fmul>
 8006154:	f846 0024 	str.w	r0, [r6, r4, lsl #2]

      default:
        return(STATUS_INVALID_STATEMENT);
    }
  }
  write_global_settings();
 8006158:	f7ff fedc 	bl	8005f14 <write_global_settings>
  return(STATUS_OK);
 800615c:	2000      	movs	r0, #0
 800615e:	bd70      	pop	{r4, r5, r6, pc}
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 8006160:	3312      	adds	r3, #18
 8006162:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8006166:	e7e9      	b.n	800613c <settings_store_global_setting+0x34>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8006168:	2b09      	cmp	r3, #9
 800616a:	f240 80ce 	bls.w	800630a <settings_store_global_setting+0x202>
 800616e:	3001      	adds	r0, #1
 8006170:	2804      	cmp	r0, #4
 8006172:	f000 80ca 	beq.w	800630a <settings_store_global_setting+0x202>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8006176:	3b0a      	subs	r3, #10
 8006178:	e7d4      	b.n	8006124 <settings_store_global_setting+0x1c>
    uint8_t int_value = trunc(value);
 800617a:	4628      	mov	r0, r5
 800617c:	f7fa f958 	bl	8000430 <__aeabi_f2d>
 8006180:	f002 f98e 	bl	80084a0 <trunc>
 8006184:	f7fa fc80 	bl	8000a88 <__aeabi_d2uiz>
 8006188:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 800618a:	2c28      	cmp	r4, #40	; 0x28
 800618c:	f200 80bd 	bhi.w	800630a <settings_store_global_setting+0x202>
 8006190:	e8df f004 	tbb	[pc, r4]
 8006194:	29231f15 	.word	0x29231f15
 8006198:	bb43392d 	.word	0xbb43392d
 800619c:	5652bbbb 	.word	0x5652bbbb
 80061a0:	bbbb5c59 	.word	0xbbbb5c59
 80061a4:	bbbbbbbb 	.word	0xbbbbbbbb
 80061a8:	8e84766a 	.word	0x8e84766a
 80061ac:	9d999592 	.word	0x9d999592
 80061b0:	a6a1bbbb 	.word	0xa6a1bbbb
 80061b4:	bbbbbba9 	.word	0xbbbbbba9
 80061b8:	bbbbbbbb 	.word	0xbbbbbbbb
 80061bc:	b3          	.byte	0xb3
 80061bd:	00          	.byte	0x00
        if (value < STATUS_SETTING_STEP_PULSE_MIN_LIMIT) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 80061be:	4958      	ldr	r1, [pc, #352]	; (8006320 <settings_store_global_setting+0x218>)
 80061c0:	4628      	mov	r0, r5
 80061c2:	f7fa ff7d 	bl	80010c0 <__aeabi_fcmplt>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f040 80a1 	bne.w	800630e <settings_store_global_setting+0x206>
        settings.fpulse_microseconds = value; break;
 80061cc:	4b52      	ldr	r3, [pc, #328]	; (8006318 <settings_store_global_setting+0x210>)
 80061ce:	661d      	str	r5, [r3, #96]	; 0x60
 80061d0:	e7c2      	b.n	8006158 <settings_store_global_setting+0x50>
      case 1: settings.stepper_idle_lock_time = int_value; break;
 80061d2:	4b51      	ldr	r3, [pc, #324]	; (8006318 <settings_store_global_setting+0x210>)
 80061d4:	f883 0066 	strb.w	r0, [r3, #102]	; 0x66
 80061d8:	e7be      	b.n	8006158 <settings_store_global_setting+0x50>
        settings.step_invert_mask = int_value;
 80061da:	4b4f      	ldr	r3, [pc, #316]	; (8006318 <settings_store_global_setting+0x210>)
 80061dc:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 80061e0:	f000 fbae 	bl	8006940 <st_generate_step_dir_invert_masks>
        break;
 80061e4:	e7b8      	b.n	8006158 <settings_store_global_setting+0x50>
        settings.dir_invert_mask = int_value;
 80061e6:	4b4c      	ldr	r3, [pc, #304]	; (8006318 <settings_store_global_setting+0x210>)
 80061e8:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
 80061ec:	e7f8      	b.n	80061e0 <settings_store_global_setting+0xd8>
 80061ee:	4b4a      	ldr	r3, [pc, #296]	; (8006318 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 80061f0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80061f4:	b120      	cbz	r0, 8006200 <settings_store_global_setting+0xf8>
 80061f6:	f042 0204 	orr.w	r2, r2, #4
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 80061fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80061fe:	e7ab      	b.n	8006158 <settings_store_global_setting+0x50>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8006200:	f022 0204 	bic.w	r2, r2, #4
 8006204:	e7f9      	b.n	80061fa <settings_store_global_setting+0xf2>
 8006206:	4b44      	ldr	r3, [pc, #272]	; (8006318 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8006208:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800620c:	b110      	cbz	r0, 8006214 <settings_store_global_setting+0x10c>
 800620e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006212:	e7f2      	b.n	80061fa <settings_store_global_setting+0xf2>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 8006214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006218:	e7ef      	b.n	80061fa <settings_store_global_setting+0xf2>
 800621a:	4b3f      	ldr	r3, [pc, #252]	; (8006318 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 800621c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8006220:	b138      	cbz	r0, 8006232 <settings_store_global_setting+0x12a>
 8006222:	f062 027f 	orn	r2, r2, #127	; 0x7f
        probe_configure_invert_mask(false);
 8006226:	2000      	movs	r0, #0
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8006228:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        probe_configure_invert_mask(false);
 800622c:	f7fe fde0 	bl	8004df0 <probe_configure_invert_mask>
        break;
 8006230:	e792      	b.n	8006158 <settings_store_global_setting+0x50>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8006232:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006236:	e7f6      	b.n	8006226 <settings_store_global_setting+0x11e>
      case 10: settings.status_report_mask = int_value; break;
 8006238:	4b37      	ldr	r3, [pc, #220]	; (8006318 <settings_store_global_setting+0x210>)
 800623a:	f883 0067 	strb.w	r0, [r3, #103]	; 0x67
 800623e:	e78b      	b.n	8006158 <settings_store_global_setting+0x50>
      case 11: settings.junction_deviation = value; break;
 8006240:	4b35      	ldr	r3, [pc, #212]	; (8006318 <settings_store_global_setting+0x210>)
 8006242:	669d      	str	r5, [r3, #104]	; 0x68
 8006244:	e788      	b.n	8006158 <settings_store_global_setting+0x50>
      case 12: settings.arc_tolerance = value; break;
 8006246:	4b34      	ldr	r3, [pc, #208]	; (8006318 <settings_store_global_setting+0x210>)
 8006248:	66dd      	str	r5, [r3, #108]	; 0x6c
 800624a:	e785      	b.n	8006158 <settings_store_global_setting+0x50>
 800624c:	4b32      	ldr	r3, [pc, #200]	; (8006318 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 800624e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8006252:	b130      	cbz	r0, 8006262 <settings_store_global_setting+0x15a>
 8006254:	f042 0201 	orr.w	r2, r2, #1
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8006258:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 800625c:	f001 f84c 	bl	80072f8 <system_flag_wco_change>
        break;
 8006260:	e77a      	b.n	8006158 <settings_store_global_setting+0x50>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	e7f7      	b.n	8006258 <settings_store_global_setting+0x150>
 8006268:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <settings_store_global_setting+0x210>)
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 800626a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
        if (int_value) {
 800626e:	b120      	cbz	r0, 800627a <settings_store_global_setting+0x172>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8006270:	06d1      	lsls	r1, r2, #27
 8006272:	d54e      	bpl.n	8006312 <settings_store_global_setting+0x20a>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 8006274:	f042 0220 	orr.w	r2, r2, #32
 8006278:	e7bf      	b.n	80061fa <settings_store_global_setting+0xf2>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 800627a:	f022 0220 	bic.w	r2, r2, #32
 800627e:	e7bc      	b.n	80061fa <settings_store_global_setting+0xf2>
 8006280:	4b25      	ldr	r3, [pc, #148]	; (8006318 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 8006282:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8006286:	b130      	cbz	r0, 8006296 <settings_store_global_setting+0x18e>
 8006288:	f042 0208 	orr.w	r2, r2, #8
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 800628c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8006290:	f7fd fbde 	bl	8003a50 <limits_init>
        break;
 8006294:	e760      	b.n	8006158 <settings_store_global_setting+0x50>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8006296:	f022 0208 	bic.w	r2, r2, #8
 800629a:	e7f7      	b.n	800628c <settings_store_global_setting+0x184>
 800629c:	4b1e      	ldr	r3, [pc, #120]	; (8006318 <settings_store_global_setting+0x210>)
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 800629e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80062a2:	b110      	cbz	r0, 80062aa <settings_store_global_setting+0x1a2>
 80062a4:	f042 0210 	orr.w	r2, r2, #16
 80062a8:	e7a7      	b.n	80061fa <settings_store_global_setting+0xf2>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 80062aa:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80062ae:	e7a4      	b.n	80061fa <settings_store_global_setting+0xf2>
      case 23: settings.homing_dir_mask = int_value; break;
 80062b0:	4b19      	ldr	r3, [pc, #100]	; (8006318 <settings_store_global_setting+0x210>)
 80062b2:	f883 0079 	strb.w	r0, [r3, #121]	; 0x79
 80062b6:	e74f      	b.n	8006158 <settings_store_global_setting+0x50>
      case 24: settings.homing_feed_rate = value; break;
 80062b8:	4b17      	ldr	r3, [pc, #92]	; (8006318 <settings_store_global_setting+0x210>)
 80062ba:	67dd      	str	r5, [r3, #124]	; 0x7c
 80062bc:	e74c      	b.n	8006158 <settings_store_global_setting+0x50>
      case 25: settings.homing_seek_rate = value; break;
 80062be:	4b16      	ldr	r3, [pc, #88]	; (8006318 <settings_store_global_setting+0x210>)
 80062c0:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
 80062c4:	e748      	b.n	8006158 <settings_store_global_setting+0x50>
      case 26: settings.homing_debounce_delay = int_value; break;
 80062c6:	4b14      	ldr	r3, [pc, #80]	; (8006318 <settings_store_global_setting+0x210>)
 80062c8:	f8a3 0084 	strh.w	r0, [r3, #132]	; 0x84
 80062cc:	e744      	b.n	8006158 <settings_store_global_setting+0x50>
      case 27: settings.homing_pulloff = value; break;
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <settings_store_global_setting+0x210>)
 80062d0:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
 80062d4:	e740      	b.n	8006158 <settings_store_global_setting+0x50>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 80062d6:	4b10      	ldr	r3, [pc, #64]	; (8006318 <settings_store_global_setting+0x210>)
 80062d8:	671d      	str	r5, [r3, #112]	; 0x70
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 80062da:	f000 f889 	bl	80063f0 <spindle_init>
 80062de:	e73b      	b.n	8006158 <settings_store_global_setting+0x50>
 80062e0:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <settings_store_global_setting+0x210>)
 80062e2:	675d      	str	r5, [r3, #116]	; 0x74
 80062e4:	e7f9      	b.n	80062da <settings_store_global_setting+0x1d2>
 80062e6:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <settings_store_global_setting+0x210>)
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 80062e8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80062ec:	b110      	cbz	r0, 80062f4 <settings_store_global_setting+0x1ec>
 80062ee:	f042 0202 	orr.w	r2, r2, #2
 80062f2:	e782      	b.n	80061fa <settings_store_global_setting+0xf2>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 80062f4:	f022 0202 	bic.w	r2, r2, #2
 80062f8:	e77f      	b.n	80061fa <settings_store_global_setting+0xf2>
      case 40: settings.analog_max = value; outputs_analog_init(); break; // Re-initialize analog outputs calibration
 80062fa:	4b07      	ldr	r3, [pc, #28]	; (8006318 <settings_store_global_setting+0x210>)
 80062fc:	f8c3 508c 	str.w	r5, [r3, #140]	; 0x8c
 8006300:	f001 fa78 	bl	80077f4 <outputs_analog_init>
 8006304:	e728      	b.n	8006158 <settings_store_global_setting+0x50>
  if (value < 0.0) { return(STATUS_NEGATIVE_VALUE); }
 8006306:	2004      	movs	r0, #4
 8006308:	bd70      	pop	{r4, r5, r6, pc}
        return(STATUS_INVALID_STATEMENT);
 800630a:	2003      	movs	r0, #3
 800630c:	bd70      	pop	{r4, r5, r6, pc}
        if (value < STATUS_SETTING_STEP_PULSE_MIN_LIMIT) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 800630e:	2006      	movs	r0, #6
 8006310:	bd70      	pop	{r4, r5, r6, pc}
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8006312:	200a      	movs	r0, #10
}
 8006314:	bd70      	pop	{r4, r5, r6, pc}
 8006316:	bf00      	nop
 8006318:	20003f70 	.word	0x20003f70
 800631c:	42700000 	.word	0x42700000
 8006320:	3c23d70a 	.word	0x3c23d70a

08006324 <acceleration_scaling>:


#ifdef ENABLE_ACCEL_SCALING
void acceleration_scaling(uint8_t axis_index, float *pQscale)
{
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
	float scale = *pQscale;
 8006326:	680d      	ldr	r5, [r1, #0]
{
 8006328:	4604      	mov	r4, r0

	protocol_buffer_synchronize();
 800632a:	f7ff f8b9 	bl	80054a0 <protocol_buffer_synchronize>

	if (scale <= 0.0f) return;
 800632e:	2100      	movs	r1, #0
 8006330:	4628      	mov	r0, r5
 8006332:	f7fa fecf 	bl	80010d4 <__aeabi_fcmple>
 8006336:	bb38      	cbnz	r0, 8006388 <acceleration_scaling+0x64>
	if (scale > 1.0f) scale = 1.0f;
 8006338:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800633c:	4628      	mov	r0, r5
 800633e:	f7fa fedd 	bl	80010fc <__aeabi_fcmpgt>
 8006342:	b108      	cbz	r0, 8006348 <acceleration_scaling+0x24>
 8006344:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000

	if (axis_index == 0xFF) //all axis
 8006348:	2cff      	cmp	r4, #255	; 0xff
 800634a:	d10e      	bne.n	800636a <acceleration_scaling+0x46>
 800634c:	2400      	movs	r4, #0
 800634e:	4e0f      	ldr	r6, [pc, #60]	; (800638c <acceleration_scaling+0x68>)
	{
	  for (i=0; i<N_AXIS; i++)
	  {
	  	adjustments.accel_scaling[i] = scale;
	  	adjustments.accel_adjusted[i] = settings.eeacceleration[i] * scale;
 8006350:	4f0f      	ldr	r7, [pc, #60]	; (8006390 <acceleration_scaling+0x6c>)
 8006352:	19e3      	adds	r3, r4, r7
	  	adjustments.accel_scaling[i] = scale;
 8006354:	f846 5f04 	str.w	r5, [r6, #4]!
	  	adjustments.accel_adjusted[i] = settings.eeacceleration[i] * scale;
 8006358:	4629      	mov	r1, r5
 800635a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800635c:	f7fa fd12 	bl	8000d84 <__aeabi_fmul>
 8006360:	3404      	adds	r4, #4
	  for (i=0; i<N_AXIS; i++)
 8006362:	2c18      	cmp	r4, #24
	  	adjustments.accel_adjusted[i] = settings.eeacceleration[i] * scale;
 8006364:	61b0      	str	r0, [r6, #24]
	  for (i=0; i<N_AXIS; i++)
 8006366:	d1f4      	bne.n	8006352 <acceleration_scaling+0x2e>
 8006368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  }
	}
	else if (axis_index < N_AXIS)
 800636a:	2c05      	cmp	r4, #5
 800636c:	d80c      	bhi.n	8006388 <acceleration_scaling+0x64>
	{
  	adjustments.accel_scaling[axis_index] = scale;
 800636e:	4e09      	ldr	r6, [pc, #36]	; (8006394 <acceleration_scaling+0x70>)
  	adjustments.accel_adjusted[axis_index] = settings.eeacceleration[axis_index] * scale;
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <acceleration_scaling+0x6c>)
  	adjustments.accel_scaling[axis_index] = scale;
 8006372:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
  	adjustments.accel_adjusted[axis_index] = settings.eeacceleration[axis_index] * scale;
 8006376:	1da7      	adds	r7, r4, #6
 8006378:	340c      	adds	r4, #12
 800637a:	4629      	mov	r1, r5
 800637c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006380:	f7fa fd00 	bl	8000d84 <__aeabi_fmul>
 8006384:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
 8006388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800638a:	bf00      	nop
 800638c:	20003ffc 	.word	0x20003ffc
 8006390:	20003f70 	.word	0x20003f70
 8006394:	20004000 	.word	0x20004000

08006398 <settings_init>:
#endif



// Initialize the config subsystem
void settings_init() {
 8006398:	b510      	push	{r4, lr}
  if(!read_global_settings()) {
 800639a:	f7ff fea1 	bl	80060e0 <read_global_settings>
 800639e:	b938      	cbnz	r0, 80063b0 <settings_init+0x18>
    report_status_message(STATUS_SETTING_READ_FAIL);
 80063a0:	2007      	movs	r0, #7
 80063a2:	f7ff f8d3 	bl	800554c <report_status_message>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
 80063a6:	20ff      	movs	r0, #255	; 0xff
 80063a8:	f7ff fdc2 	bl	8005f30 <settings_restore>
    report_grbl_settings();
 80063ac:	f7ff f946 	bl	800563c <report_grbl_settings>
void settings_init() {
 80063b0:	2300      	movs	r3, #0
  }
#ifdef ENABLE_ACCEL_SCALING
  uint8_t i;
  for (i=0; i<N_AXIS; i++)
  {
  	adjustments.accel_scaling[i] = 1.0f;
 80063b2:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80063b6:	4a05      	ldr	r2, [pc, #20]	; (80063cc <settings_init+0x34>)
  	adjustments.accel_adjusted[i] = settings.eeacceleration[i];
 80063b8:	4805      	ldr	r0, [pc, #20]	; (80063d0 <settings_init+0x38>)
 80063ba:	1819      	adds	r1, r3, r0
 80063bc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80063be:	3304      	adds	r3, #4
  	adjustments.accel_scaling[i] = 1.0f;
 80063c0:	f842 4f04 	str.w	r4, [r2, #4]!
  for (i=0; i<N_AXIS; i++)
 80063c4:	2b18      	cmp	r3, #24
  	adjustments.accel_adjusted[i] = settings.eeacceleration[i];
 80063c6:	6191      	str	r1, [r2, #24]
  for (i=0; i<N_AXIS; i++)
 80063c8:	d1f7      	bne.n	80063ba <settings_init+0x22>
  }
#endif
}
 80063ca:	bd10      	pop	{r4, pc}
 80063cc:	20003ffc 	.word	0x20003ffc
 80063d0:	20003f70 	.word	0x20003f70

080063d4 <spindle_get_state>:
 80063d4:	4b01      	ldr	r3, [pc, #4]	; (80063dc <spindle_get_state+0x8>)
    }
	#endif
#endif

	return(SPINDLE_STATE_DISABLE);
}
 80063d6:	2001      	movs	r0, #1
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	4770      	bx	lr
 80063dc:	40010c00 	.word	0x40010c00

080063e0 <spindle_stop>:
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80063e0:	4a02      	ldr	r2, [pc, #8]	; (80063ec <spindle_stop+0xc>)
 80063e2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80063e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063e8:	6453      	str	r3, [r2, #68]	; 0x44
 80063ea:	4770      	bx	lr
 80063ec:	40012c00 	.word	0x40012c00

080063f0 <spindle_init>:
{
 80063f0:	b508      	push	{r3, lr}
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 80063f2:	4b0e      	ldr	r3, [pc, #56]	; (800642c <spindle_init+0x3c>)
 80063f4:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80063f6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80063f8:	f7fa fbba 	bl	8000b70 <__aeabi_fsub>
 80063fc:	4601      	mov	r1, r0
 80063fe:	480c      	ldr	r0, [pc, #48]	; (8006430 <spindle_init+0x40>)
 8006400:	f7fa fd74 	bl	8000eec <__aeabi_fdiv>
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <spindle_init+0x44>)
 8006406:	6018      	str	r0, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <spindle_init+0x48>)
 800640a:	6a1a      	ldr	r2, [r3, #32]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006412:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006418:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f042 0201 	orr.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]
}
 8006422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  spindle_stop();
 8006426:	f7ff bfdb 	b.w	80063e0 <spindle_stop>
 800642a:	bf00      	nop
 800642c:	20003f70 	.word	0x20003f70
 8006430:	45e0f000 	.word	0x45e0f000
 8006434:	20003324 	.word	0x20003324
 8006438:	40012c00 	.word	0x40012c00

0800643c <spindle_set_speed>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 800643c:	4b05      	ldr	r3, [pc, #20]	; (8006454 <spindle_set_speed+0x18>)
 800643e:	6358      	str	r0, [r3, #52]	; 0x34
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        #else
          SetSpindleEnablebit();
        #endif
      }
    #else
      if (pwm_value == SPINDLE_PWM_OFF_VALUE)
 8006442:	b918      	cbnz	r0, 800644c <spindle_set_speed+0x10>
 8006444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006448:	645a      	str	r2, [r3, #68]	; 0x44
 800644a:	4770      	bx	lr
 800644c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006450:	e7fa      	b.n	8006448 <spindle_set_speed+0xc>
 8006452:	bf00      	nop
 8006454:	40012c00 	.word	0x40012c00

08006458 <spindle_compute_pwm_value>:
    
  #else 
  
    // Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
    SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm)
    {
 8006458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    	SPINDLE_PWM_TYPE pwm_value;
      rpm *= (0.010*sys.spindle_speed_ovr); // Scale by spindle speed override value.
      // Calculate PWM register value based on rpm max/min settings and programmed rpm.
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800645c:	4b2a      	ldr	r3, [pc, #168]	; (8006508 <spindle_compute_pwm_value+0xb0>)
    {
 800645e:	4605      	mov	r5, r0
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006460:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 8006462:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 8006464:	4630      	mov	r0, r6
 8006466:	4639      	mov	r1, r7
 8006468:	f7fa fe3e 	bl	80010e8 <__aeabi_fcmpge>
 800646c:	4c27      	ldr	r4, [pc, #156]	; (800650c <spindle_compute_pwm_value+0xb4>)
 800646e:	b9c8      	cbnz	r0, 80064a4 <spindle_compute_pwm_value+0x4c>
      rpm *= (0.010*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8006470:	7aa0      	ldrb	r0, [r4, #10]
 8006472:	f7f9 ffcb 	bl	800040c <__aeabi_i2d>
 8006476:	a322      	add	r3, pc, #136	; (adr r3, 8006500 <spindle_compute_pwm_value+0xa8>)
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f7fa f82c 	bl	80004d8 <__aeabi_dmul>
 8006480:	4680      	mov	r8, r0
 8006482:	4628      	mov	r0, r5
 8006484:	4689      	mov	r9, r1
 8006486:	f7f9 ffd3 	bl	8000430 <__aeabi_f2d>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4640      	mov	r0, r8
 8006490:	4649      	mov	r1, r9
 8006492:	f7fa f821 	bl	80004d8 <__aeabi_dmul>
 8006496:	f7fa fb17 	bl	8000ac8 <__aeabi_d2f>
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800649a:	4639      	mov	r1, r7
      rpm *= (0.010*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 800649c:	4605      	mov	r5, r0
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800649e:	f7fa fe23 	bl	80010e8 <__aeabi_fcmpge>
 80064a2:	b120      	cbz	r0, 80064ae <spindle_compute_pwm_value+0x56>
        // No PWM range possible. Set simple on/off spindle control pin state.
        sys.spindle_speed = settings.rpm_max;
 80064a4:	6127      	str	r7, [r4, #16]
        pwm_value = SPINDLE_PWM_MAX_VALUE;
 80064a6:	f641 401f 	movw	r0, #7199	; 0x1c1f
 80064aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      } else if (rpm <= settings.rpm_min) {
 80064ae:	4631      	mov	r1, r6
 80064b0:	4628      	mov	r0, r5
 80064b2:	f7fa fe0f 	bl	80010d4 <__aeabi_fcmple>
 80064b6:	b168      	cbz	r0, 80064d4 <spindle_compute_pwm_value+0x7c>
        if (rpm == 0.0) { // S0 disables spindle
 80064b8:	2700      	movs	r7, #0
 80064ba:	4628      	mov	r0, r5
 80064bc:	4639      	mov	r1, r7
 80064be:	f7fa fdf5 	bl	80010ac <__aeabi_fcmpeq>
 80064c2:	b118      	cbz	r0, 80064cc <spindle_compute_pwm_value+0x74>
          sys.spindle_speed = 0.0;
 80064c4:	6127      	str	r7, [r4, #16]
          pwm_value = SPINDLE_PWM_OFF_VALUE;
 80064c6:	2000      	movs	r0, #0
 80064c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        } else { // Set minimum PWM output
          sys.spindle_speed = settings.rpm_min;
 80064cc:	6126      	str	r6, [r4, #16]
          pwm_value = SPINDLE_PWM_MIN_VALUE;
 80064ce:	2001      	movs	r0, #1
 80064d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }
      } else { 
        // Compute intermediate PWM value with linear spindle speed model.
        // NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
        sys.spindle_speed = rpm;
        pwm_value = (SPINDLE_PWM_TYPE)floor((rpm-settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80064d4:	4631      	mov	r1, r6
        sys.spindle_speed = rpm;
 80064d6:	6125      	str	r5, [r4, #16]
        pwm_value = (SPINDLE_PWM_TYPE)floor((rpm-settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80064d8:	4628      	mov	r0, r5
 80064da:	f7fa fb49 	bl	8000b70 <__aeabi_fsub>
 80064de:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <spindle_compute_pwm_value+0xb8>)
 80064e0:	6819      	ldr	r1, [r3, #0]
 80064e2:	f7fa fc4f 	bl	8000d84 <__aeabi_fmul>
 80064e6:	f7f9 ffa3 	bl	8000430 <__aeabi_f2d>
 80064ea:	f001 fecd 	bl	8008288 <floor>
 80064ee:	f7fa facb 	bl	8000a88 <__aeabi_d2uiz>
 80064f2:	3001      	adds	r0, #1
 80064f4:	b280      	uxth	r0, r0
      }
      return(pwm_value);
    }
 80064f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064fa:	bf00      	nop
 80064fc:	f3af 8000 	nop.w
 8006500:	47ae147b 	.word	0x47ae147b
 8006504:	3f847ae1 	.word	0x3f847ae1
 8006508:	20003f70 	.word	0x20003f70
 800650c:	200038d4 	.word	0x200038d4
 8006510:	20003324 	.word	0x20003324

08006514 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8006514:	b570      	push	{r4, r5, r6, lr}
  if (sys.abort) { return; } // Block during abort.
 8006516:	4c12      	ldr	r4, [pc, #72]	; (8006560 <spindle_set_state+0x4c>)
{
 8006518:	4605      	mov	r5, r0
  if (sys.abort) { return; } // Block during abort.
 800651a:	7863      	ldrb	r3, [r4, #1]
{
 800651c:	460e      	mov	r6, r1
  if (sys.abort) { return; } // Block during abort.
 800651e:	b933      	cbnz	r3, 800652e <spindle_set_state+0x1a>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8006520:	b930      	cbnz	r0, 8006530 <spindle_set_state+0x1c>
  
    #ifdef VARIABLE_SPINDLE
      sys.spindle_speed = 0.0;
 8006522:	2300      	movs	r3, #0
 8006524:	6123      	str	r3, [r4, #16]
    #endif
    spindle_stop();
 8006526:	f7ff ff5b 	bl	80063e0 <spindle_stop>
      #endif    
    #endif
  
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 800652a:	2300      	movs	r3, #0
 800652c:	7323      	strb	r3, [r4, #12]
 800652e:	bd70      	pop	{r4, r5, r6, pc}
      if (state == SPINDLE_ENABLE_CW) {
 8006530:	2d10      	cmp	r5, #16
        ResetSpindleDirectionBit();
 8006532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006536:	480b      	ldr	r0, [pc, #44]	; (8006564 <spindle_set_state+0x50>)
      if (state == SPINDLE_ENABLE_CW) {
 8006538:	d10f      	bne.n	800655a <spindle_set_state+0x46>
        ResetSpindleDirectionBit();
 800653a:	f001 f9ab 	bl	8007894 <GPIO_ResetBits>
      if (settings.flags & BITFLAG_LASER_MODE) { 
 800653e:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <spindle_set_state+0x54>)
 8006540:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006544:	079b      	lsls	r3, r3, #30
 8006546:	d502      	bpl.n	800654e <spindle_set_state+0x3a>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8006548:	2d20      	cmp	r5, #32
 800654a:	bf08      	it	eq
 800654c:	2600      	moveq	r6, #0
      spindle_set_speed(spindle_compute_pwm_value(rpm));
 800654e:	4630      	mov	r0, r6
 8006550:	f7ff ff82 	bl	8006458 <spindle_compute_pwm_value>
 8006554:	f7ff ff72 	bl	800643c <spindle_set_speed>
 8006558:	e7e7      	b.n	800652a <spindle_set_state+0x16>
        SetSpindleDirectionBit();
 800655a:	f001 f99e 	bl	800789a <GPIO_SetBits>
 800655e:	e7ee      	b.n	800653e <spindle_set_state+0x2a>
 8006560:	200038d4 	.word	0x200038d4
 8006564:	40010c00 	.word	0x40010c00
 8006568:	20003f70 	.word	0x20003f70

0800656c <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 800656c:	b538      	push	{r3, r4, r5, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 800656e:	4b07      	ldr	r3, [pc, #28]	; (800658c <spindle_sync+0x20>)
  {
 8006570:	4604      	mov	r4, r0
    if (sys.state == STATE_CHECK_MODE) { return; }
 8006572:	781b      	ldrb	r3, [r3, #0]
  {
 8006574:	460d      	mov	r5, r1
    if (sys.state == STATE_CHECK_MODE) { return; }
 8006576:	2b02      	cmp	r3, #2
 8006578:	d007      	beq.n	800658a <spindle_sync+0x1e>
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 800657a:	f7fe ff91 	bl	80054a0 <protocol_buffer_synchronize>
    spindle_set_state(state,rpm);
 800657e:	4629      	mov	r1, r5
 8006580:	4620      	mov	r0, r4
  }
 8006582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spindle_set_state(state,rpm);
 8006586:	f7ff bfc5 	b.w	8006514 <spindle_set_state>
 800658a:	bd38      	pop	{r3, r4, r5, pc}
 800658c:	200038d4 	.word	0x200038d4

08006590 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 8006590:	b538      	push	{r3, r4, r5, lr}
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE))
 8006592:	4c1a      	ldr	r4, [pc, #104]	; (80065fc <st_wake_up+0x6c>)
  {
    SetStepperDisableBit();
 8006594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE))
 8006598:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    SetStepperDisableBit();
 800659c:	4818      	ldr	r0, [pc, #96]	; (8006600 <st_wake_up+0x70>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE))
 800659e:	0753      	lsls	r3, r2, #29
 80065a0:	d529      	bpl.n	80065f6 <st_wake_up+0x66>
    SetStepperDisableBit();
 80065a2:	f001 f97a 	bl	800789a <GPIO_SetBits>
  {
    ResetStepperDisableBit();
  }

  // Initialize stepper output bits to ensure first ISR call does not step.
  st.step_outbits = step_port_invert_mask;
 80065a6:	4b17      	ldr	r3, [pc, #92]	; (8006604 <st_wake_up+0x74>)
 80065a8:	4d17      	ldr	r5, [pc, #92]	; (8006608 <st_wake_up+0x78>)
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	836b      	strh	r3, [r5, #26]
    OCR0A = -(((settings.pulse_microseconds)*TICKS_PER_MICROSECOND) >> 3);
  #else // Normal operation
    #ifdef STM32
			#ifdef STM32F1
//      st.step_pulse_time = (settings.pulse_microseconds)*uTICKS_PER_MICROSECOND;
    		st.step_pulse_time = (settings.fpulse_microseconds)*uTICKS_PER_MICROSECOND;
 80065ae:	4b17      	ldr	r3, [pc, #92]	; (800660c <st_wake_up+0x7c>)
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	f7fa fb8f 	bl	8000cd4 <__aeabi_ui2f>
 80065b6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80065b8:	f7fa fbe4 	bl	8000d84 <__aeabi_fmul>
 80065bc:	f7fa fde4 	bl	8001188 <__aeabi_f2uiz>
  WRITE_REG(TIMx->ARR, AutoReload);
 80065c0:	4b13      	ldr	r3, [pc, #76]	; (8006610 <st_wake_up+0x80>)
 80065c2:	b2c0      	uxtb	r0, r0
 80065c4:	7668      	strb	r0, [r5, #25]
  // Enable Stepper Driver Interrupt
  #ifdef STM32
//    Step_IT_Start(&st);
    	//-- Reset Timer
      //TIM5->ARR = st.step_pulse_time - 1;
      LL_TIM_SetAutoReload(STEP_RESET_TIMER, st.step_pulse_time - 1);
 80065c6:	3801      	subs	r0, #1
 80065c8:	62d8      	str	r0, [r3, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	f042 0201 	orr.w	r2, r2, #1
 80065d0:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065d2:	f06f 0201 	mvn.w	r2, #1
 80065d6:	611a      	str	r2, [r3, #16]
      LL_TIM_GenerateEvent_UPDATE(STEP_RESET_TIMER);
      LL_TIM_ClearFlag_UPDATE(STEP_RESET_TIMER);

      //TIM4->ARR = st.exec_segment->cycles_per_tick - 1;
      LL_TIM_SetAutoReload(STEP_SET_TIMER,st.exec_segment->cycles_per_tick - 1);
 80065d8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80065da:	885a      	ldrh	r2, [r3, #2]
  WRITE_REG(TIMx->ARR, AutoReload);
 80065dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065e0:	3a01      	subs	r2, #1
 80065e2:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80065e4:	695a      	ldr	r2, [r3, #20]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	615a      	str	r2, [r3, #20]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80065ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f0:	4b08      	ldr	r3, [pc, #32]	; (8006614 <st_wake_up+0x84>)
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	bd38      	pop	{r3, r4, r5, pc}
    ResetStepperDisableBit();
 80065f6:	f001 f94d 	bl	8007894 <GPIO_ResetBits>
 80065fa:	e7d4      	b.n	80065a6 <st_wake_up+0x16>
 80065fc:	20003f70 	.word	0x20003f70
 8006600:	40011000 	.word	0x40011000
 8006604:	20003894 	.word	0x20003894
 8006608:	2000346c 	.word	0x2000346c
 800660c:	2000389c 	.word	0x2000389c
 8006610:	40000400 	.word	0x40000400
 8006614:	e000e100 	.word	0xe000e100

08006618 <st_go_idle>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661c:	4b17      	ldr	r3, [pc, #92]	; (800667c <st_go_idle+0x64>)
}


// Stepper shutdown
void st_go_idle()
{
 800661e:	b510      	push	{r4, lr}
 8006620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	Step_Set_DisableIRQ();
#elif ATMEGA328P
  TIMSK1 &= ~(1<<OCIE1A); // Disable Timer1 interrupt
  TCCR1B = (TCCR1B & ~((1<<CS12) | (1<<CS11))) | (1<<CS10); // Reset clock to no prescaling.
#endif
  busy = false;
 8006624:	2200      	movs	r2, #0

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8006626:	4c16      	ldr	r4, [pc, #88]	; (8006680 <st_go_idle+0x68>)
  busy = false;
 8006628:	4b16      	ldr	r3, [pc, #88]	; (8006684 <st_go_idle+0x6c>)
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800662a:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
  busy = false;
 800662e:	701a      	strb	r2, [r3, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8006630:	28ff      	cmp	r0, #255	; 0xff
 8006632:	4a15      	ldr	r2, [pc, #84]	; (8006688 <st_go_idle+0x70>)
 8006634:	d107      	bne.n	8006646 <st_go_idle+0x2e>
 8006636:	4b15      	ldr	r3, [pc, #84]	; (800668c <st_go_idle+0x74>)
 8006638:	7819      	ldrb	r1, [r3, #0]
 800663a:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 800663e:	b911      	cbnz	r1, 8006646 <st_go_idle+0x2e>
 8006640:	7811      	ldrb	r1, [r2, #0]
 8006642:	2980      	cmp	r1, #128	; 0x80
 8006644:	d105      	bne.n	8006652 <st_go_idle+0x3a>
 8006646:	7813      	ldrb	r3, [r2, #0]
 8006648:	2b04      	cmp	r3, #4
 800664a:	d010      	beq.n	800666e <st_go_idle+0x56>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
 800664c:	f7fd ff02 	bl	8004454 <delay_ms>
    pin_state = true; // Override. Disable steppers.
 8006650:	2301      	movs	r3, #1
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8006652:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
  if (pin_state)
  {
    SetStepperDisableBit();
 8006656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800665a:	0752      	lsls	r2, r2, #29
 800665c:	bf48      	it	mi
 800665e:	f083 0301 	eormi.w	r3, r3, #1
    SetStepperDisableBit();
 8006662:	480b      	ldr	r0, [pc, #44]	; (8006690 <st_go_idle+0x78>)
  if (pin_state)
 8006664:	b12b      	cbz	r3, 8006672 <st_go_idle+0x5a>
  }
  else
  {
    ResetStepperDisableBit();
  }
}
 8006666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SetStepperDisableBit();
 800666a:	f001 b916 	b.w	800789a <GPIO_SetBits>
  bool pin_state = false; // Keep enabled.
 800666e:	2300      	movs	r3, #0
 8006670:	e7ef      	b.n	8006652 <st_go_idle+0x3a>
}
 8006672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ResetStepperDisableBit();
 8006676:	f001 b90d 	b.w	8007894 <GPIO_ResetBits>
 800667a:	bf00      	nop
 800667c:	e000e100 	.word	0xe000e100
 8006680:	20003f70 	.word	0x20003f70
 8006684:	20003328 	.word	0x20003328
 8006688:	200038d4 	.word	0x200038d4
 800668c:	2000391c 	.word	0x2000391c
 8006690:	40011000 	.word	0x40011000

08006694 <HandleStepSetIT>:
// int8 variables and update position counters only when a segment completes. This can get complicated
// with probing and homing cycles that require true real-time positions.

#ifdef STM32
void HandleStepSetIT(void)
{
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (busy) { return; } // The busy-flag is used to avoid reentering this interrupt
 8006696:	4d91      	ldr	r5, [pc, #580]	; (80068dc <HandleStepSetIT+0x248>)
 8006698:	782b      	ldrb	r3, [r5, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f040 8110 	bne.w	80068c0 <HandleStepSetIT+0x22c>
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80066a0:	4a8f      	ldr	r2, [pc, #572]	; (80068e0 <HandleStepSetIT+0x24c>)

  // Set the direction pins a couple of nanoseconds before we step the steppers
  GPIO_Write(DIR_GPIO_Port, (GPIO_ReadOutputData(DIR_GPIO_Port) & ~DIR_MASK) | (st.dir_outbits & DIR_MASK));
 80066a2:	4e90      	ldr	r6, [pc, #576]	; (80068e4 <HandleStepSetIT+0x250>)
 80066a4:	68d1      	ldr	r1, [r2, #12]
 80066a6:	8bb3      	ldrh	r3, [r6, #28]
 80066a8:	f021 01f9 	bic.w	r1, r1, #249	; 0xf9
 80066ac:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 80066b0:	430b      	orrs	r3, r1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066b2:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(GPIOx->ODR, PortValue);
 80066b6:	60d3      	str	r3, [r2, #12]
 80066b8:	4b8b      	ldr	r3, [pc, #556]	; (80068e8 <HandleStepSetIT+0x254>)
  NVIC_EnableIRQ(STEP_RESET_IRQ);

  busy = true;

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 80066ba:	6c37      	ldr	r7, [r6, #64]	; 0x40
 80066bc:	6119      	str	r1, [r3, #16]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80066be:	68d3      	ldr	r3, [r2, #12]
    GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | st.step_outbits);
 80066c0:	8b71      	ldrh	r1, [r6, #26]
 80066c2:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 80066c6:	f023 0306 	bic.w	r3, r3, #6
 80066ca:	430b      	orrs	r3, r1
  WRITE_REG(GPIOx->ODR, PortValue);
 80066cc:	60d3      	str	r3, [r2, #12]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80066ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80066d2:	4b86      	ldr	r3, [pc, #536]	; (80068ec <HandleStepSetIT+0x258>)
 80066d4:	4634      	mov	r4, r6
 80066d6:	601a      	str	r2, [r3, #0]
  busy = true;
 80066d8:	2301      	movs	r3, #1
 80066da:	702b      	strb	r3, [r5, #0]
  if (st.exec_segment == NULL) {
 80066dc:	2f00      	cmp	r7, #0
 80066de:	d146      	bne.n	800676e <HandleStepSetIT+0xda>
    // Anything in the buffer? If so, load and initialize next step segment.
    if (segment_buffer_head != segment_buffer_tail) {
 80066e0:	4b83      	ldr	r3, [pc, #524]	; (80068f0 <HandleStepSetIT+0x25c>)
 80066e2:	4984      	ldr	r1, [pc, #528]	; (80068f4 <HandleStepSetIT+0x260>)
 80066e4:	781a      	ldrb	r2, [r3, #0]
 80066e6:	7809      	ldrb	r1, [r1, #0]
 80066e8:	4291      	cmp	r1, r2
 80066ea:	f000 80ea 	beq.w	80068c2 <HandleStepSetIT+0x22e>
        #endif
			*/
      //Step_Set_IT_segment_timing_init(&st);
    	//__HAL_TIM_SET_AUTORELOAD(STEP_SET_TIMER,st.exec_segment->cycles_per_tick - 1);
      //TIM4->ARR = st.exec_segment->cycles_per_tick - 1;
      STEP_SET_TIMER->ARR = st.exec_segment->cycles_per_tick - 1;
 80066ee:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 80066f2:	781a      	ldrb	r2, [r3, #0]
 80066f4:	4b80      	ldr	r3, [pc, #512]	; (80068f8 <HandleStepSetIT+0x264>)
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	00d6      	lsls	r6, r2, #3
 80066fa:	1999      	adds	r1, r3, r6
      STEP_SET_TIMER->ARR = st.exec_segment->cycles_per_tick - 1;
 80066fc:	8848      	ldrh	r0, [r1, #2]
        //TIM4->PSC = st.exec_segment->prescaler;
      	STEP_SET_TIMER->PSC = st.exec_segment->prescaler;
      #endif


      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 80066fe:	f833 2032 	ldrh.w	r2, [r3, r2, lsl #3]
      STEP_SET_TIMER->ARR = st.exec_segment->cycles_per_tick - 1;
 8006702:	3801      	subs	r0, #1
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8006704:	6421      	str	r1, [r4, #64]	; 0x40
      STEP_SET_TIMER->ARR = st.exec_segment->cycles_per_tick - 1;
 8006706:	62f8      	str	r0, [r7, #44]	; 0x2c
      // If the new segment starts a new planner block, initialize stepper variables and counters.
      // NOTE: When the segment data index changes, this indicates a new planner block.
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8006708:	7908      	ldrb	r0, [r1, #4]
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 800670a:	8722      	strh	r2, [r4, #56]	; 0x38
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 800670c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8006710:	4619      	mov	r1, r3
 8006712:	4282      	cmp	r2, r0
 8006714:	d00d      	beq.n	8006732 <HandleStepSetIT+0x9e>
        st.exec_block_index = st.exec_segment->st_block_index;
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8006716:	4a79      	ldr	r2, [pc, #484]	; (80068fc <HandleStepSetIT+0x268>)
        st.exec_block_index = st.exec_segment->st_block_index;
 8006718:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
        st.exec_block = &st_block_buffer[st.exec_block_index];
 800671c:	eb02 1240 	add.w	r2, r2, r0, lsl #5

        // Initialize Bresenham line and distance counters
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = st.counter_c = (st.exec_block->step_event_count >> 1);
 8006720:	6993      	ldr	r3, [r2, #24]
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8006722:	63e2      	str	r2, [r4, #60]	; 0x3c
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = st.counter_c = (st.exec_block->step_event_count >> 1);
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	6163      	str	r3, [r4, #20]
 8006728:	6123      	str	r3, [r4, #16]
 800672a:	60e3      	str	r3, [r4, #12]
 800672c:	60a3      	str	r3, [r4, #8]
 800672e:	6063      	str	r3, [r4, #4]
 8006730:	6023      	str	r3, [r4, #0]
      }
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8006732:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006734:	4872      	ldr	r0, [pc, #456]	; (8006900 <HandleStepSetIT+0x26c>)
 8006736:	7f1a      	ldrb	r2, [r3, #28]
 8006738:	8800      	ldrh	r0, [r0, #0]

      #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
        // With AMASS enabled, adjust Bresenham axis increment counters according to AMASS level.
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800673a:	4431      	add	r1, r6
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 800673c:	4042      	eors	r2, r0
 800673e:	83a2      	strh	r2, [r4, #28]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	794a      	ldrb	r2, [r1, #5]
 8006744:	40d0      	lsrs	r0, r2
 8006746:	6220      	str	r0, [r4, #32]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 8006748:	6858      	ldr	r0, [r3, #4]
 800674a:	40d0      	lsrs	r0, r2
 800674c:	6260      	str	r0, [r4, #36]	; 0x24
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 800674e:	6898      	ldr	r0, [r3, #8]
 8006750:	40d0      	lsrs	r0, r2
 8006752:	62a0      	str	r0, [r4, #40]	; 0x28
        #if ( defined(STM32F1_5) || defined(STM32F4_5) )
          st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
          st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
        #endif
        #if ( defined(STM32F1_6) || defined(STM32F4_6) )
          st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 8006754:	68d8      	ldr	r0, [r3, #12]
 8006756:	40d0      	lsrs	r0, r2
 8006758:	62e0      	str	r0, [r4, #44]	; 0x2c
          st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
 800675a:	6918      	ldr	r0, [r3, #16]
          st.steps[C_AXIS] = st.exec_block->steps[C_AXIS] >> st.exec_segment->amass_level;
 800675c:	695b      	ldr	r3, [r3, #20]
          st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
 800675e:	40d0      	lsrs	r0, r2
 8006760:	6320      	str	r0, [r4, #48]	; 0x30
          st.steps[C_AXIS] = st.exec_block->steps[C_AXIS] >> st.exec_segment->amass_level;
 8006762:	fa23 f202 	lsr.w	r2, r3, r2
        #endif
      #endif

      #ifdef VARIABLE_SPINDLE
        // Set real-time spindle output as segment is loaded, just prior to the first step.
        spindle_set_speed(st.exec_segment->spindle_pwm);
 8006766:	88c8      	ldrh	r0, [r1, #6]
          st.steps[C_AXIS] = st.exec_block->steps[C_AXIS] >> st.exec_segment->amass_level;
 8006768:	6362      	str	r2, [r4, #52]	; 0x34
        spindle_set_speed(st.exec_segment->spindle_pwm);
 800676a:	f7ff fe67 	bl	800643c <spindle_set_speed>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 800676e:	4b65      	ldr	r3, [pc, #404]	; (8006904 <HandleStepSetIT+0x270>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HandleStepSetIT+0xe6>
 8006776:	f7fe fb4f 	bl	8004e18 <probe_state_monitor>

  // Reset step out bits.
  st.step_outbits = 0;
 800677a:	2300      	movs	r3, #0

  // Execute step displacement profile by Bresenham line algorithm
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
 800677c:	6821      	ldr	r1, [r4, #0]
  st.step_outbits = 0;
 800677e:	8363      	strh	r3, [r4, #26]
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 8006780:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    st.counter_x += st.steps[X_AXIS];
 8006782:	6a23      	ldr	r3, [r4, #32]
 8006784:	4419      	add	r1, r3
  if (st.counter_x > st.exec_block->step_event_count) {
 8006786:	6993      	ldr	r3, [r2, #24]
    st.counter_x += st.steps[X_AXIS];
 8006788:	6021      	str	r1, [r4, #0]
  if (st.counter_x > st.exec_block->step_event_count) {
 800678a:	4299      	cmp	r1, r3
 800678c:	d90d      	bls.n	80067aa <HandleStepSetIT+0x116>
    st.step_outbits |= STEP_X_Pin;
 800678e:	2002      	movs	r0, #2
    st.counter_x -= st.exec_block->step_event_count;
 8006790:	1ac9      	subs	r1, r1, r3
 8006792:	6021      	str	r1, [r4, #0]
    if (st.exec_block->direction_bits & DIR_X_Pin) { sys_position[X_AXIS]--; }
 8006794:	7f11      	ldrb	r1, [r2, #28]
    st.step_outbits |= STEP_X_Pin;
 8006796:	8360      	strh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_X_Pin) { sys_position[X_AXIS]--; }
 8006798:	f011 0f01 	tst.w	r1, #1
 800679c:	495a      	ldr	r1, [pc, #360]	; (8006908 <HandleStepSetIT+0x274>)
 800679e:	6808      	ldr	r0, [r1, #0]
 80067a0:	bf14      	ite	ne
 80067a2:	f100 30ff 	addne.w	r0, r0, #4294967295
    else { sys_position[X_AXIS]++; }
 80067a6:	3001      	addeq	r0, #1
 80067a8:	6008      	str	r0, [r1, #0]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 80067aa:	6861      	ldr	r1, [r4, #4]
 80067ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80067ae:	4401      	add	r1, r0
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 80067b0:	428b      	cmp	r3, r1
    st.counter_y += st.steps[Y_AXIS];
 80067b2:	6061      	str	r1, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 80067b4:	d20f      	bcs.n	80067d6 <HandleStepSetIT+0x142>
    st.step_outbits |= STEP_Y_Pin;
    st.counter_y -= st.exec_block->step_event_count;
 80067b6:	1ac9      	subs	r1, r1, r3
 80067b8:	6061      	str	r1, [r4, #4]
    if (st.exec_block->direction_bits & DIR_Y_Pin) { sys_position[Y_AXIS]--; }
 80067ba:	7f11      	ldrb	r1, [r2, #28]
    st.step_outbits |= STEP_Y_Pin;
 80067bc:	8b60      	ldrh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_Y_Pin) { sys_position[Y_AXIS]--; }
 80067be:	f011 0f10 	tst.w	r1, #16
 80067c2:	4951      	ldr	r1, [pc, #324]	; (8006908 <HandleStepSetIT+0x274>)
    st.step_outbits |= STEP_Y_Pin;
 80067c4:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80067c8:	8360      	strh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_Y_Pin) { sys_position[Y_AXIS]--; }
 80067ca:	6848      	ldr	r0, [r1, #4]
 80067cc:	bf14      	ite	ne
 80067ce:	f100 30ff 	addne.w	r0, r0, #4294967295
    else { sys_position[Y_AXIS]++; }
 80067d2:	3001      	addeq	r0, #1
 80067d4:	6048      	str	r0, [r1, #4]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 80067d6:	68a1      	ldr	r1, [r4, #8]
 80067d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80067da:	4401      	add	r1, r0
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 80067dc:	428b      	cmp	r3, r1
    st.counter_z += st.steps[Z_AXIS];
 80067de:	60a1      	str	r1, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 80067e0:	d20f      	bcs.n	8006802 <HandleStepSetIT+0x16e>
    st.step_outbits |= STEP_Z_Pin;
    st.counter_z -= st.exec_block->step_event_count;
 80067e2:	1ac9      	subs	r1, r1, r3
 80067e4:	60a1      	str	r1, [r4, #8]
    if (st.exec_block->direction_bits & DIR_Z_Pin) { sys_position[Z_AXIS]--; }
 80067e6:	7f11      	ldrb	r1, [r2, #28]
    st.step_outbits |= STEP_Z_Pin;
 80067e8:	8b60      	ldrh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_Z_Pin) { sys_position[Z_AXIS]--; }
 80067ea:	f011 0f20 	tst.w	r1, #32
 80067ee:	4946      	ldr	r1, [pc, #280]	; (8006908 <HandleStepSetIT+0x274>)
    st.step_outbits |= STEP_Z_Pin;
 80067f0:	f040 0004 	orr.w	r0, r0, #4
 80067f4:	8360      	strh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_Z_Pin) { sys_position[Z_AXIS]--; }
 80067f6:	6888      	ldr	r0, [r1, #8]
 80067f8:	bf14      	ite	ne
 80067fa:	f100 30ff 	addne.w	r0, r0, #4294967295
    else { sys_position[Z_AXIS]++; }
 80067fe:	3001      	addeq	r0, #1
 8006800:	6088      	str	r0, [r1, #8]
    else { sys_position[B_AXIS]++; }
  }
#endif
#if ( defined(STM32F1_6) || defined(STM32F4_6) )
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_a += st.steps[A_AXIS];
 8006802:	68e1      	ldr	r1, [r4, #12]
 8006804:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006806:	4401      	add	r1, r0
  #else
    st.counter_a += st.exec_block->steps[A_AXIS];
  #endif
  if (st.counter_a > st.exec_block->step_event_count) {
 8006808:	428b      	cmp	r3, r1
    st.counter_a += st.steps[A_AXIS];
 800680a:	60e1      	str	r1, [r4, #12]
  if (st.counter_a > st.exec_block->step_event_count) {
 800680c:	d20f      	bcs.n	800682e <HandleStepSetIT+0x19a>
    st.step_outbits |= STEP_A_Pin;
    st.counter_a -= st.exec_block->step_event_count;
 800680e:	1ac9      	subs	r1, r1, r3
 8006810:	60e1      	str	r1, [r4, #12]
    if (st.exec_block->direction_bits & DIR_A_Pin) { sys_position[A_AXIS]--; }
 8006812:	7f11      	ldrb	r1, [r2, #28]
    st.step_outbits |= STEP_A_Pin;
 8006814:	8b60      	ldrh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_A_Pin) { sys_position[A_AXIS]--; }
 8006816:	f011 0f40 	tst.w	r1, #64	; 0x40
 800681a:	493b      	ldr	r1, [pc, #236]	; (8006908 <HandleStepSetIT+0x274>)
    st.step_outbits |= STEP_A_Pin;
 800681c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8006820:	8360      	strh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_A_Pin) { sys_position[A_AXIS]--; }
 8006822:	68c8      	ldr	r0, [r1, #12]
 8006824:	bf14      	ite	ne
 8006826:	f100 30ff 	addne.w	r0, r0, #4294967295
    else { sys_position[A_AXIS]++; }
 800682a:	3001      	addeq	r0, #1
 800682c:	60c8      	str	r0, [r1, #12]
  }

  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_b += st.steps[B_AXIS];
 800682e:	6921      	ldr	r1, [r4, #16]
 8006830:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006832:	4401      	add	r1, r0
  #else
    st.counter_b += st.exec_block->steps[B_AXIS];
  #endif
  if (st.counter_b > st.exec_block->step_event_count) {
 8006834:	428b      	cmp	r3, r1
    st.counter_b += st.steps[B_AXIS];
 8006836:	6121      	str	r1, [r4, #16]
  if (st.counter_b > st.exec_block->step_event_count) {
 8006838:	d20f      	bcs.n	800685a <HandleStepSetIT+0x1c6>
    st.step_outbits |= STEP_B_Pin;
    st.counter_b -= st.exec_block->step_event_count;
 800683a:	1ac9      	subs	r1, r1, r3
 800683c:	6121      	str	r1, [r4, #16]
    if (st.exec_block->direction_bits & DIR_B_Pin) { sys_position[B_AXIS]--; }
 800683e:	f992 101c 	ldrsb.w	r1, [r2, #28]
    st.step_outbits |= STEP_B_Pin;
 8006842:	8b60      	ldrh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_B_Pin) { sys_position[B_AXIS]--; }
 8006844:	2900      	cmp	r1, #0
 8006846:	4930      	ldr	r1, [pc, #192]	; (8006908 <HandleStepSetIT+0x274>)
    st.step_outbits |= STEP_B_Pin;
 8006848:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800684c:	8360      	strh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_B_Pin) { sys_position[B_AXIS]--; }
 800684e:	6908      	ldr	r0, [r1, #16]
 8006850:	bfb4      	ite	lt
 8006852:	f100 30ff 	addlt.w	r0, r0, #4294967295
    else { sys_position[B_AXIS]++; }
 8006856:	3001      	addge	r0, #1
 8006858:	6108      	str	r0, [r1, #16]
  }

  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_c += st.steps[C_AXIS];
 800685a:	6961      	ldr	r1, [r4, #20]
 800685c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800685e:	4401      	add	r1, r0
  #else
    st.counter_c += st.exec_block->steps[C_AXIS];
  #endif
  if (st.counter_c > st.exec_block->step_event_count) {
 8006860:	428b      	cmp	r3, r1
    st.counter_c += st.steps[C_AXIS];
 8006862:	6161      	str	r1, [r4, #20]
  if (st.counter_c > st.exec_block->step_event_count) {
 8006864:	d20f      	bcs.n	8006886 <HandleStepSetIT+0x1f2>
    st.step_outbits |= STEP_C_Pin;
    st.counter_c -= st.exec_block->step_event_count;
 8006866:	1acb      	subs	r3, r1, r3
 8006868:	6163      	str	r3, [r4, #20]
    if (st.exec_block->direction_bits & DIR_C_Pin) { sys_position[C_AXIS]--; }
 800686a:	7f13      	ldrb	r3, [r2, #28]
    st.step_outbits |= STEP_C_Pin;
 800686c:	8b60      	ldrh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_C_Pin) { sys_position[C_AXIS]--; }
 800686e:	f013 0f08 	tst.w	r3, #8
 8006872:	4b25      	ldr	r3, [pc, #148]	; (8006908 <HandleStepSetIT+0x274>)
    st.step_outbits |= STEP_C_Pin;
 8006874:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    if (st.exec_block->direction_bits & DIR_C_Pin) { sys_position[C_AXIS]--; }
 8006878:	695a      	ldr	r2, [r3, #20]
    st.step_outbits |= STEP_C_Pin;
 800687a:	8360      	strh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_C_Pin) { sys_position[C_AXIS]--; }
 800687c:	bf14      	ite	ne
 800687e:	f102 32ff 	addne.w	r2, r2, #4294967295
    else { sys_position[C_AXIS]++; }
 8006882:	3201      	addeq	r2, #1
 8006884:	615a      	str	r2, [r3, #20]
  }
#endif

  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 8006886:	4a21      	ldr	r2, [pc, #132]	; (800690c <HandleStepSetIT+0x278>)
 8006888:	7813      	ldrb	r3, [r2, #0]
 800688a:	2b04      	cmp	r3, #4
 800688c:	bf01      	itttt	eq
 800688e:	8b63      	ldrheq	r3, [r4, #26]
 8006890:	88d2      	ldrheq	r2, [r2, #6]
 8006892:	4013      	andeq	r3, r2
 8006894:	8363      	strheq	r3, [r4, #26]

  st.step_count--; // Decrement step events count
 8006896:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8006898:	3b01      	subs	r3, #1
 800689a:	b29b      	uxth	r3, r3
 800689c:	8723      	strh	r3, [r4, #56]	; 0x38
  if (st.step_count == 0) {
 800689e:	b943      	cbnz	r3, 80068b2 <HandleStepSetIT+0x21e>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;

    //if ( ++segment_buffer_tail == SEGMENT_BUFFER_SIZE) { segment_buffer_tail = 0; }
  	uint8_t segment_tail_next = segment_buffer_tail + 1;
 80068a0:	4a13      	ldr	r2, [pc, #76]	; (80068f0 <HandleStepSetIT+0x25c>)
    st.exec_segment = NULL;
 80068a2:	6423      	str	r3, [r4, #64]	; 0x40
  	uint8_t segment_tail_next = segment_buffer_tail + 1;
 80068a4:	7813      	ldrb	r3, [r2, #0]
 80068a6:	3301      	adds	r3, #1
 80068a8:	b2db      	uxtb	r3, r3
  	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
  		segment_tail_next = 0;
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	bf08      	it	eq
 80068ae:	2300      	moveq	r3, #0
  	segment_buffer_tail = segment_tail_next;
 80068b0:	7013      	strb	r3, [r2, #0]
  }




  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 80068b2:	4a17      	ldr	r2, [pc, #92]	; (8006910 <HandleStepSetIT+0x27c>)
 80068b4:	8b63      	ldrh	r3, [r4, #26]
 80068b6:	8812      	ldrh	r2, [r2, #0]
 80068b8:	4053      	eors	r3, r2
 80068ba:	8363      	strh	r3, [r4, #26]
  busy = false;
 80068bc:	2300      	movs	r3, #0
 80068be:	702b      	strb	r3, [r5, #0]
 80068c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      st_go_idle();
 80068c2:	f7ff fea9 	bl	8006618 <st_go_idle>
        if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 80068c6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80068c8:	7f5b      	ldrb	r3, [r3, #29]
 80068ca:	b113      	cbz	r3, 80068d2 <HandleStepSetIT+0x23e>
 80068cc:	4638      	mov	r0, r7
 80068ce:	f7ff fdb5 	bl	800643c <spindle_set_speed>


}
 80068d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 80068d6:	2004      	movs	r0, #4
 80068d8:	f000 bd52 	b.w	8007380 <system_set_exec_state_flag>
 80068dc:	20003328 	.word	0x20003328
 80068e0:	40010800 	.word	0x40010800
 80068e4:	2000346c 	.word	0x2000346c
 80068e8:	40000400 	.word	0x40000400
 80068ec:	e000e100 	.word	0xe000e100
 80068f0:	20003469 	.word	0x20003469
 80068f4:	20003468 	.word	0x20003468
 80068f8:	20003368 	.word	0x20003368
 80068fc:	200034b0 	.word	0x200034b0
 8006900:	2000332a 	.word	0x2000332a
 8006904:	200038ea 	.word	0x200038ea
 8006908:	20003904 	.word	0x20003904
 800690c:	200038d4 	.word	0x200038d4
 8006910:	20003894 	.word	0x20003894

08006914 <HandleStepResetIT>:
// completing one step cycle.

void HandleStepResetIT()
{
//	Step_Reset_IT_Disable();
  GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8006914:	4b08      	ldr	r3, [pc, #32]	; (8006938 <HandleStepResetIT+0x24>)
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8006916:	4909      	ldr	r1, [pc, #36]	; (800693c <HandleStepResetIT+0x28>)
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	68ca      	ldr	r2, [r1, #12]
 800691c:	f423 73fc 	bic.w	r3, r3, #504	; 0x1f8
 8006920:	f023 0301 	bic.w	r3, r3, #1
 8006924:	04db      	lsls	r3, r3, #19
 8006926:	f422 52f0 	bic.w	r2, r2, #7680	; 0x1e00
 800692a:	0cdb      	lsrs	r3, r3, #19
 800692c:	f022 0206 	bic.w	r2, r2, #6
 8006930:	4313      	orrs	r3, r2
  WRITE_REG(GPIOx->ODR, PortValue);
 8006932:	60cb      	str	r3, [r1, #12]
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	20003894 	.word	0x20003894
 800693c:	40010800 	.word	0x40010800

08006940 <st_generate_step_dir_invert_masks>:

// Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
void st_generate_step_dir_invert_masks()
{
  uint8_t idx;
  step_port_invert_mask = 0;
 8006940:	2300      	movs	r3, #0
{
 8006942:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    #ifdef STM32
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006946:	4817      	ldr	r0, [pc, #92]	; (80069a4 <st_generate_step_dir_invert_masks+0x64>)
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006948:	461d      	mov	r5, r3
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800694a:	f890 7064 	ldrb.w	r7, [r0, #100]	; 0x64
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800694e:	f890 e065 	ldrb.w	lr, [r0, #101]	; 0x65
 8006952:	461e      	mov	r6, r3
 8006954:	4618      	mov	r0, r3
 8006956:	461c      	mov	r4, r3
  step_port_invert_mask = 0;
 8006958:	4913      	ldr	r1, [pc, #76]	; (80069a8 <st_generate_step_dir_invert_masks+0x68>)
  dir_port_invert_mask = 0;
 800695a:	4a14      	ldr	r2, [pc, #80]	; (80069ac <st_generate_step_dir_invert_masks+0x6c>)
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800695c:	f8df c050 	ldr.w	ip, [pc, #80]	; 80069b0 <st_generate_step_dir_invert_masks+0x70>
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006960:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80069b4 <st_generate_step_dir_invert_masks+0x74>
  step_port_invert_mask = 0;
 8006964:	800b      	strh	r3, [r1, #0]
  dir_port_invert_mask = 0;
 8006966:	8013      	strh	r3, [r2, #0]
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006968:	fa47 f903 	asr.w	r9, r7, r3
 800696c:	f019 0f01 	tst.w	r9, #1
 8006970:	bf18      	it	ne
 8006972:	f83c 6013 	ldrhne.w	r6, [ip, r3, lsl #1]
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006976:	fa4e f903 	asr.w	r9, lr, r3
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800697a:	bf1c      	itt	ne
 800697c:	4334      	orrne	r4, r6
 800697e:	2601      	movne	r6, #1
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006980:	f019 0f01 	tst.w	r9, #1
 8006984:	bf18      	it	ne
 8006986:	f838 5013 	ldrhne.w	r5, [r8, r3, lsl #1]
 800698a:	f103 0301 	add.w	r3, r3, #1
 800698e:	bf1c      	itt	ne
 8006990:	4328      	orrne	r0, r5
 8006992:	2501      	movne	r5, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8006994:	2b06      	cmp	r3, #6
 8006996:	d1e7      	bne.n	8006968 <st_generate_step_dir_invert_masks+0x28>
 8006998:	b106      	cbz	r6, 800699c <st_generate_step_dir_invert_masks+0x5c>
 800699a:	800c      	strh	r4, [r1, #0]
 800699c:	b105      	cbz	r5, 80069a0 <st_generate_step_dir_invert_masks+0x60>
 800699e:	8010      	strh	r0, [r2, #0]
 80069a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069a4:	20003f70 	.word	0x20003f70
 80069a8:	20003894 	.word	0x20003894
 80069ac:	2000332a 	.word	0x2000332a
 80069b0:	08009a0a 	.word	0x08009a0a
 80069b4:	080099f2 	.word	0x080099f2

080069b8 <st_reset>:
}


// Reset and clear stepper subsystem variables
void st_reset()
{
 80069b8:	b538      	push	{r3, r4, r5, lr}
  // Initialize stepper driver idle state.
  st_go_idle();

  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
  memset(&st, 0, sizeof(stepper_t));
 80069ba:	4d1b      	ldr	r5, [pc, #108]	; (8006a28 <st_reset+0x70>)
  st_go_idle();
 80069bc:	f7ff fe2c 	bl	8006618 <st_go_idle>
  memset(&prep, 0, sizeof(st_prep_t));
 80069c0:	2238      	movs	r2, #56	; 0x38
 80069c2:	2100      	movs	r1, #0
 80069c4:	4819      	ldr	r0, [pc, #100]	; (8006a2c <st_reset+0x74>)
 80069c6:	f000 ffa4 	bl	8007912 <memset>
  memset(&st, 0, sizeof(stepper_t));
 80069ca:	2244      	movs	r2, #68	; 0x44
 80069cc:	2100      	movs	r1, #0
 80069ce:	4628      	mov	r0, r5
 80069d0:	f000 ff9f 	bl	8007912 <memset>
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80069d4:	2300      	movs	r3, #0
  segment_buffer_tail = 0;
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 80069d6:	2101      	movs	r1, #1
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80069d8:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <st_reset+0x78>)
 80069da:	6013      	str	r3, [r2, #0]
  segment_buffer_tail = 0;
 80069dc:	4a15      	ldr	r2, [pc, #84]	; (8006a34 <st_reset+0x7c>)
 80069de:	7013      	strb	r3, [r2, #0]
  segment_buffer_head = 0; // empty = tail
 80069e0:	4a15      	ldr	r2, [pc, #84]	; (8006a38 <st_reset+0x80>)
 80069e2:	7013      	strb	r3, [r2, #0]
  segment_next_head = 1;
 80069e4:	4a15      	ldr	r2, [pc, #84]	; (8006a3c <st_reset+0x84>)
 80069e6:	7011      	strb	r1, [r2, #0]
  busy = false;
 80069e8:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <st_reset+0x88>)
 80069ea:	7013      	strb	r3, [r2, #0]

  st_generate_step_dir_invert_masks();
 80069ec:	f7ff ffa8 	bl	8006940 <st_generate_step_dir_invert_masks>
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 80069f0:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <st_reset+0x8c>)
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80069f2:	4815      	ldr	r0, [pc, #84]	; (8006a48 <st_reset+0x90>)
 80069f4:	881c      	ldrh	r4, [r3, #0]

  // Initialize step and direction port pins.
#ifdef STM32
  GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80069f6:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <st_reset+0x94>)
 80069f8:	68c1      	ldr	r1, [r0, #12]
 80069fa:	881a      	ldrh	r2, [r3, #0]
 80069fc:	f421 51f0 	bic.w	r1, r1, #7680	; 0x1e00
 8006a00:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8006a04:	f022 0201 	bic.w	r2, r2, #1
 8006a08:	04d2      	lsls	r2, r2, #19
 8006a0a:	0cd2      	lsrs	r2, r2, #19
 8006a0c:	f021 0106 	bic.w	r1, r1, #6
 8006a10:	430a      	orrs	r2, r1
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8006a12:	83ac      	strh	r4, [r5, #28]
  WRITE_REG(GPIOx->ODR, PortValue);
 8006a14:	60c2      	str	r2, [r0, #12]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8006a16:	68c3      	ldr	r3, [r0, #12]
  GPIO_Write(DIR_GPIO_Port, (GPIO_ReadOutputData(DIR_GPIO_Port) & ~DIR_MASK) | (dir_port_invert_mask & DIR_MASK));
 8006a18:	f004 04f9 	and.w	r4, r4, #249	; 0xf9
 8006a1c:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
 8006a20:	4323      	orrs	r3, r4
  WRITE_REG(GPIOx->ODR, PortValue);
 8006a22:	60c3      	str	r3, [r0, #12]
 8006a24:	bd38      	pop	{r3, r4, r5, pc}
 8006a26:	bf00      	nop
 8006a28:	2000346c 	.word	0x2000346c
 8006a2c:	20003330 	.word	0x20003330
 8006a30:	2000332c 	.word	0x2000332c
 8006a34:	20003469 	.word	0x20003469
 8006a38:	20003468 	.word	0x20003468
 8006a3c:	2000346a 	.word	0x2000346a
 8006a40:	20003328 	.word	0x20003328
 8006a44:	2000332a 	.word	0x2000332a
 8006a48:	40010800 	.word	0x40010800
 8006a4c:	20003894 	.word	0x20003894

08006a50 <stepper_init>:
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006a50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	f042 0201 	orr.w	r2, r2, #1
 8006a5a:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006a64:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006a68:	f042 0201 	orr.w	r2, r2, #1
 8006a6c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006a70:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a80:	4b03      	ldr	r3, [pc, #12]	; (8006a90 <stepper_init+0x40>)
 8006a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006a86:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006a8e:	4770      	bx	lr
 8006a90:	e000e100 	.word	0xe000e100

08006a94 <st_update_plan_block_parameters>:
}


// Called by planner_recalculate() when the executing block is updated by the new plan.
void st_update_plan_block_parameters()
{
 8006a94:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL) { // Ignore if at start of a new block.
 8006a96:	4c08      	ldr	r4, [pc, #32]	; (8006ab8 <st_update_plan_block_parameters+0x24>)
 8006a98:	6825      	ldr	r5, [r4, #0]
 8006a9a:	b15d      	cbz	r5, 8006ab4 <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8006a9c:	4b07      	ldr	r3, [pc, #28]	; (8006abc <st_update_plan_block_parameters+0x28>)
 8006a9e:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8006aa0:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	f7fa f96b 	bl	8000d84 <__aeabi_fmul>
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8006aae:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8006ab0:	6228      	str	r0, [r5, #32]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8006ab2:	6023      	str	r3, [r4, #0]
 8006ab4:	bd38      	pop	{r3, r4, r5, pc}
 8006ab6:	bf00      	nop
 8006ab8:	2000332c 	.word	0x2000332c
 8006abc:	20003330 	.word	0x20003330

08006ac0 <st_prep_buffer>:
   longer than the time it takes the stepper algorithm to empty it before refilling it.
   Currently, the segment buffer conservatively holds roughly up to 40-50 msec of steps.
   NOTE: Computation units are in steps, millimeters, and minutes.
*/
void st_prep_buffer()
{
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
	if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8006ac4:	4ba0      	ldr	r3, [pc, #640]	; (8006d48 <st_prep_buffer+0x288>)
{
 8006ac6:	b08d      	sub	sp, #52	; 0x34
	if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8006ac8:	791b      	ldrb	r3, [r3, #4]
 8006aca:	07dc      	lsls	r4, r3, #31
 8006acc:	f100 8135 	bmi.w	8006d3a <st_prep_buffer+0x27a>
			 Compute the velocity profile of a new planner block based on its entry and exit
			 speeds, or recompute the profile of a partially-completed planner block if the
			 planner has updated it. For a commanded forced-deceleration, such as from a feed
			 hold, override the planner velocities and decelerate to the target exit speed.
			*/
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8006ad0:	f04f 0b00 	mov.w	fp, #0
	while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8006ad4:	4b9d      	ldr	r3, [pc, #628]	; (8006d4c <st_prep_buffer+0x28c>)
 8006ad6:	4a9e      	ldr	r2, [pc, #632]	; (8006d50 <st_prep_buffer+0x290>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	7812      	ldrb	r2, [r2, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	f000 812c 	beq.w	8006d3a <st_prep_buffer+0x27a>
		if (pl_block == NULL) {
 8006ae2:	4d9c      	ldr	r5, [pc, #624]	; (8006d54 <st_prep_buffer+0x294>)
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d14e      	bne.n	8006b88 <st_prep_buffer+0xc8>
			if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8006aea:	4b97      	ldr	r3, [pc, #604]	; (8006d48 <st_prep_buffer+0x288>)
 8006aec:	791b      	ldrb	r3, [r3, #4]
 8006aee:	0758      	lsls	r0, r3, #29
 8006af0:	f140 8126 	bpl.w	8006d40 <st_prep_buffer+0x280>
 8006af4:	f7fd fe1c 	bl	8004730 <plan_get_system_motion_block>
			else { pl_block = plan_get_current_block(); }
 8006af8:	6028      	str	r0, [r5, #0]
			if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8006afa:	682e      	ldr	r6, [r5, #0]
 8006afc:	2e00      	cmp	r6, #0
 8006afe:	f000 811c 	beq.w	8006d3a <st_prep_buffer+0x27a>
			if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 8006b02:	4c95      	ldr	r4, [pc, #596]	; (8006d58 <st_prep_buffer+0x298>)
 8006b04:	f894 8001 	ldrb.w	r8, [r4, #1]
 8006b08:	f018 0101 	ands.w	r1, r8, #1
 8006b0c:	f000 812e 	beq.w	8006d6c <st_prep_buffer+0x2ac>
					prep.recalculate_flag = false;
 8006b10:	2300      	movs	r3, #0
 8006b12:	7063      	strb	r3, [r4, #1]
			float inv_2_accel = 0.5f/pl_block->pbacceleration;
 8006b14:	f8d5 9000 	ldr.w	r9, [r5]
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8006b18:	f8c4 b018 	str.w	fp, [r4, #24]
			float inv_2_accel = 0.5f/pl_block->pbacceleration;
 8006b1c:	f8d9 7028 	ldr.w	r7, [r9, #40]	; 0x28
 8006b20:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006b24:	4639      	mov	r1, r7
 8006b26:	f7fa f9e1 	bl	8000eec <__aeabi_fdiv>
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8006b2a:	4b87      	ldr	r3, [pc, #540]	; (8006d48 <st_prep_buffer+0x288>)
			float inv_2_accel = 0.5f/pl_block->pbacceleration;
 8006b2c:	4680      	mov	r8, r0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8006b2e:	791b      	ldrb	r3, [r3, #4]
 8006b30:	f8d9 602c 	ldr.w	r6, [r9, #44]	; 0x2c
 8006b34:	f013 0202 	ands.w	r2, r3, #2
 8006b38:	f000 8171 	beq.w	8006e1e <st_prep_buffer+0x35e>
				// Compute velocity profile parameters for a feed hold in-progress. This profile overrides
				// the planner block profile, enforcing a deceleration to zero speed.
				prep.ramp_type = RAMP_DECEL;
 8006b3c:	2302      	movs	r3, #2
				// Compute decelerate distance relative to end of block.
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8006b3e:	f8d9 8020 	ldr.w	r8, [r9, #32]
				prep.ramp_type = RAMP_DECEL;
 8006b42:	7523      	strb	r3, [r4, #20]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8006b44:	4641      	mov	r1, r8
 8006b46:	f7fa f91d 	bl	8000d84 <__aeabi_fmul>
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7fa f80f 	bl	8000b70 <__aeabi_fsub>
				if (decel_dist < 0.0f) {
 8006b52:	4659      	mov	r1, fp
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8006b54:	4681      	mov	r9, r0
				if (decel_dist < 0.0f) {
 8006b56:	f7fa fab3 	bl	80010c0 <__aeabi_fcmplt>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	f000 815a 	beq.w	8006e14 <st_prep_buffer+0x354>
					// Deceleration through entire planner block. End of feed hold is not in this block.
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->pbacceleration*pl_block->millimeters);
 8006b60:	4639      	mov	r1, r7
 8006b62:	4638      	mov	r0, r7
 8006b64:	f7fa f806 	bl	8000b74 <__addsf3>
 8006b68:	4631      	mov	r1, r6
 8006b6a:	f7fa f90b 	bl	8000d84 <__aeabi_fmul>
 8006b6e:	4601      	mov	r1, r0
 8006b70:	4640      	mov	r0, r8
 8006b72:	f7f9 fffd 	bl	8000b70 <__aeabi_fsub>
 8006b76:	f001 fdc5 	bl	8008704 <sqrtf>
 8006b7a:	6260      	str	r0, [r4, #36]	; 0x24
					prep.maximum_speed = prep.exit_speed;
				}
			}

			#ifdef VARIABLE_SPINDLE
				bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8006b7c:	4b72      	ldr	r3, [pc, #456]	; (8006d48 <st_prep_buffer+0x288>)
 8006b7e:	4a72      	ldr	r2, [pc, #456]	; (8006d48 <st_prep_buffer+0x288>)
 8006b80:	791b      	ldrb	r3, [r3, #4]
 8006b82:	f043 0308 	orr.w	r3, r3, #8
 8006b86:	7113      	strb	r3, [r2, #4]
			#endif
		}

		// Initialize new segment
		segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8006b88:	4b74      	ldr	r3, [pc, #464]	; (8006d5c <st_prep_buffer+0x29c>)

		// Set new segment to point to the current segment data block.
		prep_segment->st_block_index = prep.st_block_index;
 8006b8a:	4c73      	ldr	r4, [pc, #460]	; (8006d58 <st_prep_buffer+0x298>)
		segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8006b8c:	781b      	ldrb	r3, [r3, #0]
		float dt = 0.0f; // Initialize segment time
		float time_var = dt_max; // Time worker variable
		float mm_var; // mm-Distance worker variable
		float speed_var; // Speed worker variable
		float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
		float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8006b8e:	6921      	ldr	r1, [r4, #16]
		segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8006b90:	9305      	str	r3, [sp, #20]
		prep_segment->st_block_index = prep.st_block_index;
 8006b92:	9a05      	ldr	r2, [sp, #20]
 8006b94:	4b72      	ldr	r3, [pc, #456]	; (8006d60 <st_prep_buffer+0x2a0>)
 8006b96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b9a:	7822      	ldrb	r2, [r4, #0]
 8006b9c:	711a      	strb	r2, [r3, #4]
		float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 8006b9e:	682b      	ldr	r3, [r5, #0]
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8006ba4:	4618      	mov	r0, r3
		float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 8006ba6:	9306      	str	r3, [sp, #24]
		float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8006ba8:	f7f9 ffe2 	bl	8000b70 <__aeabi_fsub>
		if (minimum_mm < 0.0f) { minimum_mm = 0.0f; }
 8006bac:	4659      	mov	r1, fp
		float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8006bae:	9009      	str	r0, [sp, #36]	; 0x24
		if (minimum_mm < 0.0f) { minimum_mm = 0.0f; }
 8006bb0:	f7fa fa86 	bl	80010c0 <__aeabi_fcmplt>
 8006bb4:	b108      	cbz	r0, 8006bba <st_prep_buffer+0xfa>
 8006bb6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
			switch (prep.ramp_type) {
				case RAMP_DECEL_OVERRIDE:
					speed_var = pl_block->pbacceleration*time_var;
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
						// Cruise or cruise-deceleration types only for deceleration override.
						mm_remaining = prep.accelerate_until;
 8006bba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8006bbc:	f8d4 a020 	ldr.w	sl, [r4, #32]
						mm_remaining = prep.accelerate_until;
 8006bc0:	9302      	str	r3, [sp, #8]
				case RAMP_CRUISE:
					// NOTE: mm_var used to retain the last mm_remaining for incomplete segment time_var calculations.
					// NOTE: If maximum_speed*time_var value is too low, round-off can cause mm_var to not change. To
					//   prevent this, simply enforce a minimum speed threshold in the planner.
					mm_var = mm_remaining - prep.maximum_speed*time_var;
					if (mm_var < prep.decelerate_after) { // End of cruise.
 8006bc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006bc4:	9802      	ldr	r0, [sp, #8]
 8006bc6:	9307      	str	r3, [sp, #28]
					// NOTE: mm_var used as a misc worker variable to prevent errors when near zero speed.
					speed_var = pl_block->pbacceleration*time_var; // Used as delta speed (mm/min)
					if (prep.current_speed > speed_var) { // Check if at or below zero speed.
						// Compute distance from end of segment to end of block.
						mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
						if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8006bc8:	69a3      	ldr	r3, [r4, #24]
 8006bca:	9907      	ldr	r1, [sp, #28]
 8006bcc:	9308      	str	r3, [sp, #32]
							prep.current_speed -= speed_var;
							break; // Segment complete. Exit switch-case statement. Continue do-while loop.
						}
					}
					// Otherwise, at end of block or end of forced-deceleration.
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8006bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd0:	69e5      	ldr	r5, [r4, #28]
 8006bd2:	f894 8014 	ldrb.w	r8, [r4, #20]
 8006bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8006bd8:	f7fa fa68 	bl	80010ac <__aeabi_fcmpeq>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f000 81c7 	beq.w	8006f70 <st_prep_buffer+0x4b0>
 8006be2:	f04f 0302 	mov.w	r3, #2
 8006be6:	2700      	movs	r7, #0
 8006be8:	4e5e      	ldr	r6, [pc, #376]	; (8006d64 <st_prep_buffer+0x2a4>)
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8006bf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bf2:	9703      	str	r7, [sp, #12]
 8006bf4:	f8cd b000 	str.w	fp, [sp]
 8006bf8:	9604      	str	r6, [sp, #16]
			switch (prep.ramp_type) {
 8006bfa:	f1b8 0f01 	cmp.w	r8, #1
 8006bfe:	f000 8212 	beq.w	8007026 <st_prep_buffer+0x566>
					speed_var = pl_block->pbacceleration*time_var;
 8006c02:	9b01      	ldr	r3, [sp, #4]
 8006c04:	4630      	mov	r0, r6
 8006c06:	6a99      	ldr	r1, [r3, #40]	; 0x28
			switch (prep.ramp_type) {
 8006c08:	f0c0 81cd 	bcc.w	8006fa6 <st_prep_buffer+0x4e6>
 8006c0c:	f1b8 0f03 	cmp.w	r8, #3
 8006c10:	f040 8226 	bne.w	8007060 <st_prep_buffer+0x5a0>
					speed_var = pl_block->pbacceleration*time_var;
 8006c14:	f7fa f8b6 	bl	8000d84 <__aeabi_fmul>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8006c18:	4651      	mov	r1, sl
					speed_var = pl_block->pbacceleration*time_var;
 8006c1a:	4607      	mov	r7, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f7f9 ffa7 	bl	8000b70 <__aeabi_fsub>
 8006c22:	4601      	mov	r1, r0
 8006c24:	4638      	mov	r0, r7
 8006c26:	f7fa fa5f 	bl	80010e8 <__aeabi_fcmpge>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f000 81a5 	beq.w	8006f7a <st_prep_buffer+0x4ba>
						time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8006c30:	9902      	ldr	r1, [sp, #8]
 8006c32:	9806      	ldr	r0, [sp, #24]
 8006c34:	f7f9 ff9c 	bl	8000b70 <__aeabi_fsub>
 8006c38:	4601      	mov	r1, r0
 8006c3a:	f7f9 ff9b 	bl	8000b74 <__addsf3>
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4604      	mov	r4, r0
 8006c42:	4650      	mov	r0, sl
 8006c44:	f7f9 ff96 	bl	8000b74 <__addsf3>
 8006c48:	4601      	mov	r1, r0
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f7fa f94e 	bl	8000eec <__aeabi_fdiv>
 8006c50:	2701      	movs	r7, #1
 8006c52:	4606      	mov	r6, r0
						prep.current_speed = prep.maximum_speed;
 8006c54:	4655      	mov	r5, sl
						prep.ramp_type = RAMP_CRUISE;
 8006c56:	46b8      	mov	r8, r7
						mm_remaining = prep.accelerate_until;
 8006c58:	9c02      	ldr	r4, [sp, #8]
 8006c5a:	9703      	str	r7, [sp, #12]
					mm_remaining = prep.mm_complete;
					prep.current_speed = prep.exit_speed;
			}
			dt += time_var; // Add computed ramp time to total segment time.
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	9800      	ldr	r0, [sp, #0]
 8006c60:	f7f9 ff88 	bl	8000b74 <__addsf3>
 8006c64:	9000      	str	r0, [sp, #0]
			if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8006c66:	4601      	mov	r1, r0
 8006c68:	9804      	ldr	r0, [sp, #16]
 8006c6a:	f7fa fa47 	bl	80010fc <__aeabi_fcmpgt>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f000 8227 	beq.w	80070c2 <st_prep_buffer+0x602>
 8006c74:	9900      	ldr	r1, [sp, #0]
 8006c76:	9804      	ldr	r0, [sp, #16]
			else {
				if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
					// Increase segment time to ensure at least one step in segment. Override and loop
					// through distance calculations until minimum_mm or mm_complete.
					dt_max += DT_SEGMENT;
					time_var = dt_max - dt;
 8006c78:	f7f9 ff7a 	bl	8000b70 <__aeabi_fsub>
				} else {
					break; // **Complete** Exit loop. Segment execution time maxed.
				}
			}
		} while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8006c7c:	9908      	ldr	r1, [sp, #32]
					time_var = dt_max - dt;
 8006c7e:	4606      	mov	r6, r0
		} while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7fa fa3b 	bl	80010fc <__aeabi_fcmpgt>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	f040 8175 	bne.w	8006f76 <st_prep_buffer+0x4b6>
 8006c8c:	9a03      	ldr	r2, [sp, #12]
 8006c8e:	4b32      	ldr	r3, [pc, #200]	; (8006d58 <st_prep_buffer+0x298>)
 8006c90:	b10a      	cbz	r2, 8006c96 <st_prep_buffer+0x1d6>
 8006c92:	f883 8014 	strb.w	r8, [r3, #20]
 8006c96:	b107      	cbz	r7, 8006c9a <st_prep_buffer+0x1da>
 8006c98:	61dd      	str	r5, [r3, #28]
		#ifdef VARIABLE_SPINDLE
			/* -----------------------------------------------------------------------------------
				Compute spindle speed PWM output for step segment
			*/

			if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8006c9a:	4b33      	ldr	r3, [pc, #204]	; (8006d68 <st_prep_buffer+0x2a8>)
 8006c9c:	4f2a      	ldr	r7, [pc, #168]	; (8006d48 <st_prep_buffer+0x288>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4d2d      	ldr	r5, [pc, #180]	; (8006d58 <st_prep_buffer+0x298>)
 8006ca2:	7f5a      	ldrb	r2, [r3, #29]
 8006ca4:	b912      	cbnz	r2, 8006cac <st_prep_buffer+0x1ec>
 8006ca6:	793b      	ldrb	r3, [r7, #4]
 8006ca8:	0718      	lsls	r0, r3, #28
 8006caa:	d519      	bpl.n	8006ce0 <st_prep_buffer+0x220>
				if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8006cac:	9b01      	ldr	r3, [sp, #4]
 8006cae:	7f5b      	ldrb	r3, [r3, #29]
 8006cb0:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 8006cb4:	f000 8219 	beq.w	80070ea <st_prep_buffer+0x62a>
					float rpm = pl_block->spindle_speed;
 8006cb8:	9b01      	ldr	r3, [sp, #4]
 8006cba:	6bde      	ldr	r6, [r3, #60]	; 0x3c
					// NOTE: Feed and rapid overrides are independent of PWM value and do not alter laser power/rate.
					if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8006cbc:	b142      	cbz	r2, 8006cd0 <st_prep_buffer+0x210>
 8006cbe:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8006cc0:	69e8      	ldr	r0, [r5, #28]
 8006cc2:	f7fa f85f 	bl	8000d84 <__aeabi_fmul>
 8006cc6:	4601      	mov	r1, r0
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f7fa f85b 	bl	8000d84 <__aeabi_fmul>
 8006cce:	4606      	mov	r6, r0
					// If current_speed is zero, then may need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE)
					// but this would be instantaneous only and during a motion. May not matter at all.
					prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f7ff fbc1 	bl	8006458 <spindle_compute_pwm_value>
 8006cd6:	86a8      	strh	r0, [r5, #52]	; 0x34
				} else {
					sys.spindle_speed = 0.0f;
					prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
				}
				bit_false(sys.step_control,STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006cd8:	793b      	ldrb	r3, [r7, #4]
 8006cda:	f023 0308 	bic.w	r3, r3, #8
 8006cde:	713b      	strb	r3, [r7, #4]
			}
			prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8006ce0:	9a05      	ldr	r2, [sp, #20]
 8006ce2:	4b1f      	ldr	r3, [pc, #124]	; (8006d60 <st_prep_buffer+0x2a0>)
 8006ce4:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8006ce6:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8006cea:	eb03 0208 	add.w	r2, r3, r8
 8006cee:	80d1      	strh	r1, [r2, #6]
			 However, since floats have only 7.2 significant digits, long moves with extremely
			 high step counts can exceed the precision of floats, which can lead to lost steps.
			 Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
			 supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
		*/
		float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	68e9      	ldr	r1, [r5, #12]
			prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8006cf4:	9303      	str	r3, [sp, #12]
		float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8006cf6:	f7fa f845 	bl	8000d84 <__aeabi_fmul>
 8006cfa:	9001      	str	r0, [sp, #4]
		float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8006cfc:	f001 fc02 	bl	8008504 <ceilf>
 8006d00:	4682      	mov	sl, r0
		float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8006d02:	68a8      	ldr	r0, [r5, #8]
 8006d04:	f001 fbfe 	bl	8008504 <ceilf>
		prep_segment->n_step = (uint16_t)(last_n_steps_remaining-n_steps_remaining); // Compute number of steps to execute.
 8006d08:	4651      	mov	r1, sl
		float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8006d0a:	9002      	str	r0, [sp, #8]
		prep_segment->n_step = (uint16_t)(last_n_steps_remaining-n_steps_remaining); // Compute number of steps to execute.
 8006d0c:	f7f9 ff30 	bl	8000b70 <__aeabi_fsub>
 8006d10:	f7fa fa3a 	bl	8001188 <__aeabi_f2uiz>
 8006d14:	9b05      	ldr	r3, [sp, #20]
 8006d16:	fa1f f980 	uxth.w	r9, r0
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	9b03      	ldr	r3, [sp, #12]
 8006d1e:	f823 9032 	strh.w	r9, [r3, r2, lsl #3]
 8006d22:	461e      	mov	r6, r3

		// Bail if we are at the end of a feed hold and don't have a step to execute.
		if (prep_segment->n_step == 0) {
 8006d24:	f1b9 0f00 	cmp.w	r9, #0
 8006d28:	f040 81e3 	bne.w	80070f2 <st_prep_buffer+0x632>
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 8006d2c:	793a      	ldrb	r2, [r7, #4]
 8006d2e:	0791      	lsls	r1, r2, #30
 8006d30:	f140 81df 	bpl.w	80070f2 <st_prep_buffer+0x632>
				// Less than one step to decelerate to zero speed, but already very close. AMASS
				// requires full steps to execute. So, just bail.
				bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 8006d34:	f042 0201 	orr.w	r2, r2, #1
 8006d38:	713a      	strb	r2, [r7, #4]
				plan_discard_current_block();
			}
		}

	}
}
 8006d3a:	b00d      	add	sp, #52	; 0x34
 8006d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else { pl_block = plan_get_current_block(); }
 8006d40:	f7fd fd00 	bl	8004744 <plan_get_current_block>
 8006d44:	e6d8      	b.n	8006af8 <st_prep_buffer+0x38>
 8006d46:	bf00      	nop
 8006d48:	200038d4 	.word	0x200038d4
 8006d4c:	20003469 	.word	0x20003469
 8006d50:	2000346a 	.word	0x2000346a
 8006d54:	2000332c 	.word	0x2000332c
 8006d58:	20003330 	.word	0x20003330
 8006d5c:	20003468 	.word	0x20003468
 8006d60:	20003368 	.word	0x20003368
 8006d64:	365fb23b 	.word	0x365fb23b
 8006d68:	20003890 	.word	0x20003890
  block_index++;
 8006d6c:	7823      	ldrb	r3, [r4, #0]
				st_prep_block = &st_block_buffer[prep.st_block_index];
 8006d6e:	4aa5      	ldr	r2, [pc, #660]	; (8007004 <st_prep_buffer+0x544>)
  block_index++;
 8006d70:	3301      	adds	r3, #1
 8006d72:	b2db      	uxtb	r3, r3
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8006d74:	2b1f      	cmp	r3, #31
 8006d76:	bf08      	it	eq
 8006d78:	2300      	moveq	r3, #0
 8006d7a:	4696      	mov	lr, r2
				st_prep_block = &st_block_buffer[prep.st_block_index];
 8006d7c:	48a2      	ldr	r0, [pc, #648]	; (8007008 <st_prep_buffer+0x548>)
				prep.st_block_index = st_next_block_index(prep.st_block_index);
 8006d7e:	7023      	strb	r3, [r4, #0]
				st_prep_block = &st_block_buffer[prep.st_block_index];
 8006d80:	015b      	lsls	r3, r3, #5
 8006d82:	18d7      	adds	r7, r2, r3
 8006d84:	6007      	str	r7, [r0, #0]
				st_prep_block->direction_bits = pl_block->direction_bits;
 8006d86:	7f30      	ldrb	r0, [r6, #28]
 8006d88:	7738      	strb	r0, [r7, #28]
					for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8006d8a:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 8006d8e:	00d2      	lsls	r2, r2, #3
 8006d90:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
 8006d94:	3101      	adds	r1, #1
 8006d96:	2906      	cmp	r1, #6
 8006d98:	d1f7      	bne.n	8006d8a <st_prep_buffer+0x2ca>
					st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8006d9a:	69b0      	ldr	r0, [r6, #24]
 8006d9c:	4473      	add	r3, lr
 8006d9e:	00c2      	lsls	r2, r0, #3
 8006da0:	619a      	str	r2, [r3, #24]
				prep.steps_remaining = (float)pl_block->step_event_count;
 8006da2:	f7f9 ff97 	bl	8000cd4 <__aeabi_ui2f>
				prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8006da6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
				prep.steps_remaining = (float)pl_block->step_event_count;
 8006da8:	60a0      	str	r0, [r4, #8]
				prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8006daa:	f7fa f89f 	bl	8000eec <__aeabi_fdiv>
 8006dae:	4601      	mov	r1, r0
 8006db0:	60e0      	str	r0, [r4, #12]
				prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8006db2:	4896      	ldr	r0, [pc, #600]	; (800700c <st_prep_buffer+0x54c>)
 8006db4:	f7fa f89a 	bl	8000eec <__aeabi_fdiv>
				if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8006db8:	4b95      	ldr	r3, [pc, #596]	; (8007010 <st_prep_buffer+0x550>)
				prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8006dba:	6120      	str	r0, [r4, #16]
				if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8006dbc:	791b      	ldrb	r3, [r3, #4]
				prep.dt_remainder = 0.0f; // Reset for new segment block
 8006dbe:	f8c4 b004 	str.w	fp, [r4, #4]
				if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8006dc2:	0799      	lsls	r1, r3, #30
 8006dc4:	d402      	bmi.n	8006dcc <st_prep_buffer+0x30c>
 8006dc6:	f018 0f08 	tst.w	r8, #8
 8006dca:	d01e      	beq.n	8006e0a <st_prep_buffer+0x34a>
					prep.current_speed = prep.exit_speed;
 8006dcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
					prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8006dce:	f028 0808 	bic.w	r8, r8, #8
					prep.current_speed = prep.exit_speed;
 8006dd2:	61e1      	str	r1, [r4, #28]
					pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	f7f9 ffd5 	bl	8000d84 <__aeabi_fmul>
					prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8006dda:	f884 8001 	strb.w	r8, [r4, #1]
					pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8006dde:	6230      	str	r0, [r6, #32]
					st_prep_block->is_pwm_rate_adjusted = false;
 8006de0:	2300      	movs	r3, #0
 8006de2:	777b      	strb	r3, [r7, #29]
					if (settings.flags & BITFLAG_LASER_MODE) {
 8006de4:	4b8b      	ldr	r3, [pc, #556]	; (8007014 <st_prep_buffer+0x554>)
 8006de6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006dea:	079a      	lsls	r2, r3, #30
 8006dec:	f57f ae92 	bpl.w	8006b14 <st_prep_buffer+0x54>
						if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8006df0:	7f73      	ldrb	r3, [r6, #29]
 8006df2:	069b      	lsls	r3, r3, #26
 8006df4:	f57f ae8e 	bpl.w	8006b14 <st_prep_buffer+0x54>
							prep.inv_rate = 1.0f/pl_block->programmed_rate;
 8006df8:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8006dfa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006dfe:	f7fa f875 	bl	8000eec <__aeabi_fdiv>
							st_prep_block->is_pwm_rate_adjusted = true;
 8006e02:	2301      	movs	r3, #1
							prep.inv_rate = 1.0f/pl_block->programmed_rate;
 8006e04:	6320      	str	r0, [r4, #48]	; 0x30
							st_prep_block->is_pwm_rate_adjusted = true;
 8006e06:	777b      	strb	r3, [r7, #29]
 8006e08:	e684      	b.n	8006b14 <st_prep_buffer+0x54>
					prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8006e0a:	6a30      	ldr	r0, [r6, #32]
 8006e0c:	f001 fc7a 	bl	8008704 <sqrtf>
 8006e10:	61e0      	str	r0, [r4, #28]
 8006e12:	e7e5      	b.n	8006de0 <st_prep_buffer+0x320>
					prep.mm_complete = decel_dist; // End of feed hold.
 8006e14:	f8c4 9018 	str.w	r9, [r4, #24]
					prep.exit_speed = 0.0f;
 8006e18:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
 8006e1c:	e6ae      	b.n	8006b7c <st_prep_buffer+0xbc>
				prep.accelerate_until = pl_block->millimeters;
 8006e1e:	62a6      	str	r6, [r4, #40]	; 0x28
				if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8006e20:	075e      	lsls	r6, r3, #29
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8006e22:	7522      	strb	r2, [r4, #20]
				if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8006e24:	d53b      	bpl.n	8006e9e <st_prep_buffer+0x3de>
					prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 8006e26:	46da      	mov	sl, fp
 8006e28:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
				nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8006e2c:	6828      	ldr	r0, [r5, #0]
 8006e2e:	f7fd fcbf 	bl	80047b0 <plan_compute_profile_nominal_speed>
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8006e32:	4601      	mov	r1, r0
				nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8006e34:	9002      	str	r0, [sp, #8]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8006e36:	f7f9 ffa5 	bl	8000d84 <__aeabi_fmul>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8006e3a:	682b      	ldr	r3, [r5, #0]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8006e3c:	4681      	mov	r9, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	9b00      	ldr	r3, [sp, #0]
 8006e46:	6a1e      	ldr	r6, [r3, #32]
				if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8006e48:	4631      	mov	r1, r6
 8006e4a:	f7fa f939 	bl	80010c0 <__aeabi_fcmplt>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d039      	beq.n	8006ec6 <st_prep_buffer+0x406>
					prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8006e52:	4649      	mov	r1, r9
 8006e54:	4630      	mov	r0, r6
 8006e56:	f7f9 fe8b 	bl	8000b70 <__aeabi_fsub>
 8006e5a:	4641      	mov	r1, r8
 8006e5c:	f7f9 ff92 	bl	8000d84 <__aeabi_fmul>
 8006e60:	4601      	mov	r1, r0
 8006e62:	9801      	ldr	r0, [sp, #4]
 8006e64:	f7f9 fe84 	bl	8000b70 <__aeabi_fsub>
					if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8006e68:	4659      	mov	r1, fp
					prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8006e6a:	62a0      	str	r0, [r4, #40]	; 0x28
					if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8006e6c:	f7fa f932 	bl	80010d4 <__aeabi_fcmple>
 8006e70:	b1e0      	cbz	r0, 8006eac <st_prep_buffer+0x3ec>
						prep.ramp_type = RAMP_DECEL;
 8006e72:	2302      	movs	r3, #2
 8006e74:	7523      	strb	r3, [r4, #20]
						prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->pbacceleration*pl_block->millimeters);
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006e7a:	4608      	mov	r0, r1
 8006e7c:	f7f9 fe7a 	bl	8000b74 <__addsf3>
 8006e80:	9901      	ldr	r1, [sp, #4]
 8006e82:	f7f9 ff7f 	bl	8000d84 <__aeabi_fmul>
 8006e86:	4601      	mov	r1, r0
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f7f9 fe71 	bl	8000b70 <__aeabi_fsub>
 8006e8e:	f001 fc39 	bl	8008704 <sqrtf>
						prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8006e92:	7863      	ldrb	r3, [r4, #1]
						prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->pbacceleration*pl_block->millimeters);
 8006e94:	6260      	str	r0, [r4, #36]	; 0x24
						prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8006e96:	f043 0308 	orr.w	r3, r3, #8
 8006e9a:	7063      	strb	r3, [r4, #1]
 8006e9c:	e66e      	b.n	8006b7c <st_prep_buffer+0xbc>
					exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 8006e9e:	f7fd fc63 	bl	8004768 <plan_get_exec_block_exit_speed_sqr>
 8006ea2:	4682      	mov	sl, r0
					prep.exit_speed = sqrtf(exit_speed_sqr);
 8006ea4:	f001 fc2e 	bl	8008704 <sqrtf>
 8006ea8:	6260      	str	r0, [r4, #36]	; 0x24
 8006eaa:	e7bf      	b.n	8006e2c <st_prep_buffer+0x36c>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8006eac:	4651      	mov	r1, sl
 8006eae:	4648      	mov	r0, r9
 8006eb0:	f7f9 fe5e 	bl	8000b70 <__aeabi_fsub>
 8006eb4:	4641      	mov	r1, r8
 8006eb6:	f7f9 ff65 	bl	8000d84 <__aeabi_fmul>
						prep.maximum_speed = nominal_speed;
 8006eba:	9b02      	ldr	r3, [sp, #8]
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8006ebc:	62e0      	str	r0, [r4, #44]	; 0x2c
						prep.maximum_speed = nominal_speed;
 8006ebe:	6223      	str	r3, [r4, #32]
						prep.ramp_type = RAMP_DECEL_OVERRIDE;
 8006ec0:	2303      	movs	r3, #3
						prep.ramp_type = RAMP_DECEL;
 8006ec2:	7523      	strb	r3, [r4, #20]
 8006ec4:	e65a      	b.n	8006b7c <st_prep_buffer+0xbc>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8006ec6:	4651      	mov	r1, sl
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f7f9 fe51 	bl	8000b70 <__aeabi_fsub>
 8006ece:	4641      	mov	r1, r8
 8006ed0:	f7f9 ff58 	bl	8000d84 <__aeabi_fmul>
 8006ed4:	9901      	ldr	r1, [sp, #4]
 8006ed6:	f7f9 fe4d 	bl	8000b74 <__addsf3>
				float intersect_distance =
 8006eda:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006ede:	f7f9 ff51 	bl	8000d84 <__aeabi_fmul>
				} else if (intersect_distance > 0.0f) {
 8006ee2:	4659      	mov	r1, fp
				float intersect_distance =
 8006ee4:	4607      	mov	r7, r0
				} else if (intersect_distance > 0.0f) {
 8006ee6:	f7fa f909 	bl	80010fc <__aeabi_fcmpgt>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d03b      	beq.n	8006f66 <st_prep_buffer+0x4a6>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 8006eee:	4639      	mov	r1, r7
 8006ef0:	9801      	ldr	r0, [sp, #4]
 8006ef2:	f7fa f903 	bl	80010fc <__aeabi_fcmpgt>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d033      	beq.n	8006f62 <st_prep_buffer+0x4a2>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 8006efa:	4651      	mov	r1, sl
 8006efc:	4648      	mov	r0, r9
 8006efe:	f7f9 fe37 	bl	8000b70 <__aeabi_fsub>
 8006f02:	4641      	mov	r1, r8
 8006f04:	f7f9 ff3e 	bl	8000d84 <__aeabi_fmul>
 8006f08:	4601      	mov	r1, r0
 8006f0a:	62e0      	str	r0, [r4, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f7fa f8f5 	bl	80010fc <__aeabi_fcmpgt>
 8006f12:	b1a8      	cbz	r0, 8006f40 <st_prep_buffer+0x480>
							prep.maximum_speed = nominal_speed;
 8006f14:	9b02      	ldr	r3, [sp, #8]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8006f16:	4631      	mov	r1, r6
							prep.maximum_speed = nominal_speed;
 8006f18:	6223      	str	r3, [r4, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8006f1a:	4648      	mov	r0, r9
 8006f1c:	f7fa f8c6 	bl	80010ac <__aeabi_fcmpeq>
 8006f20:	b108      	cbz	r0, 8006f26 <st_prep_buffer+0x466>
								prep.ramp_type = RAMP_CRUISE;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e7cd      	b.n	8006ec2 <st_prep_buffer+0x402>
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 8006f26:	4631      	mov	r1, r6
 8006f28:	4648      	mov	r0, r9
 8006f2a:	f7f9 fe21 	bl	8000b70 <__aeabi_fsub>
 8006f2e:	4641      	mov	r1, r8
 8006f30:	f7f9 ff28 	bl	8000d84 <__aeabi_fmul>
 8006f34:	4601      	mov	r1, r0
 8006f36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006f38:	f7f9 fe1a 	bl	8000b70 <__aeabi_fsub>
 8006f3c:	62a0      	str	r0, [r4, #40]	; 0x28
 8006f3e:	e61d      	b.n	8006b7c <st_prep_buffer+0xbc>
							prep.maximum_speed = sqrtf(2.0f*pl_block->pbacceleration*intersect_distance+exit_speed_sqr);
 8006f40:	9b00      	ldr	r3, [sp, #0]
							prep.accelerate_until = intersect_distance;
 8006f42:	62a7      	str	r7, [r4, #40]	; 0x28
							prep.maximum_speed = sqrtf(2.0f*pl_block->pbacceleration*intersect_distance+exit_speed_sqr);
 8006f44:	6a99      	ldr	r1, [r3, #40]	; 0x28
							prep.decelerate_after = intersect_distance;
 8006f46:	62e7      	str	r7, [r4, #44]	; 0x2c
							prep.maximum_speed = sqrtf(2.0f*pl_block->pbacceleration*intersect_distance+exit_speed_sqr);
 8006f48:	4608      	mov	r0, r1
 8006f4a:	f7f9 fe13 	bl	8000b74 <__addsf3>
 8006f4e:	4639      	mov	r1, r7
 8006f50:	f7f9 ff18 	bl	8000d84 <__aeabi_fmul>
 8006f54:	4651      	mov	r1, sl
 8006f56:	f7f9 fe0d 	bl	8000b74 <__addsf3>
 8006f5a:	f001 fbd3 	bl	8008704 <sqrtf>
 8006f5e:	6220      	str	r0, [r4, #32]
 8006f60:	e60c      	b.n	8006b7c <st_prep_buffer+0xbc>
						prep.ramp_type = RAMP_DECEL;
 8006f62:	2302      	movs	r3, #2
 8006f64:	e7ad      	b.n	8006ec2 <st_prep_buffer+0x402>
					prep.maximum_speed = prep.exit_speed;
 8006f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
					prep.accelerate_until = 0.0f;
 8006f68:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
					prep.maximum_speed = prep.exit_speed;
 8006f6c:	6223      	str	r3, [r4, #32]
 8006f6e:	e605      	b.n	8006b7c <st_prep_buffer+0xbc>
 8006f70:	f04f 0301 	mov.w	r3, #1
 8006f74:	e637      	b.n	8006be6 <st_prep_buffer+0x126>
 8006f76:	46a1      	mov	r9, r4
 8006f78:	e63f      	b.n	8006bfa <st_prep_buffer+0x13a>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8006f7a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006f7e:	4638      	mov	r0, r7
 8006f80:	f7f9 ff00 	bl	8000d84 <__aeabi_fmul>
 8006f84:	4601      	mov	r1, r0
 8006f86:	4628      	mov	r0, r5
 8006f88:	f7f9 fdf2 	bl	8000b70 <__aeabi_fsub>
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	f7f9 fef9 	bl	8000d84 <__aeabi_fmul>
 8006f92:	4601      	mov	r1, r0
 8006f94:	4648      	mov	r0, r9
 8006f96:	f7f9 fdeb 	bl	8000b70 <__aeabi_fsub>
 8006f9a:	4604      	mov	r4, r0
							prep.current_speed -= speed_var;
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f7f9 fde6 	bl	8000b70 <__aeabi_fsub>
 8006fa4:	e03c      	b.n	8007020 <st_prep_buffer+0x560>
					speed_var = pl_block->pbacceleration*time_var;
 8006fa6:	f7f9 feed 	bl	8000d84 <__aeabi_fmul>
					mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8006faa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
					speed_var = pl_block->pbacceleration*time_var;
 8006fae:	4607      	mov	r7, r0
					mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8006fb0:	f7f9 fee8 	bl	8000d84 <__aeabi_fmul>
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	f7f9 fddd 	bl	8000b74 <__addsf3>
 8006fba:	4631      	mov	r1, r6
 8006fbc:	f7f9 fee2 	bl	8000d84 <__aeabi_fmul>
 8006fc0:	4601      	mov	r1, r0
 8006fc2:	4648      	mov	r0, r9
 8006fc4:	f7f9 fdd4 	bl	8000b70 <__aeabi_fsub>
 8006fc8:	4604      	mov	r4, r0
					if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8006fca:	4601      	mov	r1, r0
 8006fcc:	9802      	ldr	r0, [sp, #8]
 8006fce:	f7fa f895 	bl	80010fc <__aeabi_fcmpgt>
 8006fd2:	b308      	cbz	r0, 8007018 <st_prep_buffer+0x558>
						time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8006fd4:	9902      	ldr	r1, [sp, #8]
 8006fd6:	9806      	ldr	r0, [sp, #24]
 8006fd8:	f7f9 fdca 	bl	8000b70 <__aeabi_fsub>
 8006fdc:	4601      	mov	r1, r0
 8006fde:	f7f9 fdc9 	bl	8000b74 <__addsf3>
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	f7f9 fdc4 	bl	8000b74 <__addsf3>
 8006fec:	4601      	mov	r1, r0
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7f9 ff7c 	bl	8000eec <__aeabi_fdiv>
 8006ff4:	2701      	movs	r7, #1
 8006ff6:	4606      	mov	r6, r0
						prep.current_speed = prep.maximum_speed;
 8006ff8:	4655      	mov	r5, sl
 8006ffa:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
						mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8006ffe:	9c02      	ldr	r4, [sp, #8]
 8007000:	9703      	str	r7, [sp, #12]
 8007002:	e62b      	b.n	8006c5c <st_prep_buffer+0x19c>
 8007004:	200034b0 	.word	0x200034b0
 8007008:	20003890 	.word	0x20003890
 800700c:	3fa00000 	.word	0x3fa00000
 8007010:	200038d4 	.word	0x200038d4
 8007014:	20003f70 	.word	0x20003f70
						prep.current_speed += speed_var;
 8007018:	4639      	mov	r1, r7
 800701a:	4628      	mov	r0, r5
 800701c:	f7f9 fdaa 	bl	8000b74 <__addsf3>
							prep.current_speed -= speed_var;
 8007020:	4605      	mov	r5, r0
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007022:	2701      	movs	r7, #1
 8007024:	e61a      	b.n	8006c5c <st_prep_buffer+0x19c>
					mm_var = mm_remaining - prep.maximum_speed*time_var;
 8007026:	4651      	mov	r1, sl
 8007028:	4630      	mov	r0, r6
 800702a:	f7f9 feab 	bl	8000d84 <__aeabi_fmul>
 800702e:	4601      	mov	r1, r0
 8007030:	4648      	mov	r0, r9
 8007032:	f7f9 fd9d 	bl	8000b70 <__aeabi_fsub>
					if (mm_var < prep.decelerate_after) { // End of cruise.
 8007036:	9907      	ldr	r1, [sp, #28]
					mm_var = mm_remaining - prep.maximum_speed*time_var;
 8007038:	4604      	mov	r4, r0
					if (mm_var < prep.decelerate_after) { // End of cruise.
 800703a:	f7fa f841 	bl	80010c0 <__aeabi_fcmplt>
 800703e:	2800      	cmp	r0, #0
 8007040:	f43f ae0c 	beq.w	8006c5c <st_prep_buffer+0x19c>
						time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8007044:	9907      	ldr	r1, [sp, #28]
 8007046:	4648      	mov	r0, r9
 8007048:	f7f9 fd92 	bl	8000b70 <__aeabi_fsub>
 800704c:	4651      	mov	r1, sl
 800704e:	f7f9 ff4d 	bl	8000eec <__aeabi_fdiv>
 8007052:	f8cd 800c 	str.w	r8, [sp, #12]
 8007056:	4606      	mov	r6, r0
						mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 8007058:	9c07      	ldr	r4, [sp, #28]
						prep.ramp_type = RAMP_DECEL;
 800705a:	f04f 0802 	mov.w	r8, #2
 800705e:	e5fd      	b.n	8006c5c <st_prep_buffer+0x19c>
					speed_var = pl_block->pbacceleration*time_var; // Used as delta speed (mm/min)
 8007060:	f7f9 fe90 	bl	8000d84 <__aeabi_fmul>
					if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8007064:	4629      	mov	r1, r5
					speed_var = pl_block->pbacceleration*time_var; // Used as delta speed (mm/min)
 8007066:	4607      	mov	r7, r0
					if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8007068:	f7fa f82a 	bl	80010c0 <__aeabi_fcmplt>
 800706c:	b1a8      	cbz	r0, 800709a <st_prep_buffer+0x5da>
						mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 800706e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007072:	4638      	mov	r0, r7
 8007074:	f7f9 fe86 	bl	8000d84 <__aeabi_fmul>
 8007078:	4601      	mov	r1, r0
 800707a:	4628      	mov	r0, r5
 800707c:	f7f9 fd78 	bl	8000b70 <__aeabi_fsub>
 8007080:	4631      	mov	r1, r6
 8007082:	f7f9 fe7f 	bl	8000d84 <__aeabi_fmul>
 8007086:	4601      	mov	r1, r0
 8007088:	4648      	mov	r0, r9
 800708a:	f7f9 fd71 	bl	8000b70 <__aeabi_fsub>
						if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 800708e:	9908      	ldr	r1, [sp, #32]
						mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8007090:	4604      	mov	r4, r0
						if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007092:	f7fa f833 	bl	80010fc <__aeabi_fcmpgt>
 8007096:	2800      	cmp	r0, #0
 8007098:	d180      	bne.n	8006f9c <st_prep_buffer+0x4dc>
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 800709a:	9908      	ldr	r1, [sp, #32]
 800709c:	4648      	mov	r0, r9
 800709e:	f7f9 fd67 	bl	8000b70 <__aeabi_fsub>
 80070a2:	4601      	mov	r1, r0
 80070a4:	f7f9 fd66 	bl	8000b74 <__addsf3>
 80070a8:	4629      	mov	r1, r5
 80070aa:	4604      	mov	r4, r0
 80070ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070ae:	f7f9 fd61 	bl	8000b74 <__addsf3>
 80070b2:	4601      	mov	r1, r0
 80070b4:	4620      	mov	r0, r4
 80070b6:	f7f9 ff19 	bl	8000eec <__aeabi_fdiv>
					prep.current_speed = prep.exit_speed;
 80070ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 80070bc:	4606      	mov	r6, r0
					mm_remaining = prep.mm_complete;
 80070be:	9c08      	ldr	r4, [sp, #32]
 80070c0:	e7af      	b.n	8007022 <st_prep_buffer+0x562>
				if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 80070c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070c4:	4620      	mov	r0, r4
 80070c6:	f7fa f819 	bl	80010fc <__aeabi_fcmpgt>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f43f adde 	beq.w	8006c8c <st_prep_buffer+0x1cc>
					dt_max += DT_SEGMENT;
 80070d0:	9804      	ldr	r0, [sp, #16]
 80070d2:	f7f9 f9ad 	bl	8000430 <__aeabi_f2d>
 80070d6:	a346      	add	r3, pc, #280	; (adr r3, 80071f0 <st_prep_buffer+0x730>)
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	f7f9 f84a 	bl	8000174 <__adddf3>
 80070e0:	f7f9 fcf2 	bl	8000ac8 <__aeabi_d2f>
					time_var = dt_max - dt;
 80070e4:	9900      	ldr	r1, [sp, #0]
					dt_max += DT_SEGMENT;
 80070e6:	9004      	str	r0, [sp, #16]
 80070e8:	e5c6      	b.n	8006c78 <st_prep_buffer+0x1b8>
					sys.spindle_speed = 0.0f;
 80070ea:	f8c7 b010 	str.w	fp, [r7, #16]
					prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 80070ee:	86ab      	strh	r3, [r5, #52]	; 0x34
 80070f0:	e5f2      	b.n	8006cd8 <st_prep_buffer+0x218>
		dt += prep.dt_remainder; // Apply previous segment partial step execute time
 80070f2:	9800      	ldr	r0, [sp, #0]
 80070f4:	6869      	ldr	r1, [r5, #4]
 80070f6:	9303      	str	r3, [sp, #12]
 80070f8:	f7f9 fd3c 	bl	8000b74 <__addsf3>
		float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 80070fc:	9901      	ldr	r1, [sp, #4]
		dt += prep.dt_remainder; // Apply previous segment partial step execute time
 80070fe:	9000      	str	r0, [sp, #0]
		float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8007100:	9802      	ldr	r0, [sp, #8]
 8007102:	f7f9 fd35 	bl	8000b70 <__aeabi_fsub>
 8007106:	9a00      	ldr	r2, [sp, #0]
 8007108:	4601      	mov	r1, r0
 800710a:	4610      	mov	r0, r2
 800710c:	f7f9 feee 	bl	8000eec <__aeabi_fdiv>
		uint32_t cycles = (uint32_t)ceilf(fTICKS_PER_MINUTE*inv_rate); // (cycles/step)
 8007110:	4a39      	ldr	r2, [pc, #228]	; (80071f8 <st_prep_buffer+0x738>)
		float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8007112:	9000      	str	r0, [sp, #0]
		uint32_t cycles = (uint32_t)ceilf(fTICKS_PER_MINUTE*inv_rate); // (cycles/step)
 8007114:	6811      	ldr	r1, [r2, #0]
 8007116:	f7f9 fe35 	bl	8000d84 <__aeabi_fmul>
 800711a:	f001 f9f3 	bl	8008504 <ceilf>
 800711e:	f7fa f833 	bl	8001188 <__aeabi_f2uiz>
			if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 8007122:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007126:	4a35      	ldr	r2, [pc, #212]	; (80071fc <st_prep_buffer+0x73c>)
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	fbb2 f1f1 	udiv	r1, r2, r1
 8007130:	4288      	cmp	r0, r1
 8007132:	d235      	bcs.n	80071a0 <st_prep_buffer+0x6e0>
 8007134:	2200      	movs	r2, #0
 8007136:	eb06 0308 	add.w	r3, r6, r8
 800713a:	715a      	strb	r2, [r3, #5]
			if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 800713c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
			else { prep_segment->cycles_per_tick = 0xffff; } // Just set the slowest speed possible.
 8007140:	bf28      	it	cs
 8007142:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
		segment_buffer_head = segment_next_head;
 8007146:	4a2e      	ldr	r2, [pc, #184]	; (8007200 <st_prep_buffer+0x740>)
			if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 8007148:	4446      	add	r6, r8
			else { prep_segment->cycles_per_tick = 0xffff; } // Just set the slowest speed possible.
 800714a:	bf28      	it	cs
 800714c:	8073      	strhcs	r3, [r6, #2]
		segment_buffer_head = segment_next_head;
 800714e:	492d      	ldr	r1, [pc, #180]	; (8007204 <st_prep_buffer+0x744>)
 8007150:	7813      	ldrb	r3, [r2, #0]
			if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 8007152:	bf38      	it	cc
 8007154:	8070      	strhcc	r0, [r6, #2]
		segment_buffer_head = segment_next_head;
 8007156:	700b      	strb	r3, [r1, #0]
		if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007158:	3301      	adds	r3, #1
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b20      	cmp	r3, #32
 800715e:	bf08      	it	eq
 8007160:	2300      	moveq	r3, #0
		pl_block->millimeters = mm_remaining;
 8007162:	4e29      	ldr	r6, [pc, #164]	; (8007208 <st_prep_buffer+0x748>)
		if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007164:	7013      	strb	r3, [r2, #0]
		pl_block->millimeters = mm_remaining;
 8007166:	6833      	ldr	r3, [r6, #0]
		prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007168:	9901      	ldr	r1, [sp, #4]
		pl_block->millimeters = mm_remaining;
 800716a:	62dc      	str	r4, [r3, #44]	; 0x2c
		prep.steps_remaining = n_steps_remaining;
 800716c:	f8c5 a008 	str.w	sl, [r5, #8]
		prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007170:	4650      	mov	r0, sl
 8007172:	f7f9 fcfd 	bl	8000b70 <__aeabi_fsub>
 8007176:	9900      	ldr	r1, [sp, #0]
 8007178:	f7f9 fe04 	bl	8000d84 <__aeabi_fmul>
		if (mm_remaining == prep.mm_complete) {
 800717c:	69a9      	ldr	r1, [r5, #24]
		prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 800717e:	6068      	str	r0, [r5, #4]
		if (mm_remaining == prep.mm_complete) {
 8007180:	4620      	mov	r0, r4
 8007182:	f7f9 ff93 	bl	80010ac <__aeabi_fcmpeq>
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f aca4 	beq.w	8006ad4 <st_prep_buffer+0x14>
			if (mm_remaining > 0.0f) { // At end of forced-termination.
 800718c:	4659      	mov	r1, fp
 800718e:	4620      	mov	r0, r4
 8007190:	f7f9 ffb4 	bl	80010fc <__aeabi_fcmpgt>
				bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 8007194:	793b      	ldrb	r3, [r7, #4]
			if (mm_remaining > 0.0f) { // At end of forced-termination.
 8007196:	b318      	cbz	r0, 80071e0 <st_prep_buffer+0x720>
					bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 8007198:	f043 0301 	orr.w	r3, r3, #1
 800719c:	713b      	strb	r3, [r7, #4]
					return;
 800719e:	e5cc      	b.n	8006d3a <st_prep_buffer+0x27a>
				if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 80071a0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80071a4:	fbb2 f1f1 	udiv	r1, r2, r1
 80071a8:	4288      	cmp	r0, r1
 80071aa:	d20d      	bcs.n	80071c8 <st_prep_buffer+0x708>
 80071ac:	2101      	movs	r1, #1
 80071ae:	eb06 0208 	add.w	r2, r6, r8
				else { prep_segment->amass_level = 3; }
 80071b2:	7151      	strb	r1, [r2, #5]
				cycles >>= prep_segment->amass_level;
 80071b4:	eb06 0208 	add.w	r2, r6, r8
 80071b8:	7952      	ldrb	r2, [r2, #5]
				prep_segment->n_step <<= prep_segment->amass_level;
 80071ba:	fa09 f902 	lsl.w	r9, r9, r2
				cycles >>= prep_segment->amass_level;
 80071be:	40d0      	lsrs	r0, r2
				prep_segment->n_step <<= prep_segment->amass_level;
 80071c0:	9a05      	ldr	r2, [sp, #20]
 80071c2:	f823 9032 	strh.w	r9, [r3, r2, lsl #3]
 80071c6:	e7b9      	b.n	800713c <st_prep_buffer+0x67c>
				else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 80071c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80071cc:	fbb2 f2f1 	udiv	r2, r2, r1
 80071d0:	4290      	cmp	r0, r2
 80071d2:	bf38      	it	cc
 80071d4:	2102      	movcc	r1, #2
 80071d6:	eb06 0208 	add.w	r2, r6, r8
				else { prep_segment->amass_level = 3; }
 80071da:	bf28      	it	cs
 80071dc:	2103      	movcs	r1, #3
 80071de:	e7e8      	b.n	80071b2 <st_prep_buffer+0x6f2>
				if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 80071e0:	f013 0204 	ands.w	r2, r3, #4
 80071e4:	d1d8      	bne.n	8007198 <st_prep_buffer+0x6d8>
				pl_block = NULL; // Set pointer to indicate check and load next planner block.
 80071e6:	6032      	str	r2, [r6, #0]
				plan_discard_current_block();
 80071e8:	f7fd fa88 	bl	80046fc <plan_discard_current_block>
 80071ec:	e472      	b.n	8006ad4 <st_prep_buffer+0x14>
 80071ee:	bf00      	nop
 80071f0:	612f3696 	.word	0x612f3696
 80071f4:	3ecbf647 	.word	0x3ecbf647
 80071f8:	20003898 	.word	0x20003898
 80071fc:	20000008 	.word	0x20000008
 8007200:	2000346a 	.word	0x2000346a
 8007204:	20003468 	.word	0x20003468
 8007208:	2000332c 	.word	0x2000332c

0800720c <st_get_realtime_rate>:
// however is not exactly the current speed, but the speed computed in the last step segment
// in the segment buffer. It will always be behind by up to the number of segment blocks (-1)
// divided by the ACCELERATION TICKS PER SECOND in seconds.
float st_get_realtime_rate()
{
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <st_get_realtime_rate+0x14>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 8007214:	bf1a      	itte	ne
 8007216:	4b03      	ldrne	r3, [pc, #12]	; (8007224 <st_get_realtime_rate+0x18>)
 8007218:	69d8      	ldrne	r0, [r3, #28]
  }
  return 0.0f;
 800721a:	2000      	moveq	r0, #0
}
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	200038d4 	.word	0x200038d4
 8007224:	20003330 	.word	0x20003330

08007228 <system_init>:
*/

#include "grbl.h"

void system_init()
{
 8007228:	4770      	bx	lr
	...

0800722c <system_control_get_state>:
  return (READ_REG(GPIOx->IDR));
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <system_control_get_state+0x2c>)
 800722e:	689a      	ldr	r2, [r3, #8]
#endif

  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 8007230:	b290      	uxth	r0, r2
 8007232:	b180      	cbz	r0, 8007256 <system_control_get_state+0x2a>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,CON_SAFETY_DOOR_Pin)) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
 8007234:	4603      	mov	r3, r0
 8007236:	f080 0010 	eor.w	r0, r0, #16
  uint8_t control_state = 0;
 800723a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    #endif
    if (bit_isfalse(pin,CON_RESET_Pin)) { control_state |= CONTROL_PIN_INDEX_RESET; }
 800723e:	0711      	lsls	r1, r2, #28
 8007240:	bf58      	it	pl
 8007242:	f040 0002 	orrpl.w	r0, r0, #2
    if (bit_isfalse(pin,CON_FEED_HOLD_Pin)) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8007246:	079a      	lsls	r2, r3, #30
 8007248:	bf58      	it	pl
 800724a:	f040 0004 	orrpl.w	r0, r0, #4
    if (bit_isfalse(pin,CON_CYCLE_START_Pin)) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 800724e:	07db      	lsls	r3, r3, #31
 8007250:	bf58      	it	pl
 8007252:	f040 0008 	orrpl.w	r0, r0, #8
  }
  return(control_state);
}
 8007256:	4770      	bx	lr
 8007258:	40010c00 	.word	0x40010c00

0800725c <HandleControlIT>:
// only the realtime command execute variable to have the main program execute these when
// its ready. This works exactly like the character-based realtime commands when picked off
// directly from the incoming serial data stream.
#ifdef STM32
  void HandleControlIT(uint16_t Control_Pin)
  {
 800725c:	b510      	push	{r4, lr}
 800725e:	4604      	mov	r4, r0
    uint8_t pin = system_control_get_state();
 8007260:	f7ff ffe4 	bl	800722c <system_control_get_state>
    switch (Control_Pin)
 8007264:	2c02      	cmp	r4, #2
 8007266:	d008      	beq.n	800727a <HandleControlIT+0x1e>
 8007268:	d802      	bhi.n	8007270 <HandleControlIT+0x14>
 800726a:	2c01      	cmp	r4, #1
 800726c:	d00d      	beq.n	800728a <HandleControlIT+0x2e>
 800726e:	bd10      	pop	{r4, pc}
 8007270:	2c08      	cmp	r4, #8
 8007272:	d011      	beq.n	8007298 <HandleControlIT+0x3c>
 8007274:	2c10      	cmp	r4, #16
 8007276:	d015      	beq.n	80072a4 <HandleControlIT+0x48>
 8007278:	bd10      	pop	{r4, pc}
    {
    case CON_FEED_HOLD_Pin:
      if (bit_istrue(pin, CONTROL_PIN_INDEX_FEED_HOLD))
 800727a:	0740      	lsls	r0, r0, #29
 800727c:	d504      	bpl.n	8007288 <HandleControlIT+0x2c>
        bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 800727e:	4a0d      	ldr	r2, [pc, #52]	; (80072b4 <HandleControlIT+0x58>)
 8007280:	7813      	ldrb	r3, [r2, #0]
 8007282:	f043 0308 	orr.w	r3, r3, #8
      if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET))
        mc_reset();
      break;
    case CON_SAFETY_DOOR_Pin:
      if (bit_istrue(pin, CONTROL_PIN_INDEX_SAFETY_DOOR))
        bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8007286:	7013      	strb	r3, [r2, #0]
 8007288:	bd10      	pop	{r4, pc}
      if (bit_istrue(pin, CONTROL_PIN_INDEX_CYCLE_START))
 800728a:	0701      	lsls	r1, r0, #28
 800728c:	d5fc      	bpl.n	8007288 <HandleControlIT+0x2c>
        bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 800728e:	4a09      	ldr	r2, [pc, #36]	; (80072b4 <HandleControlIT+0x58>)
 8007290:	7813      	ldrb	r3, [r2, #0]
 8007292:	f043 0302 	orr.w	r3, r3, #2
 8007296:	e7f6      	b.n	8007286 <HandleControlIT+0x2a>
      if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET))
 8007298:	0782      	lsls	r2, r0, #30
 800729a:	d5f5      	bpl.n	8007288 <HandleControlIT+0x2c>
      break;
    }
  }
 800729c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mc_reset();
 80072a0:	f7fc bff4 	b.w	800428c <mc_reset>
      if (bit_istrue(pin, CONTROL_PIN_INDEX_SAFETY_DOOR))
 80072a4:	07c3      	lsls	r3, r0, #31
 80072a6:	d5ef      	bpl.n	8007288 <HandleControlIT+0x2c>
        bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 80072a8:	4a02      	ldr	r2, [pc, #8]	; (80072b4 <HandleControlIT+0x58>)
 80072aa:	7813      	ldrb	r3, [r2, #0]
 80072ac:	f043 0320 	orr.w	r3, r3, #32
 80072b0:	e7e9      	b.n	8007286 <HandleControlIT+0x2a>
 80072b2:	bf00      	nop
 80072b4:	200038e9 	.word	0x200038e9

080072b8 <system_check_safety_door_ajar>:
  }
#endif

// Returns if safety door is ajar(T) or closed(F), based on pin state.
uint8_t system_check_safety_door_ajar()
{
 80072b8:	b508      	push	{r3, lr}
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
 80072ba:	f7ff ffb7 	bl	800722c <system_control_get_state>
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 80072be:	f000 0001 	and.w	r0, r0, #1
 80072c2:	bd08      	pop	{r3, pc}

080072c4 <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4604      	mov	r4, r0
 80072c8:	2500      	movs	r5, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 80072ca:	4621      	mov	r1, r4
 80072cc:	b2e8      	uxtb	r0, r5
 80072ce:	f7fe fec3 	bl	8006058 <settings_read_startup_line>
 80072d2:	b940      	cbnz	r0, 80072e6 <system_execute_startup+0x22>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 80072d4:	2107      	movs	r1, #7
      line[0] = 0;
 80072d6:	7020      	strb	r0, [r4, #0]
    } else {
      if (line[0] != 0) {
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
 80072d8:	4620      	mov	r0, r4
 80072da:	f7fe fb99 	bl	8005a10 <report_execute_startup_message>
 80072de:	3501      	adds	r5, #1
  for (n=0; n < N_STARTUP_LINE; n++) {
 80072e0:	2d02      	cmp	r5, #2
 80072e2:	d1f2      	bne.n	80072ca <system_execute_startup+0x6>
      }
    }
  }
}
 80072e4:	bd38      	pop	{r3, r4, r5, pc}
      if (line[0] != 0) {
 80072e6:	7823      	ldrb	r3, [r4, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0f8      	beq.n	80072de <system_execute_startup+0x1a>
        uint8_t status_code = gc_execute_line(line);
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7fb fb7b 	bl	80029e8 <gc_execute_line>
        report_execute_startup_message(line,status_code);
 80072f2:	4601      	mov	r1, r0
 80072f4:	e7f0      	b.n	80072d8 <system_execute_startup+0x14>
	...

080072f8 <system_flag_wco_change>:
}



void system_flag_wco_change()
{
 80072f8:	b508      	push	{r3, lr}
  #ifdef FORCE_BUFFER_SYNC_DURING_WCO_CHANGE
    protocol_buffer_synchronize();
 80072fa:	f7fe f8d1 	bl	80054a0 <protocol_buffer_synchronize>
  #endif
  sys.report_wco_counter = 0;
 80072fe:	2200      	movs	r2, #0
 8007300:	4b01      	ldr	r3, [pc, #4]	; (8007308 <system_flag_wco_change+0x10>)
 8007302:	735a      	strb	r2, [r3, #13]
 8007304:	bd08      	pop	{r3, pc}
 8007306:	bf00      	nop
 8007308:	200038d4 	.word	0x200038d4

0800730c <system_convert_axis_steps_to_mpos>:

// Returns machine position of axis 'idx'. Must be sent a 'step' array.
// NOTE: If motor steps and machine position are not in the same coordinate frame, this function
//   serves as a central place to compute the transformation.
float system_convert_axis_steps_to_mpos(int32_t *steps, uint8_t idx)
{
 800730c:	b510      	push	{r4, lr}
 800730e:	460c      	mov	r4, r1
      pos = (float)system_convert_corexy_to_y_axis_steps(steps) / settings.steps_per_mm[idx];
    } else {
      pos = steps[idx]/settings.steps_per_mm[idx];
    }
  #else
    pos = steps[idx]/settings.steps_per_mm[idx];
 8007310:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007314:	f7f9 fce2 	bl	8000cdc <__aeabi_i2f>
 8007318:	4b02      	ldr	r3, [pc, #8]	; (8007324 <system_convert_axis_steps_to_mpos+0x18>)
 800731a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800731e:	f7f9 fde5 	bl	8000eec <__aeabi_fdiv>
  #endif
  return(pos);
}
 8007322:	bd10      	pop	{r4, pc}
 8007324:	20003f70 	.word	0x20003f70

08007328 <system_convert_array_steps_to_mpos>:


void system_convert_array_steps_to_mpos(float *position, int32_t *steps)
{
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	4605      	mov	r5, r0
 800732c:	460e      	mov	r6, r1
 800732e:	2400      	movs	r4, #0
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8007330:	b2e1      	uxtb	r1, r4
 8007332:	4630      	mov	r0, r6
 8007334:	f7ff ffea 	bl	800730c <system_convert_axis_steps_to_mpos>
 8007338:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 800733c:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 800733e:	2c06      	cmp	r4, #6
 8007340:	d1f6      	bne.n	8007330 <system_convert_array_steps_to_mpos+0x8>
  }
  return;
}
 8007342:	bd70      	pop	{r4, r5, r6, pc}

08007344 <system_check_travel_limits>:
#endif


// Checks and reports if target array exceeds machine travel limits.
uint8_t system_check_travel_limits(float *target)
{
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      } else {
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
      }
    #else
      // NOTE: max_travel is stored as negative
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8007348:	f04f 0800 	mov.w	r8, #0
 800734c:	4e0b      	ldr	r6, [pc, #44]	; (800737c <system_check_travel_limits+0x38>)
 800734e:	1f05      	subs	r5, r0, #4
 8007350:	f100 0414 	add.w	r4, r0, #20
 8007354:	f855 7f04 	ldr.w	r7, [r5, #4]!
 8007358:	4641      	mov	r1, r8
 800735a:	4638      	mov	r0, r7
 800735c:	f7f9 fece 	bl	80010fc <__aeabi_fcmpgt>
 8007360:	b948      	cbnz	r0, 8007376 <system_check_travel_limits+0x32>
 8007362:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8007366:	4638      	mov	r0, r7
 8007368:	f7f9 feaa 	bl	80010c0 <__aeabi_fcmplt>
 800736c:	b918      	cbnz	r0, 8007376 <system_check_travel_limits+0x32>
  for (idx=0; idx<N_AXIS; idx++) {
 800736e:	42a5      	cmp	r5, r4
 8007370:	d1f0      	bne.n	8007354 <system_check_travel_limits+0x10>
 8007372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8007376:	2001      	movs	r0, #1
    #endif
  }
  return(false);
}
 8007378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800737c:	20003fb4 	.word	0x20003fb4

08007380 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007380:	b672      	cpsid	i
// Special handlers for setting and clearing Grbl's real-time execution flags.
void system_set_exec_state_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_state |= (mask);
 8007382:	4a03      	ldr	r2, [pc, #12]	; (8007390 <system_set_exec_state_flag+0x10>)
 8007384:	7813      	ldrb	r3, [r2, #0]
 8007386:	4318      	orrs	r0, r3
 8007388:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800738a:	b662      	cpsie	i
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	200038e9 	.word	0x200038e9

08007394 <system_execute_line>:
{
 8007394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t char_counter = 1;
 8007396:	2301      	movs	r3, #1
  switch( line[char_counter] ) {
 8007398:	7844      	ldrb	r4, [r0, #1]
{
 800739a:	4605      	mov	r5, r0
  switch( line[char_counter] ) {
 800739c:	2c43      	cmp	r4, #67	; 0x43
  uint8_t char_counter = 1;
 800739e:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 80073a2:	d003      	beq.n	80073ac <system_execute_line+0x18>
 80073a4:	d80b      	bhi.n	80073be <system_execute_line+0x2a>
 80073a6:	b184      	cbz	r4, 80073ca <system_execute_line+0x36>
 80073a8:	2c24      	cmp	r4, #36	; 0x24
 80073aa:	d154      	bne.n	8007456 <system_execute_line+0xc2>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 80073ac:	78ad      	ldrb	r5, [r5, #2]
 80073ae:	b9d5      	cbnz	r5, 80073e6 <system_execute_line+0x52>
      switch( line[1] ) {
 80073b0:	2c43      	cmp	r4, #67	; 0x43
 80073b2:	d038      	beq.n	8007426 <system_execute_line+0x92>
 80073b4:	d81d      	bhi.n	80073f2 <system_execute_line+0x5e>
 80073b6:	2c24      	cmp	r4, #36	; 0x24
 80073b8:	d029      	beq.n	800740e <system_execute_line+0x7a>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80073ba:	2400      	movs	r4, #0
          break;
 80073bc:	e007      	b.n	80073ce <system_execute_line+0x3a>
  switch( line[char_counter] ) {
 80073be:	2c4a      	cmp	r4, #74	; 0x4a
 80073c0:	d008      	beq.n	80073d4 <system_execute_line+0x40>
 80073c2:	2c58      	cmp	r4, #88	; 0x58
 80073c4:	d0f2      	beq.n	80073ac <system_execute_line+0x18>
 80073c6:	2c47      	cmp	r4, #71	; 0x47
 80073c8:	e7ef      	b.n	80073aa <system_execute_line+0x16>
    case 0 : report_grbl_help(); break;
 80073ca:	f7fe f931 	bl	8005630 <report_grbl_help>
}
 80073ce:	4620      	mov	r0, r4
 80073d0:	b004      	add	sp, #16
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 80073d4:	4baf      	ldr	r3, [pc, #700]	; (8007694 <system_execute_line+0x300>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80073dc:	f040 8158 	bne.w	8007690 <system_execute_line+0x2fc>
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 80073e0:	7883      	ldrb	r3, [r0, #2]
 80073e2:	2b3d      	cmp	r3, #61	; 0x3d
 80073e4:	d001      	beq.n	80073ea <system_execute_line+0x56>
            default: return(STATUS_INVALID_STATEMENT);
 80073e6:	2403      	movs	r4, #3
 80073e8:	e7f1      	b.n	80073ce <system_execute_line+0x3a>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 80073ea:	f7fb fafd 	bl	80029e8 <gc_execute_line>
            return(settings_store_global_setting((uint8_t)parameter, value));
 80073ee:	4604      	mov	r4, r0
 80073f0:	e7ed      	b.n	80073ce <system_execute_line+0x3a>
      switch( line[1] ) {
 80073f2:	2c47      	cmp	r4, #71	; 0x47
 80073f4:	d014      	beq.n	8007420 <system_execute_line+0x8c>
 80073f6:	2c58      	cmp	r4, #88	; 0x58
 80073f8:	d1df      	bne.n	80073ba <system_execute_line+0x26>
          if (sys.state == STATE_ALARM) {
 80073fa:	4da6      	ldr	r5, [pc, #664]	; (8007694 <system_execute_line+0x300>)
 80073fc:	782b      	ldrb	r3, [r5, #0]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d1db      	bne.n	80073ba <system_execute_line+0x26>
            if (system_check_safety_door_ajar()) { return(STATUS_CHECK_DOOR); }
 8007402:	f7ff ff59 	bl	80072b8 <system_check_safety_door_ajar>
 8007406:	4604      	mov	r4, r0
 8007408:	b300      	cbz	r0, 800744c <system_execute_line+0xb8>
 800740a:	240d      	movs	r4, #13
 800740c:	e7df      	b.n	80073ce <system_execute_line+0x3a>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 800740e:	4ba1      	ldr	r3, [pc, #644]	; (8007694 <system_execute_line+0x300>)
 8007410:	781c      	ldrb	r4, [r3, #0]
 8007412:	f014 0418 	ands.w	r4, r4, #24
 8007416:	f040 813b 	bne.w	8007690 <system_execute_line+0x2fc>
          else { report_grbl_settings(); }
 800741a:	f7fe f90f 	bl	800563c <report_grbl_settings>
          break;
 800741e:	e7d6      	b.n	80073ce <system_execute_line+0x3a>
          report_gcode_modes();
 8007420:	f7fe fa44 	bl	80058ac <report_gcode_modes>
 8007424:	e7c9      	b.n	80073ba <system_execute_line+0x26>
          if ( sys.state == STATE_CHECK_MODE ) {
 8007426:	4b9b      	ldr	r3, [pc, #620]	; (8007694 <system_execute_line+0x300>)
 8007428:	781c      	ldrb	r4, [r3, #0]
 800742a:	2c02      	cmp	r4, #2
 800742c:	d105      	bne.n	800743a <system_execute_line+0xa6>
            mc_reset();
 800742e:	f7fc ff2d 	bl	800428c <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 8007432:	2005      	movs	r0, #5
 8007434:	f7fe f8b2 	bl	800559c <report_feedback_message>
 8007438:	e7bf      	b.n	80073ba <system_execute_line+0x26>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 800743a:	2c00      	cmp	r4, #0
 800743c:	f040 8128 	bne.w	8007690 <system_execute_line+0x2fc>
            sys.state = STATE_CHECK_MODE;
 8007440:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 8007442:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 8007444:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 8007446:	f7fe f8a9 	bl	800559c <report_feedback_message>
 800744a:	e7c0      	b.n	80073ce <system_execute_line+0x3a>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 800744c:	2003      	movs	r0, #3
 800744e:	f7fe f8a5 	bl	800559c <report_feedback_message>
            sys.state = STATE_IDLE;
 8007452:	702c      	strb	r4, [r5, #0]
 8007454:	e7bb      	b.n	80073ce <system_execute_line+0x3a>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 8007456:	4e8f      	ldr	r6, [pc, #572]	; (8007694 <system_execute_line+0x300>)
 8007458:	7833      	ldrb	r3, [r6, #0]
 800745a:	2b01      	cmp	r3, #1
 800745c:	f200 8118 	bhi.w	8007690 <system_execute_line+0x2fc>
      switch( line[1] ) {
 8007460:	2c49      	cmp	r4, #73	; 0x49
 8007462:	d077      	beq.n	8007554 <system_execute_line+0x1c0>
 8007464:	d805      	bhi.n	8007472 <system_execute_line+0xde>
 8007466:	2c23      	cmp	r4, #35	; 0x23
 8007468:	d020      	beq.n	80074ac <system_execute_line+0x118>
 800746a:	2c48      	cmp	r4, #72	; 0x48
 800746c:	d024      	beq.n	80074b8 <system_execute_line+0x124>
  uint8_t helper_var = 0; // Helper variable
 800746e:	2400      	movs	r4, #0
 8007470:	e0bb      	b.n	80075ea <system_execute_line+0x256>
      switch( line[1] ) {
 8007472:	2c52      	cmp	r4, #82	; 0x52
 8007474:	f000 808c 	beq.w	8007590 <system_execute_line+0x1fc>
 8007478:	2c53      	cmp	r4, #83	; 0x53
 800747a:	d05b      	beq.n	8007534 <system_execute_line+0x1a0>
 800747c:	2c4e      	cmp	r4, #78	; 0x4e
 800747e:	d1f6      	bne.n	800746e <system_execute_line+0xda>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 8007480:	2202      	movs	r2, #2
 8007482:	78ac      	ldrb	r4, [r5, #2]
 8007484:	f88d 2007 	strb.w	r2, [sp, #7]
 8007488:	2c00      	cmp	r4, #0
 800748a:	f040 80ab 	bne.w	80075e4 <system_execute_line+0x250>
 800748e:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 8007490:	4629      	mov	r1, r5
 8007492:	4630      	mov	r0, r6
 8007494:	f7fe fde0 	bl	8006058 <settings_read_startup_line>
 8007498:	2800      	cmp	r0, #0
 800749a:	f040 809e 	bne.w	80075da <system_execute_line+0x246>
                report_status_message(STATUS_SETTING_READ_FAIL);
 800749e:	2007      	movs	r0, #7
 80074a0:	f7fe f854 	bl	800554c <report_status_message>
 80074a4:	3401      	adds	r4, #1
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 80074a6:	2c02      	cmp	r4, #2
 80074a8:	d087      	beq.n	80073ba <system_execute_line+0x26>
 80074aa:	e7f0      	b.n	800748e <system_execute_line+0xfa>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 80074ac:	78ac      	ldrb	r4, [r5, #2]
 80074ae:	2c00      	cmp	r4, #0
 80074b0:	d199      	bne.n	80073e6 <system_execute_line+0x52>
          else { report_ngc_parameters(); }
 80074b2:	f7fe f9a1 	bl	80057f8 <report_ngc_parameters>
          break;
 80074b6:	e78a      	b.n	80073ce <system_execute_line+0x3a>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 80074b8:	4b77      	ldr	r3, [pc, #476]	; (8007698 <system_execute_line+0x304>)
 80074ba:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80074be:	06db      	lsls	r3, r3, #27
 80074c0:	f140 80e4 	bpl.w	800768c <system_execute_line+0x2f8>
          if (system_check_safety_door_ajar()) { return(STATUS_CHECK_DOOR); } // Block if safety door is ajar.
 80074c4:	f7ff fef8 	bl	80072b8 <system_check_safety_door_ajar>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d19e      	bne.n	800740a <system_execute_line+0x76>
          sys.state = STATE_HOMING; // Set system state variable
 80074cc:	2304      	movs	r3, #4
 80074ce:	7033      	strb	r3, [r6, #0]
          if (line[2] == 0) {
 80074d0:	78ab      	ldrb	r3, [r5, #2]
 80074d2:	b983      	cbnz	r3, 80074f6 <system_execute_line+0x162>
                case 'C': mc_homing_cycle(HOMING_CYCLE_C); break;
 80074d4:	f7fc fe4a 	bl	800416c <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 80074d8:	7874      	ldrb	r4, [r6, #1]
 80074da:	2c00      	cmp	r4, #0
 80074dc:	f47f af6d 	bne.w	80073ba <system_execute_line+0x26>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 80074e0:	7034      	strb	r4, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 80074e2:	f7ff f899 	bl	8006618 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 80074e6:	78ab      	ldrb	r3, [r5, #2]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f47f af66 	bne.w	80073ba <system_execute_line+0x26>
 80074ee:	4628      	mov	r0, r5
 80074f0:	f7ff fee8 	bl	80072c4 <system_execute_startup>
 80074f4:	e76b      	b.n	80073ce <system_execute_line+0x3a>
            } else if (line[3] == 0) {
 80074f6:	78ea      	ldrb	r2, [r5, #3]
 80074f8:	2a00      	cmp	r2, #0
 80074fa:	f47f af74 	bne.w	80073e6 <system_execute_line+0x52>
              switch (line[2]) {
 80074fe:	2b43      	cmp	r3, #67	; 0x43
 8007500:	d016      	beq.n	8007530 <system_execute_line+0x19c>
 8007502:	d806      	bhi.n	8007512 <system_execute_line+0x17e>
 8007504:	2b41      	cmp	r3, #65	; 0x41
 8007506:	d011      	beq.n	800752c <system_execute_line+0x198>
 8007508:	2b42      	cmp	r3, #66	; 0x42
 800750a:	f47f af6c 	bne.w	80073e6 <system_execute_line+0x52>
                case 'B': mc_homing_cycle(HOMING_CYCLE_B); break;
 800750e:	2010      	movs	r0, #16
 8007510:	e7e0      	b.n	80074d4 <system_execute_line+0x140>
              switch (line[2]) {
 8007512:	2b59      	cmp	r3, #89	; 0x59
 8007514:	d006      	beq.n	8007524 <system_execute_line+0x190>
 8007516:	2b5a      	cmp	r3, #90	; 0x5a
 8007518:	d006      	beq.n	8007528 <system_execute_line+0x194>
 800751a:	2b58      	cmp	r3, #88	; 0x58
 800751c:	f47f af63 	bne.w	80073e6 <system_execute_line+0x52>
                case 'X': mc_homing_cycle(HOMING_CYCLE_X); break;
 8007520:	2001      	movs	r0, #1
 8007522:	e7d7      	b.n	80074d4 <system_execute_line+0x140>
                case 'Y': mc_homing_cycle(HOMING_CYCLE_Y); break;
 8007524:	2002      	movs	r0, #2
 8007526:	e7d5      	b.n	80074d4 <system_execute_line+0x140>
                case 'Z': mc_homing_cycle(HOMING_CYCLE_Z); break;
 8007528:	2004      	movs	r0, #4
 800752a:	e7d3      	b.n	80074d4 <system_execute_line+0x140>
                case 'A': mc_homing_cycle(HOMING_CYCLE_A); break;
 800752c:	2008      	movs	r0, #8
 800752e:	e7d1      	b.n	80074d4 <system_execute_line+0x140>
                case 'C': mc_homing_cycle(HOMING_CYCLE_C); break;
 8007530:	2020      	movs	r0, #32
 8007532:	e7cf      	b.n	80074d4 <system_execute_line+0x140>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8007534:	78ab      	ldrb	r3, [r5, #2]
 8007536:	2b4c      	cmp	r3, #76	; 0x4c
 8007538:	f47f af55 	bne.w	80073e6 <system_execute_line+0x52>
 800753c:	78eb      	ldrb	r3, [r5, #3]
 800753e:	2b50      	cmp	r3, #80	; 0x50
 8007540:	f47f af51 	bne.w	80073e6 <system_execute_line+0x52>
 8007544:	792c      	ldrb	r4, [r5, #4]
 8007546:	2c00      	cmp	r4, #0
 8007548:	f47f af4d 	bne.w	80073e6 <system_execute_line+0x52>
          system_set_exec_state_flag(EXEC_SLEEP); // Set to execute sleep mode immediately
 800754c:	2080      	movs	r0, #128	; 0x80
 800754e:	f7ff ff17 	bl	8007380 <system_set_exec_state_flag>
          break;
 8007552:	e73c      	b.n	80073ce <system_execute_line+0x3a>
          if ( line[++char_counter] == 0 ) {
 8007554:	2302      	movs	r3, #2
 8007556:	78ac      	ldrb	r4, [r5, #2]
 8007558:	f88d 3007 	strb.w	r3, [sp, #7]
 800755c:	b934      	cbnz	r4, 800756c <system_execute_line+0x1d8>
            settings_read_build_info(line);
 800755e:	4628      	mov	r0, r5
 8007560:	f7fe fd90 	bl	8006084 <settings_read_build_info>
            report_build_info(line);
 8007564:	4628      	mov	r0, r5
 8007566:	f7fe fa65 	bl	8005a34 <report_build_info>
 800756a:	e730      	b.n	80073ce <system_execute_line+0x3a>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800756c:	2c3d      	cmp	r4, #61	; 0x3d
 800756e:	f47f af3a 	bne.w	80073e6 <system_execute_line+0x52>
 8007572:	2303      	movs	r3, #3
                line[char_counter-helper_var] = line[char_counter];
 8007574:	5cec      	ldrb	r4, [r5, r3]
 8007576:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 8007578:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 800757a:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2c00      	cmp	r4, #0
 8007582:	d1f7      	bne.n	8007574 <system_execute_line+0x1e0>
              settings_store_build_info(line);
 8007584:	4628      	mov	r0, r5
 8007586:	f88d 3007 	strb.w	r3, [sp, #7]
 800758a:	f7fe fcad 	bl	8005ee8 <settings_store_build_info>
 800758e:	e71e      	b.n	80073ce <system_execute_line+0x3a>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8007590:	78ab      	ldrb	r3, [r5, #2]
 8007592:	2b53      	cmp	r3, #83	; 0x53
 8007594:	f47f af27 	bne.w	80073e6 <system_execute_line+0x52>
 8007598:	78eb      	ldrb	r3, [r5, #3]
 800759a:	2b54      	cmp	r3, #84	; 0x54
 800759c:	f47f af23 	bne.w	80073e6 <system_execute_line+0x52>
 80075a0:	792b      	ldrb	r3, [r5, #4]
 80075a2:	2b3d      	cmp	r3, #61	; 0x3d
 80075a4:	f47f af1f 	bne.w	80073e6 <system_execute_line+0x52>
 80075a8:	79ab      	ldrb	r3, [r5, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f47f af1b 	bne.w	80073e6 <system_execute_line+0x52>
          switch (line[5]) {
 80075b0:	796b      	ldrb	r3, [r5, #5]
 80075b2:	2b24      	cmp	r3, #36	; 0x24
 80075b4:	d006      	beq.n	80075c4 <system_execute_line+0x230>
 80075b6:	2b2a      	cmp	r3, #42	; 0x2a
 80075b8:	d00d      	beq.n	80075d6 <system_execute_line+0x242>
 80075ba:	2b23      	cmp	r3, #35	; 0x23
 80075bc:	f47f af13 	bne.w	80073e6 <system_execute_line+0x52>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 80075c0:	2002      	movs	r0, #2
 80075c2:	e000      	b.n	80075c6 <system_execute_line+0x232>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 80075c4:	2001      	movs	r0, #1
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 80075c6:	f7fe fcb3 	bl	8005f30 <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 80075ca:	2009      	movs	r0, #9
 80075cc:	f7fd ffe6 	bl	800559c <report_feedback_message>
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 80075d0:	f7fc fe5c 	bl	800428c <mc_reset>
 80075d4:	e6f1      	b.n	80073ba <system_execute_line+0x26>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 80075d6:	20ff      	movs	r0, #255	; 0xff
 80075d8:	e7f5      	b.n	80075c6 <system_execute_line+0x232>
                report_startup_line(helper_var,line);
 80075da:	4629      	mov	r1, r5
 80075dc:	4630      	mov	r0, r6
 80075de:	f7fe fa01 	bl	80059e4 <report_startup_line>
 80075e2:	e75f      	b.n	80074a4 <system_execute_line+0x110>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d153      	bne.n	8007690 <system_execute_line+0x2fc>
            helper_var = true;  // Set helper_var to flag storing method.
 80075e8:	2401      	movs	r4, #1
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 80075ea:	aa02      	add	r2, sp, #8
 80075ec:	f10d 0107 	add.w	r1, sp, #7
 80075f0:	4628      	mov	r0, r5
 80075f2:	f7fc fe75 	bl	80042e0 <read_float>
 80075f6:	b908      	cbnz	r0, 80075fc <system_execute_line+0x268>
 80075f8:	2402      	movs	r4, #2
 80075fa:	e6e8      	b.n	80073ce <system_execute_line+0x3a>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 80075fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	5ceb      	ldrb	r3, [r5, r3]
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	2b3d      	cmp	r3, #61	; 0x3d
 8007608:	f88d 2007 	strb.w	r2, [sp, #7]
 800760c:	f47f aeeb 	bne.w	80073e6 <system_execute_line+0x52>
          if (helper_var) { // Store startup line
 8007610:	b1f4      	cbz	r4, 8007650 <system_execute_line+0x2bc>
 8007612:	4613      	mov	r3, r2
              line[char_counter-helper_var] = line[char_counter];
 8007614:	5cec      	ldrb	r4, [r5, r3]
 8007616:	1a98      	subs	r0, r3, r2
 8007618:	18e9      	adds	r1, r5, r3
 800761a:	542c      	strb	r4, [r5, r0]
            } while (line[char_counter++] != 0);
 800761c:	7809      	ldrb	r1, [r1, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2900      	cmp	r1, #0
 8007624:	d1f6      	bne.n	8007614 <system_execute_line+0x280>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 8007626:	4628      	mov	r0, r5
 8007628:	f88d 3007 	strb.w	r3, [sp, #7]
 800762c:	f7fb f9dc 	bl	80029e8 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 8007630:	4604      	mov	r4, r0
 8007632:	2800      	cmp	r0, #0
 8007634:	f47f aecb 	bne.w	80073ce <system_execute_line+0x3a>
              helper_var = trunc(parameter); // Set helper_var to int value of parameter
 8007638:	9802      	ldr	r0, [sp, #8]
 800763a:	f7f8 fef9 	bl	8000430 <__aeabi_f2d>
 800763e:	f000 ff2f 	bl	80084a0 <trunc>
 8007642:	f7f9 fa21 	bl	8000a88 <__aeabi_d2uiz>
              settings_store_startup_line(helper_var,line);
 8007646:	4629      	mov	r1, r5
 8007648:	b2c0      	uxtb	r0, r0
 800764a:	f7fe fc3d 	bl	8005ec8 <settings_store_startup_line>
 800764e:	e6be      	b.n	80073ce <system_execute_line+0x3a>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8007650:	aa03      	add	r2, sp, #12
 8007652:	f10d 0107 	add.w	r1, sp, #7
 8007656:	4628      	mov	r0, r5
 8007658:	f7fc fe42 	bl	80042e0 <read_float>
 800765c:	2800      	cmp	r0, #0
 800765e:	d0cb      	beq.n	80075f8 <system_execute_line+0x264>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 8007660:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007664:	5ceb      	ldrb	r3, [r5, r3]
 8007666:	2b00      	cmp	r3, #0
 8007668:	f47f aebd 	bne.w	80073e6 <system_execute_line+0x52>
 800766c:	9c02      	ldr	r4, [sp, #8]
 800766e:	490b      	ldr	r1, [pc, #44]	; (800769c <system_execute_line+0x308>)
 8007670:	4620      	mov	r0, r4
 8007672:	f7f9 fd43 	bl	80010fc <__aeabi_fcmpgt>
 8007676:	2800      	cmp	r0, #0
 8007678:	f47f aeb5 	bne.w	80073e6 <system_execute_line+0x52>
            return(settings_store_global_setting((uint8_t)parameter, value));
 800767c:	4620      	mov	r0, r4
 800767e:	f7f9 fd83 	bl	8001188 <__aeabi_f2uiz>
 8007682:	9903      	ldr	r1, [sp, #12]
 8007684:	b2c0      	uxtb	r0, r0
 8007686:	f7fe fd3f 	bl	8006108 <settings_store_global_setting>
 800768a:	e6b0      	b.n	80073ee <system_execute_line+0x5a>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 800768c:	2405      	movs	r4, #5
 800768e:	e69e      	b.n	80073ce <system_execute_line+0x3a>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 8007690:	2408      	movs	r4, #8
 8007692:	e69c      	b.n	80073ce <system_execute_line+0x3a>
 8007694:	200038d4 	.word	0x200038d4
 8007698:	20003f70 	.word	0x20003f70
 800769c:	437f0000 	.word	0x437f0000

080076a0 <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 80076a0:	b672      	cpsid	i

void system_clear_exec_state_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 80076a2:	4a03      	ldr	r2, [pc, #12]	; (80076b0 <system_clear_exec_state_flag+0x10>)
 80076a4:	7813      	ldrb	r3, [r2, #0]
 80076a6:	ea23 0000 	bic.w	r0, r3, r0
 80076aa:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80076ac:	b662      	cpsie	i
 80076ae:	4770      	bx	lr
 80076b0:	200038e9 	.word	0x200038e9

080076b4 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i" : : : "memory");
 80076b4:	b672      	cpsid	i

void system_set_exec_alarm(uint8_t code)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_alarm |= (code);
 80076b6:	4a03      	ldr	r2, [pc, #12]	; (80076c4 <system_set_exec_alarm+0x10>)
 80076b8:	7813      	ldrb	r3, [r2, #0]
 80076ba:	4318      	orrs	r0, r3
 80076bc:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80076be:	b662      	cpsie	i
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	2000391c 	.word	0x2000391c

080076c8 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i" : : : "memory");
 80076c8:	b672      	cpsid	i

void system_clear_exec_alarm()
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_alarm = 0;
 80076ca:	2200      	movs	r2, #0
 80076cc:	4b01      	ldr	r3, [pc, #4]	; (80076d4 <system_clear_exec_alarm+0xc>)
 80076ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80076d0:	b662      	cpsie	i
 80076d2:	4770      	bx	lr
 80076d4:	2000391c 	.word	0x2000391c

080076d8 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 80076d8:	b672      	cpsid	i

void system_set_exec_motion_override_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 80076da:	4a03      	ldr	r2, [pc, #12]	; (80076e8 <system_set_exec_motion_override_flag+0x10>)
 80076dc:	7813      	ldrb	r3, [r2, #0]
 80076de:	4318      	orrs	r0, r3
 80076e0:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80076e2:	b662      	cpsie	i
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	200038d0 	.word	0x200038d0

080076ec <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 80076ec:	b672      	cpsid	i

void system_set_exec_accessory_override_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 80076ee:	4a03      	ldr	r2, [pc, #12]	; (80076fc <system_set_exec_accessory_override_flag+0x10>)
 80076f0:	7813      	ldrb	r3, [r2, #0]
 80076f2:	4318      	orrs	r0, r3
 80076f4:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80076f6:	b662      	cpsie	i
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	200038e8 	.word	0x200038e8

08007700 <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007700:	b672      	cpsid	i

void system_clear_exec_motion_overrides()
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 8007702:	2200      	movs	r2, #0
 8007704:	4b01      	ldr	r3, [pc, #4]	; (800770c <system_clear_exec_motion_overrides+0xc>)
 8007706:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007708:	b662      	cpsie	i
 800770a:	4770      	bx	lr
 800770c:	200038d0 	.word	0x200038d0

08007710 <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007710:	b672      	cpsid	i

void system_clear_exec_accessory_overrides()
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 8007712:	2200      	movs	r2, #0
 8007714:	4b01      	ldr	r3, [pc, #4]	; (800771c <system_clear_exec_accessory_overrides+0xc>)
 8007716:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007718:	b662      	cpsie	i
 800771a:	4770      	bx	lr
 800771c:	200038e8 	.word	0x200038e8

08007720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007720:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007722:	e003      	b.n	800772c <LoopCopyDataInit>

08007724 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007724:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007726:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007728:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800772a:	3104      	adds	r1, #4

0800772c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800772c:	480a      	ldr	r0, [pc, #40]	; (8007758 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800772e:	4b0b      	ldr	r3, [pc, #44]	; (800775c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007730:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007732:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007734:	d3f6      	bcc.n	8007724 <CopyDataInit>
  ldr r2, =_sbss
 8007736:	4a0a      	ldr	r2, [pc, #40]	; (8007760 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007738:	e002      	b.n	8007740 <LoopFillZerobss>

0800773a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800773a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800773c:	f842 3b04 	str.w	r3, [r2], #4

08007740 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007740:	4b08      	ldr	r3, [pc, #32]	; (8007764 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007742:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007744:	d3f9      	bcc.n	800773a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007746:	f7fa fec1 	bl	80024cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800774a:	f000 f8af 	bl	80078ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800774e:	f7fa fd3b 	bl	80021c8 <main>
  bx lr
 8007752:	4770      	bx	lr
  ldr r3, =_sidata
 8007754:	08009e5c 	.word	0x08009e5c
  ldr r0, =_sdata
 8007758:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800775c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8007760:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8007764:	200040a8 	.word	0x200040a8

08007768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007768:	e7fe      	b.n	8007768 <ADC1_2_IRQHandler>
	...

0800776c <outputs_digital_reset>:
// Reset outputs
void outputs_digital_reset()
{
  uint8_t i;
  for (i = 0; i < N_OUTPUTS_DIG; i++)
    GPIO_ResetBits(AUX_GPIO_Port, outputs_pin_mask[i]);
 800776c:	2120      	movs	r1, #32
 800776e:	4801      	ldr	r0, [pc, #4]	; (8007774 <outputs_digital_reset+0x8>)
 8007770:	f000 b890 	b.w	8007894 <GPIO_ResetBits>
 8007774:	40010c00 	.word	0x40010c00

08007778 <inoutputs_init>:
  outputs_digital_reset();
 8007778:	f7ff bff8 	b.w	800776c <outputs_digital_reset>

0800777c <outputs_digital_set>:
// Set outputs
void outputs_digital_set()
{
  uint8_t i;
  for (i = 0; i < N_OUTPUTS_DIG; i++)
    GPIO_SetBits(AUX_GPIO_Port, outputs_pin_mask[i]);
 800777c:	2120      	movs	r1, #32
 800777e:	4801      	ldr	r0, [pc, #4]	; (8007784 <outputs_digital_set+0x8>)
 8007780:	f000 b88b 	b.w	800789a <GPIO_SetBits>
 8007784:	40010c00 	.word	0x40010c00

08007788 <outputs_set_digital>:
  return outputs_state;
}

void outputs_set_digital(uint8_t bit_index, uint8_t OnOff)
{
  if (bit_index < N_OUTPUTS_DIG)
 8007788:	b940      	cbnz	r0, 800779c <outputs_set_digital+0x14>
    {
    if (OnOff)
 800778a:	b119      	cbz	r1, 8007794 <outputs_set_digital+0xc>
      GPIO_SetBits(AUX_GPIO_Port, outputs_pin_mask[bit_index]);
 800778c:	2120      	movs	r1, #32
 800778e:	4804      	ldr	r0, [pc, #16]	; (80077a0 <outputs_set_digital+0x18>)
 8007790:	f000 b883 	b.w	800789a <GPIO_SetBits>
    else
      GPIO_ResetBits(AUX_GPIO_Port, outputs_pin_mask[bit_index]);
 8007794:	2120      	movs	r1, #32
 8007796:	4802      	ldr	r0, [pc, #8]	; (80077a0 <outputs_set_digital+0x18>)
 8007798:	f000 b87c 	b.w	8007894 <GPIO_ResetBits>
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40010c00 	.word	0x40010c00

080077a4 <outputs_digital_action>:
    }
}

void outputs_digital_action(uint8_t bit_index, uint8_t Action)
{
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4605      	mov	r5, r0
 80077a8:	460c      	mov	r4, r1
  protocol_buffer_synchronize();
 80077aa:	f7fd fe79 	bl	80054a0 <protocol_buffer_synchronize>
  if (bit_index == 0xFF)
 80077ae:	2dff      	cmp	r5, #255	; 0xff
 80077b0:	d10b      	bne.n	80077ca <outputs_digital_action+0x26>
    {
    if (Action == DIGITAL_CONTROL_ON)
 80077b2:	2c01      	cmp	r4, #1
 80077b4:	d103      	bne.n	80077be <outputs_digital_action+0x1a>
      outputs_set_digital(bit_index, 1);
    else if (Action == DIGITAL_CONTROL_OFF)
      outputs_set_digital(bit_index, 0);
    }

}
 80077b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      outputs_digital_set();
 80077ba:	f7ff bfdf 	b.w	800777c <outputs_digital_set>
    else if (Action == DIGITAL_CONTROL_OFF)
 80077be:	2c02      	cmp	r4, #2
 80077c0:	d114      	bne.n	80077ec <outputs_digital_action+0x48>
}
 80077c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      outputs_digital_reset();
 80077c6:	f7ff bfd1 	b.w	800776c <outputs_digital_reset>
  else if (bit_index < N_OUTPUTS_DIG)
 80077ca:	b97d      	cbnz	r5, 80077ec <outputs_digital_action+0x48>
    if (Action == DIGITAL_CONTROL_ON)
 80077cc:	2c01      	cmp	r4, #1
 80077ce:	d105      	bne.n	80077dc <outputs_digital_action+0x38>
      GPIO_SetBits(AUX_GPIO_Port, outputs_pin_mask[bit_index]);
 80077d0:	2120      	movs	r1, #32
}
 80077d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      GPIO_SetBits(AUX_GPIO_Port, outputs_pin_mask[bit_index]);
 80077d6:	4806      	ldr	r0, [pc, #24]	; (80077f0 <outputs_digital_action+0x4c>)
 80077d8:	f000 b85f 	b.w	800789a <GPIO_SetBits>
    else if (Action == DIGITAL_CONTROL_OFF)
 80077dc:	2c02      	cmp	r4, #2
 80077de:	d105      	bne.n	80077ec <outputs_digital_action+0x48>
      outputs_set_digital(bit_index, 0);
 80077e0:	4629      	mov	r1, r5
 80077e2:	4628      	mov	r0, r5
}
 80077e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      outputs_set_digital(bit_index, 0);
 80077e8:	f7ff bfce 	b.w	8007788 <outputs_set_digital>
 80077ec:	bd38      	pop	{r3, r4, r5, pc}
 80077ee:	bf00      	nop
 80077f0:	40010c00 	.word	0x40010c00

080077f4 <outputs_analog_init>:
 80077f4:	4770      	bx	lr

080077f6 <outputs_analog_action>:
void outputs_set_analog(uint8_t channel, uint16_t value)
  {}
uint16_t outputs_compute_pwm_value(float Val)
  {return (0);}
void outputs_analog_action (uint8_t Echannel, float *pQval)
  {}
 80077f6:	4770      	bx	lr

080077f8 <wait_on_input_action>:
void inputs_digital_init()
  {}
void wait_on_input_action (uint8_t bit_index, uint8_t Mode,float *pTimeoutS)
  {}
 80077f8:	4770      	bx	lr
	...

080077fc <timing_init>:
char pDbgVal16[17];


//-------------------------------------------------------------------
void timing_init()
{
 80077fc:	b508      	push	{r3, lr}
	uTICKS_PER_MICROSECOND = SystemCoreClock/1000000;
 80077fe:	4b07      	ldr	r3, [pc, #28]	; (800781c <timing_init+0x20>)
 8007800:	4a07      	ldr	r2, [pc, #28]	; (8007820 <timing_init+0x24>)
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	4b07      	ldr	r3, [pc, #28]	; (8007824 <timing_init+0x28>)
 8007806:	fbb0 f3f3 	udiv	r3, r0, r3
 800780a:	6013      	str	r3, [r2, #0]
	fTICKS_PER_MINUTE = SystemCoreClock*60.0f;
 800780c:	f7f9 fa62 	bl	8000cd4 <__aeabi_ui2f>
 8007810:	4905      	ldr	r1, [pc, #20]	; (8007828 <timing_init+0x2c>)
 8007812:	f7f9 fab7 	bl	8000d84 <__aeabi_fmul>
 8007816:	4b05      	ldr	r3, [pc, #20]	; (800782c <timing_init+0x30>)
 8007818:	6018      	str	r0, [r3, #0]
 800781a:	bd08      	pop	{r3, pc}
 800781c:	20000008 	.word	0x20000008
 8007820:	2000389c 	.word	0x2000389c
 8007824:	000f4240 	.word	0x000f4240
 8007828:	42700000 	.word	0x42700000
 800782c:	20003898 	.word	0x20003898

08007830 <uart_sendch>:
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8007830:	4b02      	ldr	r3, [pc, #8]	; (800783c <uart_sendch+0xc>)
 8007832:	6058      	str	r0, [r3, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007834:	681a      	ldr	r2, [r3, #0]
}

void uart_sendch(uint8_t uC)
{
	LL_USART_TransmitData8(USART1, uC);
	while (!(LL_USART_IsActiveFlag_TXE(USART1)))
 8007836:	0612      	lsls	r2, r2, #24
 8007838:	d5fc      	bpl.n	8007834 <uart_sendch+0x4>
		; // sit till empty
}
 800783a:	4770      	bx	lr
 800783c:	40013800 	.word	0x40013800

08007840 <uart_sendstr>:
{
 8007840:	b508      	push	{r3, lr}
 8007842:	1e41      	subs	r1, r0, #1
	while (*pStr)
 8007844:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007848:	b900      	cbnz	r0, 800784c <uart_sendstr+0xc>
}
 800784a:	bd08      	pop	{r3, pc}
		uart_sendch(*pStr++);
 800784c:	f7ff fff0 	bl	8007830 <uart_sendch>
 8007850:	e7f8      	b.n	8007844 <uart_sendstr+0x4>
	...

08007854 <uart_init>:
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007854:	4a0b      	ldr	r2, [pc, #44]	; (8007884 <uart_init+0x30>)
{
 8007856:	b510      	push	{r4, lr}
 8007858:	68d3      	ldr	r3, [r2, #12]
  memset (pDbgStr,0,80);
 800785a:	4c0b      	ldr	r4, [pc, #44]	; (8007888 <uart_init+0x34>)
 800785c:	f043 0320 	orr.w	r3, r3, #32
 8007860:	60d3      	str	r3, [r2, #12]
 8007862:	2100      	movs	r1, #0
 8007864:	2250      	movs	r2, #80	; 0x50
 8007866:	4620      	mov	r0, r4
 8007868:	f000 f853 	bl	8007912 <memset>
  sprintf(pDbgStr,"\r\nSysClk:%ld\r\n",SystemCoreClock);    //-- Clock check for Overclocking case
 800786c:	4b07      	ldr	r3, [pc, #28]	; (800788c <uart_init+0x38>)
 800786e:	4620      	mov	r0, r4
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	4907      	ldr	r1, [pc, #28]	; (8007890 <uart_init+0x3c>)
 8007874:	f000 f856 	bl	8007924 <siprintf>
  uart_sendstr(pDbgStr);
 8007878:	4620      	mov	r0, r4
}
 800787a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  uart_sendstr(pDbgStr);
 800787e:	f7ff bfdf 	b.w	8007840 <uart_sendstr>
 8007882:	bf00      	nop
 8007884:	40013800 	.word	0x40013800
 8007888:	20004030 	.word	0x20004030
 800788c:	20000008 	.word	0x20000008
 8007890:	08009a16 	.word	0x08009a16

08007894 <GPIO_ResetBits>:

//------------------------------------------------------------------------
//-- Pin based calls, need to use HAL since LL pins and HAL pins are incompatible for F1
void GPIO_ResetBits (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8007894:	2200      	movs	r2, #0
 8007896:	f7f9 befb 	b.w	8001690 <HAL_GPIO_WritePin>

0800789a <GPIO_SetBits>:
}
void GPIO_SetBits	(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800789a:	2201      	movs	r2, #1
 800789c:	f7f9 bef8 	b.w	8001690 <HAL_GPIO_WritePin>

080078a0 <__errno>:
 80078a0:	4b01      	ldr	r3, [pc, #4]	; (80078a8 <__errno+0x8>)
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	2000000c 	.word	0x2000000c

080078ac <__libc_init_array>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	2500      	movs	r5, #0
 80078b0:	4e0c      	ldr	r6, [pc, #48]	; (80078e4 <__libc_init_array+0x38>)
 80078b2:	4c0d      	ldr	r4, [pc, #52]	; (80078e8 <__libc_init_array+0x3c>)
 80078b4:	1ba4      	subs	r4, r4, r6
 80078b6:	10a4      	asrs	r4, r4, #2
 80078b8:	42a5      	cmp	r5, r4
 80078ba:	d109      	bne.n	80078d0 <__libc_init_array+0x24>
 80078bc:	f001 ff92 	bl	80097e4 <_init>
 80078c0:	2500      	movs	r5, #0
 80078c2:	4e0a      	ldr	r6, [pc, #40]	; (80078ec <__libc_init_array+0x40>)
 80078c4:	4c0a      	ldr	r4, [pc, #40]	; (80078f0 <__libc_init_array+0x44>)
 80078c6:	1ba4      	subs	r4, r4, r6
 80078c8:	10a4      	asrs	r4, r4, #2
 80078ca:	42a5      	cmp	r5, r4
 80078cc:	d105      	bne.n	80078da <__libc_init_array+0x2e>
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078d4:	4798      	blx	r3
 80078d6:	3501      	adds	r5, #1
 80078d8:	e7ee      	b.n	80078b8 <__libc_init_array+0xc>
 80078da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078de:	4798      	blx	r3
 80078e0:	3501      	adds	r5, #1
 80078e2:	e7f2      	b.n	80078ca <__libc_init_array+0x1e>
 80078e4:	08009e54 	.word	0x08009e54
 80078e8:	08009e54 	.word	0x08009e54
 80078ec:	08009e54 	.word	0x08009e54
 80078f0:	08009e58 	.word	0x08009e58

080078f4 <memcmp>:
 80078f4:	b510      	push	{r4, lr}
 80078f6:	3901      	subs	r1, #1
 80078f8:	4402      	add	r2, r0
 80078fa:	4290      	cmp	r0, r2
 80078fc:	d101      	bne.n	8007902 <memcmp+0xe>
 80078fe:	2000      	movs	r0, #0
 8007900:	bd10      	pop	{r4, pc}
 8007902:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007906:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800790a:	42a3      	cmp	r3, r4
 800790c:	d0f5      	beq.n	80078fa <memcmp+0x6>
 800790e:	1b18      	subs	r0, r3, r4
 8007910:	bd10      	pop	{r4, pc}

08007912 <memset>:
 8007912:	4603      	mov	r3, r0
 8007914:	4402      	add	r2, r0
 8007916:	4293      	cmp	r3, r2
 8007918:	d100      	bne.n	800791c <memset+0xa>
 800791a:	4770      	bx	lr
 800791c:	f803 1b01 	strb.w	r1, [r3], #1
 8007920:	e7f9      	b.n	8007916 <memset+0x4>
	...

08007924 <siprintf>:
 8007924:	b40e      	push	{r1, r2, r3}
 8007926:	f44f 7102 	mov.w	r1, #520	; 0x208
 800792a:	b500      	push	{lr}
 800792c:	b09c      	sub	sp, #112	; 0x70
 800792e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007932:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007936:	9104      	str	r1, [sp, #16]
 8007938:	9107      	str	r1, [sp, #28]
 800793a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800793e:	ab1d      	add	r3, sp, #116	; 0x74
 8007940:	9002      	str	r0, [sp, #8]
 8007942:	9006      	str	r0, [sp, #24]
 8007944:	4808      	ldr	r0, [pc, #32]	; (8007968 <siprintf+0x44>)
 8007946:	f853 2b04 	ldr.w	r2, [r3], #4
 800794a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800794e:	6800      	ldr	r0, [r0, #0]
 8007950:	a902      	add	r1, sp, #8
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	f000 f866 	bl	8007a24 <_svfiprintf_r>
 8007958:	2200      	movs	r2, #0
 800795a:	9b02      	ldr	r3, [sp, #8]
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	b01c      	add	sp, #112	; 0x70
 8007960:	f85d eb04 	ldr.w	lr, [sp], #4
 8007964:	b003      	add	sp, #12
 8007966:	4770      	bx	lr
 8007968:	2000000c 	.word	0x2000000c

0800796c <__ssputs_r>:
 800796c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007970:	688e      	ldr	r6, [r1, #8]
 8007972:	4682      	mov	sl, r0
 8007974:	429e      	cmp	r6, r3
 8007976:	460c      	mov	r4, r1
 8007978:	4691      	mov	r9, r2
 800797a:	4698      	mov	r8, r3
 800797c:	d835      	bhi.n	80079ea <__ssputs_r+0x7e>
 800797e:	898a      	ldrh	r2, [r1, #12]
 8007980:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007984:	d031      	beq.n	80079ea <__ssputs_r+0x7e>
 8007986:	2302      	movs	r3, #2
 8007988:	6825      	ldr	r5, [r4, #0]
 800798a:	6909      	ldr	r1, [r1, #16]
 800798c:	1a6f      	subs	r7, r5, r1
 800798e:	6965      	ldr	r5, [r4, #20]
 8007990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007994:	fb95 f5f3 	sdiv	r5, r5, r3
 8007998:	f108 0301 	add.w	r3, r8, #1
 800799c:	443b      	add	r3, r7
 800799e:	429d      	cmp	r5, r3
 80079a0:	bf38      	it	cc
 80079a2:	461d      	movcc	r5, r3
 80079a4:	0553      	lsls	r3, r2, #21
 80079a6:	d531      	bpl.n	8007a0c <__ssputs_r+0xa0>
 80079a8:	4629      	mov	r1, r5
 80079aa:	f000 fb47 	bl	800803c <_malloc_r>
 80079ae:	4606      	mov	r6, r0
 80079b0:	b950      	cbnz	r0, 80079c8 <__ssputs_r+0x5c>
 80079b2:	230c      	movs	r3, #12
 80079b4:	f8ca 3000 	str.w	r3, [sl]
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f04f 30ff 	mov.w	r0, #4294967295
 80079be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c8:	463a      	mov	r2, r7
 80079ca:	6921      	ldr	r1, [r4, #16]
 80079cc:	f000 fac4 	bl	8007f58 <memcpy>
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079da:	81a3      	strh	r3, [r4, #12]
 80079dc:	6126      	str	r6, [r4, #16]
 80079de:	443e      	add	r6, r7
 80079e0:	6026      	str	r6, [r4, #0]
 80079e2:	4646      	mov	r6, r8
 80079e4:	6165      	str	r5, [r4, #20]
 80079e6:	1bed      	subs	r5, r5, r7
 80079e8:	60a5      	str	r5, [r4, #8]
 80079ea:	4546      	cmp	r6, r8
 80079ec:	bf28      	it	cs
 80079ee:	4646      	movcs	r6, r8
 80079f0:	4649      	mov	r1, r9
 80079f2:	4632      	mov	r2, r6
 80079f4:	6820      	ldr	r0, [r4, #0]
 80079f6:	f000 faba 	bl	8007f6e <memmove>
 80079fa:	68a3      	ldr	r3, [r4, #8]
 80079fc:	2000      	movs	r0, #0
 80079fe:	1b9b      	subs	r3, r3, r6
 8007a00:	60a3      	str	r3, [r4, #8]
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	441e      	add	r6, r3
 8007a06:	6026      	str	r6, [r4, #0]
 8007a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0c:	462a      	mov	r2, r5
 8007a0e:	f000 fb73 	bl	80080f8 <_realloc_r>
 8007a12:	4606      	mov	r6, r0
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d1e1      	bne.n	80079dc <__ssputs_r+0x70>
 8007a18:	6921      	ldr	r1, [r4, #16]
 8007a1a:	4650      	mov	r0, sl
 8007a1c:	f000 fac2 	bl	8007fa4 <_free_r>
 8007a20:	e7c7      	b.n	80079b2 <__ssputs_r+0x46>
	...

08007a24 <_svfiprintf_r>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	b09d      	sub	sp, #116	; 0x74
 8007a2a:	9303      	str	r3, [sp, #12]
 8007a2c:	898b      	ldrh	r3, [r1, #12]
 8007a2e:	4680      	mov	r8, r0
 8007a30:	061c      	lsls	r4, r3, #24
 8007a32:	460d      	mov	r5, r1
 8007a34:	4616      	mov	r6, r2
 8007a36:	d50f      	bpl.n	8007a58 <_svfiprintf_r+0x34>
 8007a38:	690b      	ldr	r3, [r1, #16]
 8007a3a:	b96b      	cbnz	r3, 8007a58 <_svfiprintf_r+0x34>
 8007a3c:	2140      	movs	r1, #64	; 0x40
 8007a3e:	f000 fafd 	bl	800803c <_malloc_r>
 8007a42:	6028      	str	r0, [r5, #0]
 8007a44:	6128      	str	r0, [r5, #16]
 8007a46:	b928      	cbnz	r0, 8007a54 <_svfiprintf_r+0x30>
 8007a48:	230c      	movs	r3, #12
 8007a4a:	f8c8 3000 	str.w	r3, [r8]
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a52:	e0c4      	b.n	8007bde <_svfiprintf_r+0x1ba>
 8007a54:	2340      	movs	r3, #64	; 0x40
 8007a56:	616b      	str	r3, [r5, #20]
 8007a58:	2300      	movs	r3, #0
 8007a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5c:	2320      	movs	r3, #32
 8007a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a62:	2330      	movs	r3, #48	; 0x30
 8007a64:	f04f 0b01 	mov.w	fp, #1
 8007a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a6c:	4637      	mov	r7, r6
 8007a6e:	463c      	mov	r4, r7
 8007a70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d13c      	bne.n	8007af2 <_svfiprintf_r+0xce>
 8007a78:	ebb7 0a06 	subs.w	sl, r7, r6
 8007a7c:	d00b      	beq.n	8007a96 <_svfiprintf_r+0x72>
 8007a7e:	4653      	mov	r3, sl
 8007a80:	4632      	mov	r2, r6
 8007a82:	4629      	mov	r1, r5
 8007a84:	4640      	mov	r0, r8
 8007a86:	f7ff ff71 	bl	800796c <__ssputs_r>
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	f000 80a2 	beq.w	8007bd4 <_svfiprintf_r+0x1b0>
 8007a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a92:	4453      	add	r3, sl
 8007a94:	9309      	str	r3, [sp, #36]	; 0x24
 8007a96:	783b      	ldrb	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 809b 	beq.w	8007bd4 <_svfiprintf_r+0x1b0>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa4:	9304      	str	r3, [sp, #16]
 8007aa6:	9307      	str	r3, [sp, #28]
 8007aa8:	9205      	str	r2, [sp, #20]
 8007aaa:	9306      	str	r3, [sp, #24]
 8007aac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ab0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ab2:	2205      	movs	r2, #5
 8007ab4:	7821      	ldrb	r1, [r4, #0]
 8007ab6:	4850      	ldr	r0, [pc, #320]	; (8007bf8 <_svfiprintf_r+0x1d4>)
 8007ab8:	f000 fa40 	bl	8007f3c <memchr>
 8007abc:	1c67      	adds	r7, r4, #1
 8007abe:	9b04      	ldr	r3, [sp, #16]
 8007ac0:	b9d8      	cbnz	r0, 8007afa <_svfiprintf_r+0xd6>
 8007ac2:	06d9      	lsls	r1, r3, #27
 8007ac4:	bf44      	itt	mi
 8007ac6:	2220      	movmi	r2, #32
 8007ac8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007acc:	071a      	lsls	r2, r3, #28
 8007ace:	bf44      	itt	mi
 8007ad0:	222b      	movmi	r2, #43	; 0x2b
 8007ad2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ad6:	7822      	ldrb	r2, [r4, #0]
 8007ad8:	2a2a      	cmp	r2, #42	; 0x2a
 8007ada:	d016      	beq.n	8007b0a <_svfiprintf_r+0xe6>
 8007adc:	2100      	movs	r1, #0
 8007ade:	200a      	movs	r0, #10
 8007ae0:	9a07      	ldr	r2, [sp, #28]
 8007ae2:	4627      	mov	r7, r4
 8007ae4:	783b      	ldrb	r3, [r7, #0]
 8007ae6:	3401      	adds	r4, #1
 8007ae8:	3b30      	subs	r3, #48	; 0x30
 8007aea:	2b09      	cmp	r3, #9
 8007aec:	d950      	bls.n	8007b90 <_svfiprintf_r+0x16c>
 8007aee:	b1c9      	cbz	r1, 8007b24 <_svfiprintf_r+0x100>
 8007af0:	e011      	b.n	8007b16 <_svfiprintf_r+0xf2>
 8007af2:	2b25      	cmp	r3, #37	; 0x25
 8007af4:	d0c0      	beq.n	8007a78 <_svfiprintf_r+0x54>
 8007af6:	4627      	mov	r7, r4
 8007af8:	e7b9      	b.n	8007a6e <_svfiprintf_r+0x4a>
 8007afa:	4a3f      	ldr	r2, [pc, #252]	; (8007bf8 <_svfiprintf_r+0x1d4>)
 8007afc:	463c      	mov	r4, r7
 8007afe:	1a80      	subs	r0, r0, r2
 8007b00:	fa0b f000 	lsl.w	r0, fp, r0
 8007b04:	4318      	orrs	r0, r3
 8007b06:	9004      	str	r0, [sp, #16]
 8007b08:	e7d3      	b.n	8007ab2 <_svfiprintf_r+0x8e>
 8007b0a:	9a03      	ldr	r2, [sp, #12]
 8007b0c:	1d11      	adds	r1, r2, #4
 8007b0e:	6812      	ldr	r2, [r2, #0]
 8007b10:	9103      	str	r1, [sp, #12]
 8007b12:	2a00      	cmp	r2, #0
 8007b14:	db01      	blt.n	8007b1a <_svfiprintf_r+0xf6>
 8007b16:	9207      	str	r2, [sp, #28]
 8007b18:	e004      	b.n	8007b24 <_svfiprintf_r+0x100>
 8007b1a:	4252      	negs	r2, r2
 8007b1c:	f043 0302 	orr.w	r3, r3, #2
 8007b20:	9207      	str	r2, [sp, #28]
 8007b22:	9304      	str	r3, [sp, #16]
 8007b24:	783b      	ldrb	r3, [r7, #0]
 8007b26:	2b2e      	cmp	r3, #46	; 0x2e
 8007b28:	d10d      	bne.n	8007b46 <_svfiprintf_r+0x122>
 8007b2a:	787b      	ldrb	r3, [r7, #1]
 8007b2c:	1c79      	adds	r1, r7, #1
 8007b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b30:	d132      	bne.n	8007b98 <_svfiprintf_r+0x174>
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	3702      	adds	r7, #2
 8007b36:	1d1a      	adds	r2, r3, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	9203      	str	r2, [sp, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bfb8      	it	lt
 8007b40:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b44:	9305      	str	r3, [sp, #20]
 8007b46:	4c2d      	ldr	r4, [pc, #180]	; (8007bfc <_svfiprintf_r+0x1d8>)
 8007b48:	2203      	movs	r2, #3
 8007b4a:	7839      	ldrb	r1, [r7, #0]
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 f9f5 	bl	8007f3c <memchr>
 8007b52:	b138      	cbz	r0, 8007b64 <_svfiprintf_r+0x140>
 8007b54:	2340      	movs	r3, #64	; 0x40
 8007b56:	1b00      	subs	r0, r0, r4
 8007b58:	fa03 f000 	lsl.w	r0, r3, r0
 8007b5c:	9b04      	ldr	r3, [sp, #16]
 8007b5e:	3701      	adds	r7, #1
 8007b60:	4303      	orrs	r3, r0
 8007b62:	9304      	str	r3, [sp, #16]
 8007b64:	7839      	ldrb	r1, [r7, #0]
 8007b66:	2206      	movs	r2, #6
 8007b68:	4825      	ldr	r0, [pc, #148]	; (8007c00 <_svfiprintf_r+0x1dc>)
 8007b6a:	1c7e      	adds	r6, r7, #1
 8007b6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b70:	f000 f9e4 	bl	8007f3c <memchr>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d035      	beq.n	8007be4 <_svfiprintf_r+0x1c0>
 8007b78:	4b22      	ldr	r3, [pc, #136]	; (8007c04 <_svfiprintf_r+0x1e0>)
 8007b7a:	b9fb      	cbnz	r3, 8007bbc <_svfiprintf_r+0x198>
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	3307      	adds	r3, #7
 8007b80:	f023 0307 	bic.w	r3, r3, #7
 8007b84:	3308      	adds	r3, #8
 8007b86:	9303      	str	r3, [sp, #12]
 8007b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b8a:	444b      	add	r3, r9
 8007b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8e:	e76d      	b.n	8007a6c <_svfiprintf_r+0x48>
 8007b90:	fb00 3202 	mla	r2, r0, r2, r3
 8007b94:	2101      	movs	r1, #1
 8007b96:	e7a4      	b.n	8007ae2 <_svfiprintf_r+0xbe>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	240a      	movs	r4, #10
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	9305      	str	r3, [sp, #20]
 8007ba0:	460f      	mov	r7, r1
 8007ba2:	783a      	ldrb	r2, [r7, #0]
 8007ba4:	3101      	adds	r1, #1
 8007ba6:	3a30      	subs	r2, #48	; 0x30
 8007ba8:	2a09      	cmp	r2, #9
 8007baa:	d903      	bls.n	8007bb4 <_svfiprintf_r+0x190>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0ca      	beq.n	8007b46 <_svfiprintf_r+0x122>
 8007bb0:	9005      	str	r0, [sp, #20]
 8007bb2:	e7c8      	b.n	8007b46 <_svfiprintf_r+0x122>
 8007bb4:	fb04 2000 	mla	r0, r4, r0, r2
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e7f1      	b.n	8007ba0 <_svfiprintf_r+0x17c>
 8007bbc:	ab03      	add	r3, sp, #12
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	462a      	mov	r2, r5
 8007bc2:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <_svfiprintf_r+0x1e4>)
 8007bc4:	a904      	add	r1, sp, #16
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	f3af 8000 	nop.w
 8007bcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007bd0:	4681      	mov	r9, r0
 8007bd2:	d1d9      	bne.n	8007b88 <_svfiprintf_r+0x164>
 8007bd4:	89ab      	ldrh	r3, [r5, #12]
 8007bd6:	065b      	lsls	r3, r3, #25
 8007bd8:	f53f af39 	bmi.w	8007a4e <_svfiprintf_r+0x2a>
 8007bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bde:	b01d      	add	sp, #116	; 0x74
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	462a      	mov	r2, r5
 8007bea:	4b07      	ldr	r3, [pc, #28]	; (8007c08 <_svfiprintf_r+0x1e4>)
 8007bec:	a904      	add	r1, sp, #16
 8007bee:	4640      	mov	r0, r8
 8007bf0:	f000 f884 	bl	8007cfc <_printf_i>
 8007bf4:	e7ea      	b.n	8007bcc <_svfiprintf_r+0x1a8>
 8007bf6:	bf00      	nop
 8007bf8:	08009a25 	.word	0x08009a25
 8007bfc:	08009a2b 	.word	0x08009a2b
 8007c00:	08009a2f 	.word	0x08009a2f
 8007c04:	00000000 	.word	0x00000000
 8007c08:	0800796d 	.word	0x0800796d

08007c0c <_printf_common>:
 8007c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c10:	4691      	mov	r9, r2
 8007c12:	461f      	mov	r7, r3
 8007c14:	688a      	ldr	r2, [r1, #8]
 8007c16:	690b      	ldr	r3, [r1, #16]
 8007c18:	4606      	mov	r6, r0
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	bfb8      	it	lt
 8007c1e:	4613      	movlt	r3, r2
 8007c20:	f8c9 3000 	str.w	r3, [r9]
 8007c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c28:	460c      	mov	r4, r1
 8007c2a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c2e:	b112      	cbz	r2, 8007c36 <_printf_common+0x2a>
 8007c30:	3301      	adds	r3, #1
 8007c32:	f8c9 3000 	str.w	r3, [r9]
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	0699      	lsls	r1, r3, #26
 8007c3a:	bf42      	ittt	mi
 8007c3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007c40:	3302      	addmi	r3, #2
 8007c42:	f8c9 3000 	strmi.w	r3, [r9]
 8007c46:	6825      	ldr	r5, [r4, #0]
 8007c48:	f015 0506 	ands.w	r5, r5, #6
 8007c4c:	d107      	bne.n	8007c5e <_printf_common+0x52>
 8007c4e:	f104 0a19 	add.w	sl, r4, #25
 8007c52:	68e3      	ldr	r3, [r4, #12]
 8007c54:	f8d9 2000 	ldr.w	r2, [r9]
 8007c58:	1a9b      	subs	r3, r3, r2
 8007c5a:	429d      	cmp	r5, r3
 8007c5c:	db2a      	blt.n	8007cb4 <_printf_common+0xa8>
 8007c5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007c62:	6822      	ldr	r2, [r4, #0]
 8007c64:	3300      	adds	r3, #0
 8007c66:	bf18      	it	ne
 8007c68:	2301      	movne	r3, #1
 8007c6a:	0692      	lsls	r2, r2, #26
 8007c6c:	d42f      	bmi.n	8007cce <_printf_common+0xc2>
 8007c6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c72:	4639      	mov	r1, r7
 8007c74:	4630      	mov	r0, r6
 8007c76:	47c0      	blx	r8
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d022      	beq.n	8007cc2 <_printf_common+0xb6>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	68e5      	ldr	r5, [r4, #12]
 8007c80:	f003 0306 	and.w	r3, r3, #6
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	bf18      	it	ne
 8007c88:	2500      	movne	r5, #0
 8007c8a:	f8d9 2000 	ldr.w	r2, [r9]
 8007c8e:	f04f 0900 	mov.w	r9, #0
 8007c92:	bf08      	it	eq
 8007c94:	1aad      	subeq	r5, r5, r2
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	6922      	ldr	r2, [r4, #16]
 8007c9a:	bf08      	it	eq
 8007c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	bfc4      	itt	gt
 8007ca4:	1a9b      	subgt	r3, r3, r2
 8007ca6:	18ed      	addgt	r5, r5, r3
 8007ca8:	341a      	adds	r4, #26
 8007caa:	454d      	cmp	r5, r9
 8007cac:	d11b      	bne.n	8007ce6 <_printf_common+0xda>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	4652      	mov	r2, sl
 8007cb8:	4639      	mov	r1, r7
 8007cba:	4630      	mov	r0, r6
 8007cbc:	47c0      	blx	r8
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	d103      	bne.n	8007cca <_printf_common+0xbe>
 8007cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cca:	3501      	adds	r5, #1
 8007ccc:	e7c1      	b.n	8007c52 <_printf_common+0x46>
 8007cce:	2030      	movs	r0, #48	; 0x30
 8007cd0:	18e1      	adds	r1, r4, r3
 8007cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cdc:	4422      	add	r2, r4
 8007cde:	3302      	adds	r3, #2
 8007ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ce4:	e7c3      	b.n	8007c6e <_printf_common+0x62>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4622      	mov	r2, r4
 8007cea:	4639      	mov	r1, r7
 8007cec:	4630      	mov	r0, r6
 8007cee:	47c0      	blx	r8
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d0e6      	beq.n	8007cc2 <_printf_common+0xb6>
 8007cf4:	f109 0901 	add.w	r9, r9, #1
 8007cf8:	e7d7      	b.n	8007caa <_printf_common+0x9e>
	...

08007cfc <_printf_i>:
 8007cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d00:	4617      	mov	r7, r2
 8007d02:	7e0a      	ldrb	r2, [r1, #24]
 8007d04:	b085      	sub	sp, #20
 8007d06:	2a6e      	cmp	r2, #110	; 0x6e
 8007d08:	4698      	mov	r8, r3
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d10:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007d14:	f000 80bc 	beq.w	8007e90 <_printf_i+0x194>
 8007d18:	d81a      	bhi.n	8007d50 <_printf_i+0x54>
 8007d1a:	2a63      	cmp	r2, #99	; 0x63
 8007d1c:	d02e      	beq.n	8007d7c <_printf_i+0x80>
 8007d1e:	d80a      	bhi.n	8007d36 <_printf_i+0x3a>
 8007d20:	2a00      	cmp	r2, #0
 8007d22:	f000 80c8 	beq.w	8007eb6 <_printf_i+0x1ba>
 8007d26:	2a58      	cmp	r2, #88	; 0x58
 8007d28:	f000 808a 	beq.w	8007e40 <_printf_i+0x144>
 8007d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d30:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007d34:	e02a      	b.n	8007d8c <_printf_i+0x90>
 8007d36:	2a64      	cmp	r2, #100	; 0x64
 8007d38:	d001      	beq.n	8007d3e <_printf_i+0x42>
 8007d3a:	2a69      	cmp	r2, #105	; 0x69
 8007d3c:	d1f6      	bne.n	8007d2c <_printf_i+0x30>
 8007d3e:	6821      	ldr	r1, [r4, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007d46:	d023      	beq.n	8007d90 <_printf_i+0x94>
 8007d48:	1d11      	adds	r1, r2, #4
 8007d4a:	6019      	str	r1, [r3, #0]
 8007d4c:	6813      	ldr	r3, [r2, #0]
 8007d4e:	e027      	b.n	8007da0 <_printf_i+0xa4>
 8007d50:	2a73      	cmp	r2, #115	; 0x73
 8007d52:	f000 80b4 	beq.w	8007ebe <_printf_i+0x1c2>
 8007d56:	d808      	bhi.n	8007d6a <_printf_i+0x6e>
 8007d58:	2a6f      	cmp	r2, #111	; 0x6f
 8007d5a:	d02a      	beq.n	8007db2 <_printf_i+0xb6>
 8007d5c:	2a70      	cmp	r2, #112	; 0x70
 8007d5e:	d1e5      	bne.n	8007d2c <_printf_i+0x30>
 8007d60:	680a      	ldr	r2, [r1, #0]
 8007d62:	f042 0220 	orr.w	r2, r2, #32
 8007d66:	600a      	str	r2, [r1, #0]
 8007d68:	e003      	b.n	8007d72 <_printf_i+0x76>
 8007d6a:	2a75      	cmp	r2, #117	; 0x75
 8007d6c:	d021      	beq.n	8007db2 <_printf_i+0xb6>
 8007d6e:	2a78      	cmp	r2, #120	; 0x78
 8007d70:	d1dc      	bne.n	8007d2c <_printf_i+0x30>
 8007d72:	2278      	movs	r2, #120	; 0x78
 8007d74:	496f      	ldr	r1, [pc, #444]	; (8007f34 <_printf_i+0x238>)
 8007d76:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007d7a:	e064      	b.n	8007e46 <_printf_i+0x14a>
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007d82:	1d11      	adds	r1, r2, #4
 8007d84:	6019      	str	r1, [r3, #0]
 8007d86:	6813      	ldr	r3, [r2, #0]
 8007d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e0a3      	b.n	8007ed8 <_printf_i+0x1dc>
 8007d90:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007d94:	f102 0104 	add.w	r1, r2, #4
 8007d98:	6019      	str	r1, [r3, #0]
 8007d9a:	d0d7      	beq.n	8007d4c <_printf_i+0x50>
 8007d9c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	da03      	bge.n	8007dac <_printf_i+0xb0>
 8007da4:	222d      	movs	r2, #45	; 0x2d
 8007da6:	425b      	negs	r3, r3
 8007da8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007dac:	4962      	ldr	r1, [pc, #392]	; (8007f38 <_printf_i+0x23c>)
 8007dae:	220a      	movs	r2, #10
 8007db0:	e017      	b.n	8007de2 <_printf_i+0xe6>
 8007db2:	6820      	ldr	r0, [r4, #0]
 8007db4:	6819      	ldr	r1, [r3, #0]
 8007db6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007dba:	d003      	beq.n	8007dc4 <_printf_i+0xc8>
 8007dbc:	1d08      	adds	r0, r1, #4
 8007dbe:	6018      	str	r0, [r3, #0]
 8007dc0:	680b      	ldr	r3, [r1, #0]
 8007dc2:	e006      	b.n	8007dd2 <_printf_i+0xd6>
 8007dc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dc8:	f101 0004 	add.w	r0, r1, #4
 8007dcc:	6018      	str	r0, [r3, #0]
 8007dce:	d0f7      	beq.n	8007dc0 <_printf_i+0xc4>
 8007dd0:	880b      	ldrh	r3, [r1, #0]
 8007dd2:	2a6f      	cmp	r2, #111	; 0x6f
 8007dd4:	bf14      	ite	ne
 8007dd6:	220a      	movne	r2, #10
 8007dd8:	2208      	moveq	r2, #8
 8007dda:	4957      	ldr	r1, [pc, #348]	; (8007f38 <_printf_i+0x23c>)
 8007ddc:	2000      	movs	r0, #0
 8007dde:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007de2:	6865      	ldr	r5, [r4, #4]
 8007de4:	2d00      	cmp	r5, #0
 8007de6:	60a5      	str	r5, [r4, #8]
 8007de8:	f2c0 809c 	blt.w	8007f24 <_printf_i+0x228>
 8007dec:	6820      	ldr	r0, [r4, #0]
 8007dee:	f020 0004 	bic.w	r0, r0, #4
 8007df2:	6020      	str	r0, [r4, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d13f      	bne.n	8007e78 <_printf_i+0x17c>
 8007df8:	2d00      	cmp	r5, #0
 8007dfa:	f040 8095 	bne.w	8007f28 <_printf_i+0x22c>
 8007dfe:	4675      	mov	r5, lr
 8007e00:	2a08      	cmp	r2, #8
 8007e02:	d10b      	bne.n	8007e1c <_printf_i+0x120>
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	07da      	lsls	r2, r3, #31
 8007e08:	d508      	bpl.n	8007e1c <_printf_i+0x120>
 8007e0a:	6923      	ldr	r3, [r4, #16]
 8007e0c:	6862      	ldr	r2, [r4, #4]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	bfde      	ittt	le
 8007e12:	2330      	movle	r3, #48	; 0x30
 8007e14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e1c:	ebae 0305 	sub.w	r3, lr, r5
 8007e20:	6123      	str	r3, [r4, #16]
 8007e22:	f8cd 8000 	str.w	r8, [sp]
 8007e26:	463b      	mov	r3, r7
 8007e28:	aa03      	add	r2, sp, #12
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7ff feed 	bl	8007c0c <_printf_common>
 8007e32:	3001      	adds	r0, #1
 8007e34:	d155      	bne.n	8007ee2 <_printf_i+0x1e6>
 8007e36:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3a:	b005      	add	sp, #20
 8007e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e40:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007e44:	493c      	ldr	r1, [pc, #240]	; (8007f38 <_printf_i+0x23c>)
 8007e46:	6822      	ldr	r2, [r4, #0]
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007e4e:	f100 0504 	add.w	r5, r0, #4
 8007e52:	601d      	str	r5, [r3, #0]
 8007e54:	d001      	beq.n	8007e5a <_printf_i+0x15e>
 8007e56:	6803      	ldr	r3, [r0, #0]
 8007e58:	e002      	b.n	8007e60 <_printf_i+0x164>
 8007e5a:	0655      	lsls	r5, r2, #25
 8007e5c:	d5fb      	bpl.n	8007e56 <_printf_i+0x15a>
 8007e5e:	8803      	ldrh	r3, [r0, #0]
 8007e60:	07d0      	lsls	r0, r2, #31
 8007e62:	bf44      	itt	mi
 8007e64:	f042 0220 	orrmi.w	r2, r2, #32
 8007e68:	6022      	strmi	r2, [r4, #0]
 8007e6a:	b91b      	cbnz	r3, 8007e74 <_printf_i+0x178>
 8007e6c:	6822      	ldr	r2, [r4, #0]
 8007e6e:	f022 0220 	bic.w	r2, r2, #32
 8007e72:	6022      	str	r2, [r4, #0]
 8007e74:	2210      	movs	r2, #16
 8007e76:	e7b1      	b.n	8007ddc <_printf_i+0xe0>
 8007e78:	4675      	mov	r5, lr
 8007e7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e7e:	fb02 3310 	mls	r3, r2, r0, r3
 8007e82:	5ccb      	ldrb	r3, [r1, r3]
 8007e84:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d1f5      	bne.n	8007e7a <_printf_i+0x17e>
 8007e8e:	e7b7      	b.n	8007e00 <_printf_i+0x104>
 8007e90:	6808      	ldr	r0, [r1, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007e98:	6949      	ldr	r1, [r1, #20]
 8007e9a:	d004      	beq.n	8007ea6 <_printf_i+0x1aa>
 8007e9c:	1d10      	adds	r0, r2, #4
 8007e9e:	6018      	str	r0, [r3, #0]
 8007ea0:	6813      	ldr	r3, [r2, #0]
 8007ea2:	6019      	str	r1, [r3, #0]
 8007ea4:	e007      	b.n	8007eb6 <_printf_i+0x1ba>
 8007ea6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007eaa:	f102 0004 	add.w	r0, r2, #4
 8007eae:	6018      	str	r0, [r3, #0]
 8007eb0:	6813      	ldr	r3, [r2, #0]
 8007eb2:	d0f6      	beq.n	8007ea2 <_printf_i+0x1a6>
 8007eb4:	8019      	strh	r1, [r3, #0]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	4675      	mov	r5, lr
 8007eba:	6123      	str	r3, [r4, #16]
 8007ebc:	e7b1      	b.n	8007e22 <_printf_i+0x126>
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	1d11      	adds	r1, r2, #4
 8007ec2:	6019      	str	r1, [r3, #0]
 8007ec4:	6815      	ldr	r5, [r2, #0]
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	6862      	ldr	r2, [r4, #4]
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f000 f836 	bl	8007f3c <memchr>
 8007ed0:	b108      	cbz	r0, 8007ed6 <_printf_i+0x1da>
 8007ed2:	1b40      	subs	r0, r0, r5
 8007ed4:	6060      	str	r0, [r4, #4]
 8007ed6:	6863      	ldr	r3, [r4, #4]
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	2300      	movs	r3, #0
 8007edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee0:	e79f      	b.n	8007e22 <_printf_i+0x126>
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	462a      	mov	r2, r5
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	4630      	mov	r0, r6
 8007eea:	47c0      	blx	r8
 8007eec:	3001      	adds	r0, #1
 8007eee:	d0a2      	beq.n	8007e36 <_printf_i+0x13a>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	079b      	lsls	r3, r3, #30
 8007ef4:	d507      	bpl.n	8007f06 <_printf_i+0x20a>
 8007ef6:	2500      	movs	r5, #0
 8007ef8:	f104 0919 	add.w	r9, r4, #25
 8007efc:	68e3      	ldr	r3, [r4, #12]
 8007efe:	9a03      	ldr	r2, [sp, #12]
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	429d      	cmp	r5, r3
 8007f04:	db05      	blt.n	8007f12 <_printf_i+0x216>
 8007f06:	68e0      	ldr	r0, [r4, #12]
 8007f08:	9b03      	ldr	r3, [sp, #12]
 8007f0a:	4298      	cmp	r0, r3
 8007f0c:	bfb8      	it	lt
 8007f0e:	4618      	movlt	r0, r3
 8007f10:	e793      	b.n	8007e3a <_printf_i+0x13e>
 8007f12:	2301      	movs	r3, #1
 8007f14:	464a      	mov	r2, r9
 8007f16:	4639      	mov	r1, r7
 8007f18:	4630      	mov	r0, r6
 8007f1a:	47c0      	blx	r8
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d08a      	beq.n	8007e36 <_printf_i+0x13a>
 8007f20:	3501      	adds	r5, #1
 8007f22:	e7eb      	b.n	8007efc <_printf_i+0x200>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1a7      	bne.n	8007e78 <_printf_i+0x17c>
 8007f28:	780b      	ldrb	r3, [r1, #0]
 8007f2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f32:	e765      	b.n	8007e00 <_printf_i+0x104>
 8007f34:	08009a47 	.word	0x08009a47
 8007f38:	08009a36 	.word	0x08009a36

08007f3c <memchr>:
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	b2c9      	uxtb	r1, r1
 8007f40:	4402      	add	r2, r0
 8007f42:	4290      	cmp	r0, r2
 8007f44:	4603      	mov	r3, r0
 8007f46:	d101      	bne.n	8007f4c <memchr+0x10>
 8007f48:	2000      	movs	r0, #0
 8007f4a:	bd10      	pop	{r4, pc}
 8007f4c:	781c      	ldrb	r4, [r3, #0]
 8007f4e:	3001      	adds	r0, #1
 8007f50:	428c      	cmp	r4, r1
 8007f52:	d1f6      	bne.n	8007f42 <memchr+0x6>
 8007f54:	4618      	mov	r0, r3
 8007f56:	bd10      	pop	{r4, pc}

08007f58 <memcpy>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	1e43      	subs	r3, r0, #1
 8007f5c:	440a      	add	r2, r1
 8007f5e:	4291      	cmp	r1, r2
 8007f60:	d100      	bne.n	8007f64 <memcpy+0xc>
 8007f62:	bd10      	pop	{r4, pc}
 8007f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f6c:	e7f7      	b.n	8007f5e <memcpy+0x6>

08007f6e <memmove>:
 8007f6e:	4288      	cmp	r0, r1
 8007f70:	b510      	push	{r4, lr}
 8007f72:	eb01 0302 	add.w	r3, r1, r2
 8007f76:	d803      	bhi.n	8007f80 <memmove+0x12>
 8007f78:	1e42      	subs	r2, r0, #1
 8007f7a:	4299      	cmp	r1, r3
 8007f7c:	d10c      	bne.n	8007f98 <memmove+0x2a>
 8007f7e:	bd10      	pop	{r4, pc}
 8007f80:	4298      	cmp	r0, r3
 8007f82:	d2f9      	bcs.n	8007f78 <memmove+0xa>
 8007f84:	1881      	adds	r1, r0, r2
 8007f86:	1ad2      	subs	r2, r2, r3
 8007f88:	42d3      	cmn	r3, r2
 8007f8a:	d100      	bne.n	8007f8e <memmove+0x20>
 8007f8c:	bd10      	pop	{r4, pc}
 8007f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f92:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f96:	e7f7      	b.n	8007f88 <memmove+0x1a>
 8007f98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007fa0:	e7eb      	b.n	8007f7a <memmove+0xc>
	...

08007fa4 <_free_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	d043      	beq.n	8008034 <_free_r+0x90>
 8007fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fb0:	1f0c      	subs	r4, r1, #4
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	bfb8      	it	lt
 8007fb6:	18e4      	addlt	r4, r4, r3
 8007fb8:	f000 f8d4 	bl	8008164 <__malloc_lock>
 8007fbc:	4a1e      	ldr	r2, [pc, #120]	; (8008038 <_free_r+0x94>)
 8007fbe:	6813      	ldr	r3, [r2, #0]
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	b933      	cbnz	r3, 8007fd2 <_free_r+0x2e>
 8007fc4:	6063      	str	r3, [r4, #4]
 8007fc6:	6014      	str	r4, [r2, #0]
 8007fc8:	4628      	mov	r0, r5
 8007fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fce:	f000 b8ca 	b.w	8008166 <__malloc_unlock>
 8007fd2:	42a3      	cmp	r3, r4
 8007fd4:	d90b      	bls.n	8007fee <_free_r+0x4a>
 8007fd6:	6821      	ldr	r1, [r4, #0]
 8007fd8:	1862      	adds	r2, r4, r1
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	bf01      	itttt	eq
 8007fde:	681a      	ldreq	r2, [r3, #0]
 8007fe0:	685b      	ldreq	r3, [r3, #4]
 8007fe2:	1852      	addeq	r2, r2, r1
 8007fe4:	6022      	streq	r2, [r4, #0]
 8007fe6:	6063      	str	r3, [r4, #4]
 8007fe8:	6004      	str	r4, [r0, #0]
 8007fea:	e7ed      	b.n	8007fc8 <_free_r+0x24>
 8007fec:	4613      	mov	r3, r2
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	b10a      	cbz	r2, 8007ff6 <_free_r+0x52>
 8007ff2:	42a2      	cmp	r2, r4
 8007ff4:	d9fa      	bls.n	8007fec <_free_r+0x48>
 8007ff6:	6819      	ldr	r1, [r3, #0]
 8007ff8:	1858      	adds	r0, r3, r1
 8007ffa:	42a0      	cmp	r0, r4
 8007ffc:	d10b      	bne.n	8008016 <_free_r+0x72>
 8007ffe:	6820      	ldr	r0, [r4, #0]
 8008000:	4401      	add	r1, r0
 8008002:	1858      	adds	r0, r3, r1
 8008004:	4282      	cmp	r2, r0
 8008006:	6019      	str	r1, [r3, #0]
 8008008:	d1de      	bne.n	8007fc8 <_free_r+0x24>
 800800a:	6810      	ldr	r0, [r2, #0]
 800800c:	6852      	ldr	r2, [r2, #4]
 800800e:	4401      	add	r1, r0
 8008010:	6019      	str	r1, [r3, #0]
 8008012:	605a      	str	r2, [r3, #4]
 8008014:	e7d8      	b.n	8007fc8 <_free_r+0x24>
 8008016:	d902      	bls.n	800801e <_free_r+0x7a>
 8008018:	230c      	movs	r3, #12
 800801a:	602b      	str	r3, [r5, #0]
 800801c:	e7d4      	b.n	8007fc8 <_free_r+0x24>
 800801e:	6820      	ldr	r0, [r4, #0]
 8008020:	1821      	adds	r1, r4, r0
 8008022:	428a      	cmp	r2, r1
 8008024:	bf01      	itttt	eq
 8008026:	6811      	ldreq	r1, [r2, #0]
 8008028:	6852      	ldreq	r2, [r2, #4]
 800802a:	1809      	addeq	r1, r1, r0
 800802c:	6021      	streq	r1, [r4, #0]
 800802e:	6062      	str	r2, [r4, #4]
 8008030:	605c      	str	r4, [r3, #4]
 8008032:	e7c9      	b.n	8007fc8 <_free_r+0x24>
 8008034:	bd38      	pop	{r3, r4, r5, pc}
 8008036:	bf00      	nop
 8008038:	200038a0 	.word	0x200038a0

0800803c <_malloc_r>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	1ccd      	adds	r5, r1, #3
 8008040:	f025 0503 	bic.w	r5, r5, #3
 8008044:	3508      	adds	r5, #8
 8008046:	2d0c      	cmp	r5, #12
 8008048:	bf38      	it	cc
 800804a:	250c      	movcc	r5, #12
 800804c:	2d00      	cmp	r5, #0
 800804e:	4606      	mov	r6, r0
 8008050:	db01      	blt.n	8008056 <_malloc_r+0x1a>
 8008052:	42a9      	cmp	r1, r5
 8008054:	d903      	bls.n	800805e <_malloc_r+0x22>
 8008056:	230c      	movs	r3, #12
 8008058:	6033      	str	r3, [r6, #0]
 800805a:	2000      	movs	r0, #0
 800805c:	bd70      	pop	{r4, r5, r6, pc}
 800805e:	f000 f881 	bl	8008164 <__malloc_lock>
 8008062:	4a23      	ldr	r2, [pc, #140]	; (80080f0 <_malloc_r+0xb4>)
 8008064:	6814      	ldr	r4, [r2, #0]
 8008066:	4621      	mov	r1, r4
 8008068:	b991      	cbnz	r1, 8008090 <_malloc_r+0x54>
 800806a:	4c22      	ldr	r4, [pc, #136]	; (80080f4 <_malloc_r+0xb8>)
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	b91b      	cbnz	r3, 8008078 <_malloc_r+0x3c>
 8008070:	4630      	mov	r0, r6
 8008072:	f000 f867 	bl	8008144 <_sbrk_r>
 8008076:	6020      	str	r0, [r4, #0]
 8008078:	4629      	mov	r1, r5
 800807a:	4630      	mov	r0, r6
 800807c:	f000 f862 	bl	8008144 <_sbrk_r>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d126      	bne.n	80080d2 <_malloc_r+0x96>
 8008084:	230c      	movs	r3, #12
 8008086:	4630      	mov	r0, r6
 8008088:	6033      	str	r3, [r6, #0]
 800808a:	f000 f86c 	bl	8008166 <__malloc_unlock>
 800808e:	e7e4      	b.n	800805a <_malloc_r+0x1e>
 8008090:	680b      	ldr	r3, [r1, #0]
 8008092:	1b5b      	subs	r3, r3, r5
 8008094:	d41a      	bmi.n	80080cc <_malloc_r+0x90>
 8008096:	2b0b      	cmp	r3, #11
 8008098:	d90f      	bls.n	80080ba <_malloc_r+0x7e>
 800809a:	600b      	str	r3, [r1, #0]
 800809c:	18cc      	adds	r4, r1, r3
 800809e:	50cd      	str	r5, [r1, r3]
 80080a0:	4630      	mov	r0, r6
 80080a2:	f000 f860 	bl	8008166 <__malloc_unlock>
 80080a6:	f104 000b 	add.w	r0, r4, #11
 80080aa:	1d23      	adds	r3, r4, #4
 80080ac:	f020 0007 	bic.w	r0, r0, #7
 80080b0:	1ac3      	subs	r3, r0, r3
 80080b2:	d01b      	beq.n	80080ec <_malloc_r+0xb0>
 80080b4:	425a      	negs	r2, r3
 80080b6:	50e2      	str	r2, [r4, r3]
 80080b8:	bd70      	pop	{r4, r5, r6, pc}
 80080ba:	428c      	cmp	r4, r1
 80080bc:	bf0b      	itete	eq
 80080be:	6863      	ldreq	r3, [r4, #4]
 80080c0:	684b      	ldrne	r3, [r1, #4]
 80080c2:	6013      	streq	r3, [r2, #0]
 80080c4:	6063      	strne	r3, [r4, #4]
 80080c6:	bf18      	it	ne
 80080c8:	460c      	movne	r4, r1
 80080ca:	e7e9      	b.n	80080a0 <_malloc_r+0x64>
 80080cc:	460c      	mov	r4, r1
 80080ce:	6849      	ldr	r1, [r1, #4]
 80080d0:	e7ca      	b.n	8008068 <_malloc_r+0x2c>
 80080d2:	1cc4      	adds	r4, r0, #3
 80080d4:	f024 0403 	bic.w	r4, r4, #3
 80080d8:	42a0      	cmp	r0, r4
 80080da:	d005      	beq.n	80080e8 <_malloc_r+0xac>
 80080dc:	1a21      	subs	r1, r4, r0
 80080de:	4630      	mov	r0, r6
 80080e0:	f000 f830 	bl	8008144 <_sbrk_r>
 80080e4:	3001      	adds	r0, #1
 80080e6:	d0cd      	beq.n	8008084 <_malloc_r+0x48>
 80080e8:	6025      	str	r5, [r4, #0]
 80080ea:	e7d9      	b.n	80080a0 <_malloc_r+0x64>
 80080ec:	bd70      	pop	{r4, r5, r6, pc}
 80080ee:	bf00      	nop
 80080f0:	200038a0 	.word	0x200038a0
 80080f4:	200038a4 	.word	0x200038a4

080080f8 <_realloc_r>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	4607      	mov	r7, r0
 80080fc:	4614      	mov	r4, r2
 80080fe:	460e      	mov	r6, r1
 8008100:	b921      	cbnz	r1, 800810c <_realloc_r+0x14>
 8008102:	4611      	mov	r1, r2
 8008104:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008108:	f7ff bf98 	b.w	800803c <_malloc_r>
 800810c:	b922      	cbnz	r2, 8008118 <_realloc_r+0x20>
 800810e:	f7ff ff49 	bl	8007fa4 <_free_r>
 8008112:	4625      	mov	r5, r4
 8008114:	4628      	mov	r0, r5
 8008116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008118:	f000 f826 	bl	8008168 <_malloc_usable_size_r>
 800811c:	4284      	cmp	r4, r0
 800811e:	d90f      	bls.n	8008140 <_realloc_r+0x48>
 8008120:	4621      	mov	r1, r4
 8008122:	4638      	mov	r0, r7
 8008124:	f7ff ff8a 	bl	800803c <_malloc_r>
 8008128:	4605      	mov	r5, r0
 800812a:	2800      	cmp	r0, #0
 800812c:	d0f2      	beq.n	8008114 <_realloc_r+0x1c>
 800812e:	4631      	mov	r1, r6
 8008130:	4622      	mov	r2, r4
 8008132:	f7ff ff11 	bl	8007f58 <memcpy>
 8008136:	4631      	mov	r1, r6
 8008138:	4638      	mov	r0, r7
 800813a:	f7ff ff33 	bl	8007fa4 <_free_r>
 800813e:	e7e9      	b.n	8008114 <_realloc_r+0x1c>
 8008140:	4635      	mov	r5, r6
 8008142:	e7e7      	b.n	8008114 <_realloc_r+0x1c>

08008144 <_sbrk_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	2300      	movs	r3, #0
 8008148:	4c05      	ldr	r4, [pc, #20]	; (8008160 <_sbrk_r+0x1c>)
 800814a:	4605      	mov	r5, r0
 800814c:	4608      	mov	r0, r1
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	f7fa f9a2 	bl	8002498 <_sbrk>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d102      	bne.n	800815e <_sbrk_r+0x1a>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	b103      	cbz	r3, 800815e <_sbrk_r+0x1a>
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	200040a4 	.word	0x200040a4

08008164 <__malloc_lock>:
 8008164:	4770      	bx	lr

08008166 <__malloc_unlock>:
 8008166:	4770      	bx	lr

08008168 <_malloc_usable_size_r>:
 8008168:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800816c:	2800      	cmp	r0, #0
 800816e:	f1a0 0004 	sub.w	r0, r0, #4
 8008172:	bfbc      	itt	lt
 8008174:	580b      	ldrlt	r3, [r1, r0]
 8008176:	18c0      	addlt	r0, r0, r3
 8008178:	4770      	bx	lr
 800817a:	0000      	movs	r0, r0
 800817c:	0000      	movs	r0, r0
	...

08008180 <ceil>:
 8008180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008184:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008188:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800818c:	2e13      	cmp	r6, #19
 800818e:	4607      	mov	r7, r0
 8008190:	460b      	mov	r3, r1
 8008192:	460c      	mov	r4, r1
 8008194:	4605      	mov	r5, r0
 8008196:	dc31      	bgt.n	80081fc <ceil+0x7c>
 8008198:	2e00      	cmp	r6, #0
 800819a:	da12      	bge.n	80081c2 <ceil+0x42>
 800819c:	a336      	add	r3, pc, #216	; (adr r3, 8008278 <ceil+0xf8>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f7f7 ffe7 	bl	8000174 <__adddf3>
 80081a6:	2200      	movs	r2, #0
 80081a8:	2300      	movs	r3, #0
 80081aa:	f7f8 fc25 	bl	80009f8 <__aeabi_dcmpgt>
 80081ae:	b128      	cbz	r0, 80081bc <ceil+0x3c>
 80081b0:	2c00      	cmp	r4, #0
 80081b2:	db58      	blt.n	8008266 <ceil+0xe6>
 80081b4:	433c      	orrs	r4, r7
 80081b6:	d05a      	beq.n	800826e <ceil+0xee>
 80081b8:	2500      	movs	r5, #0
 80081ba:	4c31      	ldr	r4, [pc, #196]	; (8008280 <ceil+0x100>)
 80081bc:	4623      	mov	r3, r4
 80081be:	462f      	mov	r7, r5
 80081c0:	e027      	b.n	8008212 <ceil+0x92>
 80081c2:	4a30      	ldr	r2, [pc, #192]	; (8008284 <ceil+0x104>)
 80081c4:	fa42 f806 	asr.w	r8, r2, r6
 80081c8:	ea01 0208 	and.w	r2, r1, r8
 80081cc:	4302      	orrs	r2, r0
 80081ce:	d020      	beq.n	8008212 <ceil+0x92>
 80081d0:	a329      	add	r3, pc, #164	; (adr r3, 8008278 <ceil+0xf8>)
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f7f7 ffcd 	bl	8000174 <__adddf3>
 80081da:	2200      	movs	r2, #0
 80081dc:	2300      	movs	r3, #0
 80081de:	f7f8 fc0b 	bl	80009f8 <__aeabi_dcmpgt>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d0ea      	beq.n	80081bc <ceil+0x3c>
 80081e6:	2c00      	cmp	r4, #0
 80081e8:	bfc2      	ittt	gt
 80081ea:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80081ee:	fa43 f606 	asrgt.w	r6, r3, r6
 80081f2:	19a4      	addgt	r4, r4, r6
 80081f4:	ea24 0408 	bic.w	r4, r4, r8
 80081f8:	2500      	movs	r5, #0
 80081fa:	e7df      	b.n	80081bc <ceil+0x3c>
 80081fc:	2e33      	cmp	r6, #51	; 0x33
 80081fe:	dd0c      	ble.n	800821a <ceil+0x9a>
 8008200:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008204:	d105      	bne.n	8008212 <ceil+0x92>
 8008206:	460b      	mov	r3, r1
 8008208:	4602      	mov	r2, r0
 800820a:	f7f7 ffb3 	bl	8000174 <__adddf3>
 800820e:	4607      	mov	r7, r0
 8008210:	460b      	mov	r3, r1
 8008212:	4638      	mov	r0, r7
 8008214:	4619      	mov	r1, r3
 8008216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800821a:	f04f 32ff 	mov.w	r2, #4294967295
 800821e:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008222:	fa22 f808 	lsr.w	r8, r2, r8
 8008226:	ea10 0f08 	tst.w	r0, r8
 800822a:	d0f2      	beq.n	8008212 <ceil+0x92>
 800822c:	a312      	add	r3, pc, #72	; (adr r3, 8008278 <ceil+0xf8>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f7f7 ff9f 	bl	8000174 <__adddf3>
 8008236:	2200      	movs	r2, #0
 8008238:	2300      	movs	r3, #0
 800823a:	f7f8 fbdd 	bl	80009f8 <__aeabi_dcmpgt>
 800823e:	2800      	cmp	r0, #0
 8008240:	d0bc      	beq.n	80081bc <ceil+0x3c>
 8008242:	2c00      	cmp	r4, #0
 8008244:	dd02      	ble.n	800824c <ceil+0xcc>
 8008246:	2e14      	cmp	r6, #20
 8008248:	d103      	bne.n	8008252 <ceil+0xd2>
 800824a:	3401      	adds	r4, #1
 800824c:	ea25 0508 	bic.w	r5, r5, r8
 8008250:	e7b4      	b.n	80081bc <ceil+0x3c>
 8008252:	2301      	movs	r3, #1
 8008254:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008258:	fa03 f606 	lsl.w	r6, r3, r6
 800825c:	4435      	add	r5, r6
 800825e:	42af      	cmp	r7, r5
 8008260:	bf88      	it	hi
 8008262:	18e4      	addhi	r4, r4, r3
 8008264:	e7f2      	b.n	800824c <ceil+0xcc>
 8008266:	2500      	movs	r5, #0
 8008268:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800826c:	e7a6      	b.n	80081bc <ceil+0x3c>
 800826e:	4625      	mov	r5, r4
 8008270:	e7a4      	b.n	80081bc <ceil+0x3c>
 8008272:	bf00      	nop
 8008274:	f3af 8000 	nop.w
 8008278:	8800759c 	.word	0x8800759c
 800827c:	7e37e43c 	.word	0x7e37e43c
 8008280:	3ff00000 	.word	0x3ff00000
 8008284:	000fffff 	.word	0x000fffff

08008288 <floor>:
 8008288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800828c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008290:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008294:	2e13      	cmp	r6, #19
 8008296:	4607      	mov	r7, r0
 8008298:	460b      	mov	r3, r1
 800829a:	460c      	mov	r4, r1
 800829c:	4605      	mov	r5, r0
 800829e:	dc35      	bgt.n	800830c <floor+0x84>
 80082a0:	2e00      	cmp	r6, #0
 80082a2:	da16      	bge.n	80082d2 <floor+0x4a>
 80082a4:	a336      	add	r3, pc, #216	; (adr r3, 8008380 <floor+0xf8>)
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	f7f7 ff63 	bl	8000174 <__adddf3>
 80082ae:	2200      	movs	r2, #0
 80082b0:	2300      	movs	r3, #0
 80082b2:	f7f8 fba1 	bl	80009f8 <__aeabi_dcmpgt>
 80082b6:	b148      	cbz	r0, 80082cc <floor+0x44>
 80082b8:	2c00      	cmp	r4, #0
 80082ba:	da5c      	bge.n	8008376 <floor+0xee>
 80082bc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80082c0:	433b      	orrs	r3, r7
 80082c2:	4b31      	ldr	r3, [pc, #196]	; (8008388 <floor+0x100>)
 80082c4:	f04f 0500 	mov.w	r5, #0
 80082c8:	bf18      	it	ne
 80082ca:	461c      	movne	r4, r3
 80082cc:	4623      	mov	r3, r4
 80082ce:	462f      	mov	r7, r5
 80082d0:	e027      	b.n	8008322 <floor+0x9a>
 80082d2:	4a2e      	ldr	r2, [pc, #184]	; (800838c <floor+0x104>)
 80082d4:	fa42 f806 	asr.w	r8, r2, r6
 80082d8:	ea01 0208 	and.w	r2, r1, r8
 80082dc:	4302      	orrs	r2, r0
 80082de:	d020      	beq.n	8008322 <floor+0x9a>
 80082e0:	a327      	add	r3, pc, #156	; (adr r3, 8008380 <floor+0xf8>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f7f7 ff45 	bl	8000174 <__adddf3>
 80082ea:	2200      	movs	r2, #0
 80082ec:	2300      	movs	r3, #0
 80082ee:	f7f8 fb83 	bl	80009f8 <__aeabi_dcmpgt>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d0ea      	beq.n	80082cc <floor+0x44>
 80082f6:	2c00      	cmp	r4, #0
 80082f8:	bfbe      	ittt	lt
 80082fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80082fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8008302:	19a4      	addlt	r4, r4, r6
 8008304:	ea24 0408 	bic.w	r4, r4, r8
 8008308:	2500      	movs	r5, #0
 800830a:	e7df      	b.n	80082cc <floor+0x44>
 800830c:	2e33      	cmp	r6, #51	; 0x33
 800830e:	dd0c      	ble.n	800832a <floor+0xa2>
 8008310:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008314:	d105      	bne.n	8008322 <floor+0x9a>
 8008316:	460b      	mov	r3, r1
 8008318:	4602      	mov	r2, r0
 800831a:	f7f7 ff2b 	bl	8000174 <__adddf3>
 800831e:	4607      	mov	r7, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4638      	mov	r0, r7
 8008324:	4619      	mov	r1, r3
 8008326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800832a:	f04f 32ff 	mov.w	r2, #4294967295
 800832e:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008332:	fa22 f808 	lsr.w	r8, r2, r8
 8008336:	ea10 0f08 	tst.w	r0, r8
 800833a:	d0f2      	beq.n	8008322 <floor+0x9a>
 800833c:	a310      	add	r3, pc, #64	; (adr r3, 8008380 <floor+0xf8>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f7f7 ff17 	bl	8000174 <__adddf3>
 8008346:	2200      	movs	r2, #0
 8008348:	2300      	movs	r3, #0
 800834a:	f7f8 fb55 	bl	80009f8 <__aeabi_dcmpgt>
 800834e:	2800      	cmp	r0, #0
 8008350:	d0bc      	beq.n	80082cc <floor+0x44>
 8008352:	2c00      	cmp	r4, #0
 8008354:	da02      	bge.n	800835c <floor+0xd4>
 8008356:	2e14      	cmp	r6, #20
 8008358:	d103      	bne.n	8008362 <floor+0xda>
 800835a:	3401      	adds	r4, #1
 800835c:	ea25 0508 	bic.w	r5, r5, r8
 8008360:	e7b4      	b.n	80082cc <floor+0x44>
 8008362:	2301      	movs	r3, #1
 8008364:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008368:	fa03 f606 	lsl.w	r6, r3, r6
 800836c:	4435      	add	r5, r6
 800836e:	42af      	cmp	r7, r5
 8008370:	bf88      	it	hi
 8008372:	18e4      	addhi	r4, r4, r3
 8008374:	e7f2      	b.n	800835c <floor+0xd4>
 8008376:	2500      	movs	r5, #0
 8008378:	462c      	mov	r4, r5
 800837a:	e7a7      	b.n	80082cc <floor+0x44>
 800837c:	f3af 8000 	nop.w
 8008380:	8800759c 	.word	0x8800759c
 8008384:	7e37e43c 	.word	0x7e37e43c
 8008388:	bff00000 	.word	0xbff00000
 800838c:	000fffff 	.word	0x000fffff

08008390 <lround>:
 8008390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008392:	460d      	mov	r5, r1
 8008394:	2d00      	cmp	r5, #0
 8008396:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800839a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800839e:	bfb4      	ite	lt
 80083a0:	f04f 34ff 	movlt.w	r4, #4294967295
 80083a4:	2401      	movge	r4, #1
 80083a6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80083aa:	2e13      	cmp	r6, #19
 80083ac:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80083b0:	dc0f      	bgt.n	80083d2 <lround+0x42>
 80083b2:	2e00      	cmp	r6, #0
 80083b4:	da04      	bge.n	80083c0 <lround+0x30>
 80083b6:	3601      	adds	r6, #1
 80083b8:	bf18      	it	ne
 80083ba:	2400      	movne	r4, #0
 80083bc:	4620      	mov	r0, r4
 80083be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80083c4:	4133      	asrs	r3, r6
 80083c6:	442b      	add	r3, r5
 80083c8:	f1c6 0614 	rsb	r6, r6, #20
 80083cc:	40f3      	lsrs	r3, r6
 80083ce:	435c      	muls	r4, r3
 80083d0:	e7f4      	b.n	80083bc <lround+0x2c>
 80083d2:	2e1e      	cmp	r6, #30
 80083d4:	d81a      	bhi.n	800840c <lround+0x7c>
 80083d6:	2e33      	cmp	r6, #51	; 0x33
 80083d8:	f2a3 4113 	subw	r1, r3, #1043	; 0x413
 80083dc:	dd06      	ble.n	80083ec <lround+0x5c>
 80083de:	f2a3 4333 	subw	r3, r3, #1075	; 0x433
 80083e2:	408d      	lsls	r5, r1
 80083e4:	fa00 f303 	lsl.w	r3, r0, r3
 80083e8:	432b      	orrs	r3, r5
 80083ea:	e7f0      	b.n	80083ce <lround+0x3e>
 80083ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083f0:	40ca      	lsrs	r2, r1
 80083f2:	1812      	adds	r2, r2, r0
 80083f4:	f1c6 0334 	rsb	r3, r6, #52	; 0x34
 80083f8:	bf28      	it	cs
 80083fa:	3501      	addcs	r5, #1
 80083fc:	2b20      	cmp	r3, #32
 80083fe:	fa05 f501 	lsl.w	r5, r5, r1
 8008402:	bf14      	ite	ne
 8008404:	fa22 f303 	lsrne.w	r3, r2, r3
 8008408:	2300      	moveq	r3, #0
 800840a:	e7ed      	b.n	80083e8 <lround+0x58>
 800840c:	f7f8 fb14 	bl	8000a38 <__aeabi_d2iz>
 8008410:	4604      	mov	r4, r0
 8008412:	e7d3      	b.n	80083bc <lround+0x2c>

08008414 <round>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800841a:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800841e:	2c13      	cmp	r4, #19
 8008420:	4606      	mov	r6, r0
 8008422:	460d      	mov	r5, r1
 8008424:	460b      	mov	r3, r1
 8008426:	468e      	mov	lr, r1
 8008428:	dc17      	bgt.n	800845a <round+0x46>
 800842a:	2c00      	cmp	r4, #0
 800842c:	da09      	bge.n	8008442 <round+0x2e>
 800842e:	3401      	adds	r4, #1
 8008430:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008434:	d103      	bne.n	800843e <round+0x2a>
 8008436:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800843a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800843e:	2200      	movs	r2, #0
 8008440:	e029      	b.n	8008496 <round+0x82>
 8008442:	4916      	ldr	r1, [pc, #88]	; (800849c <round+0x88>)
 8008444:	4121      	asrs	r1, r4
 8008446:	420d      	tst	r5, r1
 8008448:	d100      	bne.n	800844c <round+0x38>
 800844a:	b188      	cbz	r0, 8008470 <round+0x5c>
 800844c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008450:	4123      	asrs	r3, r4
 8008452:	4473      	add	r3, lr
 8008454:	ea23 0301 	bic.w	r3, r3, r1
 8008458:	e7f1      	b.n	800843e <round+0x2a>
 800845a:	2c33      	cmp	r4, #51	; 0x33
 800845c:	dd0b      	ble.n	8008476 <round+0x62>
 800845e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008462:	d105      	bne.n	8008470 <round+0x5c>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	f7f7 fe84 	bl	8000174 <__adddf3>
 800846c:	4606      	mov	r6, r0
 800846e:	460d      	mov	r5, r1
 8008470:	4630      	mov	r0, r6
 8008472:	4629      	mov	r1, r5
 8008474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008476:	f04f 30ff 	mov.w	r0, #4294967295
 800847a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800847e:	40f8      	lsrs	r0, r7
 8008480:	4206      	tst	r6, r0
 8008482:	d0f5      	beq.n	8008470 <round+0x5c>
 8008484:	2101      	movs	r1, #1
 8008486:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800848a:	40a1      	lsls	r1, r4
 800848c:	198a      	adds	r2, r1, r6
 800848e:	bf28      	it	cs
 8008490:	3301      	addcs	r3, #1
 8008492:	ea22 0200 	bic.w	r2, r2, r0
 8008496:	4619      	mov	r1, r3
 8008498:	4610      	mov	r0, r2
 800849a:	e7e7      	b.n	800846c <round+0x58>
 800849c:	000fffff 	.word	0x000fffff

080084a0 <trunc>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80084a6:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 80084aa:	2a13      	cmp	r2, #19
 80084ac:	4604      	mov	r4, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	dc11      	bgt.n	80084d6 <trunc+0x36>
 80084b2:	2a00      	cmp	r2, #0
 80084b4:	da04      	bge.n	80084c0 <trunc+0x20>
 80084b6:	2200      	movs	r2, #0
 80084b8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80084bc:	4614      	mov	r4, r2
 80084be:	e007      	b.n	80084d0 <trunc+0x30>
 80084c0:	2000      	movs	r0, #0
 80084c2:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <trunc+0x60>)
 80084c4:	fa43 f202 	asr.w	r2, r3, r2
 80084c8:	ea21 0102 	bic.w	r1, r1, r2
 80084cc:	4604      	mov	r4, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4620      	mov	r0, r4
 80084d2:	4619      	mov	r1, r3
 80084d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d6:	2a33      	cmp	r2, #51	; 0x33
 80084d8:	dd07      	ble.n	80084ea <trunc+0x4a>
 80084da:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80084de:	d1f7      	bne.n	80084d0 <trunc+0x30>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	f7f7 fe46 	bl	8000174 <__adddf3>
 80084e8:	e7f0      	b.n	80084cc <trunc+0x2c>
 80084ea:	460b      	mov	r3, r1
 80084ec:	f04f 31ff 	mov.w	r1, #4294967295
 80084f0:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80084f4:	fa21 f505 	lsr.w	r5, r1, r5
 80084f8:	ea20 0205 	bic.w	r2, r0, r5
 80084fc:	e7de      	b.n	80084bc <trunc+0x1c>
 80084fe:	bf00      	nop
 8008500:	000fffff 	.word	0x000fffff

08008504 <ceilf>:
 8008504:	b570      	push	{r4, r5, r6, lr}
 8008506:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800850a:	0df5      	lsrs	r5, r6, #23
 800850c:	3d7f      	subs	r5, #127	; 0x7f
 800850e:	2d16      	cmp	r5, #22
 8008510:	4601      	mov	r1, r0
 8008512:	4604      	mov	r4, r0
 8008514:	dc26      	bgt.n	8008564 <ceilf+0x60>
 8008516:	2d00      	cmp	r5, #0
 8008518:	da0e      	bge.n	8008538 <ceilf+0x34>
 800851a:	4918      	ldr	r1, [pc, #96]	; (800857c <ceilf+0x78>)
 800851c:	f7f8 fb2a 	bl	8000b74 <__addsf3>
 8008520:	2100      	movs	r1, #0
 8008522:	f7f8 fdeb 	bl	80010fc <__aeabi_fcmpgt>
 8008526:	b128      	cbz	r0, 8008534 <ceilf+0x30>
 8008528:	2c00      	cmp	r4, #0
 800852a:	db23      	blt.n	8008574 <ceilf+0x70>
 800852c:	2e00      	cmp	r6, #0
 800852e:	bf18      	it	ne
 8008530:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8008534:	4621      	mov	r1, r4
 8008536:	e01b      	b.n	8008570 <ceilf+0x6c>
 8008538:	4e11      	ldr	r6, [pc, #68]	; (8008580 <ceilf+0x7c>)
 800853a:	412e      	asrs	r6, r5
 800853c:	4230      	tst	r0, r6
 800853e:	d017      	beq.n	8008570 <ceilf+0x6c>
 8008540:	490e      	ldr	r1, [pc, #56]	; (800857c <ceilf+0x78>)
 8008542:	f7f8 fb17 	bl	8000b74 <__addsf3>
 8008546:	2100      	movs	r1, #0
 8008548:	f7f8 fdd8 	bl	80010fc <__aeabi_fcmpgt>
 800854c:	2800      	cmp	r0, #0
 800854e:	d0f1      	beq.n	8008534 <ceilf+0x30>
 8008550:	2c00      	cmp	r4, #0
 8008552:	bfc2      	ittt	gt
 8008554:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8008558:	fa43 f505 	asrgt.w	r5, r3, r5
 800855c:	1964      	addgt	r4, r4, r5
 800855e:	ea24 0406 	bic.w	r4, r4, r6
 8008562:	e7e7      	b.n	8008534 <ceilf+0x30>
 8008564:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008568:	d302      	bcc.n	8008570 <ceilf+0x6c>
 800856a:	f7f8 fb03 	bl	8000b74 <__addsf3>
 800856e:	4601      	mov	r1, r0
 8008570:	4608      	mov	r0, r1
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008578:	e7dc      	b.n	8008534 <ceilf+0x30>
 800857a:	bf00      	nop
 800857c:	7149f2ca 	.word	0x7149f2ca
 8008580:	007fffff 	.word	0x007fffff

08008584 <cosf>:
 8008584:	b507      	push	{r0, r1, r2, lr}
 8008586:	4a18      	ldr	r2, [pc, #96]	; (80085e8 <cosf+0x64>)
 8008588:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800858c:	4293      	cmp	r3, r2
 800858e:	4601      	mov	r1, r0
 8008590:	dc03      	bgt.n	800859a <cosf+0x16>
 8008592:	2100      	movs	r1, #0
 8008594:	f000 fbe6 	bl	8008d64 <__kernel_cosf>
 8008598:	e004      	b.n	80085a4 <cosf+0x20>
 800859a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800859e:	db04      	blt.n	80085aa <cosf+0x26>
 80085a0:	f7f8 fae6 	bl	8000b70 <__aeabi_fsub>
 80085a4:	b003      	add	sp, #12
 80085a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80085aa:	4669      	mov	r1, sp
 80085ac:	f000 fa30 	bl	8008a10 <__ieee754_rem_pio2f>
 80085b0:	f000 0203 	and.w	r2, r0, #3
 80085b4:	2a01      	cmp	r2, #1
 80085b6:	d005      	beq.n	80085c4 <cosf+0x40>
 80085b8:	2a02      	cmp	r2, #2
 80085ba:	d00a      	beq.n	80085d2 <cosf+0x4e>
 80085bc:	b972      	cbnz	r2, 80085dc <cosf+0x58>
 80085be:	9901      	ldr	r1, [sp, #4]
 80085c0:	9800      	ldr	r0, [sp, #0]
 80085c2:	e7e7      	b.n	8008594 <cosf+0x10>
 80085c4:	9901      	ldr	r1, [sp, #4]
 80085c6:	9800      	ldr	r0, [sp, #0]
 80085c8:	f000 feee 	bl	80093a8 <__kernel_sinf>
 80085cc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80085d0:	e7e8      	b.n	80085a4 <cosf+0x20>
 80085d2:	9901      	ldr	r1, [sp, #4]
 80085d4:	9800      	ldr	r0, [sp, #0]
 80085d6:	f000 fbc5 	bl	8008d64 <__kernel_cosf>
 80085da:	e7f7      	b.n	80085cc <cosf+0x48>
 80085dc:	2201      	movs	r2, #1
 80085de:	9901      	ldr	r1, [sp, #4]
 80085e0:	9800      	ldr	r0, [sp, #0]
 80085e2:	f000 fee1 	bl	80093a8 <__kernel_sinf>
 80085e6:	e7dd      	b.n	80085a4 <cosf+0x20>
 80085e8:	3f490fd8 	.word	0x3f490fd8

080085ec <sinf>:
 80085ec:	b507      	push	{r0, r1, r2, lr}
 80085ee:	4a19      	ldr	r2, [pc, #100]	; (8008654 <sinf+0x68>)
 80085f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80085f4:	4293      	cmp	r3, r2
 80085f6:	4601      	mov	r1, r0
 80085f8:	dc04      	bgt.n	8008604 <sinf+0x18>
 80085fa:	2200      	movs	r2, #0
 80085fc:	2100      	movs	r1, #0
 80085fe:	f000 fed3 	bl	80093a8 <__kernel_sinf>
 8008602:	e004      	b.n	800860e <sinf+0x22>
 8008604:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008608:	db04      	blt.n	8008614 <sinf+0x28>
 800860a:	f7f8 fab1 	bl	8000b70 <__aeabi_fsub>
 800860e:	b003      	add	sp, #12
 8008610:	f85d fb04 	ldr.w	pc, [sp], #4
 8008614:	4669      	mov	r1, sp
 8008616:	f000 f9fb 	bl	8008a10 <__ieee754_rem_pio2f>
 800861a:	f000 0003 	and.w	r0, r0, #3
 800861e:	2801      	cmp	r0, #1
 8008620:	d006      	beq.n	8008630 <sinf+0x44>
 8008622:	2802      	cmp	r0, #2
 8008624:	d009      	beq.n	800863a <sinf+0x4e>
 8008626:	b980      	cbnz	r0, 800864a <sinf+0x5e>
 8008628:	2201      	movs	r2, #1
 800862a:	9901      	ldr	r1, [sp, #4]
 800862c:	9800      	ldr	r0, [sp, #0]
 800862e:	e7e6      	b.n	80085fe <sinf+0x12>
 8008630:	9901      	ldr	r1, [sp, #4]
 8008632:	9800      	ldr	r0, [sp, #0]
 8008634:	f000 fb96 	bl	8008d64 <__kernel_cosf>
 8008638:	e7e9      	b.n	800860e <sinf+0x22>
 800863a:	2201      	movs	r2, #1
 800863c:	9901      	ldr	r1, [sp, #4]
 800863e:	9800      	ldr	r0, [sp, #0]
 8008640:	f000 feb2 	bl	80093a8 <__kernel_sinf>
 8008644:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008648:	e7e1      	b.n	800860e <sinf+0x22>
 800864a:	9901      	ldr	r1, [sp, #4]
 800864c:	9800      	ldr	r0, [sp, #0]
 800864e:	f000 fb89 	bl	8008d64 <__kernel_cosf>
 8008652:	e7f7      	b.n	8008644 <sinf+0x58>
 8008654:	3f490fd8 	.word	0x3f490fd8

08008658 <sqrt>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	b08b      	sub	sp, #44	; 0x2c
 800865e:	4604      	mov	r4, r0
 8008660:	460d      	mov	r5, r1
 8008662:	f000 f899 	bl	8008798 <__ieee754_sqrt>
 8008666:	4b24      	ldr	r3, [pc, #144]	; (80086f8 <sqrt+0xa0>)
 8008668:	4680      	mov	r8, r0
 800866a:	f993 a000 	ldrsb.w	sl, [r3]
 800866e:	4689      	mov	r9, r1
 8008670:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008674:	d02b      	beq.n	80086ce <sqrt+0x76>
 8008676:	4622      	mov	r2, r4
 8008678:	462b      	mov	r3, r5
 800867a:	4620      	mov	r0, r4
 800867c:	4629      	mov	r1, r5
 800867e:	f7f8 f9c5 	bl	8000a0c <__aeabi_dcmpun>
 8008682:	4683      	mov	fp, r0
 8008684:	bb18      	cbnz	r0, 80086ce <sqrt+0x76>
 8008686:	2600      	movs	r6, #0
 8008688:	2700      	movs	r7, #0
 800868a:	4632      	mov	r2, r6
 800868c:	463b      	mov	r3, r7
 800868e:	4620      	mov	r0, r4
 8008690:	4629      	mov	r1, r5
 8008692:	f7f8 f993 	bl	80009bc <__aeabi_dcmplt>
 8008696:	b1d0      	cbz	r0, 80086ce <sqrt+0x76>
 8008698:	2301      	movs	r3, #1
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	4b17      	ldr	r3, [pc, #92]	; (80086fc <sqrt+0xa4>)
 800869e:	f8cd b020 	str.w	fp, [sp, #32]
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80086a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80086ac:	f1ba 0f00 	cmp.w	sl, #0
 80086b0:	d112      	bne.n	80086d8 <sqrt+0x80>
 80086b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80086b6:	4668      	mov	r0, sp
 80086b8:	f000 feec 	bl	8009494 <matherr>
 80086bc:	b1b8      	cbz	r0, 80086ee <sqrt+0x96>
 80086be:	9b08      	ldr	r3, [sp, #32]
 80086c0:	b11b      	cbz	r3, 80086ca <sqrt+0x72>
 80086c2:	f7ff f8ed 	bl	80078a0 <__errno>
 80086c6:	9b08      	ldr	r3, [sp, #32]
 80086c8:	6003      	str	r3, [r0, #0]
 80086ca:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	b00b      	add	sp, #44	; 0x2c
 80086d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d8:	4632      	mov	r2, r6
 80086da:	463b      	mov	r3, r7
 80086dc:	4630      	mov	r0, r6
 80086de:	4639      	mov	r1, r7
 80086e0:	f7f8 f824 	bl	800072c <__aeabi_ddiv>
 80086e4:	f1ba 0f02 	cmp.w	sl, #2
 80086e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086ec:	d1e3      	bne.n	80086b6 <sqrt+0x5e>
 80086ee:	f7ff f8d7 	bl	80078a0 <__errno>
 80086f2:	2321      	movs	r3, #33	; 0x21
 80086f4:	6003      	str	r3, [r0, #0]
 80086f6:	e7e2      	b.n	80086be <sqrt+0x66>
 80086f8:	20000070 	.word	0x20000070
 80086fc:	08009a58 	.word	0x08009a58

08008700 <atan2f>:
 8008700:	f000 b8f6 	b.w	80088f0 <__ieee754_atan2f>

08008704 <sqrtf>:
 8008704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008706:	b08b      	sub	sp, #44	; 0x2c
 8008708:	4604      	mov	r4, r0
 800870a:	f000 fad9 	bl	8008cc0 <__ieee754_sqrtf>
 800870e:	4b20      	ldr	r3, [pc, #128]	; (8008790 <sqrtf+0x8c>)
 8008710:	4606      	mov	r6, r0
 8008712:	f993 5000 	ldrsb.w	r5, [r3]
 8008716:	1c6b      	adds	r3, r5, #1
 8008718:	d02a      	beq.n	8008770 <sqrtf+0x6c>
 800871a:	4621      	mov	r1, r4
 800871c:	4620      	mov	r0, r4
 800871e:	f7f8 fcf7 	bl	8001110 <__aeabi_fcmpun>
 8008722:	4607      	mov	r7, r0
 8008724:	bb20      	cbnz	r0, 8008770 <sqrtf+0x6c>
 8008726:	2100      	movs	r1, #0
 8008728:	4620      	mov	r0, r4
 800872a:	f7f8 fcc9 	bl	80010c0 <__aeabi_fcmplt>
 800872e:	b1f8      	cbz	r0, 8008770 <sqrtf+0x6c>
 8008730:	2301      	movs	r3, #1
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	4b17      	ldr	r3, [pc, #92]	; (8008794 <sqrtf+0x90>)
 8008736:	4620      	mov	r0, r4
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	9708      	str	r7, [sp, #32]
 800873c:	f7f7 fe78 	bl	8000430 <__aeabi_f2d>
 8008740:	2200      	movs	r2, #0
 8008742:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800874a:	2300      	movs	r3, #0
 800874c:	b99d      	cbnz	r5, 8008776 <sqrtf+0x72>
 800874e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008752:	4668      	mov	r0, sp
 8008754:	f000 fe9e 	bl	8009494 <matherr>
 8008758:	b1a8      	cbz	r0, 8008786 <sqrtf+0x82>
 800875a:	9b08      	ldr	r3, [sp, #32]
 800875c:	b11b      	cbz	r3, 8008766 <sqrtf+0x62>
 800875e:	f7ff f89f 	bl	80078a0 <__errno>
 8008762:	9b08      	ldr	r3, [sp, #32]
 8008764:	6003      	str	r3, [r0, #0]
 8008766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800876a:	f7f8 f9ad 	bl	8000ac8 <__aeabi_d2f>
 800876e:	4606      	mov	r6, r0
 8008770:	4630      	mov	r0, r6
 8008772:	b00b      	add	sp, #44	; 0x2c
 8008774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008776:	4610      	mov	r0, r2
 8008778:	4619      	mov	r1, r3
 800877a:	f7f7 ffd7 	bl	800072c <__aeabi_ddiv>
 800877e:	2d02      	cmp	r5, #2
 8008780:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008784:	d1e5      	bne.n	8008752 <sqrtf+0x4e>
 8008786:	f7ff f88b 	bl	80078a0 <__errno>
 800878a:	2321      	movs	r3, #33	; 0x21
 800878c:	6003      	str	r3, [r0, #0]
 800878e:	e7e4      	b.n	800875a <sqrtf+0x56>
 8008790:	20000070 	.word	0x20000070
 8008794:	08009a5d 	.word	0x08009a5d

08008798 <__ieee754_sqrt>:
 8008798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879c:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80088ec <__ieee754_sqrt+0x154>
 80087a0:	4606      	mov	r6, r0
 80087a2:	ea3e 0e01 	bics.w	lr, lr, r1
 80087a6:	460d      	mov	r5, r1
 80087a8:	4607      	mov	r7, r0
 80087aa:	460a      	mov	r2, r1
 80087ac:	460c      	mov	r4, r1
 80087ae:	4603      	mov	r3, r0
 80087b0:	d10f      	bne.n	80087d2 <__ieee754_sqrt+0x3a>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	f7f7 fe8f 	bl	80004d8 <__aeabi_dmul>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4630      	mov	r0, r6
 80087c0:	4629      	mov	r1, r5
 80087c2:	f7f7 fcd7 	bl	8000174 <__adddf3>
 80087c6:	4606      	mov	r6, r0
 80087c8:	460d      	mov	r5, r1
 80087ca:	4630      	mov	r0, r6
 80087cc:	4629      	mov	r1, r5
 80087ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d2:	2900      	cmp	r1, #0
 80087d4:	dc0e      	bgt.n	80087f4 <__ieee754_sqrt+0x5c>
 80087d6:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 80087da:	ea5e 0707 	orrs.w	r7, lr, r7
 80087de:	d0f4      	beq.n	80087ca <__ieee754_sqrt+0x32>
 80087e0:	b141      	cbz	r1, 80087f4 <__ieee754_sqrt+0x5c>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	f7f7 fcc3 	bl	8000170 <__aeabi_dsub>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	f7f7 ff9d 	bl	800072c <__aeabi_ddiv>
 80087f2:	e7e8      	b.n	80087c6 <__ieee754_sqrt+0x2e>
 80087f4:	1512      	asrs	r2, r2, #20
 80087f6:	d10c      	bne.n	8008812 <__ieee754_sqrt+0x7a>
 80087f8:	2c00      	cmp	r4, #0
 80087fa:	d06e      	beq.n	80088da <__ieee754_sqrt+0x142>
 80087fc:	2100      	movs	r1, #0
 80087fe:	02e6      	lsls	r6, r4, #11
 8008800:	d56f      	bpl.n	80088e2 <__ieee754_sqrt+0x14a>
 8008802:	1e48      	subs	r0, r1, #1
 8008804:	1a12      	subs	r2, r2, r0
 8008806:	f1c1 0020 	rsb	r0, r1, #32
 800880a:	fa23 f000 	lsr.w	r0, r3, r0
 800880e:	4304      	orrs	r4, r0
 8008810:	408b      	lsls	r3, r1
 8008812:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008816:	07d5      	lsls	r5, r2, #31
 8008818:	f04f 0500 	mov.w	r5, #0
 800881c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008820:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008824:	bf42      	ittt	mi
 8008826:	0064      	lslmi	r4, r4, #1
 8008828:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 800882c:	005b      	lslmi	r3, r3, #1
 800882e:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8008832:	1050      	asrs	r0, r2, #1
 8008834:	4421      	add	r1, r4
 8008836:	2216      	movs	r2, #22
 8008838:	462c      	mov	r4, r5
 800883a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	19a7      	adds	r7, r4, r6
 8008842:	428f      	cmp	r7, r1
 8008844:	bfde      	ittt	le
 8008846:	1bc9      	suble	r1, r1, r7
 8008848:	19bc      	addle	r4, r7, r6
 800884a:	19ad      	addle	r5, r5, r6
 800884c:	0049      	lsls	r1, r1, #1
 800884e:	3a01      	subs	r2, #1
 8008850:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008854:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800885c:	d1f0      	bne.n	8008840 <__ieee754_sqrt+0xa8>
 800885e:	f04f 0e20 	mov.w	lr, #32
 8008862:	4694      	mov	ip, r2
 8008864:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008868:	42a1      	cmp	r1, r4
 800886a:	eb06 070c 	add.w	r7, r6, ip
 800886e:	dc02      	bgt.n	8008876 <__ieee754_sqrt+0xde>
 8008870:	d112      	bne.n	8008898 <__ieee754_sqrt+0x100>
 8008872:	429f      	cmp	r7, r3
 8008874:	d810      	bhi.n	8008898 <__ieee754_sqrt+0x100>
 8008876:	2f00      	cmp	r7, #0
 8008878:	eb07 0c06 	add.w	ip, r7, r6
 800887c:	da34      	bge.n	80088e8 <__ieee754_sqrt+0x150>
 800887e:	f1bc 0f00 	cmp.w	ip, #0
 8008882:	db31      	blt.n	80088e8 <__ieee754_sqrt+0x150>
 8008884:	f104 0801 	add.w	r8, r4, #1
 8008888:	1b09      	subs	r1, r1, r4
 800888a:	4644      	mov	r4, r8
 800888c:	429f      	cmp	r7, r3
 800888e:	bf88      	it	hi
 8008890:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008894:	1bdb      	subs	r3, r3, r7
 8008896:	4432      	add	r2, r6
 8008898:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 800889c:	f1be 0e01 	subs.w	lr, lr, #1
 80088a0:	4439      	add	r1, r7
 80088a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80088a6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80088aa:	d1dd      	bne.n	8008868 <__ieee754_sqrt+0xd0>
 80088ac:	430b      	orrs	r3, r1
 80088ae:	d006      	beq.n	80088be <__ieee754_sqrt+0x126>
 80088b0:	1c54      	adds	r4, r2, #1
 80088b2:	bf0b      	itete	eq
 80088b4:	4672      	moveq	r2, lr
 80088b6:	3201      	addne	r2, #1
 80088b8:	3501      	addeq	r5, #1
 80088ba:	f022 0201 	bicne.w	r2, r2, #1
 80088be:	106b      	asrs	r3, r5, #1
 80088c0:	0852      	lsrs	r2, r2, #1
 80088c2:	07e9      	lsls	r1, r5, #31
 80088c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80088c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80088cc:	bf48      	it	mi
 80088ce:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80088d2:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 80088d6:	4616      	mov	r6, r2
 80088d8:	e777      	b.n	80087ca <__ieee754_sqrt+0x32>
 80088da:	0adc      	lsrs	r4, r3, #11
 80088dc:	3a15      	subs	r2, #21
 80088de:	055b      	lsls	r3, r3, #21
 80088e0:	e78a      	b.n	80087f8 <__ieee754_sqrt+0x60>
 80088e2:	0064      	lsls	r4, r4, #1
 80088e4:	3101      	adds	r1, #1
 80088e6:	e78a      	b.n	80087fe <__ieee754_sqrt+0x66>
 80088e8:	46a0      	mov	r8, r4
 80088ea:	e7cd      	b.n	8008888 <__ieee754_sqrt+0xf0>
 80088ec:	7ff00000 	.word	0x7ff00000

080088f0 <__ieee754_atan2f>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80088f6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80088fa:	4603      	mov	r3, r0
 80088fc:	dc05      	bgt.n	800890a <__ieee754_atan2f+0x1a>
 80088fe:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008902:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008906:	4607      	mov	r7, r0
 8008908:	dd04      	ble.n	8008914 <__ieee754_atan2f+0x24>
 800890a:	4618      	mov	r0, r3
 800890c:	f7f8 f932 	bl	8000b74 <__addsf3>
 8008910:	4603      	mov	r3, r0
 8008912:	e010      	b.n	8008936 <__ieee754_atan2f+0x46>
 8008914:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8008918:	d103      	bne.n	8008922 <__ieee754_atan2f+0x32>
 800891a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800891e:	f000 bdbb 	b.w	8009498 <atanf>
 8008922:	178c      	asrs	r4, r1, #30
 8008924:	f004 0402 	and.w	r4, r4, #2
 8008928:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800892c:	b92a      	cbnz	r2, 800893a <__ieee754_atan2f+0x4a>
 800892e:	2c02      	cmp	r4, #2
 8008930:	d023      	beq.n	800897a <__ieee754_atan2f+0x8a>
 8008932:	2c03      	cmp	r4, #3
 8008934:	d023      	beq.n	800897e <__ieee754_atan2f+0x8e>
 8008936:	4618      	mov	r0, r3
 8008938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800893a:	b91e      	cbnz	r6, 8008944 <__ieee754_atan2f+0x54>
 800893c:	2f00      	cmp	r7, #0
 800893e:	da53      	bge.n	80089e8 <__ieee754_atan2f+0xf8>
 8008940:	4b2a      	ldr	r3, [pc, #168]	; (80089ec <__ieee754_atan2f+0xfc>)
 8008942:	e7f8      	b.n	8008936 <__ieee754_atan2f+0x46>
 8008944:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008948:	d11b      	bne.n	8008982 <__ieee754_atan2f+0x92>
 800894a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800894e:	d10b      	bne.n	8008968 <__ieee754_atan2f+0x78>
 8008950:	2c02      	cmp	r4, #2
 8008952:	d005      	beq.n	8008960 <__ieee754_atan2f+0x70>
 8008954:	2c03      	cmp	r4, #3
 8008956:	d005      	beq.n	8008964 <__ieee754_atan2f+0x74>
 8008958:	2c01      	cmp	r4, #1
 800895a:	d141      	bne.n	80089e0 <__ieee754_atan2f+0xf0>
 800895c:	4b24      	ldr	r3, [pc, #144]	; (80089f0 <__ieee754_atan2f+0x100>)
 800895e:	e7ea      	b.n	8008936 <__ieee754_atan2f+0x46>
 8008960:	4b24      	ldr	r3, [pc, #144]	; (80089f4 <__ieee754_atan2f+0x104>)
 8008962:	e7e8      	b.n	8008936 <__ieee754_atan2f+0x46>
 8008964:	4b24      	ldr	r3, [pc, #144]	; (80089f8 <__ieee754_atan2f+0x108>)
 8008966:	e7e6      	b.n	8008936 <__ieee754_atan2f+0x46>
 8008968:	2c02      	cmp	r4, #2
 800896a:	d006      	beq.n	800897a <__ieee754_atan2f+0x8a>
 800896c:	2c03      	cmp	r4, #3
 800896e:	d006      	beq.n	800897e <__ieee754_atan2f+0x8e>
 8008970:	2c01      	cmp	r4, #1
 8008972:	d137      	bne.n	80089e4 <__ieee754_atan2f+0xf4>
 8008974:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008978:	e7dd      	b.n	8008936 <__ieee754_atan2f+0x46>
 800897a:	4b20      	ldr	r3, [pc, #128]	; (80089fc <__ieee754_atan2f+0x10c>)
 800897c:	e7db      	b.n	8008936 <__ieee754_atan2f+0x46>
 800897e:	4b20      	ldr	r3, [pc, #128]	; (8008a00 <__ieee754_atan2f+0x110>)
 8008980:	e7d9      	b.n	8008936 <__ieee754_atan2f+0x46>
 8008982:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008986:	d0d9      	beq.n	800893c <__ieee754_atan2f+0x4c>
 8008988:	1b92      	subs	r2, r2, r6
 800898a:	15d2      	asrs	r2, r2, #23
 800898c:	2a3c      	cmp	r2, #60	; 0x3c
 800898e:	dc17      	bgt.n	80089c0 <__ieee754_atan2f+0xd0>
 8008990:	2900      	cmp	r1, #0
 8008992:	da01      	bge.n	8008998 <__ieee754_atan2f+0xa8>
 8008994:	323c      	adds	r2, #60	; 0x3c
 8008996:	db15      	blt.n	80089c4 <__ieee754_atan2f+0xd4>
 8008998:	4618      	mov	r0, r3
 800899a:	f7f8 faa7 	bl	8000eec <__aeabi_fdiv>
 800899e:	f000 fe8b 	bl	80096b8 <fabsf>
 80089a2:	f000 fd79 	bl	8009498 <atanf>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2c01      	cmp	r4, #1
 80089aa:	d00d      	beq.n	80089c8 <__ieee754_atan2f+0xd8>
 80089ac:	2c02      	cmp	r4, #2
 80089ae:	d00e      	beq.n	80089ce <__ieee754_atan2f+0xde>
 80089b0:	2c00      	cmp	r4, #0
 80089b2:	d0c0      	beq.n	8008936 <__ieee754_atan2f+0x46>
 80089b4:	4913      	ldr	r1, [pc, #76]	; (8008a04 <__ieee754_atan2f+0x114>)
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7f8 f8dc 	bl	8000b74 <__addsf3>
 80089bc:	490f      	ldr	r1, [pc, #60]	; (80089fc <__ieee754_atan2f+0x10c>)
 80089be:	e00c      	b.n	80089da <__ieee754_atan2f+0xea>
 80089c0:	4b11      	ldr	r3, [pc, #68]	; (8008a08 <__ieee754_atan2f+0x118>)
 80089c2:	e7f1      	b.n	80089a8 <__ieee754_atan2f+0xb8>
 80089c4:	2300      	movs	r3, #0
 80089c6:	e7ef      	b.n	80089a8 <__ieee754_atan2f+0xb8>
 80089c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089cc:	e7b3      	b.n	8008936 <__ieee754_atan2f+0x46>
 80089ce:	490d      	ldr	r1, [pc, #52]	; (8008a04 <__ieee754_atan2f+0x114>)
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7f8 f8cf 	bl	8000b74 <__addsf3>
 80089d6:	4601      	mov	r1, r0
 80089d8:	4808      	ldr	r0, [pc, #32]	; (80089fc <__ieee754_atan2f+0x10c>)
 80089da:	f7f8 f8c9 	bl	8000b70 <__aeabi_fsub>
 80089de:	e797      	b.n	8008910 <__ieee754_atan2f+0x20>
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <__ieee754_atan2f+0x11c>)
 80089e2:	e7a8      	b.n	8008936 <__ieee754_atan2f+0x46>
 80089e4:	2300      	movs	r3, #0
 80089e6:	e7a6      	b.n	8008936 <__ieee754_atan2f+0x46>
 80089e8:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <__ieee754_atan2f+0x118>)
 80089ea:	e7a4      	b.n	8008936 <__ieee754_atan2f+0x46>
 80089ec:	bfc90fdb 	.word	0xbfc90fdb
 80089f0:	bf490fdb 	.word	0xbf490fdb
 80089f4:	4016cbe4 	.word	0x4016cbe4
 80089f8:	c016cbe4 	.word	0xc016cbe4
 80089fc:	40490fdb 	.word	0x40490fdb
 8008a00:	c0490fdb 	.word	0xc0490fdb
 8008a04:	33bbbd2e 	.word	0x33bbbd2e
 8008a08:	3fc90fdb 	.word	0x3fc90fdb
 8008a0c:	3f490fdb 	.word	0x3f490fdb

08008a10 <__ieee754_rem_pio2f>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	4a9d      	ldr	r2, [pc, #628]	; (8008c8c <__ieee754_rem_pio2f+0x27c>)
 8008a16:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8008a1a:	4295      	cmp	r5, r2
 8008a1c:	b087      	sub	sp, #28
 8008a1e:	460c      	mov	r4, r1
 8008a20:	4607      	mov	r7, r0
 8008a22:	dc04      	bgt.n	8008a2e <__ieee754_rem_pio2f+0x1e>
 8008a24:	2300      	movs	r3, #0
 8008a26:	6020      	str	r0, [r4, #0]
 8008a28:	604b      	str	r3, [r1, #4]
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	e01a      	b.n	8008a64 <__ieee754_rem_pio2f+0x54>
 8008a2e:	4a98      	ldr	r2, [pc, #608]	; (8008c90 <__ieee754_rem_pio2f+0x280>)
 8008a30:	4295      	cmp	r5, r2
 8008a32:	dc4b      	bgt.n	8008acc <__ieee754_rem_pio2f+0xbc>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	4997      	ldr	r1, [pc, #604]	; (8008c94 <__ieee754_rem_pio2f+0x284>)
 8008a38:	f025 050f 	bic.w	r5, r5, #15
 8008a3c:	4e96      	ldr	r6, [pc, #600]	; (8008c98 <__ieee754_rem_pio2f+0x288>)
 8008a3e:	dd23      	ble.n	8008a88 <__ieee754_rem_pio2f+0x78>
 8008a40:	f7f8 f896 	bl	8000b70 <__aeabi_fsub>
 8008a44:	42b5      	cmp	r5, r6
 8008a46:	4607      	mov	r7, r0
 8008a48:	d010      	beq.n	8008a6c <__ieee754_rem_pio2f+0x5c>
 8008a4a:	4994      	ldr	r1, [pc, #592]	; (8008c9c <__ieee754_rem_pio2f+0x28c>)
 8008a4c:	f7f8 f890 	bl	8000b70 <__aeabi_fsub>
 8008a50:	4601      	mov	r1, r0
 8008a52:	6020      	str	r0, [r4, #0]
 8008a54:	4638      	mov	r0, r7
 8008a56:	f7f8 f88b 	bl	8000b70 <__aeabi_fsub>
 8008a5a:	4990      	ldr	r1, [pc, #576]	; (8008c9c <__ieee754_rem_pio2f+0x28c>)
 8008a5c:	f7f8 f888 	bl	8000b70 <__aeabi_fsub>
 8008a60:	2601      	movs	r6, #1
 8008a62:	6060      	str	r0, [r4, #4]
 8008a64:	4630      	mov	r0, r6
 8008a66:	b007      	add	sp, #28
 8008a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6c:	498c      	ldr	r1, [pc, #560]	; (8008ca0 <__ieee754_rem_pio2f+0x290>)
 8008a6e:	f7f8 f87f 	bl	8000b70 <__aeabi_fsub>
 8008a72:	498c      	ldr	r1, [pc, #560]	; (8008ca4 <__ieee754_rem_pio2f+0x294>)
 8008a74:	4605      	mov	r5, r0
 8008a76:	f7f8 f87b 	bl	8000b70 <__aeabi_fsub>
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	6020      	str	r0, [r4, #0]
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f7f8 f876 	bl	8000b70 <__aeabi_fsub>
 8008a84:	4987      	ldr	r1, [pc, #540]	; (8008ca4 <__ieee754_rem_pio2f+0x294>)
 8008a86:	e7e9      	b.n	8008a5c <__ieee754_rem_pio2f+0x4c>
 8008a88:	f7f8 f874 	bl	8000b74 <__addsf3>
 8008a8c:	42b5      	cmp	r5, r6
 8008a8e:	4607      	mov	r7, r0
 8008a90:	d00e      	beq.n	8008ab0 <__ieee754_rem_pio2f+0xa0>
 8008a92:	4982      	ldr	r1, [pc, #520]	; (8008c9c <__ieee754_rem_pio2f+0x28c>)
 8008a94:	f7f8 f86e 	bl	8000b74 <__addsf3>
 8008a98:	4601      	mov	r1, r0
 8008a9a:	6020      	str	r0, [r4, #0]
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	f7f8 f867 	bl	8000b70 <__aeabi_fsub>
 8008aa2:	497e      	ldr	r1, [pc, #504]	; (8008c9c <__ieee754_rem_pio2f+0x28c>)
 8008aa4:	f7f8 f866 	bl	8000b74 <__addsf3>
 8008aa8:	f04f 36ff 	mov.w	r6, #4294967295
 8008aac:	6060      	str	r0, [r4, #4]
 8008aae:	e7d9      	b.n	8008a64 <__ieee754_rem_pio2f+0x54>
 8008ab0:	497b      	ldr	r1, [pc, #492]	; (8008ca0 <__ieee754_rem_pio2f+0x290>)
 8008ab2:	f7f8 f85f 	bl	8000b74 <__addsf3>
 8008ab6:	497b      	ldr	r1, [pc, #492]	; (8008ca4 <__ieee754_rem_pio2f+0x294>)
 8008ab8:	4605      	mov	r5, r0
 8008aba:	f7f8 f85b 	bl	8000b74 <__addsf3>
 8008abe:	4601      	mov	r1, r0
 8008ac0:	6020      	str	r0, [r4, #0]
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f7f8 f854 	bl	8000b70 <__aeabi_fsub>
 8008ac8:	4976      	ldr	r1, [pc, #472]	; (8008ca4 <__ieee754_rem_pio2f+0x294>)
 8008aca:	e7eb      	b.n	8008aa4 <__ieee754_rem_pio2f+0x94>
 8008acc:	4a76      	ldr	r2, [pc, #472]	; (8008ca8 <__ieee754_rem_pio2f+0x298>)
 8008ace:	4295      	cmp	r5, r2
 8008ad0:	f300 808c 	bgt.w	8008bec <__ieee754_rem_pio2f+0x1dc>
 8008ad4:	f000 fdf0 	bl	80096b8 <fabsf>
 8008ad8:	4974      	ldr	r1, [pc, #464]	; (8008cac <__ieee754_rem_pio2f+0x29c>)
 8008ada:	4680      	mov	r8, r0
 8008adc:	f7f8 f952 	bl	8000d84 <__aeabi_fmul>
 8008ae0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008ae4:	f7f8 f846 	bl	8000b74 <__addsf3>
 8008ae8:	f7f8 fb28 	bl	800113c <__aeabi_f2iz>
 8008aec:	4606      	mov	r6, r0
 8008aee:	f7f8 f8f5 	bl	8000cdc <__aeabi_i2f>
 8008af2:	4968      	ldr	r1, [pc, #416]	; (8008c94 <__ieee754_rem_pio2f+0x284>)
 8008af4:	4682      	mov	sl, r0
 8008af6:	f7f8 f945 	bl	8000d84 <__aeabi_fmul>
 8008afa:	4601      	mov	r1, r0
 8008afc:	4640      	mov	r0, r8
 8008afe:	f7f8 f837 	bl	8000b70 <__aeabi_fsub>
 8008b02:	4966      	ldr	r1, [pc, #408]	; (8008c9c <__ieee754_rem_pio2f+0x28c>)
 8008b04:	4680      	mov	r8, r0
 8008b06:	4650      	mov	r0, sl
 8008b08:	f7f8 f93c 	bl	8000d84 <__aeabi_fmul>
 8008b0c:	2e1f      	cmp	r6, #31
 8008b0e:	4681      	mov	r9, r0
 8008b10:	dc0c      	bgt.n	8008b2c <__ieee754_rem_pio2f+0x11c>
 8008b12:	4a67      	ldr	r2, [pc, #412]	; (8008cb0 <__ieee754_rem_pio2f+0x2a0>)
 8008b14:	1e71      	subs	r1, r6, #1
 8008b16:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008b1a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d004      	beq.n	8008b2c <__ieee754_rem_pio2f+0x11c>
 8008b22:	4649      	mov	r1, r9
 8008b24:	4640      	mov	r0, r8
 8008b26:	f7f8 f823 	bl	8000b70 <__aeabi_fsub>
 8008b2a:	e009      	b.n	8008b40 <__ieee754_rem_pio2f+0x130>
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	4640      	mov	r0, r8
 8008b30:	f7f8 f81e 	bl	8000b70 <__aeabi_fsub>
 8008b34:	15ed      	asrs	r5, r5, #23
 8008b36:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008b3a:	1aeb      	subs	r3, r5, r3
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	dc01      	bgt.n	8008b44 <__ieee754_rem_pio2f+0x134>
 8008b40:	6020      	str	r0, [r4, #0]
 8008b42:	e024      	b.n	8008b8e <__ieee754_rem_pio2f+0x17e>
 8008b44:	4956      	ldr	r1, [pc, #344]	; (8008ca0 <__ieee754_rem_pio2f+0x290>)
 8008b46:	4650      	mov	r0, sl
 8008b48:	f7f8 f91c 	bl	8000d84 <__aeabi_fmul>
 8008b4c:	4681      	mov	r9, r0
 8008b4e:	4601      	mov	r1, r0
 8008b50:	4640      	mov	r0, r8
 8008b52:	f7f8 f80d 	bl	8000b70 <__aeabi_fsub>
 8008b56:	4601      	mov	r1, r0
 8008b58:	4683      	mov	fp, r0
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	f7f8 f808 	bl	8000b70 <__aeabi_fsub>
 8008b60:	4649      	mov	r1, r9
 8008b62:	f7f8 f805 	bl	8000b70 <__aeabi_fsub>
 8008b66:	4680      	mov	r8, r0
 8008b68:	494e      	ldr	r1, [pc, #312]	; (8008ca4 <__ieee754_rem_pio2f+0x294>)
 8008b6a:	4650      	mov	r0, sl
 8008b6c:	f7f8 f90a 	bl	8000d84 <__aeabi_fmul>
 8008b70:	4641      	mov	r1, r8
 8008b72:	f7f7 fffd 	bl	8000b70 <__aeabi_fsub>
 8008b76:	4601      	mov	r1, r0
 8008b78:	4681      	mov	r9, r0
 8008b7a:	4658      	mov	r0, fp
 8008b7c:	f7f7 fff8 	bl	8000b70 <__aeabi_fsub>
 8008b80:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008b84:	1aed      	subs	r5, r5, r3
 8008b86:	2d19      	cmp	r5, #25
 8008b88:	dc15      	bgt.n	8008bb6 <__ieee754_rem_pio2f+0x1a6>
 8008b8a:	46d8      	mov	r8, fp
 8008b8c:	6020      	str	r0, [r4, #0]
 8008b8e:	6825      	ldr	r5, [r4, #0]
 8008b90:	4640      	mov	r0, r8
 8008b92:	4629      	mov	r1, r5
 8008b94:	f7f7 ffec 	bl	8000b70 <__aeabi_fsub>
 8008b98:	4649      	mov	r1, r9
 8008b9a:	f7f7 ffe9 	bl	8000b70 <__aeabi_fsub>
 8008b9e:	2f00      	cmp	r7, #0
 8008ba0:	6060      	str	r0, [r4, #4]
 8008ba2:	f6bf af5f 	bge.w	8008a64 <__ieee754_rem_pio2f+0x54>
 8008ba6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8008baa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008bae:	6025      	str	r5, [r4, #0]
 8008bb0:	6060      	str	r0, [r4, #4]
 8008bb2:	4276      	negs	r6, r6
 8008bb4:	e756      	b.n	8008a64 <__ieee754_rem_pio2f+0x54>
 8008bb6:	493f      	ldr	r1, [pc, #252]	; (8008cb4 <__ieee754_rem_pio2f+0x2a4>)
 8008bb8:	4650      	mov	r0, sl
 8008bba:	f7f8 f8e3 	bl	8000d84 <__aeabi_fmul>
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	4601      	mov	r1, r0
 8008bc2:	4658      	mov	r0, fp
 8008bc4:	f7f7 ffd4 	bl	8000b70 <__aeabi_fsub>
 8008bc8:	4601      	mov	r1, r0
 8008bca:	4680      	mov	r8, r0
 8008bcc:	4658      	mov	r0, fp
 8008bce:	f7f7 ffcf 	bl	8000b70 <__aeabi_fsub>
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	f7f7 ffcc 	bl	8000b70 <__aeabi_fsub>
 8008bd8:	4605      	mov	r5, r0
 8008bda:	4937      	ldr	r1, [pc, #220]	; (8008cb8 <__ieee754_rem_pio2f+0x2a8>)
 8008bdc:	4650      	mov	r0, sl
 8008bde:	f7f8 f8d1 	bl	8000d84 <__aeabi_fmul>
 8008be2:	4629      	mov	r1, r5
 8008be4:	f7f7 ffc4 	bl	8000b70 <__aeabi_fsub>
 8008be8:	4681      	mov	r9, r0
 8008bea:	e79a      	b.n	8008b22 <__ieee754_rem_pio2f+0x112>
 8008bec:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008bf0:	db05      	blt.n	8008bfe <__ieee754_rem_pio2f+0x1ee>
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	f7f7 ffbc 	bl	8000b70 <__aeabi_fsub>
 8008bf8:	6060      	str	r0, [r4, #4]
 8008bfa:	6020      	str	r0, [r4, #0]
 8008bfc:	e715      	b.n	8008a2a <__ieee754_rem_pio2f+0x1a>
 8008bfe:	15ee      	asrs	r6, r5, #23
 8008c00:	3e86      	subs	r6, #134	; 0x86
 8008c02:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8008c06:	4628      	mov	r0, r5
 8008c08:	f7f8 fa98 	bl	800113c <__aeabi_f2iz>
 8008c0c:	f7f8 f866 	bl	8000cdc <__aeabi_i2f>
 8008c10:	4601      	mov	r1, r0
 8008c12:	9003      	str	r0, [sp, #12]
 8008c14:	4628      	mov	r0, r5
 8008c16:	f7f7 ffab 	bl	8000b70 <__aeabi_fsub>
 8008c1a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008c1e:	f7f8 f8b1 	bl	8000d84 <__aeabi_fmul>
 8008c22:	4680      	mov	r8, r0
 8008c24:	f7f8 fa8a 	bl	800113c <__aeabi_f2iz>
 8008c28:	f7f8 f858 	bl	8000cdc <__aeabi_i2f>
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	9004      	str	r0, [sp, #16]
 8008c30:	4605      	mov	r5, r0
 8008c32:	4640      	mov	r0, r8
 8008c34:	f7f7 ff9c 	bl	8000b70 <__aeabi_fsub>
 8008c38:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008c3c:	f7f8 f8a2 	bl	8000d84 <__aeabi_fmul>
 8008c40:	2100      	movs	r1, #0
 8008c42:	9005      	str	r0, [sp, #20]
 8008c44:	f7f8 fa32 	bl	80010ac <__aeabi_fcmpeq>
 8008c48:	b1e8      	cbz	r0, 8008c86 <__ieee754_rem_pio2f+0x276>
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f7f8 fa2d 	bl	80010ac <__aeabi_fcmpeq>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	bf14      	ite	ne
 8008c56:	2301      	movne	r3, #1
 8008c58:	2302      	moveq	r3, #2
 8008c5a:	4a18      	ldr	r2, [pc, #96]	; (8008cbc <__ieee754_rem_pio2f+0x2ac>)
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	9201      	str	r2, [sp, #4]
 8008c60:	2202      	movs	r2, #2
 8008c62:	a803      	add	r0, sp, #12
 8008c64:	9200      	str	r2, [sp, #0]
 8008c66:	4632      	mov	r2, r6
 8008c68:	f000 f910 	bl	8008e8c <__kernel_rem_pio2f>
 8008c6c:	2f00      	cmp	r7, #0
 8008c6e:	4606      	mov	r6, r0
 8008c70:	f6bf aef8 	bge.w	8008a64 <__ieee754_rem_pio2f+0x54>
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	6863      	ldr	r3, [r4, #4]
 8008c7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c82:	6063      	str	r3, [r4, #4]
 8008c84:	e795      	b.n	8008bb2 <__ieee754_rem_pio2f+0x1a2>
 8008c86:	2303      	movs	r3, #3
 8008c88:	e7e7      	b.n	8008c5a <__ieee754_rem_pio2f+0x24a>
 8008c8a:	bf00      	nop
 8008c8c:	3f490fd8 	.word	0x3f490fd8
 8008c90:	4016cbe3 	.word	0x4016cbe3
 8008c94:	3fc90f80 	.word	0x3fc90f80
 8008c98:	3fc90fd0 	.word	0x3fc90fd0
 8008c9c:	37354443 	.word	0x37354443
 8008ca0:	37354400 	.word	0x37354400
 8008ca4:	2e85a308 	.word	0x2e85a308
 8008ca8:	43490f80 	.word	0x43490f80
 8008cac:	3f22f984 	.word	0x3f22f984
 8008cb0:	08009a64 	.word	0x08009a64
 8008cb4:	2e85a300 	.word	0x2e85a300
 8008cb8:	248d3132 	.word	0x248d3132
 8008cbc:	08009ae4 	.word	0x08009ae4

08008cc0 <__ieee754_sqrtf>:
 8008cc0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008cc4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	4603      	mov	r3, r0
 8008ccc:	4604      	mov	r4, r0
 8008cce:	d309      	bcc.n	8008ce4 <__ieee754_sqrtf+0x24>
 8008cd0:	4601      	mov	r1, r0
 8008cd2:	f7f8 f857 	bl	8000d84 <__aeabi_fmul>
 8008cd6:	4601      	mov	r1, r0
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f7f7 ff4b 	bl	8000b74 <__addsf3>
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	bd70      	pop	{r4, r5, r6, pc}
 8008ce4:	2a00      	cmp	r2, #0
 8008ce6:	d0fb      	beq.n	8008ce0 <__ieee754_sqrtf+0x20>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	da06      	bge.n	8008cfa <__ieee754_sqrtf+0x3a>
 8008cec:	4601      	mov	r1, r0
 8008cee:	f7f7 ff3f 	bl	8000b70 <__aeabi_fsub>
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	f7f8 f8fa 	bl	8000eec <__aeabi_fdiv>
 8008cf8:	e7f1      	b.n	8008cde <__ieee754_sqrtf+0x1e>
 8008cfa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008cfe:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8008d02:	d204      	bcs.n	8008d0e <__ieee754_sqrtf+0x4e>
 8008d04:	2200      	movs	r2, #0
 8008d06:	0219      	lsls	r1, r3, #8
 8008d08:	d529      	bpl.n	8008d5e <__ieee754_sqrtf+0x9e>
 8008d0a:	3a01      	subs	r2, #1
 8008d0c:	1aa4      	subs	r4, r4, r2
 8008d0e:	3c7f      	subs	r4, #127	; 0x7f
 8008d10:	07e2      	lsls	r2, r4, #31
 8008d12:	f04f 0200 	mov.w	r2, #0
 8008d16:	ea4f 0164 	mov.w	r1, r4, asr #1
 8008d1a:	4616      	mov	r6, r2
 8008d1c:	f04f 0419 	mov.w	r4, #25
 8008d20:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8008d24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008d28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d2c:	bf48      	it	mi
 8008d2e:	005b      	lslmi	r3, r3, #1
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	1835      	adds	r5, r6, r0
 8008d34:	429d      	cmp	r5, r3
 8008d36:	bfde      	ittt	le
 8008d38:	182e      	addle	r6, r5, r0
 8008d3a:	1b5b      	suble	r3, r3, r5
 8008d3c:	1812      	addle	r2, r2, r0
 8008d3e:	3c01      	subs	r4, #1
 8008d40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d44:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008d48:	d1f3      	bne.n	8008d32 <__ieee754_sqrtf+0x72>
 8008d4a:	b113      	cbz	r3, 8008d52 <__ieee754_sqrtf+0x92>
 8008d4c:	3201      	adds	r2, #1
 8008d4e:	f022 0201 	bic.w	r2, r2, #1
 8008d52:	1054      	asrs	r4, r2, #1
 8008d54:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008d58:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8008d5c:	e7c0      	b.n	8008ce0 <__ieee754_sqrtf+0x20>
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	3201      	adds	r2, #1
 8008d62:	e7d0      	b.n	8008d06 <__ieee754_sqrtf+0x46>

08008d64 <__kernel_cosf>:
 8008d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d68:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8008d6c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8008d70:	4606      	mov	r6, r0
 8008d72:	460f      	mov	r7, r1
 8008d74:	da03      	bge.n	8008d7e <__kernel_cosf+0x1a>
 8008d76:	f7f8 f9e1 	bl	800113c <__aeabi_f2iz>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d070      	beq.n	8008e60 <__kernel_cosf+0xfc>
 8008d7e:	4631      	mov	r1, r6
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7f7 ffff 	bl	8000d84 <__aeabi_fmul>
 8008d86:	4605      	mov	r5, r0
 8008d88:	4937      	ldr	r1, [pc, #220]	; (8008e68 <__kernel_cosf+0x104>)
 8008d8a:	f7f7 fffb 	bl	8000d84 <__aeabi_fmul>
 8008d8e:	4937      	ldr	r1, [pc, #220]	; (8008e6c <__kernel_cosf+0x108>)
 8008d90:	f7f7 fef0 	bl	8000b74 <__addsf3>
 8008d94:	4629      	mov	r1, r5
 8008d96:	f7f7 fff5 	bl	8000d84 <__aeabi_fmul>
 8008d9a:	4935      	ldr	r1, [pc, #212]	; (8008e70 <__kernel_cosf+0x10c>)
 8008d9c:	f7f7 fee8 	bl	8000b70 <__aeabi_fsub>
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7f7 ffef 	bl	8000d84 <__aeabi_fmul>
 8008da6:	4933      	ldr	r1, [pc, #204]	; (8008e74 <__kernel_cosf+0x110>)
 8008da8:	f7f7 fee4 	bl	8000b74 <__addsf3>
 8008dac:	4629      	mov	r1, r5
 8008dae:	f7f7 ffe9 	bl	8000d84 <__aeabi_fmul>
 8008db2:	4931      	ldr	r1, [pc, #196]	; (8008e78 <__kernel_cosf+0x114>)
 8008db4:	f7f7 fedc 	bl	8000b70 <__aeabi_fsub>
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7f7 ffe3 	bl	8000d84 <__aeabi_fmul>
 8008dbe:	492f      	ldr	r1, [pc, #188]	; (8008e7c <__kernel_cosf+0x118>)
 8008dc0:	f7f7 fed8 	bl	8000b74 <__addsf3>
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f7f7 ffdd 	bl	8000d84 <__aeabi_fmul>
 8008dca:	4b2d      	ldr	r3, [pc, #180]	; (8008e80 <__kernel_cosf+0x11c>)
 8008dcc:	4680      	mov	r8, r0
 8008dce:	429c      	cmp	r4, r3
 8008dd0:	dc1d      	bgt.n	8008e0e <__kernel_cosf+0xaa>
 8008dd2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 ffd4 	bl	8000d84 <__aeabi_fmul>
 8008ddc:	4641      	mov	r1, r8
 8008dde:	4604      	mov	r4, r0
 8008de0:	4628      	mov	r0, r5
 8008de2:	f7f7 ffcf 	bl	8000d84 <__aeabi_fmul>
 8008de6:	4639      	mov	r1, r7
 8008de8:	4605      	mov	r5, r0
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7f7 ffca 	bl	8000d84 <__aeabi_fmul>
 8008df0:	4601      	mov	r1, r0
 8008df2:	4628      	mov	r0, r5
 8008df4:	f7f7 febc 	bl	8000b70 <__aeabi_fsub>
 8008df8:	4601      	mov	r1, r0
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f7f7 feb8 	bl	8000b70 <__aeabi_fsub>
 8008e00:	4601      	mov	r1, r0
 8008e02:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008e06:	f7f7 feb3 	bl	8000b70 <__aeabi_fsub>
 8008e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0e:	4b1d      	ldr	r3, [pc, #116]	; (8008e84 <__kernel_cosf+0x120>)
 8008e10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008e14:	429c      	cmp	r4, r3
 8008e16:	bfcc      	ite	gt
 8008e18:	4c1b      	ldrgt	r4, [pc, #108]	; (8008e88 <__kernel_cosf+0x124>)
 8008e1a:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8008e1e:	4621      	mov	r1, r4
 8008e20:	f7f7 fea6 	bl	8000b70 <__aeabi_fsub>
 8008e24:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008e28:	4681      	mov	r9, r0
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f7f7 ffaa 	bl	8000d84 <__aeabi_fmul>
 8008e30:	4621      	mov	r1, r4
 8008e32:	f7f7 fe9d 	bl	8000b70 <__aeabi_fsub>
 8008e36:	4641      	mov	r1, r8
 8008e38:	4604      	mov	r4, r0
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f7f7 ffa2 	bl	8000d84 <__aeabi_fmul>
 8008e40:	4639      	mov	r1, r7
 8008e42:	4605      	mov	r5, r0
 8008e44:	4630      	mov	r0, r6
 8008e46:	f7f7 ff9d 	bl	8000d84 <__aeabi_fmul>
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f7f7 fe8f 	bl	8000b70 <__aeabi_fsub>
 8008e52:	4601      	mov	r1, r0
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7f7 fe8b 	bl	8000b70 <__aeabi_fsub>
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	4648      	mov	r0, r9
 8008e5e:	e7d2      	b.n	8008e06 <__kernel_cosf+0xa2>
 8008e60:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e68:	ad47d74e 	.word	0xad47d74e
 8008e6c:	310f74f6 	.word	0x310f74f6
 8008e70:	3493f27c 	.word	0x3493f27c
 8008e74:	37d00d01 	.word	0x37d00d01
 8008e78:	3ab60b61 	.word	0x3ab60b61
 8008e7c:	3d2aaaab 	.word	0x3d2aaaab
 8008e80:	3e999999 	.word	0x3e999999
 8008e84:	3f480000 	.word	0x3f480000
 8008e88:	3e900000 	.word	0x3e900000

08008e8c <__kernel_rem_pio2f>:
 8008e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e90:	b0d9      	sub	sp, #356	; 0x164
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	9101      	str	r1, [sp, #4]
 8008e96:	4bb4      	ldr	r3, [pc, #720]	; (8009168 <__kernel_rem_pio2f+0x2dc>)
 8008e98:	9962      	ldr	r1, [sp, #392]	; 0x188
 8008e9a:	1ed4      	subs	r4, r2, #3
 8008e9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ea0:	2500      	movs	r5, #0
 8008ea2:	9302      	str	r3, [sp, #8]
 8008ea4:	9b04      	ldr	r3, [sp, #16]
 8008ea6:	f04f 0b00 	mov.w	fp, #0
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	9303      	str	r3, [sp, #12]
 8008eae:	2308      	movs	r3, #8
 8008eb0:	fb94 f4f3 	sdiv	r4, r4, r3
 8008eb4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008eb8:	1c66      	adds	r6, r4, #1
 8008eba:	9b02      	ldr	r3, [sp, #8]
 8008ebc:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8008ec0:	9a03      	ldr	r2, [sp, #12]
 8008ec2:	9005      	str	r0, [sp, #20]
 8008ec4:	eb03 0802 	add.w	r8, r3, r2
 8008ec8:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8008eca:	1aa7      	subs	r7, r4, r2
 8008ecc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008ed0:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 8008ed4:	4545      	cmp	r5, r8
 8008ed6:	dd10      	ble.n	8008efa <__kernel_rem_pio2f+0x6e>
 8008ed8:	2500      	movs	r5, #0
 8008eda:	f04f 0b00 	mov.w	fp, #0
 8008ede:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 8008ee2:	9b02      	ldr	r3, [sp, #8]
 8008ee4:	429d      	cmp	r5, r3
 8008ee6:	dc28      	bgt.n	8008f3a <__kernel_rem_pio2f+0xae>
 8008ee8:	9b04      	ldr	r3, [sp, #16]
 8008eea:	46d9      	mov	r9, fp
 8008eec:	eb03 0805 	add.w	r8, r3, r5
 8008ef0:	ab1c      	add	r3, sp, #112	; 0x70
 8008ef2:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 8008ef6:	2700      	movs	r7, #0
 8008ef8:	e018      	b.n	8008f2c <__kernel_rem_pio2f+0xa0>
 8008efa:	42ef      	cmn	r7, r5
 8008efc:	d407      	bmi.n	8008f0e <__kernel_rem_pio2f+0x82>
 8008efe:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008f02:	f7f7 feeb 	bl	8000cdc <__aeabi_i2f>
 8008f06:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 8008f0a:	3501      	adds	r5, #1
 8008f0c:	e7e2      	b.n	8008ed4 <__kernel_rem_pio2f+0x48>
 8008f0e:	4658      	mov	r0, fp
 8008f10:	e7f9      	b.n	8008f06 <__kernel_rem_pio2f+0x7a>
 8008f12:	9b05      	ldr	r3, [sp, #20]
 8008f14:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 8008f18:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008f1c:	f7f7 ff32 	bl	8000d84 <__aeabi_fmul>
 8008f20:	4601      	mov	r1, r0
 8008f22:	4648      	mov	r0, r9
 8008f24:	f7f7 fe26 	bl	8000b74 <__addsf3>
 8008f28:	4681      	mov	r9, r0
 8008f2a:	3701      	adds	r7, #1
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	429f      	cmp	r7, r3
 8008f30:	ddef      	ble.n	8008f12 <__kernel_rem_pio2f+0x86>
 8008f32:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 8008f36:	3501      	adds	r5, #1
 8008f38:	e7d3      	b.n	8008ee2 <__kernel_rem_pio2f+0x56>
 8008f3a:	9b02      	ldr	r3, [sp, #8]
 8008f3c:	aa08      	add	r2, sp, #32
 8008f3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f42:	9307      	str	r3, [sp, #28]
 8008f44:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8008f46:	9f02      	ldr	r7, [sp, #8]
 8008f48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f4c:	9306      	str	r3, [sp, #24]
 8008f4e:	46ba      	mov	sl, r7
 8008f50:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8008f54:	ab58      	add	r3, sp, #352	; 0x160
 8008f56:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8008f5a:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8008f5e:	ad07      	add	r5, sp, #28
 8008f60:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8008f64:	f1ba 0f00 	cmp.w	sl, #0
 8008f68:	dc57      	bgt.n	800901a <__kernel_rem_pio2f+0x18e>
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f000 fbe7 	bl	8009740 <scalbnf>
 8008f72:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8008f76:	4604      	mov	r4, r0
 8008f78:	f7f7 ff04 	bl	8000d84 <__aeabi_fmul>
 8008f7c:	f000 fba0 	bl	80096c0 <floorf>
 8008f80:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8008f84:	f7f7 fefe 	bl	8000d84 <__aeabi_fmul>
 8008f88:	4601      	mov	r1, r0
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f7f7 fdf0 	bl	8000b70 <__aeabi_fsub>
 8008f90:	4604      	mov	r4, r0
 8008f92:	f7f8 f8d3 	bl	800113c <__aeabi_f2iz>
 8008f96:	4680      	mov	r8, r0
 8008f98:	f7f7 fea0 	bl	8000cdc <__aeabi_i2f>
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f7f7 fde6 	bl	8000b70 <__aeabi_fsub>
 8008fa4:	2e00      	cmp	r6, #0
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	dd55      	ble.n	8009056 <__kernel_rem_pio2f+0x1ca>
 8008faa:	1e7b      	subs	r3, r7, #1
 8008fac:	aa08      	add	r2, sp, #32
 8008fae:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8008fb2:	f1c6 0208 	rsb	r2, r6, #8
 8008fb6:	fa45 f002 	asr.w	r0, r5, r2
 8008fba:	4480      	add	r8, r0
 8008fbc:	4090      	lsls	r0, r2
 8008fbe:	1a2d      	subs	r5, r5, r0
 8008fc0:	aa08      	add	r2, sp, #32
 8008fc2:	f1c6 0007 	rsb	r0, r6, #7
 8008fc6:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8008fca:	4105      	asrs	r5, r0
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	dd50      	ble.n	8009072 <__kernel_rem_pio2f+0x1e6>
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	4691      	mov	r9, r2
 8008fd4:	f108 0801 	add.w	r8, r8, #1
 8008fd8:	4297      	cmp	r7, r2
 8008fda:	f300 8085 	bgt.w	80090e8 <__kernel_rem_pio2f+0x25c>
 8008fde:	2e00      	cmp	r6, #0
 8008fe0:	dd05      	ble.n	8008fee <__kernel_rem_pio2f+0x162>
 8008fe2:	2e01      	cmp	r6, #1
 8008fe4:	f000 8097 	beq.w	8009116 <__kernel_rem_pio2f+0x28a>
 8008fe8:	2e02      	cmp	r6, #2
 8008fea:	f000 809e 	beq.w	800912a <__kernel_rem_pio2f+0x29e>
 8008fee:	2d02      	cmp	r5, #2
 8008ff0:	d13f      	bne.n	8009072 <__kernel_rem_pio2f+0x1e6>
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008ff8:	f7f7 fdba 	bl	8000b70 <__aeabi_fsub>
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	f1b9 0f00 	cmp.w	r9, #0
 8009002:	d036      	beq.n	8009072 <__kernel_rem_pio2f+0x1e6>
 8009004:	4631      	mov	r1, r6
 8009006:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800900a:	f000 fb99 	bl	8009740 <scalbnf>
 800900e:	4601      	mov	r1, r0
 8009010:	4620      	mov	r0, r4
 8009012:	f7f7 fdad 	bl	8000b70 <__aeabi_fsub>
 8009016:	4604      	mov	r4, r0
 8009018:	e02b      	b.n	8009072 <__kernel_rem_pio2f+0x1e6>
 800901a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800901e:	4620      	mov	r0, r4
 8009020:	f7f7 feb0 	bl	8000d84 <__aeabi_fmul>
 8009024:	f7f8 f88a 	bl	800113c <__aeabi_f2iz>
 8009028:	f7f7 fe58 	bl	8000cdc <__aeabi_i2f>
 800902c:	4641      	mov	r1, r8
 800902e:	4683      	mov	fp, r0
 8009030:	f7f7 fea8 	bl	8000d84 <__aeabi_fmul>
 8009034:	4601      	mov	r1, r0
 8009036:	4620      	mov	r0, r4
 8009038:	f7f7 fd9a 	bl	8000b70 <__aeabi_fsub>
 800903c:	f7f8 f87e 	bl	800113c <__aeabi_f2iz>
 8009040:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009044:	f845 0f04 	str.w	r0, [r5, #4]!
 8009048:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800904c:	4658      	mov	r0, fp
 800904e:	f7f7 fd91 	bl	8000b74 <__addsf3>
 8009052:	4604      	mov	r4, r0
 8009054:	e786      	b.n	8008f64 <__kernel_rem_pio2f+0xd8>
 8009056:	d105      	bne.n	8009064 <__kernel_rem_pio2f+0x1d8>
 8009058:	1e7b      	subs	r3, r7, #1
 800905a:	aa08      	add	r2, sp, #32
 800905c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8009060:	122d      	asrs	r5, r5, #8
 8009062:	e7b3      	b.n	8008fcc <__kernel_rem_pio2f+0x140>
 8009064:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009068:	f7f8 f83e 	bl	80010e8 <__aeabi_fcmpge>
 800906c:	2800      	cmp	r0, #0
 800906e:	d139      	bne.n	80090e4 <__kernel_rem_pio2f+0x258>
 8009070:	4605      	mov	r5, r0
 8009072:	2100      	movs	r1, #0
 8009074:	4620      	mov	r0, r4
 8009076:	f7f8 f819 	bl	80010ac <__aeabi_fcmpeq>
 800907a:	2800      	cmp	r0, #0
 800907c:	f000 8098 	beq.w	80091b0 <__kernel_rem_pio2f+0x324>
 8009080:	1e7c      	subs	r4, r7, #1
 8009082:	4623      	mov	r3, r4
 8009084:	2200      	movs	r2, #0
 8009086:	9902      	ldr	r1, [sp, #8]
 8009088:	428b      	cmp	r3, r1
 800908a:	da55      	bge.n	8009138 <__kernel_rem_pio2f+0x2ac>
 800908c:	2a00      	cmp	r2, #0
 800908e:	d16e      	bne.n	800916e <__kernel_rem_pio2f+0x2e2>
 8009090:	2301      	movs	r3, #1
 8009092:	f06f 0103 	mvn.w	r1, #3
 8009096:	fb01 f203 	mul.w	r2, r1, r3
 800909a:	9807      	ldr	r0, [sp, #28]
 800909c:	5882      	ldr	r2, [r0, r2]
 800909e:	2a00      	cmp	r2, #0
 80090a0:	d050      	beq.n	8009144 <__kernel_rem_pio2f+0x2b8>
 80090a2:	f06f 0803 	mvn.w	r8, #3
 80090a6:	9a04      	ldr	r2, [sp, #16]
 80090a8:	1c7d      	adds	r5, r7, #1
 80090aa:	19d4      	adds	r4, r2, r7
 80090ac:	aa58      	add	r2, sp, #352	; 0x160
 80090ae:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80090b2:	3cf4      	subs	r4, #244	; 0xf4
 80090b4:	441f      	add	r7, r3
 80090b6:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80090ba:	42bd      	cmp	r5, r7
 80090bc:	f73f af47 	bgt.w	8008f4e <__kernel_rem_pio2f+0xc2>
 80090c0:	9b06      	ldr	r3, [sp, #24]
 80090c2:	f04f 0a00 	mov.w	sl, #0
 80090c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090ca:	f7f7 fe07 	bl	8000cdc <__aeabi_i2f>
 80090ce:	f04f 0b00 	mov.w	fp, #0
 80090d2:	f844 0f04 	str.w	r0, [r4, #4]!
 80090d6:	9b03      	ldr	r3, [sp, #12]
 80090d8:	459a      	cmp	sl, r3
 80090da:	dd35      	ble.n	8009148 <__kernel_rem_pio2f+0x2bc>
 80090dc:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 80090e0:	3501      	adds	r5, #1
 80090e2:	e7ea      	b.n	80090ba <__kernel_rem_pio2f+0x22e>
 80090e4:	2502      	movs	r5, #2
 80090e6:	e773      	b.n	8008fd0 <__kernel_rem_pio2f+0x144>
 80090e8:	ab08      	add	r3, sp, #32
 80090ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ee:	f1b9 0f00 	cmp.w	r9, #0
 80090f2:	d109      	bne.n	8009108 <__kernel_rem_pio2f+0x27c>
 80090f4:	b12b      	cbz	r3, 8009102 <__kernel_rem_pio2f+0x276>
 80090f6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80090fa:	a908      	add	r1, sp, #32
 80090fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009100:	2301      	movs	r3, #1
 8009102:	3201      	adds	r2, #1
 8009104:	4699      	mov	r9, r3
 8009106:	e767      	b.n	8008fd8 <__kernel_rem_pio2f+0x14c>
 8009108:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800910c:	a908      	add	r1, sp, #32
 800910e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009112:	464b      	mov	r3, r9
 8009114:	e7f5      	b.n	8009102 <__kernel_rem_pio2f+0x276>
 8009116:	1e7a      	subs	r2, r7, #1
 8009118:	ab08      	add	r3, sp, #32
 800911a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009122:	a908      	add	r1, sp, #32
 8009124:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009128:	e761      	b.n	8008fee <__kernel_rem_pio2f+0x162>
 800912a:	1e7a      	subs	r2, r7, #1
 800912c:	ab08      	add	r3, sp, #32
 800912e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009132:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009136:	e7f4      	b.n	8009122 <__kernel_rem_pio2f+0x296>
 8009138:	a908      	add	r1, sp, #32
 800913a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800913e:	3b01      	subs	r3, #1
 8009140:	430a      	orrs	r2, r1
 8009142:	e7a0      	b.n	8009086 <__kernel_rem_pio2f+0x1fa>
 8009144:	3301      	adds	r3, #1
 8009146:	e7a6      	b.n	8009096 <__kernel_rem_pio2f+0x20a>
 8009148:	fb08 f30a 	mul.w	r3, r8, sl
 800914c:	9a05      	ldr	r2, [sp, #20]
 800914e:	58e0      	ldr	r0, [r4, r3]
 8009150:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8009154:	f7f7 fe16 	bl	8000d84 <__aeabi_fmul>
 8009158:	4601      	mov	r1, r0
 800915a:	4658      	mov	r0, fp
 800915c:	f7f7 fd0a 	bl	8000b74 <__addsf3>
 8009160:	f10a 0a01 	add.w	sl, sl, #1
 8009164:	4683      	mov	fp, r0
 8009166:	e7b6      	b.n	80090d6 <__kernel_rem_pio2f+0x24a>
 8009168:	08009e28 	.word	0x08009e28
 800916c:	3c01      	subs	r4, #1
 800916e:	ab08      	add	r3, sp, #32
 8009170:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009174:	3e08      	subs	r6, #8
 8009176:	2b00      	cmp	r3, #0
 8009178:	d0f8      	beq.n	800916c <__kernel_rem_pio2f+0x2e0>
 800917a:	4631      	mov	r1, r6
 800917c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009180:	f000 fade 	bl	8009740 <scalbnf>
 8009184:	46a1      	mov	r9, r4
 8009186:	4682      	mov	sl, r0
 8009188:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 800918c:	ae44      	add	r6, sp, #272	; 0x110
 800918e:	f1b9 0f00 	cmp.w	r9, #0
 8009192:	da3f      	bge.n	8009214 <__kernel_rem_pio2f+0x388>
 8009194:	2700      	movs	r7, #0
 8009196:	f04f 0b00 	mov.w	fp, #0
 800919a:	4b82      	ldr	r3, [pc, #520]	; (80093a4 <__kernel_rem_pio2f+0x518>)
 800919c:	aa30      	add	r2, sp, #192	; 0xc0
 800919e:	ebb4 0a07 	subs.w	sl, r4, r7
 80091a2:	d462      	bmi.n	800926a <__kernel_rem_pio2f+0x3de>
 80091a4:	a944      	add	r1, sp, #272	; 0x110
 80091a6:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 80091aa:	46d9      	mov	r9, fp
 80091ac:	2600      	movs	r6, #0
 80091ae:	e053      	b.n	8009258 <__kernel_rem_pio2f+0x3cc>
 80091b0:	4271      	negs	r1, r6
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 fac4 	bl	8009740 <scalbnf>
 80091b8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80091bc:	4604      	mov	r4, r0
 80091be:	f7f7 ff93 	bl	80010e8 <__aeabi_fcmpge>
 80091c2:	b1f8      	cbz	r0, 8009204 <__kernel_rem_pio2f+0x378>
 80091c4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80091c8:	4620      	mov	r0, r4
 80091ca:	f7f7 fddb 	bl	8000d84 <__aeabi_fmul>
 80091ce:	f7f7 ffb5 	bl	800113c <__aeabi_f2iz>
 80091d2:	f7f7 fd83 	bl	8000cdc <__aeabi_i2f>
 80091d6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80091da:	4681      	mov	r9, r0
 80091dc:	f7f7 fdd2 	bl	8000d84 <__aeabi_fmul>
 80091e0:	4601      	mov	r1, r0
 80091e2:	4620      	mov	r0, r4
 80091e4:	f7f7 fcc4 	bl	8000b70 <__aeabi_fsub>
 80091e8:	f7f7 ffa8 	bl	800113c <__aeabi_f2iz>
 80091ec:	ab08      	add	r3, sp, #32
 80091ee:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80091f2:	4648      	mov	r0, r9
 80091f4:	f7f7 ffa2 	bl	800113c <__aeabi_f2iz>
 80091f8:	1c7c      	adds	r4, r7, #1
 80091fa:	ab08      	add	r3, sp, #32
 80091fc:	3608      	adds	r6, #8
 80091fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009202:	e7ba      	b.n	800917a <__kernel_rem_pio2f+0x2ee>
 8009204:	4620      	mov	r0, r4
 8009206:	f7f7 ff99 	bl	800113c <__aeabi_f2iz>
 800920a:	ab08      	add	r3, sp, #32
 800920c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009210:	463c      	mov	r4, r7
 8009212:	e7b2      	b.n	800917a <__kernel_rem_pio2f+0x2ee>
 8009214:	ab08      	add	r3, sp, #32
 8009216:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800921a:	f7f7 fd5f 	bl	8000cdc <__aeabi_i2f>
 800921e:	4651      	mov	r1, sl
 8009220:	f7f7 fdb0 	bl	8000d84 <__aeabi_fmul>
 8009224:	4639      	mov	r1, r7
 8009226:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 800922a:	4650      	mov	r0, sl
 800922c:	f7f7 fdaa 	bl	8000d84 <__aeabi_fmul>
 8009230:	f109 39ff 	add.w	r9, r9, #4294967295
 8009234:	4682      	mov	sl, r0
 8009236:	e7aa      	b.n	800918e <__kernel_rem_pio2f+0x302>
 8009238:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800923c:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 8009240:	9204      	str	r2, [sp, #16]
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	f7f7 fd9e 	bl	8000d84 <__aeabi_fmul>
 8009248:	4601      	mov	r1, r0
 800924a:	4648      	mov	r0, r9
 800924c:	f7f7 fc92 	bl	8000b74 <__addsf3>
 8009250:	4681      	mov	r9, r0
 8009252:	9a04      	ldr	r2, [sp, #16]
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	3601      	adds	r6, #1
 8009258:	9902      	ldr	r1, [sp, #8]
 800925a:	428e      	cmp	r6, r1
 800925c:	dc01      	bgt.n	8009262 <__kernel_rem_pio2f+0x3d6>
 800925e:	42be      	cmp	r6, r7
 8009260:	ddea      	ble.n	8009238 <__kernel_rem_pio2f+0x3ac>
 8009262:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 8009266:	3701      	adds	r7, #1
 8009268:	e799      	b.n	800919e <__kernel_rem_pio2f+0x312>
 800926a:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800926c:	2b03      	cmp	r3, #3
 800926e:	d826      	bhi.n	80092be <__kernel_rem_pio2f+0x432>
 8009270:	e8df f003 	tbb	[pc, r3]
 8009274:	2a02021c 	.word	0x2a02021c
 8009278:	4626      	mov	r6, r4
 800927a:	2000      	movs	r0, #0
 800927c:	af30      	add	r7, sp, #192	; 0xc0
 800927e:	2e00      	cmp	r6, #0
 8009280:	da40      	bge.n	8009304 <__kernel_rem_pio2f+0x478>
 8009282:	2d00      	cmp	r5, #0
 8009284:	d044      	beq.n	8009310 <__kernel_rem_pio2f+0x484>
 8009286:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800928a:	9a01      	ldr	r2, [sp, #4]
 800928c:	af58      	add	r7, sp, #352	; 0x160
 800928e:	4601      	mov	r1, r0
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8009296:	f7f7 fc6b 	bl	8000b70 <__aeabi_fsub>
 800929a:	2601      	movs	r6, #1
 800929c:	42b4      	cmp	r4, r6
 800929e:	da39      	bge.n	8009314 <__kernel_rem_pio2f+0x488>
 80092a0:	b10d      	cbz	r5, 80092a6 <__kernel_rem_pio2f+0x41a>
 80092a2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	6058      	str	r0, [r3, #4]
 80092aa:	e008      	b.n	80092be <__kernel_rem_pio2f+0x432>
 80092ac:	2000      	movs	r0, #0
 80092ae:	ae30      	add	r6, sp, #192	; 0xc0
 80092b0:	2c00      	cmp	r4, #0
 80092b2:	da21      	bge.n	80092f8 <__kernel_rem_pio2f+0x46c>
 80092b4:	b10d      	cbz	r5, 80092ba <__kernel_rem_pio2f+0x42e>
 80092b6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80092ba:	9b01      	ldr	r3, [sp, #4]
 80092bc:	6018      	str	r0, [r3, #0]
 80092be:	f008 0007 	and.w	r0, r8, #7
 80092c2:	b059      	add	sp, #356	; 0x164
 80092c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c8:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 80092cc:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 80092d0:	4637      	mov	r7, r6
 80092d2:	46a1      	mov	r9, r4
 80092d4:	f1b9 0f00 	cmp.w	r9, #0
 80092d8:	dc22      	bgt.n	8009320 <__kernel_rem_pio2f+0x494>
 80092da:	4627      	mov	r7, r4
 80092dc:	2f01      	cmp	r7, #1
 80092de:	dc38      	bgt.n	8009352 <__kernel_rem_pio2f+0x4c6>
 80092e0:	2000      	movs	r0, #0
 80092e2:	2c01      	cmp	r4, #1
 80092e4:	dc4c      	bgt.n	8009380 <__kernel_rem_pio2f+0x4f4>
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	d150      	bne.n	800938c <__kernel_rem_pio2f+0x500>
 80092ea:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80092ec:	9a01      	ldr	r2, [sp, #4]
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80092f2:	6053      	str	r3, [r2, #4]
 80092f4:	6090      	str	r0, [r2, #8]
 80092f6:	e7e2      	b.n	80092be <__kernel_rem_pio2f+0x432>
 80092f8:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80092fc:	f7f7 fc3a 	bl	8000b74 <__addsf3>
 8009300:	3c01      	subs	r4, #1
 8009302:	e7d5      	b.n	80092b0 <__kernel_rem_pio2f+0x424>
 8009304:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8009308:	f7f7 fc34 	bl	8000b74 <__addsf3>
 800930c:	3e01      	subs	r6, #1
 800930e:	e7b6      	b.n	800927e <__kernel_rem_pio2f+0x3f2>
 8009310:	4603      	mov	r3, r0
 8009312:	e7ba      	b.n	800928a <__kernel_rem_pio2f+0x3fe>
 8009314:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8009318:	f7f7 fc2c 	bl	8000b74 <__addsf3>
 800931c:	3601      	adds	r6, #1
 800931e:	e7bd      	b.n	800929c <__kernel_rem_pio2f+0x410>
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009326:	4619      	mov	r1, r3
 8009328:	4610      	mov	r0, r2
 800932a:	9303      	str	r3, [sp, #12]
 800932c:	9202      	str	r2, [sp, #8]
 800932e:	f7f7 fc21 	bl	8000b74 <__addsf3>
 8009332:	9a02      	ldr	r2, [sp, #8]
 8009334:	4601      	mov	r1, r0
 8009336:	4683      	mov	fp, r0
 8009338:	4610      	mov	r0, r2
 800933a:	f7f7 fc19 	bl	8000b70 <__aeabi_fsub>
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	f109 39ff 	add.w	r9, r9, #4294967295
 8009344:	4619      	mov	r1, r3
 8009346:	f7f7 fc15 	bl	8000b74 <__addsf3>
 800934a:	6038      	str	r0, [r7, #0]
 800934c:	f847 bd04 	str.w	fp, [r7, #-4]!
 8009350:	e7c0      	b.n	80092d4 <__kernel_rem_pio2f+0x448>
 8009352:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009356:	f8d6 b000 	ldr.w	fp, [r6]
 800935a:	4618      	mov	r0, r3
 800935c:	4659      	mov	r1, fp
 800935e:	9302      	str	r3, [sp, #8]
 8009360:	f7f7 fc08 	bl	8000b74 <__addsf3>
 8009364:	9b02      	ldr	r3, [sp, #8]
 8009366:	4601      	mov	r1, r0
 8009368:	4681      	mov	r9, r0
 800936a:	4618      	mov	r0, r3
 800936c:	f7f7 fc00 	bl	8000b70 <__aeabi_fsub>
 8009370:	4659      	mov	r1, fp
 8009372:	f7f7 fbff 	bl	8000b74 <__addsf3>
 8009376:	3f01      	subs	r7, #1
 8009378:	6030      	str	r0, [r6, #0]
 800937a:	f846 9d04 	str.w	r9, [r6, #-4]!
 800937e:	e7ad      	b.n	80092dc <__kernel_rem_pio2f+0x450>
 8009380:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8009384:	f7f7 fbf6 	bl	8000b74 <__addsf3>
 8009388:	3c01      	subs	r4, #1
 800938a:	e7aa      	b.n	80092e2 <__kernel_rem_pio2f+0x456>
 800938c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800938e:	9a01      	ldr	r2, [sp, #4]
 8009390:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8009398:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800939c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80093a0:	6053      	str	r3, [r2, #4]
 80093a2:	e7a7      	b.n	80092f4 <__kernel_rem_pio2f+0x468>
 80093a4:	08009dfc 	.word	0x08009dfc

080093a8 <__kernel_sinf>:
 80093a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80093b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80093b4:	4604      	mov	r4, r0
 80093b6:	460f      	mov	r7, r1
 80093b8:	4691      	mov	r9, r2
 80093ba:	da03      	bge.n	80093c4 <__kernel_sinf+0x1c>
 80093bc:	f7f7 febe 	bl	800113c <__aeabi_f2iz>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d035      	beq.n	8009430 <__kernel_sinf+0x88>
 80093c4:	4621      	mov	r1, r4
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7f7 fcdc 	bl	8000d84 <__aeabi_fmul>
 80093cc:	4605      	mov	r5, r0
 80093ce:	4601      	mov	r1, r0
 80093d0:	4620      	mov	r0, r4
 80093d2:	f7f7 fcd7 	bl	8000d84 <__aeabi_fmul>
 80093d6:	4929      	ldr	r1, [pc, #164]	; (800947c <__kernel_sinf+0xd4>)
 80093d8:	4606      	mov	r6, r0
 80093da:	4628      	mov	r0, r5
 80093dc:	f7f7 fcd2 	bl	8000d84 <__aeabi_fmul>
 80093e0:	4927      	ldr	r1, [pc, #156]	; (8009480 <__kernel_sinf+0xd8>)
 80093e2:	f7f7 fbc5 	bl	8000b70 <__aeabi_fsub>
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f7 fccc 	bl	8000d84 <__aeabi_fmul>
 80093ec:	4925      	ldr	r1, [pc, #148]	; (8009484 <__kernel_sinf+0xdc>)
 80093ee:	f7f7 fbc1 	bl	8000b74 <__addsf3>
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7f7 fcc6 	bl	8000d84 <__aeabi_fmul>
 80093f8:	4923      	ldr	r1, [pc, #140]	; (8009488 <__kernel_sinf+0xe0>)
 80093fa:	f7f7 fbb9 	bl	8000b70 <__aeabi_fsub>
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f7 fcc0 	bl	8000d84 <__aeabi_fmul>
 8009404:	4921      	ldr	r1, [pc, #132]	; (800948c <__kernel_sinf+0xe4>)
 8009406:	f7f7 fbb5 	bl	8000b74 <__addsf3>
 800940a:	4680      	mov	r8, r0
 800940c:	f1b9 0f00 	cmp.w	r9, #0
 8009410:	d111      	bne.n	8009436 <__kernel_sinf+0x8e>
 8009412:	4601      	mov	r1, r0
 8009414:	4628      	mov	r0, r5
 8009416:	f7f7 fcb5 	bl	8000d84 <__aeabi_fmul>
 800941a:	491d      	ldr	r1, [pc, #116]	; (8009490 <__kernel_sinf+0xe8>)
 800941c:	f7f7 fba8 	bl	8000b70 <__aeabi_fsub>
 8009420:	4631      	mov	r1, r6
 8009422:	f7f7 fcaf 	bl	8000d84 <__aeabi_fmul>
 8009426:	4601      	mov	r1, r0
 8009428:	4620      	mov	r0, r4
 800942a:	f7f7 fba3 	bl	8000b74 <__addsf3>
 800942e:	4604      	mov	r4, r0
 8009430:	4620      	mov	r0, r4
 8009432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009436:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800943a:	4638      	mov	r0, r7
 800943c:	f7f7 fca2 	bl	8000d84 <__aeabi_fmul>
 8009440:	4641      	mov	r1, r8
 8009442:	4681      	mov	r9, r0
 8009444:	4630      	mov	r0, r6
 8009446:	f7f7 fc9d 	bl	8000d84 <__aeabi_fmul>
 800944a:	4601      	mov	r1, r0
 800944c:	4648      	mov	r0, r9
 800944e:	f7f7 fb8f 	bl	8000b70 <__aeabi_fsub>
 8009452:	4629      	mov	r1, r5
 8009454:	f7f7 fc96 	bl	8000d84 <__aeabi_fmul>
 8009458:	4639      	mov	r1, r7
 800945a:	f7f7 fb89 	bl	8000b70 <__aeabi_fsub>
 800945e:	490c      	ldr	r1, [pc, #48]	; (8009490 <__kernel_sinf+0xe8>)
 8009460:	4605      	mov	r5, r0
 8009462:	4630      	mov	r0, r6
 8009464:	f7f7 fc8e 	bl	8000d84 <__aeabi_fmul>
 8009468:	4601      	mov	r1, r0
 800946a:	4628      	mov	r0, r5
 800946c:	f7f7 fb82 	bl	8000b74 <__addsf3>
 8009470:	4601      	mov	r1, r0
 8009472:	4620      	mov	r0, r4
 8009474:	f7f7 fb7c 	bl	8000b70 <__aeabi_fsub>
 8009478:	e7d9      	b.n	800942e <__kernel_sinf+0x86>
 800947a:	bf00      	nop
 800947c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009480:	32d72f34 	.word	0x32d72f34
 8009484:	3638ef1b 	.word	0x3638ef1b
 8009488:	39500d01 	.word	0x39500d01
 800948c:	3c088889 	.word	0x3c088889
 8009490:	3e2aaaab 	.word	0x3e2aaaab

08009494 <matherr>:
 8009494:	2000      	movs	r0, #0
 8009496:	4770      	bx	lr

08009498 <atanf>:
 8009498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80094a0:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80094a4:	4604      	mov	r4, r0
 80094a6:	4607      	mov	r7, r0
 80094a8:	db0e      	blt.n	80094c8 <atanf+0x30>
 80094aa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80094ae:	dd04      	ble.n	80094ba <atanf+0x22>
 80094b0:	4601      	mov	r1, r0
 80094b2:	f7f7 fb5f 	bl	8000b74 <__addsf3>
 80094b6:	4604      	mov	r4, r0
 80094b8:	e003      	b.n	80094c2 <atanf+0x2a>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	f300 80d2 	bgt.w	8009664 <atanf+0x1cc>
 80094c0:	4c69      	ldr	r4, [pc, #420]	; (8009668 <atanf+0x1d0>)
 80094c2:	4620      	mov	r0, r4
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c8:	4b68      	ldr	r3, [pc, #416]	; (800966c <atanf+0x1d4>)
 80094ca:	429d      	cmp	r5, r3
 80094cc:	dc0e      	bgt.n	80094ec <atanf+0x54>
 80094ce:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80094d2:	da08      	bge.n	80094e6 <atanf+0x4e>
 80094d4:	4966      	ldr	r1, [pc, #408]	; (8009670 <atanf+0x1d8>)
 80094d6:	f7f7 fb4d 	bl	8000b74 <__addsf3>
 80094da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80094de:	f7f7 fe0d 	bl	80010fc <__aeabi_fcmpgt>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d1ed      	bne.n	80094c2 <atanf+0x2a>
 80094e6:	f04f 36ff 	mov.w	r6, #4294967295
 80094ea:	e01c      	b.n	8009526 <atanf+0x8e>
 80094ec:	f000 f8e4 	bl	80096b8 <fabsf>
 80094f0:	4b60      	ldr	r3, [pc, #384]	; (8009674 <atanf+0x1dc>)
 80094f2:	4604      	mov	r4, r0
 80094f4:	429d      	cmp	r5, r3
 80094f6:	dc7c      	bgt.n	80095f2 <atanf+0x15a>
 80094f8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80094fc:	429d      	cmp	r5, r3
 80094fe:	dc67      	bgt.n	80095d0 <atanf+0x138>
 8009500:	4601      	mov	r1, r0
 8009502:	f7f7 fb37 	bl	8000b74 <__addsf3>
 8009506:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800950a:	f7f7 fb31 	bl	8000b70 <__aeabi_fsub>
 800950e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009512:	4605      	mov	r5, r0
 8009514:	4620      	mov	r0, r4
 8009516:	f7f7 fb2d 	bl	8000b74 <__addsf3>
 800951a:	4601      	mov	r1, r0
 800951c:	4628      	mov	r0, r5
 800951e:	f7f7 fce5 	bl	8000eec <__aeabi_fdiv>
 8009522:	2600      	movs	r6, #0
 8009524:	4604      	mov	r4, r0
 8009526:	4621      	mov	r1, r4
 8009528:	4620      	mov	r0, r4
 800952a:	f7f7 fc2b 	bl	8000d84 <__aeabi_fmul>
 800952e:	4601      	mov	r1, r0
 8009530:	4680      	mov	r8, r0
 8009532:	f7f7 fc27 	bl	8000d84 <__aeabi_fmul>
 8009536:	4605      	mov	r5, r0
 8009538:	494f      	ldr	r1, [pc, #316]	; (8009678 <atanf+0x1e0>)
 800953a:	f7f7 fc23 	bl	8000d84 <__aeabi_fmul>
 800953e:	494f      	ldr	r1, [pc, #316]	; (800967c <atanf+0x1e4>)
 8009540:	f7f7 fb18 	bl	8000b74 <__addsf3>
 8009544:	4629      	mov	r1, r5
 8009546:	f7f7 fc1d 	bl	8000d84 <__aeabi_fmul>
 800954a:	494d      	ldr	r1, [pc, #308]	; (8009680 <atanf+0x1e8>)
 800954c:	f7f7 fb12 	bl	8000b74 <__addsf3>
 8009550:	4629      	mov	r1, r5
 8009552:	f7f7 fc17 	bl	8000d84 <__aeabi_fmul>
 8009556:	494b      	ldr	r1, [pc, #300]	; (8009684 <atanf+0x1ec>)
 8009558:	f7f7 fb0c 	bl	8000b74 <__addsf3>
 800955c:	4629      	mov	r1, r5
 800955e:	f7f7 fc11 	bl	8000d84 <__aeabi_fmul>
 8009562:	4949      	ldr	r1, [pc, #292]	; (8009688 <atanf+0x1f0>)
 8009564:	f7f7 fb06 	bl	8000b74 <__addsf3>
 8009568:	4629      	mov	r1, r5
 800956a:	f7f7 fc0b 	bl	8000d84 <__aeabi_fmul>
 800956e:	4947      	ldr	r1, [pc, #284]	; (800968c <atanf+0x1f4>)
 8009570:	f7f7 fb00 	bl	8000b74 <__addsf3>
 8009574:	4641      	mov	r1, r8
 8009576:	f7f7 fc05 	bl	8000d84 <__aeabi_fmul>
 800957a:	4945      	ldr	r1, [pc, #276]	; (8009690 <atanf+0x1f8>)
 800957c:	4680      	mov	r8, r0
 800957e:	4628      	mov	r0, r5
 8009580:	f7f7 fc00 	bl	8000d84 <__aeabi_fmul>
 8009584:	4943      	ldr	r1, [pc, #268]	; (8009694 <atanf+0x1fc>)
 8009586:	f7f7 faf3 	bl	8000b70 <__aeabi_fsub>
 800958a:	4629      	mov	r1, r5
 800958c:	f7f7 fbfa 	bl	8000d84 <__aeabi_fmul>
 8009590:	4941      	ldr	r1, [pc, #260]	; (8009698 <atanf+0x200>)
 8009592:	f7f7 faed 	bl	8000b70 <__aeabi_fsub>
 8009596:	4629      	mov	r1, r5
 8009598:	f7f7 fbf4 	bl	8000d84 <__aeabi_fmul>
 800959c:	493f      	ldr	r1, [pc, #252]	; (800969c <atanf+0x204>)
 800959e:	f7f7 fae7 	bl	8000b70 <__aeabi_fsub>
 80095a2:	4629      	mov	r1, r5
 80095a4:	f7f7 fbee 	bl	8000d84 <__aeabi_fmul>
 80095a8:	493d      	ldr	r1, [pc, #244]	; (80096a0 <atanf+0x208>)
 80095aa:	f7f7 fae1 	bl	8000b70 <__aeabi_fsub>
 80095ae:	4629      	mov	r1, r5
 80095b0:	f7f7 fbe8 	bl	8000d84 <__aeabi_fmul>
 80095b4:	1c73      	adds	r3, r6, #1
 80095b6:	4601      	mov	r1, r0
 80095b8:	4640      	mov	r0, r8
 80095ba:	d139      	bne.n	8009630 <atanf+0x198>
 80095bc:	f7f7 fada 	bl	8000b74 <__addsf3>
 80095c0:	4621      	mov	r1, r4
 80095c2:	f7f7 fbdf 	bl	8000d84 <__aeabi_fmul>
 80095c6:	4601      	mov	r1, r0
 80095c8:	4620      	mov	r0, r4
 80095ca:	f7f7 fad1 	bl	8000b70 <__aeabi_fsub>
 80095ce:	e772      	b.n	80094b6 <atanf+0x1e>
 80095d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80095d4:	f7f7 facc 	bl	8000b70 <__aeabi_fsub>
 80095d8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80095dc:	4605      	mov	r5, r0
 80095de:	4620      	mov	r0, r4
 80095e0:	f7f7 fac8 	bl	8000b74 <__addsf3>
 80095e4:	4601      	mov	r1, r0
 80095e6:	4628      	mov	r0, r5
 80095e8:	f7f7 fc80 	bl	8000eec <__aeabi_fdiv>
 80095ec:	2601      	movs	r6, #1
 80095ee:	4604      	mov	r4, r0
 80095f0:	e799      	b.n	8009526 <atanf+0x8e>
 80095f2:	4b2c      	ldr	r3, [pc, #176]	; (80096a4 <atanf+0x20c>)
 80095f4:	429d      	cmp	r5, r3
 80095f6:	dc14      	bgt.n	8009622 <atanf+0x18a>
 80095f8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80095fc:	f7f7 fab8 	bl	8000b70 <__aeabi_fsub>
 8009600:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009604:	4605      	mov	r5, r0
 8009606:	4620      	mov	r0, r4
 8009608:	f7f7 fbbc 	bl	8000d84 <__aeabi_fmul>
 800960c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009610:	f7f7 fab0 	bl	8000b74 <__addsf3>
 8009614:	4601      	mov	r1, r0
 8009616:	4628      	mov	r0, r5
 8009618:	f7f7 fc68 	bl	8000eec <__aeabi_fdiv>
 800961c:	2602      	movs	r6, #2
 800961e:	4604      	mov	r4, r0
 8009620:	e781      	b.n	8009526 <atanf+0x8e>
 8009622:	4601      	mov	r1, r0
 8009624:	4820      	ldr	r0, [pc, #128]	; (80096a8 <atanf+0x210>)
 8009626:	f7f7 fc61 	bl	8000eec <__aeabi_fdiv>
 800962a:	2603      	movs	r6, #3
 800962c:	4604      	mov	r4, r0
 800962e:	e77a      	b.n	8009526 <atanf+0x8e>
 8009630:	f7f7 faa0 	bl	8000b74 <__addsf3>
 8009634:	4621      	mov	r1, r4
 8009636:	f7f7 fba5 	bl	8000d84 <__aeabi_fmul>
 800963a:	4b1c      	ldr	r3, [pc, #112]	; (80096ac <atanf+0x214>)
 800963c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8009640:	f7f7 fa96 	bl	8000b70 <__aeabi_fsub>
 8009644:	4621      	mov	r1, r4
 8009646:	f7f7 fa93 	bl	8000b70 <__aeabi_fsub>
 800964a:	4b19      	ldr	r3, [pc, #100]	; (80096b0 <atanf+0x218>)
 800964c:	4601      	mov	r1, r0
 800964e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009652:	f7f7 fa8d 	bl	8000b70 <__aeabi_fsub>
 8009656:	2f00      	cmp	r7, #0
 8009658:	4604      	mov	r4, r0
 800965a:	f6bf af32 	bge.w	80094c2 <atanf+0x2a>
 800965e:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8009662:	e72e      	b.n	80094c2 <atanf+0x2a>
 8009664:	4c13      	ldr	r4, [pc, #76]	; (80096b4 <atanf+0x21c>)
 8009666:	e72c      	b.n	80094c2 <atanf+0x2a>
 8009668:	bfc90fdb 	.word	0xbfc90fdb
 800966c:	3edfffff 	.word	0x3edfffff
 8009670:	7149f2ca 	.word	0x7149f2ca
 8009674:	3f97ffff 	.word	0x3f97ffff
 8009678:	3c8569d7 	.word	0x3c8569d7
 800967c:	3d4bda59 	.word	0x3d4bda59
 8009680:	3d886b35 	.word	0x3d886b35
 8009684:	3dba2e6e 	.word	0x3dba2e6e
 8009688:	3e124925 	.word	0x3e124925
 800968c:	3eaaaaab 	.word	0x3eaaaaab
 8009690:	bd15a221 	.word	0xbd15a221
 8009694:	3d6ef16b 	.word	0x3d6ef16b
 8009698:	3d9d8795 	.word	0x3d9d8795
 800969c:	3de38e38 	.word	0x3de38e38
 80096a0:	3e4ccccd 	.word	0x3e4ccccd
 80096a4:	401bffff 	.word	0x401bffff
 80096a8:	bf800000 	.word	0xbf800000
 80096ac:	08009e44 	.word	0x08009e44
 80096b0:	08009e34 	.word	0x08009e34
 80096b4:	3fc90fdb 	.word	0x3fc90fdb

080096b8 <fabsf>:
 80096b8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80096bc:	4770      	bx	lr
	...

080096c0 <floorf>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80096c6:	0df5      	lsrs	r5, r6, #23
 80096c8:	3d7f      	subs	r5, #127	; 0x7f
 80096ca:	2d16      	cmp	r5, #22
 80096cc:	4601      	mov	r1, r0
 80096ce:	4604      	mov	r4, r0
 80096d0:	dc26      	bgt.n	8009720 <floorf+0x60>
 80096d2:	2d00      	cmp	r5, #0
 80096d4:	da0e      	bge.n	80096f4 <floorf+0x34>
 80096d6:	4917      	ldr	r1, [pc, #92]	; (8009734 <floorf+0x74>)
 80096d8:	f7f7 fa4c 	bl	8000b74 <__addsf3>
 80096dc:	2100      	movs	r1, #0
 80096de:	f7f7 fd0d 	bl	80010fc <__aeabi_fcmpgt>
 80096e2:	b128      	cbz	r0, 80096f0 <floorf+0x30>
 80096e4:	2c00      	cmp	r4, #0
 80096e6:	da23      	bge.n	8009730 <floorf+0x70>
 80096e8:	4b13      	ldr	r3, [pc, #76]	; (8009738 <floorf+0x78>)
 80096ea:	2e00      	cmp	r6, #0
 80096ec:	bf18      	it	ne
 80096ee:	461c      	movne	r4, r3
 80096f0:	4621      	mov	r1, r4
 80096f2:	e01b      	b.n	800972c <floorf+0x6c>
 80096f4:	4e11      	ldr	r6, [pc, #68]	; (800973c <floorf+0x7c>)
 80096f6:	412e      	asrs	r6, r5
 80096f8:	4230      	tst	r0, r6
 80096fa:	d017      	beq.n	800972c <floorf+0x6c>
 80096fc:	490d      	ldr	r1, [pc, #52]	; (8009734 <floorf+0x74>)
 80096fe:	f7f7 fa39 	bl	8000b74 <__addsf3>
 8009702:	2100      	movs	r1, #0
 8009704:	f7f7 fcfa 	bl	80010fc <__aeabi_fcmpgt>
 8009708:	2800      	cmp	r0, #0
 800970a:	d0f1      	beq.n	80096f0 <floorf+0x30>
 800970c:	2c00      	cmp	r4, #0
 800970e:	bfbe      	ittt	lt
 8009710:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8009714:	fa43 f505 	asrlt.w	r5, r3, r5
 8009718:	1964      	addlt	r4, r4, r5
 800971a:	ea24 0406 	bic.w	r4, r4, r6
 800971e:	e7e7      	b.n	80096f0 <floorf+0x30>
 8009720:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009724:	d302      	bcc.n	800972c <floorf+0x6c>
 8009726:	f7f7 fa25 	bl	8000b74 <__addsf3>
 800972a:	4601      	mov	r1, r0
 800972c:	4608      	mov	r0, r1
 800972e:	bd70      	pop	{r4, r5, r6, pc}
 8009730:	2400      	movs	r4, #0
 8009732:	e7dd      	b.n	80096f0 <floorf+0x30>
 8009734:	7149f2ca 	.word	0x7149f2ca
 8009738:	bf800000 	.word	0xbf800000
 800973c:	007fffff 	.word	0x007fffff

08009740 <scalbnf>:
 8009740:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8009744:	b510      	push	{r4, lr}
 8009746:	4602      	mov	r2, r0
 8009748:	460c      	mov	r4, r1
 800974a:	d028      	beq.n	800979e <scalbnf+0x5e>
 800974c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009750:	d304      	bcc.n	800975c <scalbnf+0x1c>
 8009752:	4601      	mov	r1, r0
 8009754:	f7f7 fa0e 	bl	8000b74 <__addsf3>
 8009758:	4602      	mov	r2, r0
 800975a:	e020      	b.n	800979e <scalbnf+0x5e>
 800975c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009760:	d215      	bcs.n	800978e <scalbnf+0x4e>
 8009762:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009766:	f7f7 fb0d 	bl	8000d84 <__aeabi_fmul>
 800976a:	4b18      	ldr	r3, [pc, #96]	; (80097cc <scalbnf+0x8c>)
 800976c:	4602      	mov	r2, r0
 800976e:	429c      	cmp	r4, r3
 8009770:	db22      	blt.n	80097b8 <scalbnf+0x78>
 8009772:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009776:	3b19      	subs	r3, #25
 8009778:	4423      	add	r3, r4
 800977a:	2bfe      	cmp	r3, #254	; 0xfe
 800977c:	dd09      	ble.n	8009792 <scalbnf+0x52>
 800977e:	4611      	mov	r1, r2
 8009780:	4813      	ldr	r0, [pc, #76]	; (80097d0 <scalbnf+0x90>)
 8009782:	f000 f829 	bl	80097d8 <copysignf>
 8009786:	4912      	ldr	r1, [pc, #72]	; (80097d0 <scalbnf+0x90>)
 8009788:	f7f7 fafc 	bl	8000d84 <__aeabi_fmul>
 800978c:	e7e4      	b.n	8009758 <scalbnf+0x18>
 800978e:	0ddb      	lsrs	r3, r3, #23
 8009790:	e7f2      	b.n	8009778 <scalbnf+0x38>
 8009792:	2b00      	cmp	r3, #0
 8009794:	dd05      	ble.n	80097a2 <scalbnf+0x62>
 8009796:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800979a:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800979e:	4610      	mov	r0, r2
 80097a0:	bd10      	pop	{r4, pc}
 80097a2:	f113 0f16 	cmn.w	r3, #22
 80097a6:	da09      	bge.n	80097bc <scalbnf+0x7c>
 80097a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80097ac:	429c      	cmp	r4, r3
 80097ae:	4611      	mov	r1, r2
 80097b0:	dce6      	bgt.n	8009780 <scalbnf+0x40>
 80097b2:	4808      	ldr	r0, [pc, #32]	; (80097d4 <scalbnf+0x94>)
 80097b4:	f000 f810 	bl	80097d8 <copysignf>
 80097b8:	4906      	ldr	r1, [pc, #24]	; (80097d4 <scalbnf+0x94>)
 80097ba:	e7e5      	b.n	8009788 <scalbnf+0x48>
 80097bc:	3319      	adds	r3, #25
 80097be:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80097c2:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80097c6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80097ca:	e7dd      	b.n	8009788 <scalbnf+0x48>
 80097cc:	ffff3cb0 	.word	0xffff3cb0
 80097d0:	7149f2ca 	.word	0x7149f2ca
 80097d4:	0da24260 	.word	0x0da24260

080097d8 <copysignf>:
 80097d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80097dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80097e0:	4308      	orrs	r0, r1
 80097e2:	4770      	bx	lr

080097e4 <_init>:
 80097e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e6:	bf00      	nop
 80097e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ea:	bc08      	pop	{r3}
 80097ec:	469e      	mov	lr, r3
 80097ee:	4770      	bx	lr

080097f0 <_fini>:
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	bf00      	nop
 80097f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f6:	bc08      	pop	{r3}
 80097f8:	469e      	mov	lr, r3
 80097fa:	4770      	bx	lr
