
F46.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a938  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  0800aac8  0800aac8  0001aac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b150  0800b150  0001b150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b158  0800b158  0001b158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b15c  0800b15c  0001b15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  0800b160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
  8 .bss          0000452c  20000094  20000094  00020094  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200045c0  200045c0  00020094  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037973  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007a51  00000000  00000000  00057a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000e656  00000000  00000000  0005f488  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b8  00000000  00000000  0006dae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e18  00000000  00000000  0006ee98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000f2e6  00000000  00000000  00070cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006d64  00000000  00000000  0007ff96  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00086cfa  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000041cc  00000000  00000000  00086d78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aab0 	.word	0x0800aab0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800aab0 	.word	0x0800aab0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__gedf2>:
 8000a04:	f04f 3cff 	mov.w	ip, #4294967295
 8000a08:	e006      	b.n	8000a18 <__cmpdf2+0x4>
 8000a0a:	bf00      	nop

08000a0c <__ledf2>:
 8000a0c:	f04f 0c01 	mov.w	ip, #1
 8000a10:	e002      	b.n	8000a18 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__cmpdf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2e:	d01b      	beq.n	8000a68 <__cmpdf2+0x54>
 8000a30:	b001      	add	sp, #4
 8000a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a36:	bf0c      	ite	eq
 8000a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a3c:	ea91 0f03 	teqne	r1, r3
 8000a40:	bf02      	ittt	eq
 8000a42:	ea90 0f02 	teqeq	r0, r2
 8000a46:	2000      	moveq	r0, #0
 8000a48:	4770      	bxeq	lr
 8000a4a:	f110 0f00 	cmn.w	r0, #0
 8000a4e:	ea91 0f03 	teq	r1, r3
 8000a52:	bf58      	it	pl
 8000a54:	4299      	cmppl	r1, r3
 8000a56:	bf08      	it	eq
 8000a58:	4290      	cmpeq	r0, r2
 8000a5a:	bf2c      	ite	cs
 8000a5c:	17d8      	asrcs	r0, r3, #31
 8000a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a62:	f040 0001 	orr.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	d102      	bne.n	8000a78 <__cmpdf2+0x64>
 8000a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a76:	d107      	bne.n	8000a88 <__cmpdf2+0x74>
 8000a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d1d6      	bne.n	8000a30 <__cmpdf2+0x1c>
 8000a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a86:	d0d3      	beq.n	8000a30 <__cmpdf2+0x1c>
 8000a88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <__aeabi_cdrcmple>:
 8000a90:	4684      	mov	ip, r0
 8000a92:	4610      	mov	r0, r2
 8000a94:	4662      	mov	r2, ip
 8000a96:	468c      	mov	ip, r1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	e000      	b.n	8000aa0 <__aeabi_cdcmpeq>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdcmpeq>:
 8000aa0:	b501      	push	{r0, lr}
 8000aa2:	f7ff ffb7 	bl	8000a14 <__cmpdf2>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	bf48      	it	mi
 8000aaa:	f110 0f00 	cmnmi.w	r0, #0
 8000aae:	bd01      	pop	{r0, pc}

08000ab0 <__aeabi_dcmpeq>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff fff4 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ab8:	bf0c      	ite	eq
 8000aba:	2001      	moveq	r0, #1
 8000abc:	2000      	movne	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmplt>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffea 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000acc:	bf34      	ite	cc
 8000ace:	2001      	movcc	r0, #1
 8000ad0:	2000      	movcs	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmple>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffe0 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpge>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffce 	bl	8000a90 <__aeabi_cdrcmple>
 8000af4:	bf94      	ite	ls
 8000af6:	2001      	movls	r0, #1
 8000af8:	2000      	movhi	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpgt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffc4 	bl	8000a90 <__aeabi_cdrcmple>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpun>:
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	d102      	bne.n	8000b24 <__aeabi_dcmpun+0x10>
 8000b1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b22:	d10a      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x20>
 8000b2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0001 	mov.w	r0, #1
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2iz>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d215      	bcs.n	8000b76 <__aeabi_d2iz+0x36>
 8000b4a:	d511      	bpl.n	8000b70 <__aeabi_d2iz+0x30>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d912      	bls.n	8000b7c <__aeabi_d2iz+0x3c>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d105      	bne.n	8000b88 <__aeabi_d2iz+0x48>
 8000b7c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	bf08      	it	eq
 8000b82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2uiz>:
 8000b90:	004a      	lsls	r2, r1, #1
 8000b92:	d211      	bcs.n	8000bb8 <__aeabi_d2uiz+0x28>
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d211      	bcs.n	8000bbe <__aeabi_d2uiz+0x2e>
 8000b9a:	d50d      	bpl.n	8000bb8 <__aeabi_d2uiz+0x28>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d40e      	bmi.n	8000bc4 <__aeabi_d2uiz+0x34>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d102      	bne.n	8000bca <__aeabi_d2uiz+0x3a>
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_d2f>:
 8000bd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd8:	bf24      	itt	cs
 8000bda:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bde:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000be2:	d90d      	bls.n	8000c00 <__aeabi_d2f+0x30>
 8000be4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c04:	d121      	bne.n	8000c4a <__aeabi_d2f+0x7a>
 8000c06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c0a:	bfbc      	itt	lt
 8000c0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	4770      	bxlt	lr
 8000c12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c16:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1a:	f1c2 0218 	rsb	r2, r2, #24
 8000c1e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c22:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c26:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2a:	bf18      	it	ne
 8000c2c:	f040 0001 	orrne.w	r0, r0, #1
 8000c30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c38:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c3c:	ea40 000c 	orr.w	r0, r0, ip
 8000c40:	fa23 f302 	lsr.w	r3, r3, r2
 8000c44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c48:	e7cc      	b.n	8000be4 <__aeabi_d2f+0x14>
 8000c4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4e:	d107      	bne.n	8000c60 <__aeabi_d2f+0x90>
 8000c50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c54:	bf1e      	ittt	ne
 8000c56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5e:	4770      	bxne	lr
 8000c60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <__aeabi_uldivmod>:
 8000c70:	b953      	cbnz	r3, 8000c88 <__aeabi_uldivmod+0x18>
 8000c72:	b94a      	cbnz	r2, 8000c88 <__aeabi_uldivmod+0x18>
 8000c74:	2900      	cmp	r1, #0
 8000c76:	bf08      	it	eq
 8000c78:	2800      	cmpeq	r0, #0
 8000c7a:	bf1c      	itt	ne
 8000c7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c80:	f04f 30ff 	movne.w	r0, #4294967295
 8000c84:	f000 b97a 	b.w	8000f7c <__aeabi_idiv0>
 8000c88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c90:	f000 f806 	bl	8000ca0 <__udivmoddi4>
 8000c94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9c:	b004      	add	sp, #16
 8000c9e:	4770      	bx	lr

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	460d      	mov	r5, r1
 8000ca8:	4604      	mov	r4, r0
 8000caa:	9e08      	ldr	r6, [sp, #32]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d151      	bne.n	8000d54 <__udivmoddi4+0xb4>
 8000cb0:	428a      	cmp	r2, r1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	d96d      	bls.n	8000d92 <__udivmoddi4+0xf2>
 8000cb6:	fab2 fe82 	clz	lr, r2
 8000cba:	f1be 0f00 	cmp.w	lr, #0
 8000cbe:	d00b      	beq.n	8000cd8 <__udivmoddi4+0x38>
 8000cc0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cc4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cc8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ccc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cd0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cd4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cd8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cdc:	0c25      	lsrs	r5, r4, #16
 8000cde:	fbbc f8fa 	udiv	r8, ip, sl
 8000ce2:	fa1f f987 	uxth.w	r9, r7
 8000ce6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cee:	fb08 f309 	mul.w	r3, r8, r9
 8000cf2:	42ab      	cmp	r3, r5
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x6c>
 8000cf6:	19ed      	adds	r5, r5, r7
 8000cf8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000cfc:	f080 8123 	bcs.w	8000f46 <__udivmoddi4+0x2a6>
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	f240 8120 	bls.w	8000f46 <__udivmoddi4+0x2a6>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	443d      	add	r5, r7
 8000d0c:	1aed      	subs	r5, r5, r3
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d14:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb00 f909 	mul.w	r9, r0, r9
 8000d20:	45a1      	cmp	r9, r4
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x98>
 8000d24:	19e4      	adds	r4, r4, r7
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	f080 810a 	bcs.w	8000f42 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8107 	bls.w	8000f42 <__udivmoddi4+0x2a2>
 8000d34:	3802      	subs	r0, #2
 8000d36:	443c      	add	r4, r7
 8000d38:	eba4 0409 	sub.w	r4, r4, r9
 8000d3c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d40:	2100      	movs	r1, #0
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d061      	beq.n	8000e0a <__udivmoddi4+0x16a>
 8000d46:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	6034      	str	r4, [r6, #0]
 8000d4e:	6073      	str	r3, [r6, #4]
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	428b      	cmp	r3, r1
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0xc8>
 8000d58:	2e00      	cmp	r6, #0
 8000d5a:	d054      	beq.n	8000e06 <__udivmoddi4+0x166>
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d62:	4608      	mov	r0, r1
 8000d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d68:	fab3 f183 	clz	r1, r3
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	f040 808e 	bne.w	8000e8e <__udivmoddi4+0x1ee>
 8000d72:	42ab      	cmp	r3, r5
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xdc>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80fa 	bhi.w	8000f70 <__udivmoddi4+0x2d0>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	46ac      	mov	ip, r5
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	d03f      	beq.n	8000e0a <__udivmoddi4+0x16a>
 8000d8a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	b912      	cbnz	r2, 8000d9a <__udivmoddi4+0xfa>
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d9a:	fab7 fe87 	clz	lr, r7
 8000d9e:	f1be 0f00 	cmp.w	lr, #0
 8000da2:	d134      	bne.n	8000e0e <__udivmoddi4+0x16e>
 8000da4:	1beb      	subs	r3, r5, r7
 8000da6:	0c3a      	lsrs	r2, r7, #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	2101      	movs	r1, #1
 8000dae:	fbb3 f8f2 	udiv	r8, r3, r2
 8000db2:	0c25      	lsrs	r5, r4, #16
 8000db4:	fb02 3318 	mls	r3, r2, r8, r3
 8000db8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dbc:	fb0c f308 	mul.w	r3, ip, r8
 8000dc0:	42ab      	cmp	r3, r5
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x134>
 8000dc4:	19ed      	adds	r5, r5, r7
 8000dc6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x132>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	f200 80d1 	bhi.w	8000f74 <__udivmoddi4+0x2d4>
 8000dd2:	4680      	mov	r8, r0
 8000dd4:	1aed      	subs	r5, r5, r3
 8000dd6:	b2a3      	uxth	r3, r4
 8000dd8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000ddc:	fb02 5510 	mls	r5, r2, r0, r5
 8000de0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000de4:	fb0c fc00 	mul.w	ip, ip, r0
 8000de8:	45a4      	cmp	ip, r4
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x15c>
 8000dec:	19e4      	adds	r4, r4, r7
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x15a>
 8000df4:	45a4      	cmp	ip, r4
 8000df6:	f200 80b8 	bhi.w	8000f6a <__udivmoddi4+0x2ca>
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	eba4 040c 	sub.w	r4, r4, ip
 8000e00:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e04:	e79d      	b.n	8000d42 <__udivmoddi4+0xa2>
 8000e06:	4631      	mov	r1, r6
 8000e08:	4630      	mov	r0, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	f1ce 0420 	rsb	r4, lr, #32
 8000e12:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e16:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e1a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e1e:	0c3a      	lsrs	r2, r7, #16
 8000e20:	fa25 f404 	lsr.w	r4, r5, r4
 8000e24:	ea48 0803 	orr.w	r8, r8, r3
 8000e28:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e2c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e30:	fb02 4411 	mls	r4, r2, r1, r4
 8000e34:	fa1f fc87 	uxth.w	ip, r7
 8000e38:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e3c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e40:	42ab      	cmp	r3, r5
 8000e42:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e46:	d909      	bls.n	8000e5c <__udivmoddi4+0x1bc>
 8000e48:	19ed      	adds	r5, r5, r7
 8000e4a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e4e:	f080 808a 	bcs.w	8000f66 <__udivmoddi4+0x2c6>
 8000e52:	42ab      	cmp	r3, r5
 8000e54:	f240 8087 	bls.w	8000f66 <__udivmoddi4+0x2c6>
 8000e58:	3902      	subs	r1, #2
 8000e5a:	443d      	add	r5, r7
 8000e5c:	1aeb      	subs	r3, r5, r3
 8000e5e:	fa1f f588 	uxth.w	r5, r8
 8000e62:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e66:	fb02 3310 	mls	r3, r2, r0, r3
 8000e6a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e6e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x1e6>
 8000e76:	19ed      	adds	r5, r5, r7
 8000e78:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7c:	d26f      	bcs.n	8000f5e <__udivmoddi4+0x2be>
 8000e7e:	42ab      	cmp	r3, r5
 8000e80:	d96d      	bls.n	8000f5e <__udivmoddi4+0x2be>
 8000e82:	3802      	subs	r0, #2
 8000e84:	443d      	add	r5, r7
 8000e86:	1aeb      	subs	r3, r5, r3
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	e78f      	b.n	8000dae <__udivmoddi4+0x10e>
 8000e8e:	f1c1 0720 	rsb	r7, r1, #32
 8000e92:	fa22 f807 	lsr.w	r8, r2, r7
 8000e96:	408b      	lsls	r3, r1
 8000e98:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9c:	ea48 0303 	orr.w	r3, r8, r3
 8000ea0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ea4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eae:	fbb5 f9fc 	udiv	r9, r5, ip
 8000eb2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000eb6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eba:	fa1f f883 	uxth.w	r8, r3
 8000ebe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ec2:	fb09 f408 	mul.w	r4, r9, r8
 8000ec6:	42ac      	cmp	r4, r5
 8000ec8:	fa02 f201 	lsl.w	r2, r2, r1
 8000ecc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x244>
 8000ed2:	18ed      	adds	r5, r5, r3
 8000ed4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ed8:	d243      	bcs.n	8000f62 <__udivmoddi4+0x2c2>
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	d941      	bls.n	8000f62 <__udivmoddi4+0x2c2>
 8000ede:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee2:	441d      	add	r5, r3
 8000ee4:	1b2d      	subs	r5, r5, r4
 8000ee6:	fa1f fe8e 	uxth.w	lr, lr
 8000eea:	fbb5 f0fc 	udiv	r0, r5, ip
 8000eee:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ef2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ef6:	fb00 f808 	mul.w	r8, r0, r8
 8000efa:	45a0      	cmp	r8, r4
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x26e>
 8000efe:	18e4      	adds	r4, r4, r3
 8000f00:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f04:	d229      	bcs.n	8000f5a <__udivmoddi4+0x2ba>
 8000f06:	45a0      	cmp	r8, r4
 8000f08:	d927      	bls.n	8000f5a <__udivmoddi4+0x2ba>
 8000f0a:	3802      	subs	r0, #2
 8000f0c:	441c      	add	r4, r3
 8000f0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f12:	eba4 0408 	sub.w	r4, r4, r8
 8000f16:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1a:	454c      	cmp	r4, r9
 8000f1c:	46c6      	mov	lr, r8
 8000f1e:	464d      	mov	r5, r9
 8000f20:	d315      	bcc.n	8000f4e <__udivmoddi4+0x2ae>
 8000f22:	d012      	beq.n	8000f4a <__udivmoddi4+0x2aa>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x29c>
 8000f26:	ebba 030e 	subs.w	r3, sl, lr
 8000f2a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40cb      	lsrs	r3, r1
 8000f34:	431f      	orrs	r7, r3
 8000f36:	40cc      	lsrs	r4, r1
 8000f38:	6037      	str	r7, [r6, #0]
 8000f3a:	6074      	str	r4, [r6, #4]
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	4618      	mov	r0, r3
 8000f44:	e6f8      	b.n	8000d38 <__udivmoddi4+0x98>
 8000f46:	4690      	mov	r8, r2
 8000f48:	e6e0      	b.n	8000d0c <__udivmoddi4+0x6c>
 8000f4a:	45c2      	cmp	sl, r8
 8000f4c:	d2ea      	bcs.n	8000f24 <__udivmoddi4+0x284>
 8000f4e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f52:	eb69 0503 	sbc.w	r5, r9, r3
 8000f56:	3801      	subs	r0, #1
 8000f58:	e7e4      	b.n	8000f24 <__udivmoddi4+0x284>
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	e7d7      	b.n	8000f0e <__udivmoddi4+0x26e>
 8000f5e:	4640      	mov	r0, r8
 8000f60:	e791      	b.n	8000e86 <__udivmoddi4+0x1e6>
 8000f62:	4681      	mov	r9, r0
 8000f64:	e7be      	b.n	8000ee4 <__udivmoddi4+0x244>
 8000f66:	4601      	mov	r1, r0
 8000f68:	e778      	b.n	8000e5c <__udivmoddi4+0x1bc>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	443c      	add	r4, r7
 8000f6e:	e745      	b.n	8000dfc <__udivmoddi4+0x15c>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e708      	b.n	8000d86 <__udivmoddi4+0xe6>
 8000f74:	f1a8 0802 	sub.w	r8, r8, #2
 8000f78:	443d      	add	r5, r7
 8000f7a:	e72b      	b.n	8000dd4 <__udivmoddi4+0x134>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_InitTick+0x3c>)
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_InitTick+0x40>)
{
 8000f86:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	7818      	ldrb	r0, [r3, #0]
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f92:	6810      	ldr	r0, [r2, #0]
 8000f94:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f98:	f000 f8aa 	bl	80010f0 <HAL_SYSTICK_Config>
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	b958      	cbnz	r0, 8000fb8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa0:	2d0f      	cmp	r5, #15
 8000fa2:	d809      	bhi.n	8000fb8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	4629      	mov	r1, r5
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f85e 	bl	800106c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <HAL_InitTick+0x44>)
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	601d      	str	r5, [r3, #0]
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fb8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_Init>:
{
 8000fc8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x30>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fd2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fda:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fe2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 f82f 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff ffc8 	bl	8000f80 <HAL_InitTick>
  HAL_MspInit();
 8000ff0:	f001 ffa6 	bl	8002f40 <HAL_MspInit>
}
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	bd08      	pop	{r3, pc}
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <HAL_IncTick+0x10>)
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <HAL_IncTick+0x14>)
 8001000:	6811      	ldr	r1, [r2, #0]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	440b      	add	r3, r1
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200038cc 	.word	0x200038cc
 8001010:	20000000 	.word	0x20000000

08001014 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001014:	4b01      	ldr	r3, [pc, #4]	; (800101c <HAL_GetTick+0x8>)
 8001016:	6818      	ldr	r0, [r3, #0]
}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200038cc 	.word	0x200038cc

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff fff6 	bl	8001014 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001028:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	bf1c      	itt	ne
 800102c:	4b05      	ldrne	r3, [pc, #20]	; (8001044 <HAL_Delay+0x24>)
 800102e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001030:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001032:	bf18      	it	ne
 8001034:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001036:	f7ff ffed 	bl	8001014 <HAL_GetTick>
 800103a:	1b40      	subs	r0, r0, r5
 800103c:	4284      	cmp	r4, r0
 800103e:	d8fa      	bhi.n	8001036 <HAL_Delay+0x16>
  {
  }
}
 8001040:	bd38      	pop	{r3, r4, r5, pc}
 8001042:	bf00      	nop
 8001044:	20000000 	.word	0x20000000

08001048 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800104a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	0c1b      	lsrs	r3, r3, #16
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	0200      	lsls	r0, r0, #8
 800105a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001062:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001064:	60d3      	str	r3, [r2, #12]
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b530      	push	{r4, r5, lr}
 8001070:	68dc      	ldr	r4, [r3, #12]
 8001072:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001076:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	2b04      	cmp	r3, #4
 800107e:	bf28      	it	cs
 8001080:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 0501 	mov.w	r5, #1
 8001088:	fa05 f303 	lsl.w	r3, r5, r3
 800108c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001090:	bf8c      	ite	hi
 8001092:	3c03      	subhi	r4, #3
 8001094:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001096:	4019      	ands	r1, r3
 8001098:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109a:	fa05 f404 	lsl.w	r4, r5, r4
 800109e:	3c01      	subs	r4, #1
 80010a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80010a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	ea42 0201 	orr.w	r2, r2, r1
 80010a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	bfad      	iteet	ge
 80010ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	f000 000f 	andlt.w	r0, r0, #15
 80010b6:	4b06      	ldrlt	r3, [pc, #24]	; (80010d0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	bfb5      	itete	lt
 80010be:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010c8:	bd30      	pop	{r4, r5, pc}
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	e000ed14 	.word	0xe000ed14

080010d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010d4:	2800      	cmp	r0, #0
 80010d6:	db08      	blt.n	80010ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d8:	0942      	lsrs	r2, r0, #5
 80010da:	2301      	movs	r3, #1
 80010dc:	f000 001f 	and.w	r0, r0, #31
 80010e0:	fa03 f000 	lsl.w	r0, r3, r0
 80010e4:	4b01      	ldr	r3, [pc, #4]	; (80010ec <HAL_NVIC_EnableIRQ+0x18>)
 80010e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	3801      	subs	r0, #1
 80010f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010f6:	d20a      	bcs.n	800110e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	21f0      	movs	r1, #240	; 0xf0
 8001100:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800111c:	2800      	cmp	r0, #0
 800111e:	db09      	blt.n	8001134 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001120:	0943      	lsrs	r3, r0, #5
 8001122:	2201      	movs	r2, #1
 8001124:	f000 001f 	and.w	r0, r0, #31
 8001128:	fa02 f000 	lsl.w	r0, r2, r0
 800112c:	3360      	adds	r3, #96	; 0x60
 800112e:	4a02      	ldr	r2, [pc, #8]	; (8001138 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8001130:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800113c:	4908      	ldr	r1, [pc, #32]	; (8001160 <FLASH_Program_DoubleWord+0x24>)
{
 800113e:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001140:	690c      	ldr	r4, [r1, #16]
 8001142:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8001146:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001148:	690c      	ldr	r4, [r1, #16]
 800114a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800114e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001150:	690c      	ldr	r4, [r1, #16]
 8001152:	f044 0401 	orr.w	r4, r4, #1
 8001156:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001158:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800115a:	6043      	str	r3, [r0, #4]
 800115c:	bd10      	pop	{r4, pc}
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <FLASH_Program_Word+0x20>)
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800116c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001174:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 800117e:	6001      	str	r1, [r0, #0]
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40023c00 	.word	0x40023c00

08001188 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <FLASH_Program_HalfWord+0x20>)
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001190:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001198:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80011a2:	8001      	strh	r1, [r0, #0]
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023c00 	.word	0x40023c00

080011ac <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <FLASH_SetErrorCode+0x6c>)
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	06d2      	lsls	r2, r2, #27
 80011b2:	d506      	bpl.n	80011c2 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80011b4:	4919      	ldr	r1, [pc, #100]	; (800121c <FLASH_SetErrorCode+0x70>)
 80011b6:	69ca      	ldr	r2, [r1, #28]
 80011b8:	f042 0210 	orr.w	r2, r2, #16
 80011bc:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80011be:	2210      	movs	r2, #16
 80011c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	0690      	lsls	r0, r2, #26
 80011c6:	d506      	bpl.n	80011d6 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80011c8:	4914      	ldr	r1, [pc, #80]	; (800121c <FLASH_SetErrorCode+0x70>)
 80011ca:	69ca      	ldr	r2, [r1, #28]
 80011cc:	f042 0208 	orr.w	r2, r2, #8
 80011d0:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80011d2:	2220      	movs	r2, #32
 80011d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <FLASH_SetErrorCode+0x6c>)
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	0651      	lsls	r1, r2, #25
 80011dc:	d506      	bpl.n	80011ec <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80011de:	490f      	ldr	r1, [pc, #60]	; (800121c <FLASH_SetErrorCode+0x70>)
 80011e0:	69ca      	ldr	r2, [r1, #28]
 80011e2:	f042 0204 	orr.w	r2, r2, #4
 80011e6:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80011e8:	2240      	movs	r2, #64	; 0x40
 80011ea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	0612      	lsls	r2, r2, #24
 80011f0:	d506      	bpl.n	8001200 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80011f2:	490a      	ldr	r1, [pc, #40]	; (800121c <FLASH_SetErrorCode+0x70>)
 80011f4:	69ca      	ldr	r2, [r1, #28]
 80011f6:	f042 0202 	orr.w	r2, r2, #2
 80011fa:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001200:	4a05      	ldr	r2, [pc, #20]	; (8001218 <FLASH_SetErrorCode+0x6c>)
 8001202:	68d3      	ldr	r3, [r2, #12]
 8001204:	079b      	lsls	r3, r3, #30
 8001206:	d506      	bpl.n	8001216 <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001208:	4904      	ldr	r1, [pc, #16]	; (800121c <FLASH_SetErrorCode+0x70>)
 800120a:	69cb      	ldr	r3, [r1, #28]
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001212:	2302      	movs	r3, #2
 8001214:	60d3      	str	r3, [r2, #12]
 8001216:	4770      	bx	lr
 8001218:	40023c00 	.word	0x40023c00
 800121c:	200038d0 	.word	0x200038d0

08001220 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_FLASH_Unlock+0x1c>)
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001226:	bfbf      	itttt	lt
 8001228:	4a05      	ldrlt	r2, [pc, #20]	; (8001240 <HAL_FLASH_Unlock+0x20>)
 800122a:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800122c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8001230:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001232:	bfba      	itte	lt
 8001234:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8001236:	0fc0      	lsrlt	r0, r0, #31
 8001238:	2000      	movge	r0, #0
}
 800123a:	4770      	bx	lr
 800123c:	40023c00 	.word	0x40023c00
 8001240:	45670123 	.word	0x45670123

08001244 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8001244:	4a03      	ldr	r2, [pc, #12]	; (8001254 <HAL_FLASH_Lock+0x10>)
 8001246:	6913      	ldr	r3, [r2, #16]
 8001248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800124c:	6113      	str	r3, [r2, #16]
}
 800124e:	2000      	movs	r0, #0
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023c00 	.word	0x40023c00

08001258 <FLASH_WaitForLastOperation>:
{ 
 8001258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800125c:	4c12      	ldr	r4, [pc, #72]	; (80012a8 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800125e:	2200      	movs	r2, #0
{ 
 8001260:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001262:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8001264:	f7ff fed6 	bl	8001014 <HAL_GetTick>
 8001268:	4626      	mov	r6, r4
 800126a:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800126c:	68e3      	ldr	r3, [r4, #12]
 800126e:	03da      	lsls	r2, r3, #15
 8001270:	d40c      	bmi.n	800128c <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001272:	68e3      	ldr	r3, [r4, #12]
 8001274:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001276:	bf44      	itt	mi
 8001278:	2301      	movmi	r3, #1
 800127a:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800127c:	68f0      	ldr	r0, [r6, #12]
 800127e:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8001282:	d002      	beq.n	800128a <FLASH_WaitForLastOperation+0x32>
    FLASH_SetErrorCode();
 8001284:	f7ff ff92 	bl	80011ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001288:	2001      	movs	r0, #1
}  
 800128a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800128c:	1c69      	adds	r1, r5, #1
 800128e:	d0ed      	beq.n	800126c <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001290:	b90d      	cbnz	r5, 8001296 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8001292:	2003      	movs	r0, #3
 8001294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001296:	f7ff febd 	bl	8001014 <HAL_GetTick>
 800129a:	1bc0      	subs	r0, r0, r7
 800129c:	4285      	cmp	r5, r0
 800129e:	d2e5      	bcs.n	800126c <FLASH_WaitForLastOperation+0x14>
 80012a0:	e7f7      	b.n	8001292 <FLASH_WaitForLastOperation+0x3a>
 80012a2:	bf00      	nop
 80012a4:	200038d0 	.word	0x200038d0
 80012a8:	40023c00 	.word	0x40023c00

080012ac <HAL_FLASH_Program>:
{
 80012ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80012b0:	4d20      	ldr	r5, [pc, #128]	; (8001334 <HAL_FLASH_Program+0x88>)
{
 80012b2:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 80012b4:	7e2b      	ldrb	r3, [r5, #24]
 80012b6:	2b01      	cmp	r3, #1
{
 80012b8:	4607      	mov	r7, r0
 80012ba:	460e      	mov	r6, r1
 80012bc:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 80012be:	d035      	beq.n	800132c <HAL_FLASH_Program+0x80>
 80012c0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012c2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80012c6:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012c8:	f7ff ffc6 	bl	8001258 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80012cc:	b9b0      	cbnz	r0, 80012fc <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80012ce:	b9cf      	cbnz	r7, 8001304 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_FLASH_Program+0x8c>)
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012d8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012de:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80012e0:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 80012e8:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ee:	f7ff ffb3 	bl	8001258 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 80012f2:	4a11      	ldr	r2, [pc, #68]	; (8001338 <HAL_FLASH_Program+0x8c>)
 80012f4:	6913      	ldr	r3, [r2, #16]
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80012fc:	2300      	movs	r3, #0
 80012fe:	762b      	strb	r3, [r5, #24]
  return status;
 8001300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001304:	2f01      	cmp	r7, #1
 8001306:	d104      	bne.n	8001312 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001308:	b2a1      	uxth	r1, r4
 800130a:	4630      	mov	r0, r6
 800130c:	f7ff ff3c 	bl	8001188 <FLASH_Program_HalfWord>
 8001310:	e7eb      	b.n	80012ea <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001312:	2f02      	cmp	r7, #2
 8001314:	d104      	bne.n	8001320 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001316:	4621      	mov	r1, r4
 8001318:	4630      	mov	r0, r6
 800131a:	f7ff ff23 	bl	8001164 <FLASH_Program_Word>
 800131e:	e7e4      	b.n	80012ea <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8001320:	4622      	mov	r2, r4
 8001322:	4643      	mov	r3, r8
 8001324:	4630      	mov	r0, r6
 8001326:	f7ff ff09 	bl	800113c <FLASH_Program_DoubleWord>
 800132a:	e7de      	b.n	80012ea <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800132c:	2002      	movs	r0, #2
}
 800132e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001332:	bf00      	nop
 8001334:	200038d0 	.word	0x200038d0
 8001338:	40023c00 	.word	0x40023c00

0800133c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800133c:	b139      	cbz	r1, 800134e <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800133e:	2901      	cmp	r1, #1
 8001340:	d01c      	beq.n	800137c <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001342:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001344:	bf0c      	ite	eq
 8001346:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800134a:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <FLASH_Erase_Sector+0x48>)
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001356:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	4311      	orrs	r1, r2
 800135c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001364:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	f042 0202 	orr.w	r2, r2, #2
 800136c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8001370:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800137c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001380:	e7e5      	b.n	800134e <FLASH_Erase_Sector+0x12>
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800138c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001390:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001540 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001394:	4a68      	ldr	r2, [pc, #416]	; (8001538 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001396:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001544 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800139a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800139e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80013a4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80013ac:	45b6      	cmp	lr, r6
 80013ae:	f040 80ae 	bne.w	800150e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b2:	684c      	ldr	r4, [r1, #4]
 80013b4:	f024 0710 	bic.w	r7, r4, #16
 80013b8:	2f02      	cmp	r7, #2
 80013ba:	d116      	bne.n	80013ea <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80013bc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80013c0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013cc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80013d0:	f04f 0c0f 	mov.w	ip, #15
 80013d4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80013d8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013dc:	690d      	ldr	r5, [r1, #16]
 80013de:	fa05 f50b 	lsl.w	r5, r5, fp
 80013e2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80013e6:	f8ca 5020 	str.w	r5, [sl, #32]
 80013ea:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ee:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80013f0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f4:	fa05 f50a 	lsl.w	r5, r5, sl
 80013f8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013fa:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013fe:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001402:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001406:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001408:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800140c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800140e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001412:	d811      	bhi.n	8001438 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001414:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001416:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141a:	68cf      	ldr	r7, [r1, #12]
 800141c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001420:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001424:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001426:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800142c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001430:	409f      	lsls	r7, r3
 8001432:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001436:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001438:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800143a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	688f      	ldr	r7, [r1, #8]
 800143e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001442:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001444:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001446:	00e5      	lsls	r5, r4, #3
 8001448:	d561      	bpl.n	800150e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	f04f 0b00 	mov.w	fp, #0
 800144e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001452:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001456:	4d39      	ldr	r5, [pc, #228]	; (800153c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001458:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800145c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001460:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001464:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001468:	9703      	str	r7, [sp, #12]
 800146a:	9f03      	ldr	r7, [sp, #12]
 800146c:	f023 0703 	bic.w	r7, r3, #3
 8001470:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001474:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001478:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800147c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001480:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001484:	f04f 0e0f 	mov.w	lr, #15
 8001488:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800148e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001492:	d043      	beq.n	800151c <HAL_GPIO_Init+0x194>
 8001494:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001498:	42a8      	cmp	r0, r5
 800149a:	d041      	beq.n	8001520 <HAL_GPIO_Init+0x198>
 800149c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014a0:	42a8      	cmp	r0, r5
 80014a2:	d03f      	beq.n	8001524 <HAL_GPIO_Init+0x19c>
 80014a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014a8:	42a8      	cmp	r0, r5
 80014aa:	d03d      	beq.n	8001528 <HAL_GPIO_Init+0x1a0>
 80014ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014b0:	42a8      	cmp	r0, r5
 80014b2:	d03b      	beq.n	800152c <HAL_GPIO_Init+0x1a4>
 80014b4:	4548      	cmp	r0, r9
 80014b6:	d03b      	beq.n	8001530 <HAL_GPIO_Init+0x1a8>
 80014b8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80014bc:	42a8      	cmp	r0, r5
 80014be:	d039      	beq.n	8001534 <HAL_GPIO_Init+0x1ac>
 80014c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014c4:	42a8      	cmp	r0, r5
 80014c6:	bf14      	ite	ne
 80014c8:	2508      	movne	r5, #8
 80014ca:	2507      	moveq	r5, #7
 80014cc:	fa05 f50c 	lsl.w	r5, r5, ip
 80014d0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80014d6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014da:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80014de:	bf0c      	ite	eq
 80014e0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80014e2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80014e4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80014e6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80014ec:	bf0c      	ite	eq
 80014ee:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80014f0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80014f2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80014fa:	bf0c      	ite	eq
 80014fc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80014fe:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001500:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001502:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001504:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001506:	bf54      	ite	pl
 8001508:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800150a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800150c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	3301      	adds	r3, #1
 8001510:	2b10      	cmp	r3, #16
 8001512:	f47f af44 	bne.w	800139e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001516:	b005      	add	sp, #20
 8001518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151c:	465d      	mov	r5, fp
 800151e:	e7d5      	b.n	80014cc <HAL_GPIO_Init+0x144>
 8001520:	2501      	movs	r5, #1
 8001522:	e7d3      	b.n	80014cc <HAL_GPIO_Init+0x144>
 8001524:	2502      	movs	r5, #2
 8001526:	e7d1      	b.n	80014cc <HAL_GPIO_Init+0x144>
 8001528:	2503      	movs	r5, #3
 800152a:	e7cf      	b.n	80014cc <HAL_GPIO_Init+0x144>
 800152c:	2504      	movs	r5, #4
 800152e:	e7cd      	b.n	80014cc <HAL_GPIO_Init+0x144>
 8001530:	2505      	movs	r5, #5
 8001532:	e7cb      	b.n	80014cc <HAL_GPIO_Init+0x144>
 8001534:	2506      	movs	r5, #6
 8001536:	e7c9      	b.n	80014cc <HAL_GPIO_Init+0x144>
 8001538:	40013c00 	.word	0x40013c00
 800153c:	40020000 	.word	0x40020000
 8001540:	40023800 	.word	0x40023800
 8001544:	40021400 	.word	0x40021400

08001548 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001548:	b10a      	cbz	r2, 800154e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154a:	6181      	str	r1, [r0, #24]
 800154c:	4770      	bx	lr
 800154e:	0409      	lsls	r1, r1, #16
 8001550:	e7fb      	b.n	800154a <HAL_GPIO_WritePin+0x2>

08001552 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001552:	4770      	bx	lr

08001554 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001554:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001558:	6959      	ldr	r1, [r3, #20]
 800155a:	4201      	tst	r1, r0
 800155c:	d002      	beq.n	8001564 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800155e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001560:	f7ff fff7 	bl	8001552 <HAL_GPIO_EXTI_Callback>
 8001564:	bd08      	pop	{r3, pc}
 8001566:	bf00      	nop
 8001568:	40013c00 	.word	0x40013c00

0800156c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800156c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800156e:	4604      	mov	r4, r0
 8001570:	b908      	cbnz	r0, 8001576 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
 8001574:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001576:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800157a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800157e:	b91b      	cbnz	r3, 8001588 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001580:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001584:	f001 fafe 	bl	8002b84 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001588:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800158a:	2324      	movs	r3, #36	; 0x24
 800158c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001590:	6813      	ldr	r3, [r2, #0]
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001598:	f000 fad6 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800159c:	6865      	ldr	r5, [r4, #4]
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_I2C_Init+0x138>)
 80015a0:	429d      	cmp	r5, r3
 80015a2:	d84d      	bhi.n	8001640 <HAL_I2C_Init+0xd4>
 80015a4:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <HAL_I2C_Init+0x13c>)
 80015a6:	4298      	cmp	r0, r3
 80015a8:	d9e3      	bls.n	8001572 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015aa:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80015ac:	493f      	ldr	r1, [pc, #252]	; (80016ac <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ae:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80015b0:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015bc:	6a13      	ldr	r3, [r2, #32]
 80015be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c2:	3101      	adds	r1, #1
 80015c4:	4319      	orrs	r1, r3
 80015c6:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015c8:	69d1      	ldr	r1, [r2, #28]
 80015ca:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_I2C_Init+0x138>)
 80015cc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80015d0:	429d      	cmp	r5, r3
 80015d2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80015d6:	f100 30ff 	add.w	r0, r0, #4294967295
 80015da:	d848      	bhi.n	800166e <HAL_I2C_Init+0x102>
 80015dc:	006d      	lsls	r5, r5, #1
 80015de:	fbb0 f0f5 	udiv	r0, r0, r5
 80015e2:	3001      	adds	r0, #1
 80015e4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	bf38      	it	cc
 80015ec:	2304      	movcc	r3, #4
 80015ee:	430b      	orrs	r3, r1
 80015f0:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015f2:	6811      	ldr	r1, [r2, #0]
 80015f4:	6a20      	ldr	r0, [r4, #32]
 80015f6:	69e3      	ldr	r3, [r4, #28]
 80015f8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80015fc:	4303      	orrs	r3, r0
 80015fe:	430b      	orrs	r3, r1
 8001600:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001602:	6891      	ldr	r1, [r2, #8]
 8001604:	68e0      	ldr	r0, [r4, #12]
 8001606:	6923      	ldr	r3, [r4, #16]
 8001608:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800160c:	4303      	orrs	r3, r0
 800160e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001612:	430b      	orrs	r3, r1
 8001614:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001616:	68d1      	ldr	r1, [r2, #12]
 8001618:	69a0      	ldr	r0, [r4, #24]
 800161a:	6963      	ldr	r3, [r4, #20]
 800161c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001620:	4303      	orrs	r3, r0
 8001622:	430b      	orrs	r3, r1
 8001624:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001630:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001632:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001634:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001638:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800163a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 800163e:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_I2C_Init+0x144>)
 8001642:	4298      	cmp	r0, r3
 8001644:	d995      	bls.n	8001572 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001646:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001648:	4e18      	ldr	r6, [pc, #96]	; (80016ac <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800164a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800164c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001650:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001654:	4333      	orrs	r3, r6
 8001656:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001658:	6a13      	ldr	r3, [r2, #32]
 800165a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800165e:	4371      	muls	r1, r6
 8001660:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001664:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001668:	fbb1 f1f6 	udiv	r1, r1, r6
 800166c:	e7a9      	b.n	80015c2 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800166e:	68a3      	ldr	r3, [r4, #8]
 8001670:	b953      	cbnz	r3, 8001688 <HAL_I2C_Init+0x11c>
 8001672:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001676:	fbb0 f0f3 	udiv	r0, r0, r3
 800167a:	1c43      	adds	r3, r0, #1
 800167c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001680:	b16b      	cbz	r3, 800169e <HAL_I2C_Init+0x132>
 8001682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001686:	e7b2      	b.n	80015ee <HAL_I2C_Init+0x82>
 8001688:	2319      	movs	r3, #25
 800168a:	436b      	muls	r3, r5
 800168c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001696:	b113      	cbz	r3, 800169e <HAL_I2C_Init+0x132>
 8001698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800169c:	e7a7      	b.n	80015ee <HAL_I2C_Init+0x82>
 800169e:	2301      	movs	r3, #1
 80016a0:	e7a5      	b.n	80015ee <HAL_I2C_Init+0x82>
 80016a2:	bf00      	nop
 80016a4:	000186a0 	.word	0x000186a0
 80016a8:	001e847f 	.word	0x001e847f
 80016ac:	000f4240 	.word	0x000f4240
 80016b0:	003d08ff 	.word	0x003d08ff

080016b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b8:	4604      	mov	r4, r0
 80016ba:	b918      	cbnz	r0, 80016c4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80016bc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80016be:	b002      	add	sp, #8
 80016c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c4:	6803      	ldr	r3, [r0, #0]
 80016c6:	07dd      	lsls	r5, r3, #31
 80016c8:	d410      	bmi.n	80016ec <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	0798      	lsls	r0, r3, #30
 80016ce:	d458      	bmi.n	8001782 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	071a      	lsls	r2, r3, #28
 80016d4:	f100 809a 	bmi.w	800180c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	075b      	lsls	r3, r3, #29
 80016dc:	f100 80b8 	bmi.w	8001850 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e0:	69a2      	ldr	r2, [r4, #24]
 80016e2:	2a00      	cmp	r2, #0
 80016e4:	f040 8119 	bne.w	800191a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80016e8:	2000      	movs	r0, #0
 80016ea:	e7e8      	b.n	80016be <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ec:	4ba6      	ldr	r3, [pc, #664]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	f002 020c 	and.w	r2, r2, #12
 80016f4:	2a04      	cmp	r2, #4
 80016f6:	d007      	beq.n	8001708 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016fe:	2a08      	cmp	r2, #8
 8001700:	d10a      	bne.n	8001718 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	0259      	lsls	r1, r3, #9
 8001706:	d507      	bpl.n	8001718 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b9f      	ldr	r3, [pc, #636]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	039a      	lsls	r2, r3, #14
 800170e:	d5dc      	bpl.n	80016ca <HAL_RCC_OscConfig+0x16>
 8001710:	6863      	ldr	r3, [r4, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1d9      	bne.n	80016ca <HAL_RCC_OscConfig+0x16>
 8001716:	e7d1      	b.n	80016bc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	6863      	ldr	r3, [r4, #4]
 800171a:	4d9b      	ldr	r5, [pc, #620]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001720:	d111      	bne.n	8001746 <HAL_RCC_OscConfig+0x92>
 8001722:	682b      	ldr	r3, [r5, #0]
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800172a:	f7ff fc73 	bl	8001014 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4d96      	ldr	r5, [pc, #600]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001730:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	039b      	lsls	r3, r3, #14
 8001736:	d4c8      	bmi.n	80016ca <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fc6c 	bl	8001014 <HAL_GetTick>
 800173c:	1b80      	subs	r0, r0, r6
 800173e:	2864      	cmp	r0, #100	; 0x64
 8001740:	d9f7      	bls.n	8001732 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001742:	2003      	movs	r0, #3
 8001744:	e7bb      	b.n	80016be <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001746:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800174a:	d104      	bne.n	8001756 <HAL_RCC_OscConfig+0xa2>
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001752:	602b      	str	r3, [r5, #0]
 8001754:	e7e5      	b.n	8001722 <HAL_RCC_OscConfig+0x6e>
 8001756:	682a      	ldr	r2, [r5, #0]
 8001758:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800175c:	602a      	str	r2, [r5, #0]
 800175e:	682a      	ldr	r2, [r5, #0]
 8001760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001764:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1df      	bne.n	800172a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800176a:	f7ff fc53 	bl	8001014 <HAL_GetTick>
 800176e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	039f      	lsls	r7, r3, #14
 8001774:	d5a9      	bpl.n	80016ca <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001776:	f7ff fc4d 	bl	8001014 <HAL_GetTick>
 800177a:	1b80      	subs	r0, r0, r6
 800177c:	2864      	cmp	r0, #100	; 0x64
 800177e:	d9f7      	bls.n	8001770 <HAL_RCC_OscConfig+0xbc>
 8001780:	e7df      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001782:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	f012 0f0c 	tst.w	r2, #12
 800178a:	d007      	beq.n	800179c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001792:	2a08      	cmp	r2, #8
 8001794:	d111      	bne.n	80017ba <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	025e      	lsls	r6, r3, #9
 800179a:	d40e      	bmi.n	80017ba <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179c:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	0795      	lsls	r5, r2, #30
 80017a2:	d502      	bpl.n	80017aa <HAL_RCC_OscConfig+0xf6>
 80017a4:	68e2      	ldr	r2, [r4, #12]
 80017a6:	2a01      	cmp	r2, #1
 80017a8:	d188      	bne.n	80016bc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	6921      	ldr	r1, [r4, #16]
 80017ae:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80017b2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80017b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b8:	e78a      	b.n	80016d0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017ba:	68e2      	ldr	r2, [r4, #12]
 80017bc:	4b73      	ldr	r3, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x2d8>)
 80017be:	b1b2      	cbz	r2, 80017ee <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017c4:	f7ff fc26 	bl	8001014 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	4d6f      	ldr	r5, [pc, #444]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80017ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	682b      	ldr	r3, [r5, #0]
 80017ce:	0798      	lsls	r0, r3, #30
 80017d0:	d507      	bpl.n	80017e2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	682b      	ldr	r3, [r5, #0]
 80017d4:	6922      	ldr	r2, [r4, #16]
 80017d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017de:	602b      	str	r3, [r5, #0]
 80017e0:	e776      	b.n	80016d0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff fc17 	bl	8001014 <HAL_GetTick>
 80017e6:	1b80      	subs	r0, r0, r6
 80017e8:	2802      	cmp	r0, #2
 80017ea:	d9ef      	bls.n	80017cc <HAL_RCC_OscConfig+0x118>
 80017ec:	e7a9      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80017ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017f0:	f7ff fc10 	bl	8001014 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f4:	4d64      	ldr	r5, [pc, #400]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80017f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f8:	682b      	ldr	r3, [r5, #0]
 80017fa:	0799      	lsls	r1, r3, #30
 80017fc:	f57f af68 	bpl.w	80016d0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff fc08 	bl	8001014 <HAL_GetTick>
 8001804:	1b80      	subs	r0, r0, r6
 8001806:	2802      	cmp	r0, #2
 8001808:	d9f6      	bls.n	80017f8 <HAL_RCC_OscConfig+0x144>
 800180a:	e79a      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800180c:	6962      	ldr	r2, [r4, #20]
 800180e:	4b60      	ldr	r3, [pc, #384]	; (8001990 <HAL_RCC_OscConfig+0x2dc>)
 8001810:	b17a      	cbz	r2, 8001832 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001816:	f7ff fbfd 	bl	8001014 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	4d5b      	ldr	r5, [pc, #364]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800181c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001820:	079f      	lsls	r7, r3, #30
 8001822:	f53f af59 	bmi.w	80016d8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001826:	f7ff fbf5 	bl	8001014 <HAL_GetTick>
 800182a:	1b80      	subs	r0, r0, r6
 800182c:	2802      	cmp	r0, #2
 800182e:	d9f6      	bls.n	800181e <HAL_RCC_OscConfig+0x16a>
 8001830:	e787      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001832:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001834:	f7ff fbee 	bl	8001014 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	4d53      	ldr	r5, [pc, #332]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800183a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800183e:	0798      	lsls	r0, r3, #30
 8001840:	f57f af4a 	bpl.w	80016d8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff fbe6 	bl	8001014 <HAL_GetTick>
 8001848:	1b80      	subs	r0, r0, r6
 800184a:	2802      	cmp	r0, #2
 800184c:	d9f6      	bls.n	800183c <HAL_RCC_OscConfig+0x188>
 800184e:	e778      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001850:	4b4d      	ldr	r3, [pc, #308]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 8001852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001854:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001858:	d128      	bne.n	80018ac <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	9201      	str	r2, [sp, #4]
 800185c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800186e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	4d48      	ldr	r5, [pc, #288]	; (8001994 <HAL_RCC_OscConfig+0x2e0>)
 8001872:	682b      	ldr	r3, [r5, #0]
 8001874:	05d9      	lsls	r1, r3, #23
 8001876:	d51b      	bpl.n	80018b0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	68a3      	ldr	r3, [r4, #8]
 800187a:	4d43      	ldr	r5, [pc, #268]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 800187c:	2b01      	cmp	r3, #1
 800187e:	d127      	bne.n	80018d0 <HAL_RCC_OscConfig+0x21c>
 8001880:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001888:	f7ff fbc4 	bl	8001014 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188c:	4d3e      	ldr	r5, [pc, #248]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800188e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001896:	079b      	lsls	r3, r3, #30
 8001898:	d539      	bpl.n	800190e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800189a:	2e00      	cmp	r6, #0
 800189c:	f43f af20 	beq.w	80016e0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	4a39      	ldr	r2, [pc, #228]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 80018a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	e719      	b.n	80016e0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80018ac:	2600      	movs	r6, #0
 80018ae:	e7df      	b.n	8001870 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b0:	682b      	ldr	r3, [r5, #0]
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018b8:	f7ff fbac 	bl	8001014 <HAL_GetTick>
 80018bc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	682b      	ldr	r3, [r5, #0]
 80018c0:	05da      	lsls	r2, r3, #23
 80018c2:	d4d9      	bmi.n	8001878 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c4:	f7ff fba6 	bl	8001014 <HAL_GetTick>
 80018c8:	1bc0      	subs	r0, r0, r7
 80018ca:	2802      	cmp	r0, #2
 80018cc:	d9f7      	bls.n	80018be <HAL_RCC_OscConfig+0x20a>
 80018ce:	e738      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d104      	bne.n	80018de <HAL_RCC_OscConfig+0x22a>
 80018d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	672b      	str	r3, [r5, #112]	; 0x70
 80018dc:	e7d0      	b.n	8001880 <HAL_RCC_OscConfig+0x1cc>
 80018de:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	672a      	str	r2, [r5, #112]	; 0x70
 80018e6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018e8:	f022 0204 	bic.w	r2, r2, #4
 80018ec:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ca      	bne.n	8001888 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80018f2:	f7ff fb8f 	bl	8001014 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018fa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018fe:	0798      	lsls	r0, r3, #30
 8001900:	d5cb      	bpl.n	800189a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff fb87 	bl	8001014 <HAL_GetTick>
 8001906:	1bc0      	subs	r0, r0, r7
 8001908:	4540      	cmp	r0, r8
 800190a:	d9f7      	bls.n	80018fc <HAL_RCC_OscConfig+0x248>
 800190c:	e719      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff fb81 	bl	8001014 <HAL_GetTick>
 8001912:	1bc0      	subs	r0, r0, r7
 8001914:	4540      	cmp	r0, r8
 8001916:	d9bd      	bls.n	8001894 <HAL_RCC_OscConfig+0x1e0>
 8001918:	e713      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800191a:	4d1b      	ldr	r5, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
 800191c:	68ab      	ldr	r3, [r5, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b08      	cmp	r3, #8
 8001924:	f43f aeca 	beq.w	80016bc <HAL_RCC_OscConfig+0x8>
 8001928:	4e1b      	ldr	r6, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x2e4>)
 800192a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800192e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001930:	d134      	bne.n	800199c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001932:	f7ff fb6f 	bl	8001014 <HAL_GetTick>
 8001936:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001938:	682b      	ldr	r3, [r5, #0]
 800193a:	0199      	lsls	r1, r3, #6
 800193c:	d41e      	bmi.n	800197c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800193e:	6a22      	ldr	r2, [r4, #32]
 8001940:	69e3      	ldr	r3, [r4, #28]
 8001942:	4313      	orrs	r3, r2
 8001944:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001946:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800194a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800194c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001950:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	4c0d      	ldr	r4, [pc, #52]	; (8001988 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	3a01      	subs	r2, #1
 8001958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800195c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800195e:	2301      	movs	r3, #1
 8001960:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001962:	f7ff fb57 	bl	8001014 <HAL_GetTick>
 8001966:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	019a      	lsls	r2, r3, #6
 800196c:	f53f aebc 	bmi.w	80016e8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fb50 	bl	8001014 <HAL_GetTick>
 8001974:	1b40      	subs	r0, r0, r5
 8001976:	2802      	cmp	r0, #2
 8001978:	d9f6      	bls.n	8001968 <HAL_RCC_OscConfig+0x2b4>
 800197a:	e6e2      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff fb4a 	bl	8001014 <HAL_GetTick>
 8001980:	1bc0      	subs	r0, r0, r7
 8001982:	2802      	cmp	r0, #2
 8001984:	d9d8      	bls.n	8001938 <HAL_RCC_OscConfig+0x284>
 8001986:	e6dc      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
 8001988:	40023800 	.word	0x40023800
 800198c:	42470000 	.word	0x42470000
 8001990:	42470e80 	.word	0x42470e80
 8001994:	40007000 	.word	0x40007000
 8001998:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800199c:	f7ff fb3a 	bl	8001014 <HAL_GetTick>
 80019a0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	682b      	ldr	r3, [r5, #0]
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	f57f ae9f 	bpl.w	80016e8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff fb33 	bl	8001014 <HAL_GetTick>
 80019ae:	1b00      	subs	r0, r0, r4
 80019b0:	2802      	cmp	r0, #2
 80019b2:	d9f6      	bls.n	80019a2 <HAL_RCC_OscConfig+0x2ee>
 80019b4:	e6c5      	b.n	8001742 <HAL_RCC_OscConfig+0x8e>
 80019b6:	bf00      	nop

080019b8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b8:	4913      	ldr	r1, [pc, #76]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80019ba:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019bc:	688b      	ldr	r3, [r1, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x16>
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ca:	4810      	ldr	r0, [pc, #64]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019cc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80019ce:	4810      	ldr	r0, [pc, #64]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x58>)
 80019d0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	bf14      	ite	ne
 80019de:	480c      	ldrne	r0, [pc, #48]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e0:	480a      	ldreq	r0, [pc, #40]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019e6:	bf18      	it	ne
 80019e8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ee:	fba1 0100 	umull	r0, r1, r1, r0
 80019f2:	f7ff f93d 	bl	8000c70 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x50>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019fe:	3301      	adds	r3, #1
 8001a00:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001a02:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a06:	bd08      	pop	{r3, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	00f42400 	.word	0x00f42400
 8001a10:	00b71b00 	.word	0x00b71b00

08001a14 <HAL_RCC_ClockConfig>:
{
 8001a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a18:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	b910      	cbnz	r0, 8001a24 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
 8001a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_RCC_ClockConfig+0x124>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f002 020f 	and.w	r2, r2, #15
 8001a2c:	428a      	cmp	r2, r1
 8001a2e:	d328      	bcc.n	8001a82 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a30:	6821      	ldr	r1, [r4, #0]
 8001a32:	078f      	lsls	r7, r1, #30
 8001a34:	d42d      	bmi.n	8001a92 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	07c8      	lsls	r0, r1, #31
 8001a38:	d440      	bmi.n	8001abc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <HAL_RCC_ClockConfig+0x124>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f002 020f 	and.w	r2, r2, #15
 8001a42:	4295      	cmp	r5, r2
 8001a44:	d366      	bcc.n	8001b14 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a46:	6822      	ldr	r2, [r4, #0]
 8001a48:	0751      	lsls	r1, r2, #29
 8001a4a:	d46c      	bmi.n	8001b26 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4c:	0713      	lsls	r3, r2, #28
 8001a4e:	d507      	bpl.n	8001a60 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a50:	4a3a      	ldr	r2, [pc, #232]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
 8001a52:	6921      	ldr	r1, [r4, #16]
 8001a54:	6893      	ldr	r3, [r2, #8]
 8001a56:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a5a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a5e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a60:	f7ff ffaa 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
 8001a66:	4a36      	ldr	r2, [pc, #216]	; (8001b40 <HAL_RCC_ClockConfig+0x12c>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	40d8      	lsrs	r0, r3
 8001a72:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <HAL_RCC_ClockConfig+0x130>)
 8001a74:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff fa82 	bl	8000f80 <HAL_InitTick>
  return HAL_OK;
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	b2ca      	uxtb	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	4299      	cmp	r1, r3
 8001a8e:	d1c6      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xa>
 8001a90:	e7ce      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1c>
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a98:	bf1e      	ittt	ne
 8001a9a:	689a      	ldrne	r2, [r3, #8]
 8001a9c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001aa0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa4:	bf42      	ittt	mi
 8001aa6:	689a      	ldrmi	r2, [r3, #8]
 8001aa8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001aac:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	68a0      	ldr	r0, [r4, #8]
 8001ab2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ab6:	4302      	orrs	r2, r0
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	e7bc      	b.n	8001a36 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abc:	6862      	ldr	r2, [r4, #4]
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
 8001ac0:	2a01      	cmp	r2, #1
 8001ac2:	d11d      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	d0a8      	beq.n	8001a1e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001acc:	4e1b      	ldr	r6, [pc, #108]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
 8001ace:	68b3      	ldr	r3, [r6, #8]
 8001ad0:	f023 0303 	bic.w	r3, r3, #3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001ad8:	f7ff fa9c 	bl	8001014 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001adc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ae0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	68b3      	ldr	r3, [r6, #8]
 8001ae4:	6862      	ldr	r2, [r4, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001aee:	d0a4      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff fa90 	bl	8001014 <HAL_GetTick>
 8001af4:	1bc0      	subs	r0, r0, r7
 8001af6:	4540      	cmp	r0, r8
 8001af8:	d9f3      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001afa:	2003      	movs	r0, #3
}
 8001afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b00:	1e91      	subs	r1, r2, #2
 8001b02:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b04:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b06:	d802      	bhi.n	8001b0e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b0c:	e7dd      	b.n	8001aca <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	f013 0f02 	tst.w	r3, #2
 8001b12:	e7da      	b.n	8001aca <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b14:	b2ea      	uxtb	r2, r5
 8001b16:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	429d      	cmp	r5, r3
 8001b20:	f47f af7d 	bne.w	8001a1e <HAL_RCC_ClockConfig+0xa>
 8001b24:	e78f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b26:	4905      	ldr	r1, [pc, #20]	; (8001b3c <HAL_RCC_ClockConfig+0x128>)
 8001b28:	68e0      	ldr	r0, [r4, #12]
 8001b2a:	688b      	ldr	r3, [r1, #8]
 8001b2c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b30:	4303      	orrs	r3, r0
 8001b32:	608b      	str	r3, [r1, #8]
 8001b34:	e78a      	b.n	8001a4c <HAL_RCC_ClockConfig+0x38>
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	0800aac8 	.word	0x0800aac8
 8001b44:	20000008 	.word	0x20000008

08001b48 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b52:	5cd3      	ldrb	r3, [r2, r3]
 8001b54:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b56:	6810      	ldr	r0, [r2, #0]
}
 8001b58:	40d8      	lsrs	r0, r3
 8001b5a:	4770      	bx	lr
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	0800aad8 	.word	0x0800aad8
 8001b64:	20000008 	.word	0x20000008

08001b68 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b76:	6810      	ldr	r0, [r2, #0]
}
 8001b78:	40d8      	lsrs	r0, r3
 8001b7a:	4770      	bx	lr
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	0800aad8 	.word	0x0800aad8
 8001b84:	20000008 	.word	0x20000008

08001b88 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	460e      	mov	r6, r1
 8001b8e:	4615      	mov	r5, r2
 8001b90:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b92:	6821      	ldr	r1, [r4, #0]
 8001b94:	688a      	ldr	r2, [r1, #8]
 8001b96:	ea36 0302 	bics.w	r3, r6, r2
 8001b9a:	d001      	beq.n	8001ba0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001b9c:	2000      	movs	r0, #0
}
 8001b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001ba0:	1c6b      	adds	r3, r5, #1
 8001ba2:	d0f7      	beq.n	8001b94 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ba4:	f7ff fa36 	bl	8001014 <HAL_GetTick>
 8001ba8:	1bc0      	subs	r0, r0, r7
 8001baa:	4285      	cmp	r5, r0
 8001bac:	d8f1      	bhi.n	8001b92 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001bb6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bb8:	6862      	ldr	r2, [r4, #4]
 8001bba:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001bbe:	d10a      	bne.n	8001bd6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8001bc0:	68a2      	ldr	r2, [r4, #8]
 8001bc2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001bc6:	d002      	beq.n	8001bce <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001bc8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001bcc:	d103      	bne.n	8001bd6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bd4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bd6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bd8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001bdc:	d107      	bne.n	8001bee <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bec:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001bfa:	2003      	movs	r0, #3
 8001bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001bfe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001bfe:	b538      	push	{r3, r4, r5, lr}
 8001c00:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c02:	6842      	ldr	r2, [r0, #4]
 8001c04:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8001c08:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c0a:	d11f      	bne.n	8001c4c <SPI_EndRxTransaction+0x4e>
 8001c0c:	6882      	ldr	r2, [r0, #8]
 8001c0e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c12:	d002      	beq.n	8001c1a <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c14:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001c18:	d107      	bne.n	8001c2a <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001c1a:	6825      	ldr	r5, [r4, #0]
 8001c1c:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001c1e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8001c22:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001c26:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001c28:	d007      	beq.n	8001c3a <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff ffaa 	bl	8001b88 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001c34:	b920      	cbnz	r0, 8001c40 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
 8001c38:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	e7f6      	b.n	8001c2e <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c48:	2003      	movs	r0, #3
 8001c4a:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001c4c:	460a      	mov	r2, r1
 8001c4e:	2101      	movs	r1, #1
 8001c50:	e7ee      	b.n	8001c30 <SPI_EndRxTransaction+0x32>
	...

08001c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c56:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c58:	4a13      	ldr	r2, [pc, #76]	; (8001ca8 <SPI_EndRxTxTransaction+0x54>)
 8001c5a:	4e14      	ldr	r6, [pc, #80]	; (8001cac <SPI_EndRxTxTransaction+0x58>)
 8001c5c:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c5e:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c60:	fbb5 f6f6 	udiv	r6, r5, r6
 8001c64:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001c68:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c6a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8001c6e:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c70:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c72:	d10d      	bne.n	8001c90 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c74:	460a      	mov	r2, r1
 8001c76:	2180      	movs	r1, #128	; 0x80
 8001c78:	f7ff ff86 	bl	8001b88 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001c7c:	b910      	cbnz	r0, 8001c84 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8001c7e:	2000      	movs	r0, #0
}
 8001c80:	b002      	add	sp, #8
 8001c82:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	e7f7      	b.n	8001c80 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8001c90:	9b01      	ldr	r3, [sp, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f3      	beq.n	8001c7e <SPI_EndRxTxTransaction+0x2a>
      count--;
 8001c96:	9b01      	ldr	r3, [sp, #4]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	d4f5      	bmi.n	8001c90 <SPI_EndRxTxTransaction+0x3c>
 8001ca4:	e7eb      	b.n	8001c7e <SPI_EndRxTxTransaction+0x2a>
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	016e3600 	.word	0x016e3600

08001cb0 <HAL_SPI_Init>:
{
 8001cb0:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d036      	beq.n	8001d26 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cbc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001cc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cc4:	b91b      	cbnz	r3, 8001cce <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001cc6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001cca:	f001 f8ed 	bl	8002ea8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001cce:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001cd0:	68a0      	ldr	r0, [r4, #8]
 8001cd2:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001cda:	680b      	ldr	r3, [r1, #0]
 8001cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ce0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ce2:	6863      	ldr	r3, [r4, #4]
 8001ce4:	4303      	orrs	r3, r0
 8001ce6:	68e0      	ldr	r0, [r4, #12]
 8001ce8:	4303      	orrs	r3, r0
 8001cea:	6920      	ldr	r0, [r4, #16]
 8001cec:	4303      	orrs	r3, r0
 8001cee:	6960      	ldr	r0, [r4, #20]
 8001cf0:	4303      	orrs	r3, r0
 8001cf2:	69e0      	ldr	r0, [r4, #28]
 8001cf4:	4303      	orrs	r3, r0
 8001cf6:	6a20      	ldr	r0, [r4, #32]
 8001cf8:	4303      	orrs	r3, r0
 8001cfa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001cfc:	4303      	orrs	r3, r0
 8001cfe:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001d02:	4303      	orrs	r3, r0
 8001d04:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d06:	0c12      	lsrs	r2, r2, #16
 8001d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d0a:	f002 0204 	and.w	r2, r2, #4
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d12:	69cb      	ldr	r3, [r1, #28]
 8001d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d18:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d1a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001d1c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d1e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d20:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001d24:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d26:	2001      	movs	r0, #1
}
 8001d28:	bd10      	pop	{r4, pc}

08001d2a <HAL_SPI_Transmit>:
{
 8001d2a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001d2e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001d30:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001d34:	2b01      	cmp	r3, #1
{
 8001d36:	4604      	mov	r4, r0
 8001d38:	460d      	mov	r5, r1
 8001d3a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001d3c:	f000 809b 	beq.w	8001e76 <HAL_SPI_Transmit+0x14c>
 8001d40:	2301      	movs	r3, #1
 8001d42:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001d46:	f7ff f965 	bl	8001014 <HAL_GetTick>
 8001d4a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001d4c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001d50:	b2c0      	uxtb	r0, r0
 8001d52:	2801      	cmp	r0, #1
 8001d54:	f040 808d 	bne.w	8001e72 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8001d58:	2d00      	cmp	r5, #0
 8001d5a:	d05d      	beq.n	8001e18 <HAL_SPI_Transmit+0xee>
 8001d5c:	f1b8 0f00 	cmp.w	r8, #0
 8001d60:	d05a      	beq.n	8001e18 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d62:	2303      	movs	r3, #3
 8001d64:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d68:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d6a:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d6c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d6e:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001d70:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001d74:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d76:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d78:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d7a:	6420      	str	r0, [r4, #64]	; 0x40
 8001d7c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d7e:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001d84:	bf08      	it	eq
 8001d86:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001d88:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001d8c:	bf04      	itt	eq
 8001d8e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001d92:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d94:	6803      	ldr	r3, [r0, #0]
 8001d96:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001d98:	bf5e      	ittt	pl
 8001d9a:	6803      	ldrpl	r3, [r0, #0]
 8001d9c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001da0:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001da2:	68e3      	ldr	r3, [r4, #12]
 8001da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001da8:	6863      	ldr	r3, [r4, #4]
 8001daa:	d13e      	bne.n	8001e2a <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dac:	b113      	cbz	r3, 8001db4 <HAL_SPI_Transmit+0x8a>
 8001dae:	f1b8 0f01 	cmp.w	r8, #1
 8001db2:	d107      	bne.n	8001dc4 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001db4:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001db8:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dba:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001dbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001dc4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b9a3      	cbnz	r3, 8001df4 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dca:	463a      	mov	r2, r7
 8001dcc:	4631      	mov	r1, r6
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f7ff ff40 	bl	8001c54 <SPI_EndRxTxTransaction>
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d149      	bne.n	8001e6c <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dd8:	68a3      	ldr	r3, [r4, #8]
 8001dda:	b933      	cbnz	r3, 8001dea <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	9201      	str	r2, [sp, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dea:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001dec:	3000      	adds	r0, #0
 8001dee:	bf18      	it	ne
 8001df0:	2001      	movne	r0, #1
 8001df2:	e011      	b.n	8001e18 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	6893      	ldr	r3, [r2, #8]
 8001df8:	0798      	lsls	r0, r3, #30
 8001dfa:	d505      	bpl.n	8001e08 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001dfe:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001e02:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e04:	6323      	str	r3, [r4, #48]	; 0x30
 8001e06:	e7d9      	b.n	8001dbc <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e08:	f7ff f904 	bl	8001014 <HAL_GetTick>
 8001e0c:	1bc0      	subs	r0, r0, r7
 8001e0e:	42b0      	cmp	r0, r6
 8001e10:	d3d8      	bcc.n	8001dc4 <HAL_SPI_Transmit+0x9a>
 8001e12:	1c71      	adds	r1, r6, #1
 8001e14:	d0d6      	beq.n	8001dc4 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8001e16:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001e24:	b002      	add	sp, #8
 8001e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e2a:	b113      	cbz	r3, 8001e32 <HAL_SPI_Transmit+0x108>
 8001e2c:	f1b8 0f01 	cmp.w	r8, #1
 8001e30:	d108      	bne.n	8001e44 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e32:	782b      	ldrb	r3, [r5, #0]
 8001e34:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e38:	3301      	adds	r3, #1
 8001e3a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0be      	beq.n	8001dca <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	0792      	lsls	r2, r2, #30
 8001e52:	d503      	bpl.n	8001e5c <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e54:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	731a      	strb	r2, [r3, #12]
 8001e5a:	e7ec      	b.n	8001e36 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e5c:	f7ff f8da 	bl	8001014 <HAL_GetTick>
 8001e60:	1bc0      	subs	r0, r0, r7
 8001e62:	4286      	cmp	r6, r0
 8001e64:	d8ee      	bhi.n	8001e44 <HAL_SPI_Transmit+0x11a>
 8001e66:	1c73      	adds	r3, r6, #1
 8001e68:	d0ec      	beq.n	8001e44 <HAL_SPI_Transmit+0x11a>
 8001e6a:	e7d4      	b.n	8001e16 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	6563      	str	r3, [r4, #84]	; 0x54
 8001e70:	e7b2      	b.n	8001dd8 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8001e72:	2002      	movs	r0, #2
 8001e74:	e7d0      	b.n	8001e18 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8001e76:	2002      	movs	r0, #2
 8001e78:	e7d4      	b.n	8001e24 <HAL_SPI_Transmit+0xfa>

08001e7a <HAL_SPI_TransmitReceive>:
{
 8001e7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e7e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001e80:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001e84:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001e86:	2b01      	cmp	r3, #1
{
 8001e88:	4604      	mov	r4, r0
 8001e8a:	460d      	mov	r5, r1
 8001e8c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001e8e:	f000 80e2 	beq.w	8002056 <HAL_SPI_TransmitReceive+0x1dc>
 8001e92:	2301      	movs	r3, #1
 8001e94:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001e98:	f7ff f8bc 	bl	8001014 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001e9c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001ea0:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001ea2:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ea4:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001ea6:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_SPI_TransmitReceive+0x46>
 8001eaa:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001eae:	f040 80d0 	bne.w	8002052 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001eb2:	68a0      	ldr	r0, [r4, #8]
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	f040 80cc 	bne.w	8002052 <HAL_SPI_TransmitReceive+0x1d8>
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	f040 80c9 	bne.w	8002052 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ec0:	2d00      	cmp	r5, #0
 8001ec2:	f000 80c4 	beq.w	800204e <HAL_SPI_TransmitReceive+0x1d4>
 8001ec6:	f1b9 0f00 	cmp.w	r9, #0
 8001eca:	f000 80c0 	beq.w	800204e <HAL_SPI_TransmitReceive+0x1d4>
 8001ece:	2e00      	cmp	r6, #0
 8001ed0:	f000 80bd 	beq.w	800204e <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ed4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ed8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001edc:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ede:	bf1c      	itt	ne
 8001ee0:	2305      	movne	r3, #5
 8001ee2:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001eea:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001eec:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eee:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001ef0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001ef2:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ef4:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001ef6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ef8:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001efa:	bf58      	it	pl
 8001efc:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001efe:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001f00:	bf58      	it	pl
 8001f02:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001f06:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001f08:	bf58      	it	pl
 8001f0a:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f0c:	68e2      	ldr	r2, [r4, #12]
 8001f0e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001f12:	d158      	bne.n	8001fc6 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f14:	b109      	cbz	r1, 8001f1a <HAL_SPI_TransmitReceive+0xa0>
 8001f16:	2e01      	cmp	r6, #1
 8001f18:	d107      	bne.n	8001f2a <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f1a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001f1e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f22:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001f2a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b9ab      	cbnz	r3, 8001f5e <HAL_SPI_TransmitReceive+0xe4>
 8001f32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b993      	cbnz	r3, 8001f5e <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f38:	4642      	mov	r2, r8
 8001f3a:	4639      	mov	r1, r7
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff fe89 	bl	8001c54 <SPI_EndRxTxTransaction>
 8001f42:	2800      	cmp	r0, #0
 8001f44:	f040 8081 	bne.w	800204a <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f48:	68a3      	ldr	r3, [r4, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d132      	bne.n	8001fb4 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	9001      	str	r0, [sp, #4]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	9201      	str	r2, [sp, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	9b01      	ldr	r3, [sp, #4]
 8001f5c:	e02a      	b.n	8001fb4 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f5e:	6822      	ldr	r2, [r4, #0]
 8001f60:	6893      	ldr	r3, [r2, #8]
 8001f62:	0799      	lsls	r1, r3, #30
 8001f64:	d50d      	bpl.n	8001f82 <HAL_SPI_TransmitReceive+0x108>
 8001f66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	b153      	cbz	r3, 8001f82 <HAL_SPI_TransmitReceive+0x108>
 8001f6c:	b14d      	cbz	r5, 8001f82 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f70:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001f74:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f76:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001f78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001f80:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f82:	6893      	ldr	r3, [r2, #8]
 8001f84:	07db      	lsls	r3, r3, #31
 8001f86:	d50c      	bpl.n	8001fa2 <HAL_SPI_TransmitReceive+0x128>
 8001f88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	b14b      	cbz	r3, 8001fa2 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f90:	68d2      	ldr	r2, [r2, #12]
 8001f92:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f96:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001f98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001fa0:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fa2:	f7ff f837 	bl	8001014 <HAL_GetTick>
 8001fa6:	eba0 0008 	sub.w	r0, r0, r8
 8001faa:	4287      	cmp	r7, r0
 8001fac:	d8be      	bhi.n	8001f2c <HAL_SPI_TransmitReceive+0xb2>
 8001fae:	1c7e      	adds	r6, r7, #1
 8001fb0:	d0bc      	beq.n	8001f2c <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001fb2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001fc0:	b003      	add	sp, #12
 8001fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fc6:	b109      	cbz	r1, 8001fcc <HAL_SPI_TransmitReceive+0x152>
 8001fc8:	2e01      	cmp	r6, #1
 8001fca:	d108      	bne.n	8001fde <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fcc:	782a      	ldrb	r2, [r5, #0]
 8001fce:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001fd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001fde:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fe0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b91b      	cbnz	r3, 8001fee <HAL_SPI_TransmitReceive+0x174>
 8001fe6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0a4      	beq.n	8001f38 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fee:	6822      	ldr	r2, [r4, #0]
 8001ff0:	6893      	ldr	r3, [r2, #8]
 8001ff2:	0798      	lsls	r0, r3, #30
 8001ff4:	d50e      	bpl.n	8002014 <HAL_SPI_TransmitReceive+0x19a>
 8001ff6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b15b      	cbz	r3, 8002014 <HAL_SPI_TransmitReceive+0x19a>
 8001ffc:	b155      	cbz	r5, 8002014 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ffe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002004:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002006:	3301      	adds	r3, #1
 8002008:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800200a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800200c:	3b01      	subs	r3, #1
 800200e:	b29b      	uxth	r3, r3
 8002010:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002012:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	6893      	ldr	r3, [r2, #8]
 8002018:	07d9      	lsls	r1, r3, #31
 800201a:	d50d      	bpl.n	8002038 <HAL_SPI_TransmitReceive+0x1be>
 800201c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800201e:	b29b      	uxth	r3, r3
 8002020:	b153      	cbz	r3, 8002038 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002024:	68d2      	ldr	r2, [r2, #12]
 8002026:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002028:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800202a:	3301      	adds	r3, #1
 800202c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800202e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002030:	3b01      	subs	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002036:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002038:	f7fe ffec 	bl	8001014 <HAL_GetTick>
 800203c:	eba0 0008 	sub.w	r0, r0, r8
 8002040:	4287      	cmp	r7, r0
 8002042:	d8cd      	bhi.n	8001fe0 <HAL_SPI_TransmitReceive+0x166>
 8002044:	1c7b      	adds	r3, r7, #1
 8002046:	d0cb      	beq.n	8001fe0 <HAL_SPI_TransmitReceive+0x166>
 8002048:	e7b3      	b.n	8001fb2 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800204a:	2320      	movs	r3, #32
 800204c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800204e:	2001      	movs	r0, #1
 8002050:	e7b0      	b.n	8001fb4 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002052:	2002      	movs	r0, #2
 8002054:	e7ae      	b.n	8001fb4 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8002056:	2002      	movs	r0, #2
 8002058:	e7b2      	b.n	8001fc0 <HAL_SPI_TransmitReceive+0x146>

0800205a <HAL_SPI_Receive>:
{
 800205a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800205e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002060:	6843      	ldr	r3, [r0, #4]
 8002062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002066:	4604      	mov	r4, r0
 8002068:	4688      	mov	r8, r1
 800206a:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800206c:	d10c      	bne.n	8002088 <HAL_SPI_Receive+0x2e>
 800206e:	6883      	ldr	r3, [r0, #8]
 8002070:	b953      	cbnz	r3, 8002088 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002072:	2304      	movs	r3, #4
 8002074:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002078:	4613      	mov	r3, r2
 800207a:	9500      	str	r5, [sp, #0]
 800207c:	460a      	mov	r2, r1
 800207e:	f7ff fefc 	bl	8001e7a <HAL_SPI_TransmitReceive>
}
 8002082:	b002      	add	sp, #8
 8002084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002088:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800208c:	2b01      	cmp	r3, #1
 800208e:	d079      	beq.n	8002184 <HAL_SPI_Receive+0x12a>
 8002090:	2301      	movs	r3, #1
 8002092:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002096:	f7fe ffbd 	bl	8001014 <HAL_GetTick>
 800209a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800209c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80020a0:	b2c0      	uxtb	r0, r0
 80020a2:	2801      	cmp	r0, #1
 80020a4:	d16c      	bne.n	8002180 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 80020a6:	f1b8 0f00 	cmp.w	r8, #0
 80020aa:	d057      	beq.n	800215c <HAL_SPI_Receive+0x102>
 80020ac:	2f00      	cmp	r7, #0
 80020ae:	d055      	beq.n	800215c <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020b0:	2304      	movs	r3, #4
 80020b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020ba:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 80020bc:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 80020be:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80020c0:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80020c2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80020c4:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020c6:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 80020c8:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ce:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020d0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 80020d4:	bf02      	ittt	eq
 80020d6:	681a      	ldreq	r2, [r3, #0]
 80020d8:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 80020dc:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80020e2:	bf5e      	ittt	pl
 80020e4:	681a      	ldrpl	r2, [r3, #0]
 80020e6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80020ea:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020ec:	68e3      	ldr	r3, [r4, #12]
 80020ee:	b1f3      	cbz	r3, 800212e <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 80020f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b1fb      	cbz	r3, 8002136 <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	07d2      	lsls	r2, r2, #31
 80020fc:	d535      	bpl.n	800216a <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002102:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002106:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002108:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800210a:	3b01      	subs	r3, #1
 800210c:	b29b      	uxth	r3, r3
 800210e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002110:	e7ee      	b.n	80020f0 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	07d0      	lsls	r0, r2, #31
 8002118:	d518      	bpl.n	800214c <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800211a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800211c:	7b1b      	ldrb	r3, [r3, #12]
 800211e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002122:	3301      	adds	r3, #1
 8002124:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002126:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002128:	3b01      	subs	r3, #1
 800212a:	b29b      	uxth	r3, r3
 800212c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800212e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002130:	b29b      	uxth	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1ed      	bne.n	8002112 <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002136:	4632      	mov	r2, r6
 8002138:	4629      	mov	r1, r5
 800213a:	4620      	mov	r0, r4
 800213c:	f7ff fd5f 	bl	8001bfe <SPI_EndRxTransaction>
 8002140:	b9d8      	cbnz	r0, 800217a <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002142:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002144:	3000      	adds	r0, #0
 8002146:	bf18      	it	ne
 8002148:	2001      	movne	r0, #1
 800214a:	e007      	b.n	800215c <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800214c:	f7fe ff62 	bl	8001014 <HAL_GetTick>
 8002150:	1b80      	subs	r0, r0, r6
 8002152:	4285      	cmp	r5, r0
 8002154:	d8eb      	bhi.n	800212e <HAL_SPI_Receive+0xd4>
 8002156:	1c69      	adds	r1, r5, #1
 8002158:	d0e9      	beq.n	800212e <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 800215a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800215c:	2301      	movs	r3, #1
 800215e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002162:	2300      	movs	r3, #0
 8002164:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002168:	e78b      	b.n	8002082 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800216a:	f7fe ff53 	bl	8001014 <HAL_GetTick>
 800216e:	1b80      	subs	r0, r0, r6
 8002170:	4285      	cmp	r5, r0
 8002172:	d8bd      	bhi.n	80020f0 <HAL_SPI_Receive+0x96>
 8002174:	1c6b      	adds	r3, r5, #1
 8002176:	d0bb      	beq.n	80020f0 <HAL_SPI_Receive+0x96>
 8002178:	e7ef      	b.n	800215a <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800217a:	2320      	movs	r3, #32
 800217c:	6563      	str	r3, [r4, #84]	; 0x54
 800217e:	e7e0      	b.n	8002142 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8002180:	2002      	movs	r0, #2
 8002182:	e7eb      	b.n	800215c <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 8002184:	2002      	movs	r0, #2
 8002186:	e77c      	b.n	8002082 <HAL_SPI_Receive+0x28>

08002188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800218c:	6806      	ldr	r6, [r0, #0]
 800218e:	68c2      	ldr	r2, [r0, #12]
 8002190:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002192:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002194:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002198:	4313      	orrs	r3, r2
 800219a:	6133      	str	r3, [r6, #16]
{
 800219c:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800219e:	6883      	ldr	r3, [r0, #8]
 80021a0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80021a2:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021a4:	4303      	orrs	r3, r0
 80021a6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80021a8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021ac:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80021ae:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021b2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021b8:	6973      	ldr	r3, [r6, #20]
 80021ba:	69a2      	ldr	r2, [r4, #24]
 80021bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c0:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021c2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021c6:	6173      	str	r3, [r6, #20]
 80021c8:	4b7a      	ldr	r3, [pc, #488]	; (80023b4 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021ca:	d17c      	bne.n	80022c6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021cc:	429e      	cmp	r6, r3
 80021ce:	d003      	beq.n	80021d8 <UART_SetConfig+0x50>
 80021d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021d4:	429e      	cmp	r6, r3
 80021d6:	d144      	bne.n	8002262 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80021d8:	f7ff fcc6 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 80021dc:	2519      	movs	r5, #25
 80021de:	fb05 f300 	mul.w	r3, r5, r0
 80021e2:	6860      	ldr	r0, [r4, #4]
 80021e4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80021e8:	0040      	lsls	r0, r0, #1
 80021ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80021ee:	fbb3 f3f9 	udiv	r3, r3, r9
 80021f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021f6:	f7ff fcb7 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 80021fa:	6863      	ldr	r3, [r4, #4]
 80021fc:	4368      	muls	r0, r5
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fbb0 f7f3 	udiv	r7, r0, r3
 8002204:	f7ff fcb0 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002208:	6863      	ldr	r3, [r4, #4]
 800220a:	4368      	muls	r0, r5
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002212:	fbb3 f3f9 	udiv	r3, r3, r9
 8002216:	fb09 7313 	mls	r3, r9, r3, r7
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	3332      	adds	r3, #50	; 0x32
 800221e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002228:	f7ff fc9e 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 800222c:	6862      	ldr	r2, [r4, #4]
 800222e:	4368      	muls	r0, r5
 8002230:	0052      	lsls	r2, r2, #1
 8002232:	fbb0 faf2 	udiv	sl, r0, r2
 8002236:	f7ff fc97 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800223a:	6863      	ldr	r3, [r4, #4]
 800223c:	4368      	muls	r0, r5
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fbb0 f3f3 	udiv	r3, r0, r3
 8002244:	fbb3 f3f9 	udiv	r3, r3, r9
 8002248:	fb09 a313 	mls	r3, r9, r3, sl
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	3332      	adds	r3, #50	; 0x32
 8002250:	fbb3 f3f9 	udiv	r3, r3, r9
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800225a:	443b      	add	r3, r7
 800225c:	60b3      	str	r3, [r6, #8]
 800225e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002262:	f7ff fc71 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002266:	2519      	movs	r5, #25
 8002268:	fb05 f300 	mul.w	r3, r5, r0
 800226c:	6860      	ldr	r0, [r4, #4]
 800226e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002272:	0040      	lsls	r0, r0, #1
 8002274:	fbb3 f3f0 	udiv	r3, r3, r0
 8002278:	fbb3 f3f9 	udiv	r3, r3, r9
 800227c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002280:	f7ff fc62 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002284:	6863      	ldr	r3, [r4, #4]
 8002286:	4368      	muls	r0, r5
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fbb0 f7f3 	udiv	r7, r0, r3
 800228e:	f7ff fc5b 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002292:	6863      	ldr	r3, [r4, #4]
 8002294:	4368      	muls	r0, r5
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fbb0 f3f3 	udiv	r3, r0, r3
 800229c:	fbb3 f3f9 	udiv	r3, r3, r9
 80022a0:	fb09 7313 	mls	r3, r9, r3, r7
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	3332      	adds	r3, #50	; 0x32
 80022a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80022b2:	f7ff fc49 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 80022b6:	6862      	ldr	r2, [r4, #4]
 80022b8:	4368      	muls	r0, r5
 80022ba:	0052      	lsls	r2, r2, #1
 80022bc:	fbb0 faf2 	udiv	sl, r0, r2
 80022c0:	f7ff fc42 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 80022c4:	e7b9      	b.n	800223a <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022c6:	429e      	cmp	r6, r3
 80022c8:	d002      	beq.n	80022d0 <UART_SetConfig+0x148>
 80022ca:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <UART_SetConfig+0x230>)
 80022cc:	429e      	cmp	r6, r3
 80022ce:	d140      	bne.n	8002352 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022d0:	f7ff fc4a 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 80022d4:	6867      	ldr	r7, [r4, #4]
 80022d6:	2519      	movs	r5, #25
 80022d8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80022dc:	fb05 f300 	mul.w	r3, r5, r0
 80022e0:	00bf      	lsls	r7, r7, #2
 80022e2:	fbb3 f3f7 	udiv	r3, r3, r7
 80022e6:	fbb3 f3f9 	udiv	r3, r3, r9
 80022ea:	011f      	lsls	r7, r3, #4
 80022ec:	f7ff fc3c 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 80022f0:	6863      	ldr	r3, [r4, #4]
 80022f2:	4368      	muls	r0, r5
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	fbb0 f8f3 	udiv	r8, r0, r3
 80022fa:	f7ff fc35 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 80022fe:	6863      	ldr	r3, [r4, #4]
 8002300:	4368      	muls	r0, r5
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fbb0 f3f3 	udiv	r3, r0, r3
 8002308:	fbb3 f3f9 	udiv	r3, r3, r9
 800230c:	fb09 8313 	mls	r3, r9, r3, r8
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	3332      	adds	r3, #50	; 0x32
 8002314:	fbb3 f3f9 	udiv	r3, r3, r9
 8002318:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800231c:	f7ff fc24 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002320:	6862      	ldr	r2, [r4, #4]
 8002322:	4368      	muls	r0, r5
 8002324:	0092      	lsls	r2, r2, #2
 8002326:	fbb0 faf2 	udiv	sl, r0, r2
 800232a:	f7ff fc1d 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800232e:	6863      	ldr	r3, [r4, #4]
 8002330:	4368      	muls	r0, r5
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fbb0 f3f3 	udiv	r3, r0, r3
 8002338:	fbb3 f3f9 	udiv	r3, r3, r9
 800233c:	fb09 a313 	mls	r3, r9, r3, sl
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	3332      	adds	r3, #50	; 0x32
 8002344:	fbb3 f3f9 	udiv	r3, r3, r9
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	ea43 0308 	orr.w	r3, r3, r8
 8002350:	e783      	b.n	800225a <UART_SetConfig+0xd2>
 8002352:	f7ff fbf9 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002356:	6867      	ldr	r7, [r4, #4]
 8002358:	2519      	movs	r5, #25
 800235a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800235e:	fb05 f300 	mul.w	r3, r5, r0
 8002362:	00bf      	lsls	r7, r7, #2
 8002364:	fbb3 f3f7 	udiv	r3, r3, r7
 8002368:	fbb3 f3f9 	udiv	r3, r3, r9
 800236c:	011f      	lsls	r7, r3, #4
 800236e:	f7ff fbeb 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002372:	6863      	ldr	r3, [r4, #4]
 8002374:	4368      	muls	r0, r5
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	fbb0 f8f3 	udiv	r8, r0, r3
 800237c:	f7ff fbe4 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002380:	6863      	ldr	r3, [r4, #4]
 8002382:	4368      	muls	r0, r5
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	fbb3 f3f9 	udiv	r3, r3, r9
 800238e:	fb09 8313 	mls	r3, r9, r3, r8
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	3332      	adds	r3, #50	; 0x32
 8002396:	fbb3 f3f9 	udiv	r3, r3, r9
 800239a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800239e:	f7ff fbd3 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 80023a2:	6862      	ldr	r2, [r4, #4]
 80023a4:	4368      	muls	r0, r5
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	fbb0 faf2 	udiv	sl, r0, r2
 80023ac:	f7ff fbcc 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 80023b0:	e7bd      	b.n	800232e <UART_SetConfig+0x1a6>
 80023b2:	bf00      	nop
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40011400 	.word	0x40011400

080023bc <HAL_HalfDuplex_Init>:
{
 80023bc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80023be:	4604      	mov	r4, r0
 80023c0:	b360      	cbz	r0, 800241c <HAL_HalfDuplex_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80023c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023ca:	b91b      	cbnz	r3, 80023d4 <HAL_HalfDuplex_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023cc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80023d0:	f001 f99c 	bl	800370c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80023d4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023d6:	2324      	movs	r3, #36	; 0x24
 80023d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80023dc:	68d3      	ldr	r3, [r2, #12]
 80023de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023e2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7ff fecf 	bl	8002188 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80023fa:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	f042 0208 	orr.w	r2, r2, #8
 8002402:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800240a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800240e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002410:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002412:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002416:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800241a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800241c:	2001      	movs	r0, #1
}
 800241e:	bd10      	pop	{r4, pc}

08002420 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002424:	680a      	ldr	r2, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800242a:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800242e:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002432:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002434:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002436:	fa32 f304 	lsrs.w	r3, r2, r4
 800243a:	d10d      	bne.n	8002458 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800243c:	684b      	ldr	r3, [r1, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d806      	bhi.n	8002452 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002444:	6843      	ldr	r3, [r0, #4]
 8002446:	68c9      	ldr	r1, [r1, #12]
 8002448:	ea23 0302 	bic.w	r3, r3, r2
 800244c:	434a      	muls	r2, r1
 800244e:	431a      	orrs	r2, r3
 8002450:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8002452:	2000      	movs	r0, #0
 8002454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002458:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 800245c:	4013      	ands	r3, r2
 800245e:	d069      	beq.n	8002534 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002460:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002464:	f8d0 9000 	ldr.w	r9, [r0]
 8002468:	fa93 fca3 	rbit	ip, r3
 800246c:	fabc fc8c 	clz	ip, ip
 8002470:	fa93 f6a3 	rbit	r6, r3
 8002474:	fab6 f686 	clz	r6, r6
 8002478:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800247c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8002480:	0076      	lsls	r6, r6, #1
 8002482:	ea29 0c0c 	bic.w	ip, r9, ip
 8002486:	fa08 f606 	lsl.w	r6, r8, r6
 800248a:	ea4c 0606 	orr.w	r6, ip, r6
 800248e:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002490:	f108 36ff 	add.w	r6, r8, #4294967295
 8002494:	2e01      	cmp	r6, #1
 8002496:	d816      	bhi.n	80024c6 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002498:	6886      	ldr	r6, [r0, #8]
 800249a:	fa93 fca3 	rbit	ip, r3
 800249e:	fabc fc8c 	clz	ip, ip
 80024a2:	fa93 f9a3 	rbit	r9, r3
 80024a6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80024aa:	fa05 fc0c 	lsl.w	ip, r5, ip
 80024ae:	ea26 0c0c 	bic.w	ip, r6, ip
 80024b2:	fab9 f989 	clz	r9, r9
 80024b6:	688e      	ldr	r6, [r1, #8]
 80024b8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80024bc:	fa06 f609 	lsl.w	r6, r6, r9
 80024c0:	ea4c 0606 	orr.w	r6, ip, r6
 80024c4:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80024c6:	68c6      	ldr	r6, [r0, #12]
 80024c8:	fa93 fca3 	rbit	ip, r3
 80024cc:	fabc fc8c 	clz	ip, ip
 80024d0:	fa93 f9a3 	rbit	r9, r3
 80024d4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80024d8:	fa05 fc0c 	lsl.w	ip, r5, ip
 80024dc:	ea26 0c0c 	bic.w	ip, r6, ip
 80024e0:	fab9 f989 	clz	r9, r9
 80024e4:	690e      	ldr	r6, [r1, #16]
 80024e6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80024ea:	fa06 f609 	lsl.w	r6, r6, r9
 80024ee:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80024f2:	f1b8 0f02 	cmp.w	r8, #2
 80024f6:	60c6      	str	r6, [r0, #12]
 80024f8:	d11c      	bne.n	8002534 <LL_GPIO_Init+0x114>
 80024fa:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80024fe:	fab6 f686 	clz	r6, r6
 8002502:	2e07      	cmp	r6, #7
 8002504:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8002508:	dc16      	bgt.n	8002538 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800250a:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800250e:	fa93 f6a3 	rbit	r6, r3
 8002512:	fab6 f686 	clz	r6, r6
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	00b6      	lsls	r6, r6, #2
 8002520:	fa07 f606 	lsl.w	r6, r7, r6
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	ea28 0606 	bic.w	r6, r8, r6
 800252a:	fa0c fc03 	lsl.w	ip, ip, r3
 800252e:	ea46 060c 	orr.w	r6, r6, ip
 8002532:	6206      	str	r6, [r0, #32]
    pinpos++;
 8002534:	3401      	adds	r4, #1
 8002536:	e77e      	b.n	8002436 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002538:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	fa93 f6a3 	rbit	r6, r3
 8002542:	fab6 f686 	clz	r6, r6
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	00b6      	lsls	r6, r6, #2
 8002550:	fa07 f606 	lsl.w	r6, r7, r6
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	ea28 0606 	bic.w	r6, r8, r6
 800255a:	fa0c f303 	lsl.w	r3, ip, r3
 800255e:	4333      	orrs	r3, r6
 8002560:	6243      	str	r3, [r0, #36]	; 0x24
 8002562:	e7e7      	b.n	8002534 <LL_GPIO_Init+0x114>

08002564 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <RCC_GetHCLKClockFreq+0x14>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800256e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002570:	40d8      	lsrs	r0, r3
 8002572:	4770      	bx	lr
 8002574:	40023800 	.word	0x40023800
 8002578:	0800aac8 	.word	0x0800aac8

0800257c <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <RCC_GetPCLK1ClockFreq+0x14>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002586:	5cd3      	ldrb	r3, [r2, r3]
}
 8002588:	40d8      	lsrs	r0, r3
 800258a:	4770      	bx	lr
 800258c:	40023800 	.word	0x40023800
 8002590:	0800aad8 	.word	0x0800aad8

08002594 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002596:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <RCC_GetPCLK2ClockFreq+0x14>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800259e:	5cd3      	ldrb	r3, [r2, r3]
}
 80025a0:	40d8      	lsrs	r0, r3
 80025a2:	4770      	bx	lr
 80025a4:	40023800 	.word	0x40023800
 80025a8:	0800aad8 	.word	0x0800aad8

080025ac <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <RCC_PLL_GetFreqDomain_SYS+0x40>)
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80025ae:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 80025b0:	6859      	ldr	r1, [r3, #4]
{
 80025b2:	b510      	push	{r4, lr}
      pllinputfreq = HSI_VALUE;
 80025b4:	4c0f      	ldr	r4, [pc, #60]	; (80025f4 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 80025b6:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80025ba:	2900      	cmp	r1, #0
 80025bc:	bf08      	it	eq
 80025be:	4622      	moveq	r2, r4
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80025c0:	2808      	cmp	r0, #8
 80025c2:	d110      	bne.n	80025e6 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80025c4:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80025c6:	6858      	ldr	r0, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80025c8:	685b      	ldr	r3, [r3, #4]
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80025ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80025ce:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80025d2:	3301      	adds	r3, #1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80025d4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fbb2 f2f1 	udiv	r2, r2, r1
 80025de:	4350      	muls	r0, r2
 80025e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80025e4:	bd10      	pop	{r4, pc}
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80025e6:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 80025e8:	bd10      	pop	{r4, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	00b71b00 	.word	0x00b71b00
 80025f4:	00f42400 	.word	0x00f42400

080025f8 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <RCC_GetSystemClockFreq+0x1c>)
 80025fa:	6898      	ldr	r0, [r3, #8]
 80025fc:	f000 000c 	and.w	r0, r0, #12
  switch (LL_RCC_GetSysClkSource())
 8002600:	2804      	cmp	r0, #4
 8002602:	d003      	beq.n	800260c <RCC_GetSystemClockFreq+0x14>
 8002604:	2808      	cmp	r0, #8
 8002606:	d003      	beq.n	8002610 <RCC_GetSystemClockFreq+0x18>
      frequency = HSI_VALUE;
 8002608:	4803      	ldr	r0, [pc, #12]	; (8002618 <RCC_GetSystemClockFreq+0x20>)
}
 800260a:	4770      	bx	lr
      frequency = HSE_VALUE;
 800260c:	4803      	ldr	r0, [pc, #12]	; (800261c <RCC_GetSystemClockFreq+0x24>)
 800260e:	4770      	bx	lr
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002610:	f7ff bfcc 	b.w	80025ac <RCC_PLL_GetFreqDomain_SYS>
 8002614:	40023800 	.word	0x40023800
 8002618:	00f42400 	.word	0x00f42400
 800261c:	00b71b00 	.word	0x00b71b00

08002620 <LL_RCC_GetSystemClocksFreq>:
{
 8002620:	b510      	push	{r4, lr}
 8002622:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002624:	f7ff ffe8 	bl	80025f8 <RCC_GetSystemClockFreq>
 8002628:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800262a:	f7ff ff9b 	bl	8002564 <RCC_GetHCLKClockFreq>
 800262e:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002630:	f7ff ffa4 	bl	800257c <RCC_GetPCLK1ClockFreq>
 8002634:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002636:	6860      	ldr	r0, [r4, #4]
 8002638:	f7ff ffac 	bl	8002594 <RCC_GetPCLK2ClockFreq>
 800263c:	60e0      	str	r0, [r4, #12]
 800263e:	bd10      	pop	{r4, pc}

08002640 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002640:	4a2f      	ldr	r2, [pc, #188]	; (8002700 <LL_TIM_Init+0xc0>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002642:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002644:	4290      	cmp	r0, r2
 8002646:	d012      	beq.n	800266e <LL_TIM_Init+0x2e>
 8002648:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800264c:	d00f      	beq.n	800266e <LL_TIM_Init+0x2e>
 800264e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002652:	4290      	cmp	r0, r2
 8002654:	d00b      	beq.n	800266e <LL_TIM_Init+0x2e>
 8002656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800265a:	4290      	cmp	r0, r2
 800265c:	d007      	beq.n	800266e <LL_TIM_Init+0x2e>
 800265e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002662:	4290      	cmp	r0, r2
 8002664:	d003      	beq.n	800266e <LL_TIM_Init+0x2e>
 8002666:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800266a:	4290      	cmp	r0, r2
 800266c:	d119      	bne.n	80026a2 <LL_TIM_Init+0x62>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800266e:	684a      	ldr	r2, [r1, #4]
 8002670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002674:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002676:	4a22      	ldr	r2, [pc, #136]	; (8002700 <LL_TIM_Init+0xc0>)
 8002678:	4290      	cmp	r0, r2
 800267a:	d029      	beq.n	80026d0 <LL_TIM_Init+0x90>
 800267c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002680:	d026      	beq.n	80026d0 <LL_TIM_Init+0x90>
 8002682:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002686:	4290      	cmp	r0, r2
 8002688:	d022      	beq.n	80026d0 <LL_TIM_Init+0x90>
 800268a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800268e:	4290      	cmp	r0, r2
 8002690:	d01e      	beq.n	80026d0 <LL_TIM_Init+0x90>
 8002692:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002696:	4290      	cmp	r0, r2
 8002698:	d01a      	beq.n	80026d0 <LL_TIM_Init+0x90>
 800269a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800269e:	4290      	cmp	r0, r2
 80026a0:	d016      	beq.n	80026d0 <LL_TIM_Init+0x90>
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <LL_TIM_Init+0xc4>)
 80026a4:	4290      	cmp	r0, r2
 80026a6:	d013      	beq.n	80026d0 <LL_TIM_Init+0x90>
 80026a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ac:	4290      	cmp	r0, r2
 80026ae:	d00f      	beq.n	80026d0 <LL_TIM_Init+0x90>
 80026b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026b4:	4290      	cmp	r0, r2
 80026b6:	d00b      	beq.n	80026d0 <LL_TIM_Init+0x90>
 80026b8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80026bc:	4290      	cmp	r0, r2
 80026be:	d007      	beq.n	80026d0 <LL_TIM_Init+0x90>
 80026c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026c4:	4290      	cmp	r0, r2
 80026c6:	d003      	beq.n	80026d0 <LL_TIM_Init+0x90>
 80026c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026cc:	4290      	cmp	r0, r2
 80026ce:	d103      	bne.n	80026d8 <LL_TIM_Init+0x98>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80026d0:	68ca      	ldr	r2, [r1, #12]
 80026d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d6:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80026d8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80026da:	688b      	ldr	r3, [r1, #8]
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 80026dc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80026de:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80026e0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <LL_TIM_Init+0xc0>)
 80026e4:	4298      	cmp	r0, r3
 80026e6:	d003      	beq.n	80026f0 <LL_TIM_Init+0xb0>
 80026e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ec:	4298      	cmp	r0, r3
 80026ee:	d101      	bne.n	80026f4 <LL_TIM_Init+0xb4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80026f0:	7c0b      	ldrb	r3, [r1, #16]
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80026f2:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80026f4:	6943      	ldr	r3, [r0, #20]
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80026fc:	2000      	movs	r0, #0
 80026fe:	4770      	bx	lr
 8002700:	40010000 	.word	0x40010000
 8002704:	40014000 	.word	0x40014000

08002708 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8002708:	2910      	cmp	r1, #16
{
 800270a:	b530      	push	{r4, r5, lr}
  switch (Channel)
 800270c:	d066      	beq.n	80027dc <LL_TIM_OC_Init+0xd4>
 800270e:	d803      	bhi.n	8002718 <LL_TIM_OC_Init+0x10>
 8002710:	2901      	cmp	r1, #1
 8002712:	d02f      	beq.n	8002774 <LL_TIM_OC_Init+0x6c>
  ErrorStatus result = ERROR;
 8002714:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 8002716:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 8002718:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800271c:	f000 8094 	beq.w	8002848 <LL_TIM_OC_Init+0x140>
 8002720:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002724:	d1f6      	bne.n	8002714 <LL_TIM_OC_Init+0xc>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002726:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002728:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800272a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800272e:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002730:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002732:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002734:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002736:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800273a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800273e:	6915      	ldr	r5, [r2, #16]
 8002740:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002744:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002748:	6855      	ldr	r5, [r2, #4]
 800274a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800274e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002752:	4d58      	ldr	r5, [pc, #352]	; (80028b4 <LL_TIM_OC_Init+0x1ac>)
 8002754:	42a8      	cmp	r0, r5
 8002756:	d003      	beq.n	8002760 <LL_TIM_OC_Init+0x58>
 8002758:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800275c:	42a8      	cmp	r0, r5
 800275e:	d104      	bne.n	800276a <LL_TIM_OC_Init+0x62>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002760:	6995      	ldr	r5, [r2, #24]
 8002762:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8002766:	ea44 1485 	orr.w	r4, r4, r5, lsl #6

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800276a:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800276c:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800276e:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002770:	6402      	str	r2, [r0, #64]	; 0x40
 8002772:	e030      	b.n	80027d6 <LL_TIM_OC_Init+0xce>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002774:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002776:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800277e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002780:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002782:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002784:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002788:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800278a:	6915      	ldr	r5, [r2, #16]
 800278c:	f023 0302 	bic.w	r3, r3, #2
 8002790:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002792:	6855      	ldr	r5, [r2, #4]
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800279a:	4d46      	ldr	r5, [pc, #280]	; (80028b4 <LL_TIM_OC_Init+0x1ac>)
 800279c:	42a8      	cmp	r0, r5
 800279e:	d003      	beq.n	80027a8 <LL_TIM_OC_Init+0xa0>
 80027a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027a4:	42a8      	cmp	r0, r5
 80027a6:	d112      	bne.n	80027ce <LL_TIM_OC_Init+0xc6>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80027a8:	6955      	ldr	r5, [r2, #20]
 80027aa:	f023 0308 	bic.w	r3, r3, #8
 80027ae:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80027b2:	6895      	ldr	r5, [r2, #8]
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80027bc:	6995      	ldr	r5, [r2, #24]
 80027be:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80027c2:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80027c4:	69d5      	ldr	r5, [r2, #28]
 80027c6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80027ca:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80027ce:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80027d0:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80027d2:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80027d4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027d6:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80027d8:	2000      	movs	r0, #0
      break;
 80027da:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80027dc:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80027de:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80027e0:	f023 0310 	bic.w	r3, r3, #16
 80027e4:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80027e6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80027e8:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80027ea:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80027ec:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80027f0:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80027f4:	6915      	ldr	r5, [r2, #16]
 80027f6:	f023 0320 	bic.w	r3, r3, #32
 80027fa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80027fe:	6855      	ldr	r5, [r2, #4]
 8002800:	f023 0310 	bic.w	r3, r3, #16
 8002804:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002808:	4d2a      	ldr	r5, [pc, #168]	; (80028b4 <LL_TIM_OC_Init+0x1ac>)
 800280a:	42a8      	cmp	r0, r5
 800280c:	d003      	beq.n	8002816 <LL_TIM_OC_Init+0x10e>
 800280e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002812:	42a8      	cmp	r0, r5
 8002814:	d113      	bne.n	800283e <LL_TIM_OC_Init+0x136>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002816:	6955      	ldr	r5, [r2, #20]
 8002818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002820:	6895      	ldr	r5, [r2, #8]
 8002822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002826:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800282a:	6995      	ldr	r5, [r2, #24]
 800282c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002830:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002834:	69d5      	ldr	r5, [r2, #28]
 8002836:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800283a:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800283e:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002840:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002842:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002844:	6382      	str	r2, [r0, #56]	; 0x38
 8002846:	e7c6      	b.n	80027d6 <LL_TIM_OC_Init+0xce>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002848:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800284a:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800284c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002850:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002852:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002854:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002856:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002858:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800285c:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800285e:	6915      	ldr	r5, [r2, #16]
 8002860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002864:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002868:	6855      	ldr	r5, [r2, #4]
 800286a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800286e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002872:	4d10      	ldr	r5, [pc, #64]	; (80028b4 <LL_TIM_OC_Init+0x1ac>)
 8002874:	42a8      	cmp	r0, r5
 8002876:	d003      	beq.n	8002880 <LL_TIM_OC_Init+0x178>
 8002878:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800287c:	42a8      	cmp	r0, r5
 800287e:	d113      	bne.n	80028a8 <LL_TIM_OC_Init+0x1a0>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002880:	6955      	ldr	r5, [r2, #20]
 8002882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002886:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800288a:	6895      	ldr	r5, [r2, #8]
 800288c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002890:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002894:	6995      	ldr	r5, [r2, #24]
 8002896:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800289a:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800289e:	69d5      	ldr	r5, [r2, #28]
 80028a0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80028a4:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80028a8:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80028aa:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80028ac:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80028ae:	63c2      	str	r2, [r0, #60]	; 0x3c
 80028b0:	e791      	b.n	80027d6 <LL_TIM_OC_Init+0xce>
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000

080028b8 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80028b8:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80028ba:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80028bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80028be:	684a      	ldr	r2, [r1, #4]
 80028c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80028c6:	680a      	ldr	r2, [r1, #0]
 80028c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80028ce:	89ca      	ldrh	r2, [r1, #14]
 80028d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80028d6:	690a      	ldr	r2, [r1, #16]
 80028d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80028de:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80028e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028e4:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80028e6:	6443      	str	r3, [r0, #68]	; 0x44
}
 80028e8:	2000      	movs	r0, #0
 80028ea:	4770      	bx	lr

080028ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80028ec:	b530      	push	{r4, r5, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80028ee:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80028f0:	049b      	lsls	r3, r3, #18
{
 80028f2:	b085      	sub	sp, #20
 80028f4:	4604      	mov	r4, r0
 80028f6:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80028f8:	d502      	bpl.n	8002900 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 80028fa:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80028fc:	b005      	add	sp, #20
 80028fe:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8002900:	684b      	ldr	r3, [r1, #4]
 8002902:	68c9      	ldr	r1, [r1, #12]
 8002904:	68c2      	ldr	r2, [r0, #12]
 8002906:	430b      	orrs	r3, r1
 8002908:	6929      	ldr	r1, [r5, #16]
 800290a:	430b      	orrs	r3, r1
 800290c:	69a9      	ldr	r1, [r5, #24]
 800290e:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002912:	430b      	orrs	r3, r1
 8002914:	f022 020c 	bic.w	r2, r2, #12
 8002918:	4313      	orrs	r3, r2
 800291a:	60c3      	str	r3, [r0, #12]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800291c:	6903      	ldr	r3, [r0, #16]
 800291e:	68aa      	ldr	r2, [r5, #8]
 8002920:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002924:	4313      	orrs	r3, r2
 8002926:	6103      	str	r3, [r0, #16]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002928:	6943      	ldr	r3, [r0, #20]
 800292a:	696a      	ldr	r2, [r5, #20]
 800292c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002930:	4313      	orrs	r3, r2
 8002932:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002934:	4668      	mov	r0, sp
 8002936:	f7ff fe73 	bl	8002620 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800293a:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <LL_USART_Init+0xec>)
 800293c:	429c      	cmp	r4, r3
 800293e:	d125      	bne.n	800298c <LL_USART_Init+0xa0>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002940:	9b03      	ldr	r3, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0d9      	beq.n	80028fa <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8002946:	6829      	ldr	r1, [r5, #0]
 8002948:	2900      	cmp	r1, #0
 800294a:	d0d6      	beq.n	80028fa <LL_USART_Init+0xe>
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800294c:	69aa      	ldr	r2, [r5, #24]
 800294e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002952:	f04f 0219 	mov.w	r2, #25
 8002956:	d12e      	bne.n	80029b6 <LL_USART_Init+0xca>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002958:	435a      	muls	r2, r3
 800295a:	0049      	lsls	r1, r1, #1
 800295c:	fbb2 f2f1 	udiv	r2, r2, r1
 8002960:	2164      	movs	r1, #100	; 0x64
 8002962:	fbb2 f0f1 	udiv	r0, r2, r1
 8002966:	fb01 2310 	mls	r3, r1, r0, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	3332      	adds	r3, #50	; 0x32
 800296e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002972:	b29b      	uxth	r3, r3
 8002974:	f003 0207 	and.w	r2, r3, #7
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800297e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002982:	4413      	add	r3, r2
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002984:	b29b      	uxth	r3, r3
 8002986:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8002988:	2000      	movs	r0, #0
 800298a:	e7b7      	b.n	80028fc <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <LL_USART_Init+0xf0>)
 800298e:	429c      	cmp	r4, r3
 8002990:	d101      	bne.n	8002996 <LL_USART_Init+0xaa>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002992:	9b02      	ldr	r3, [sp, #8]
 8002994:	e7d5      	b.n	8002942 <LL_USART_Init+0x56>
    else if (USARTx == USART3)
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <LL_USART_Init+0xf4>)
 8002998:	429c      	cmp	r4, r3
 800299a:	d0fa      	beq.n	8002992 <LL_USART_Init+0xa6>
    else if (USARTx == USART6)
 800299c:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 80029a0:	429c      	cmp	r4, r3
 80029a2:	d0cd      	beq.n	8002940 <LL_USART_Init+0x54>
    else if (USARTx == UART4)
 80029a4:	f5a3 4348 	sub.w	r3, r3, #51200	; 0xc800
 80029a8:	429c      	cmp	r4, r3
 80029aa:	d0f2      	beq.n	8002992 <LL_USART_Init+0xa6>
    else if (USARTx == UART5)
 80029ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029b0:	429c      	cmp	r4, r3
 80029b2:	d1a2      	bne.n	80028fa <LL_USART_Init+0xe>
 80029b4:	e7ed      	b.n	8002992 <LL_USART_Init+0xa6>
 80029b6:	4353      	muls	r3, r2
 80029b8:	2264      	movs	r2, #100	; 0x64
 80029ba:	0089      	lsls	r1, r1, #2
 80029bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80029c4:	fb02 3311 	mls	r3, r2, r1, r3
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	3332      	adds	r3, #50	; 0x32
 80029cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80029d0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80029d4:	e7d6      	b.n	8002984 <LL_USART_Init+0x98>
 80029d6:	bf00      	nop
 80029d8:	40011000 	.word	0x40011000
 80029dc:	40004400 	.word	0x40004400
 80029e0:	40004800 	.word	0x40004800

080029e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80029e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e8:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ea:	2214      	movs	r2, #20
 80029ec:	2100      	movs	r1, #0
 80029ee:	a807      	add	r0, sp, #28
 80029f0:	f006 f99f 	bl	8008d32 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029f4:	2400      	movs	r4, #0
 80029f6:	4b4e      	ldr	r3, [pc, #312]	; (8002b30 <MX_GPIO_Init+0x14c>)
 80029f8:	9401      	str	r4, [sp, #4]
 80029fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI_SEL2_Pin|SPI_SEL3_Pin|I2C_OE_Pin|SPI_SEL0_Pin 
 80029fc:	4f4d      	ldr	r7, [pc, #308]	; (8002b34 <MX_GPIO_Init+0x150>)
                          |SPI_SEL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_X_Pin|DIR_Y_Pin|DIR_Z_Pin|DIR_A_Pin 
 80029fe:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8002b3c <MX_GPIO_Init+0x158>
                          |DIR_B_Pin|DIR_C_Pin|STEP_ENABLE_Pin|STEP_X_Pin 
                          |STEP_Y_Pin|STEP_Z_Pin|STEP_A_Pin|STEP_B_Pin 
                          |STEP_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AUX_5_Pin|AUX_6_Pin|AUX_7_Pin|AUX_8_Pin 
 8002a02:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8002b40 <MX_GPIO_Init+0x15c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a06:	f042 0210 	orr.w	r2, r2, #16
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0e:	f002 0210 	and.w	r2, r2, #16
 8002a12:	9201      	str	r2, [sp, #4]
 8002a14:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a16:	9402      	str	r4, [sp, #8]
 8002a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a22:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002a26:	9202      	str	r2, [sp, #8]
 8002a28:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	9403      	str	r4, [sp, #12]
 8002a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
 8002a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a36:	f002 0201 	and.w	r2, r2, #1
 8002a3a:	9203      	str	r2, [sp, #12]
 8002a3c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	9404      	str	r4, [sp, #16]
 8002a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a42:	f042 0202 	orr.w	r2, r2, #2
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
 8002a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4a:	f002 0202 	and.w	r2, r2, #2
 8002a4e:	9204      	str	r2, [sp, #16]
 8002a50:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a52:	9405      	str	r4, [sp, #20]
 8002a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a56:	f042 0208 	orr.w	r2, r2, #8
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5e:	f002 0208 	and.w	r2, r2, #8
 8002a62:	9205      	str	r2, [sp, #20]
 8002a64:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a66:	9406      	str	r4, [sp, #24]
 8002a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6a:	f042 0204 	orr.w	r2, r2, #4
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, SPI_SEL2_Pin|SPI_SEL3_Pin|I2C_OE_Pin|SPI_SEL0_Pin 
 8002a78:	4622      	mov	r2, r4
 8002a7a:	4638      	mov	r0, r7
 8002a7c:	211f      	movs	r1, #31
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, SPI_SEL2_Pin|SPI_SEL3_Pin|I2C_OE_Pin|SPI_SEL0_Pin 
 8002a80:	f7fe fd62 	bl	8001548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIR_X_Pin|DIR_Y_Pin|DIR_Z_Pin|DIR_A_Pin 
 8002a84:	4622      	mov	r2, r4
 8002a86:	4650      	mov	r0, sl
 8002a88:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8002a8c:	f7fe fd5c 	bl	8001548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, AUX_5_Pin|AUX_6_Pin|AUX_7_Pin|AUX_8_Pin 
 8002a90:	4622      	mov	r2, r4
 8002a92:	4648      	mov	r0, r9
 8002a94:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002a98:	f7fe fd56 	bl	8001548 <HAL_GPIO_WritePin>
                          |AUX_1_Pin|AUX_2_Pin|AUX_3_Pin|AUX_4_Pin 
                          |SPIN_DIR_Pin|SPIN_EN_Pin|COOL_MIST_Pin|COOL_FLOOD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SPI_SEL2_Pin|SPI_SEL3_Pin|SPI_SEL0_Pin|SPI_SEL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = SPI_SEL2_Pin|SPI_SEL3_Pin|SPI_SEL0_Pin|SPI_SEL1_Pin;
 8002a9e:	230f      	movs	r3, #15
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2603      	movs	r6, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aa2:	a907      	add	r1, sp, #28
 8002aa4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SPI_SEL2_Pin|SPI_SEL3_Pin|SPI_SEL0_Pin|SPI_SEL1_Pin;
 8002aa6:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C_OE_Pin;
 8002aa8:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aac:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ab2:	f7fe fc69 	bl	8001388 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(I2C_OE_GPIO_Port, &GPIO_InitStruct);
 8002ab6:	a907      	add	r1, sp, #28
 8002ab8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = I2C_OE_Pin;
 8002aba:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002abe:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(I2C_OE_GPIO_Port, &GPIO_InitStruct);
 8002ac4:	f7fe fc60 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = DIR_X_Pin|DIR_Y_Pin|DIR_Z_Pin|DIR_A_Pin 
 8002ac8:	f641 73ff 	movw	r3, #8191	; 0x1fff
                          |STEP_Y_Pin|STEP_Z_Pin|STEP_A_Pin|STEP_B_Pin 
                          |STEP_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	a907      	add	r1, sp, #28
 8002ace:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = DIR_X_Pin|DIR_Y_Pin|DIR_Z_Pin|DIR_A_Pin 
 8002ad0:	9307      	str	r3, [sp, #28]
                           PBPin */
  GPIO_InitStruct.Pin = CON_FEED_HOLD_Pin|CON_CYCLE_START_Pin|CON_RESET_Pin|INT_LIMITS_Pin 
                          |CON_SAFETY_DOOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad2:	f5a7 6740 	sub.w	r7, r7, #3072	; 0xc00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f7fe fc54 	bl	8001388 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CON_FEED_HOLD_Pin|CON_CYCLE_START_Pin|CON_RESET_Pin|INT_LIMITS_Pin 
 8002ae0:	f240 430f 	movw	r3, #1039	; 0x40f
 8002ae4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MX_GPIO_Init+0x154>)
 8002aea:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aec:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aee:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	f7fe fc4a 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = AUX_5_Pin|AUX_6_Pin|AUX_7_Pin|AUX_8_Pin 
 8002af4:	f640 73ff 	movw	r3, #4095	; 0xfff
                          |AUX_1_Pin|AUX_2_Pin|AUX_3_Pin|AUX_4_Pin 
                          |SPIN_DIR_Pin|SPIN_EN_Pin|COOL_MIST_Pin|COOL_FLOOD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af8:	a907      	add	r1, sp, #28
 8002afa:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = AUX_5_Pin|AUX_6_Pin|AUX_7_Pin|AUX_8_Pin 
 8002afc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afe:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b04:	f7fe fc40 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PROBE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(PROBE_GPIO_Port, &GPIO_InitStruct);
 8002b08:	a907      	add	r1, sp, #28
 8002b0a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = PROBE_Pin;
 8002b0c:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b10:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b12:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(PROBE_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f7fe fc38 	bl	8001388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b18:	4622      	mov	r2, r4
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	2028      	movs	r0, #40	; 0x28
 8002b1e:	f7fe faa5 	bl	800106c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b22:	2028      	movs	r0, #40	; 0x28
 8002b24:	f7fe fad6 	bl	80010d4 <HAL_NVIC_EnableIRQ>

}
 8002b28:	b00c      	add	sp, #48	; 0x30
 8002b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40021000 	.word	0x40021000
 8002b38:	10210000 	.word	0x10210000
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	40020c00 	.word	0x40020c00

08002b44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b44:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002b46:	480c      	ldr	r0, [pc, #48]	; (8002b78 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_I2C1_Init+0x38>)
 8002b4a:	f8df e034 	ldr.w	lr, [pc, #52]	; 8002b80 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8002b52:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b56:	2300      	movs	r3, #0
 8002b58:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b5a:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b5c:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b5e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b60:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b62:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b64:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b66:	f7fe fd01 	bl	800156c <HAL_I2C_Init>
 8002b6a:	b118      	cbz	r0, 8002b74 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8002b6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002b70:	f000 b976 	b.w	8002e60 <Error_Handler>
 8002b74:	bd08      	pop	{r3, pc}
 8002b76:	bf00      	nop
 8002b78:	200038f0 	.word	0x200038f0
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	000186a0 	.word	0x000186a0

08002b84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b84:	b530      	push	{r4, r5, lr}
 8002b86:	4604      	mov	r4, r0
 8002b88:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8a:	2214      	movs	r2, #20
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	a803      	add	r0, sp, #12
 8002b90:	f006 f8cf 	bl	8008d32 <memset>
  if(i2cHandle->Instance==I2C1)
 8002b94:	6822      	ldr	r2, [r4, #0]
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_I2C_MspInit+0x68>)
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d124      	bne.n	8002be6 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9c:	4c14      	ldr	r4, [pc, #80]	; (8002bf0 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9e:	4815      	ldr	r0, [pc, #84]	; (8002bf4 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba0:	2500      	movs	r5, #0
 8002ba2:	9501      	str	r5, [sp, #4]
 8002ba4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	6323      	str	r3, [r4, #48]	; 0x30
 8002bac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bbc:	2312      	movs	r3, #18
 8002bbe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bca:	2304      	movs	r3, #4
 8002bcc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bce:	f7fe fbdb 	bl	8001388 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bd2:	9502      	str	r5, [sp, #8]
 8002bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bda:	6423      	str	r3, [r4, #64]	; 0x40
 8002bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002be6:	b009      	add	sp, #36	; 0x24
 8002be8:	bd30      	pop	{r4, r5, pc}
 8002bea:	bf00      	nop
 8002bec:	40005400 	.word	0x40005400
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020400 	.word	0x40020400

08002bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf8:	b530      	push	{r4, r5, lr}
 8002bfa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfc:	2230      	movs	r2, #48	; 0x30
 8002bfe:	2100      	movs	r1, #0
 8002c00:	a808      	add	r0, sp, #32
 8002c02:	f006 f896 	bl	8008d32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c06:	2100      	movs	r1, #0
 8002c08:	2214      	movs	r2, #20
 8002c0a:	a803      	add	r0, sp, #12
 8002c0c:	f006 f891 	bl	8008d32 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	2400      	movs	r4, #0
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <SystemClock_Config+0x90>)
 8002c14:	9401      	str	r4, [sp, #4]
 8002c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c28:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <SystemClock_Config+0x94>)
 8002c2a:	9402      	str	r4, [sp, #8]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3a:	9302      	str	r3, [sp, #8]
 8002c3c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c46:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c4c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002c4e:	2306      	movs	r3, #6
 8002c50:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c52:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c54:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c56:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c58:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c5e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c60:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c62:	f7fe fd27 	bl	80016b4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c66:	230f      	movs	r3, #15
 8002c68:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c6e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c70:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c76:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c78:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c7a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c7c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c7e:	f7fe fec9 	bl	8001a14 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002c82:	b015      	add	sp, #84	; 0x54
 8002c84:	bd30      	pop	{r4, r5, pc}
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40007000 	.word	0x40007000

08002c90 <main>:
{
 8002c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Init();
 8002c94:	f7fe f998 	bl	8000fc8 <HAL_Init>
  SystemClock_Config();
 8002c98:	f7ff ffae 	bl	8002bf8 <SystemClock_Config>
  MX_GPIO_Init();
 8002c9c:	f7ff fea2 	bl	80029e4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002ca0:	f000 fbbe 	bl	8003420 <MX_TIM3_Init>
  MX_TIM1_Init();
 8002ca4:	f000 faaa 	bl	80031fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8002ca8:	f000 fb5c 	bl	8003364 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002cac:	f000 fcdc 	bl	8003668 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8002cb0:	f000 fc4a 	bl	8003548 <MX_TIM5_Init>
  MX_I2C1_Init();
 8002cb4:	f7ff ff46 	bl	8002b44 <MX_I2C1_Init>
  MX_SPI3_Init();
 8002cb8:	f000 f8d4 	bl	8002e64 <MX_SPI3_Init>
  MX_UART5_Init();
 8002cbc:	f000 fcb8 	bl	8003630 <MX_UART5_Init>
  MX_TIM7_Init();
 8002cc0:	f000 fc80 	bl	80035c4 <MX_TIM7_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc4:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <main+0x138>)
		memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8002cc6:	4f41      	ldr	r7, [pc, #260]	; (8002dcc <main+0x13c>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <main+0x140>)
			memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8002ccc:	4e41      	ldr	r6, [pc, #260]	; (8002dd4 <main+0x144>)
 8002cce:	2400      	movs	r4, #0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd0:	2220      	movs	r2, #32
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd2:	f883 4325 	strb.w	r4, [r3, #805]	; 0x325
{
  /* USART1_IRQn interrupt configuration */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(USART1_IRQn);
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002cd6:	4621      	mov	r1, r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	2006      	movs	r0, #6
 8002cdc:	4622      	mov	r2, r4
 8002cde:	f7fe f9c5 	bl	800106c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ce2:	2006      	movs	r0, #6
 8002ce4:	f7fe f9f6 	bl	80010d4 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002ce8:	4622      	mov	r2, r4
 8002cea:	4621      	mov	r1, r4
 8002cec:	2007      	movs	r0, #7
 8002cee:	f7fe f9bd 	bl	800106c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002cf2:	2007      	movs	r0, #7
 8002cf4:	f7fe f9ee 	bl	80010d4 <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002cf8:	4622      	mov	r2, r4
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	2008      	movs	r0, #8
 8002cfe:	f7fe f9b5 	bl	800106c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002d02:	2008      	movs	r0, #8
 8002d04:	f7fe f9e6 	bl	80010d4 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002d08:	4622      	mov	r2, r4
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	2009      	movs	r0, #9
 8002d0e:	f7fe f9ad 	bl	800106c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002d12:	2009      	movs	r0, #9
 8002d14:	f7fe f9de 	bl	80010d4 <HAL_NVIC_EnableIRQ>
  timing_init();
 8002d18:	f005 fe0a 	bl	8008930 <timing_init>
  uart_init();
 8002d1c:	f005 fe38 	bl	8008990 <uart_init>
  eeprom_init();
 8002d20:	f000 fdb8 	bl	8003894 <eeprom_init>
  serial_init();   // Setup serial baud rate and interrupts
 8002d24:	f004 f818 	bl	8006d58 <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 8002d28:	f004 fb38 	bl	800739c <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 8002d2c:	f004 feb8 	bl	8007aa0 <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 8002d30:	f005 fa48 	bl	80081c4 <system_init>
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8002d34:	2218      	movs	r2, #24
 8002d36:	4621      	mov	r1, r4
 8002d38:	4827      	ldr	r0, [pc, #156]	; (8002dd8 <main+0x148>)
 8002d3a:	f005 fffa 	bl	8008d32 <memset>
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8002d3e:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <main+0x14c>)
    sys.state = STATE_IDLE;
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <main+0x13c>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8002d42:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    sys.state = STATE_IDLE;
 8002d46:	701c      	strb	r4, [r3, #0]
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8002d48:	f012 0f10 	tst.w	r2, #16
 8002d4c:	461c      	mov	r4, r3
 8002d4e:	bf1c      	itt	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	7023      	strbne	r3, [r4, #0]
		memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8002d54:	2500      	movs	r5, #0
 8002d56:	2214      	movs	r2, #20
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4638      	mov	r0, r7
		uint8_t prior_state = sys.state;
 8002d5c:	f894 8000 	ldrb.w	r8, [r4]
		memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8002d60:	f005 ffe7 	bl	8008d32 <memset>
			memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8002d64:	2218      	movs	r2, #24
 8002d66:	2100      	movs	r1, #0
		sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8002d68:	2364      	movs	r3, #100	; 0x64
			memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8002d6a:	4630      	mov	r0, r6
		sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8002d6c:	7223      	strb	r3, [r4, #8]
		sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 8002d6e:	7263      	strb	r3, [r4, #9]
		sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 8002d70:	72a3      	strb	r3, [r4, #10]
		sys.state = prior_state;
 8002d72:	f884 8000 	strb.w	r8, [r4]
			memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8002d76:	f005 ffdc 	bl	8008d32 <memset>
		sys_probe_state = 0;
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <main+0x150>)
 8002d7c:	701d      	strb	r5, [r3, #0]
		sys_rt_exec_state = 0;
 8002d7e:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <main+0x154>)
 8002d80:	701d      	strb	r5, [r3, #0]
		sys_rt_exec_alarm = 0;
 8002d82:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <main+0x158>)
 8002d84:	701d      	strb	r5, [r3, #0]
		sys_rt_exec_motion_override = 0;
 8002d86:	4b19      	ldr	r3, [pc, #100]	; (8002dec <main+0x15c>)
 8002d88:	701d      	strb	r5, [r3, #0]
		sys_rt_exec_accessory_override = 0;
 8002d8a:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <main+0x160>)
 8002d8c:	701d      	strb	r5, [r3, #0]
		serial_reset_read_buffer(); // Clear serial read buffer
 8002d8e:	f004 f873 	bl	8006e78 <serial_reset_read_buffer>
		gc_init(); // Set g-code parser to default state
 8002d92:	f000 fde1 	bl	8003958 <gc_init>
		spindle_init();
 8002d96:	f004 fb33 	bl	8007400 <spindle_init>
		coolant_init();
 8002d9a:	f000 fd09 	bl	80037b0 <coolant_init>
		spi_limits_init();				//-- expansion io based limits, before limits_init()
 8002d9e:	f005 ff89 	bl	8008cb4 <spi_limits_init>
		limits_init();
 8002da2:	f001 fe33 	bl	8004a0c <limits_init>
		probe_init();
 8002da6:	f002 ffe1 	bl	8005d6c <probe_init>
		inoutputs_init();
 8002daa:	f005 fd56 	bl	800885a <inoutputs_init>
		plan_reset(); // Clear block buffer and planner variables
 8002dae:	f002 fc21 	bl	80055f4 <plan_reset>
		st_reset(); // Clear stepper subsystem variables.
 8002db2:	f004 fe2f 	bl	8007a14 <st_reset>
		plan_sync_position();
 8002db6:	f002 feb5 	bl	8005b24 <plan_sync_position>
		gc_sync_position();
 8002dba:	f000 fde3 	bl	8003984 <gc_sync_position>
		report_init_message();
 8002dbe:	f003 fbfd 	bl	80065bc <report_init_message>
		protocol_main_loop();
 8002dc2:	f003 faa1 	bl	8006308 <protocol_main_loop>
 8002dc6:	e7c6      	b.n	8002d56 <main+0xc6>
 8002dc8:	e000ed00 	.word	0xe000ed00
 8002dcc:	20003948 	.word	0x20003948
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	20003960 	.word	0x20003960
 8002dd8:	20003978 	.word	0x20003978
 8002ddc:	2000447c 	.word	0x2000447c
 8002de0:	2000395e 	.word	0x2000395e
 8002de4:	2000395d 	.word	0x2000395d
 8002de8:	20003990 	.word	0x20003990
 8002dec:	20003944 	.word	0x20003944
 8002df0:	2000395c 	.word	0x2000395c

08002df4 <Analog_Timer_Init>:
  SET_BIT(TIMx->CCER, Channels);
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <Analog_Timer_Init+0x68>)
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	621a      	str	r2, [r3, #32]
 8002dfe:	6a1a      	ldr	r2, [r3, #32]
 8002e00:	f042 0210 	orr.w	r2, r2, #16
 8002e04:	621a      	str	r2, [r3, #32]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e0c:	621a      	str	r2, [r3, #32]
 8002e0e:	6a1a      	ldr	r2, [r3, #32]
 8002e10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e14:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002e26:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	f042 0201 	orr.w	r2, r2, #1
 8002e30:	621a      	str	r2, [r3, #32]
 8002e32:	6a1a      	ldr	r2, [r3, #32]
 8002e34:	f042 0210 	orr.w	r2, r2, #16
 8002e38:	621a      	str	r2, [r3, #32]
 8002e3a:	6a1a      	ldr	r2, [r3, #32]
 8002e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e40:	621a      	str	r2, [r3, #32]
 8002e42:	6a1a      	ldr	r2, [r3, #32]
 8002e44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e48:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e50:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	4770      	bx	lr
 8002e5c:	40010000 	.word	0x40010000

08002e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e60:	4770      	bx	lr
	...

08002e64 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002e64:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8002e66:	480e      	ldr	r0, [pc, #56]	; (8002ea0 <MX_SPI3_Init+0x3c>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <MX_SPI3_Init+0x40>)
 8002e6a:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e72:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002e76:	2300      	movs	r3, #0
 8002e78:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e7a:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e7c:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e7e:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e80:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e82:	6203      	str	r3, [r0, #32]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002e84:	2230      	movs	r2, #48	; 0x30
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e86:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e88:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002e8a:	230a      	movs	r3, #10
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002e8c:	61c2      	str	r2, [r0, #28]
  hspi3.Init.CRCPolynomial = 10;
 8002e8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e90:	f7fe ff0e 	bl	8001cb0 <HAL_SPI_Init>
 8002e94:	b118      	cbz	r0, 8002e9e <MX_SPI3_Init+0x3a>
  {
    Error_Handler();
  }

}
 8002e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002e9a:	f7ff bfe1 	b.w	8002e60 <Error_Handler>
 8002e9e:	bd08      	pop	{r3, pc}
 8002ea0:	20003994 	.word	0x20003994
 8002ea4:	40003c00 	.word	0x40003c00

08002ea8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eaa:	4604      	mov	r4, r0
 8002eac:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eae:	2214      	movs	r2, #20
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	a803      	add	r0, sp, #12
 8002eb4:	f005 ff3d 	bl	8008d32 <memset>
  if(spiHandle->Instance==SPI3)
 8002eb8:	6822      	ldr	r2, [r4, #0]
 8002eba:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <HAL_SPI_MspInit+0x8c>)
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d137      	bne.n	8002f30 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ec0:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8002ec4:	2400      	movs	r4, #0
 8002ec6:	9400      	str	r4, [sp, #0]
 8002ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eca:	481b      	ldr	r0, [pc, #108]	; (8002f38 <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002ed8:	9200      	str	r2, [sp, #0]
 8002eda:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002edc:	9401      	str	r4, [sp, #4]
 8002ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee0:	f042 0204 	orr.w	r2, r2, #4
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee8:	f002 0204 	and.w	r2, r2, #4
 8002eec:	9201      	str	r2, [sp, #4]
 8002eee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef0:	9402      	str	r4, [sp, #8]
 8002ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef4:	f042 0202 	orr.w	r2, r2, #2
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	9302      	str	r3, [sp, #8]
 8002f02:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f04:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin;
 8002f06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0a:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f0c:	2506      	movs	r5, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f0e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin;
 8002f10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f14:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f16:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f18:	f7fe fa36 	bl	8001388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin;
 8002f1c:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002f1e:	a903      	add	r1, sp, #12
 8002f20:	4806      	ldr	r0, [pc, #24]	; (8002f3c <HAL_SPI_MspInit+0x94>)
    GPIO_InitStruct.Pin = SPI_MOSI_Pin;
 8002f22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f28:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f2a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002f2c:	f7fe fa2c 	bl	8001388 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002f30:	b009      	add	sp, #36	; 0x24
 8002f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f34:	40003c00 	.word	0x40003c00
 8002f38:	40020800 	.word	0x40020800
 8002f3c:	40020400 	.word	0x40020400

08002f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f40:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_MspInit+0x34>)
 8002f44:	2100      	movs	r1, #0
 8002f46:	9100      	str	r1, [sp, #0]
 8002f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
 8002f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f52:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002f56:	9200      	str	r2, [sp, #0]
 8002f58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5a:	9101      	str	r1, [sp, #4]
 8002f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6e:	b002      	add	sp, #8
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800

08002f78 <NMI_Handler>:
 8002f78:	4770      	bx	lr

08002f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f7a:	e7fe      	b.n	8002f7a <HardFault_Handler>

08002f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler>

08002f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7e:	e7fe      	b.n	8002f7e <BusFault_Handler>

08002f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f80:	e7fe      	b.n	8002f80 <UsageFault_Handler>

08002f82 <SVC_Handler>:
 8002f82:	4770      	bx	lr

08002f84 <DebugMon_Handler>:
 8002f84:	4770      	bx	lr

08002f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f86:	4770      	bx	lr

08002f88 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f88:	f7fe b838 	b.w	8000ffc <HAL_IncTick>

08002f8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f7fe fae0 	bl	8001554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  HandleControlIT(GPIO_PIN_0);
 8002f94:	2001      	movs	r0, #1
 8002f96:	f005 f92f 	bl	80081f8 <HandleControlIT>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9a:	4b02      	ldr	r3, [pc, #8]	; (8002fa4 <EXTI0_IRQHandler+0x18>)
 8002f9c:	2240      	movs	r2, #64	; 0x40
 8002f9e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8002fa2:	bd08      	pop	{r3, pc}
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002fa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002faa:	2002      	movs	r0, #2
 8002fac:	f7fe fad2 	bl	8001554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  HandleControlIT(GPIO_PIN_1);
 8002fb0:	2002      	movs	r0, #2
 8002fb2:	f005 f921 	bl	80081f8 <HandleControlIT>
 8002fb6:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <EXTI1_IRQHandler+0x18>)
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8002fbe:	bd08      	pop	{r3, pc}
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002fc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002fc6:	2004      	movs	r0, #4
 8002fc8:	f7fe fac4 	bl	8001554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  HandleControlIT(GPIO_PIN_2);
 8002fcc:	2004      	movs	r0, #4
 8002fce:	f005 f913 	bl	80081f8 <HandleControlIT>
 8002fd2:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <EXTI2_IRQHandler+0x1c>)
 8002fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8002fdc:	bd08      	pop	{r3, pc}
 8002fde:	bf00      	nop
 8002fe0:	e000e100 	.word	0xe000e100

08002fe4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002fe4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002fe6:	2008      	movs	r0, #8
 8002fe8:	f7fe fab4 	bl	8001554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HandleControlIT(GPIO_PIN_3);
 8002fec:	2008      	movs	r0, #8
 8002fee:	f005 f903 	bl	80081f8 <HandleControlIT>
 8002ff2:	4b03      	ldr	r3, [pc, #12]	; (8003000 <EXTI3_IRQHandler+0x1c>)
 8002ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8002ffc:	bd08      	pop	{r3, pc}
 8002ffe:	bf00      	nop
 8003000:	e000e100 	.word	0xe000e100

08003004 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003004:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8003006:	4c06      	ldr	r4, [pc, #24]	; (8003020 <USART1_IRQHandler+0x1c>)
 8003008:	68e3      	ldr	r3, [r4, #12]
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	uint8_t data;
	if (LL_USART_IsEnabledIT_RXNE(USART1))
 800300a:	069b      	lsls	r3, r3, #26
 800300c:	d506      	bpl.n	800301c <USART1_IRQHandler+0x18>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800300e:	6860      	ldr	r0, [r4, #4]
	{
		data = LL_USART_ReceiveData8(USART1);
		HandleUartIT(data);
 8003010:	b2c0      	uxtb	r0, r0
 8003012:	f003 febd 	bl	8006d90 <HandleUartIT>
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003016:	f06f 0320 	mvn.w	r3, #32
 800301a:	6023      	str	r3, [r4, #0]
 800301c:	bd10      	pop	{r4, pc}
 800301e:	bf00      	nop
 8003020:	40011000 	.word	0x40011000

08003024 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003024:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003026:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800302a:	f7fe fa93 	bl	8001554 <HAL_GPIO_EXTI_IRQHandler>
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <EXTI15_10_IRQHandler+0x1c>)
 8003030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003034:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
  HandleLimitIT();
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HandleLimitIT();
 800303c:	f001 bd18 	b.w	8004a70 <HandleLimitIT>
 8003040:	e000e100 	.word	0xe000e100

08003044 <TIM5_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <TIM5_IRQHandler+0x18>)
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	07d2      	lsls	r2, r2, #31
 800304a:	d506      	bpl.n	800305a <TIM5_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800304c:	f06f 0201 	mvn.w	r2, #1
 8003050:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CNT, Counter);
 8003052:	2200      	movs	r2, #0
 8003054:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM5_IRQn 1 */
  if (LL_TIM_IsActiveFlag_UPDATE(TIM5))
	{
	LL_TIM_ClearFlag_UPDATE(TIM5);
	LL_TIM_SetCounter(TIM5, 0);
    HandleStepSetIT();
 8003056:	f004 bb4f 	b.w	80076f8 <HandleStepSetIT>
 800305a:	4770      	bx	lr
 800305c:	40000c00 	.word	0x40000c00

08003060 <TIM7_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <TIM7_IRQHandler+0x2c>)
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	07d2      	lsls	r2, r2, #31
 8003066:	d50f      	bpl.n	8003088 <TIM7_IRQHandler+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003068:	f06f 0201 	mvn.w	r2, #1
 800306c:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CNT, Counter);
 800306e:	2200      	movs	r2, #0
 8003070:	625a      	str	r2, [r3, #36]	; 0x24
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <TIM7_IRQHandler+0x30>)
 8003074:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800307c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003080:	f3bf 8f6f 	isb	sy
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
		LL_TIM_SetCounter(TIM7, 0);
    NVIC_DisableIRQ(TIM7_IRQn);
    HandleStepResetIT();
 8003084:	f004 bc7a 	b.w	800797c <HandleStepResetIT>
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40001400 	.word	0x40001400
 8003090:	e000e100 	.word	0xe000e100

08003094 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003094:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <_sbrk+0x2c>)
 8003098:	6819      	ldr	r1, [r3, #0]
{
 800309a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800309c:	b909      	cbnz	r1, 80030a2 <_sbrk+0xe>
		heap_end = &end;
 800309e:	4909      	ldr	r1, [pc, #36]	; (80030c4 <_sbrk+0x30>)
 80030a0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80030a2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80030a4:	4669      	mov	r1, sp
 80030a6:	4402      	add	r2, r0
 80030a8:	428a      	cmp	r2, r1
 80030aa:	d906      	bls.n	80030ba <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80030ac:	f005 fe08 	bl	8008cc0 <__errno>
 80030b0:	230c      	movs	r3, #12
 80030b2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80030ba:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80030bc:	bd08      	pop	{r3, pc}
 80030be:	bf00      	nop
 80030c0:	200000b0 	.word	0x200000b0
 80030c4:	200045c0 	.word	0x200045c0

080030c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030c8:	490f      	ldr	r1, [pc, #60]	; (8003108 <SystemInit+0x40>)
 80030ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80030ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <SystemInit+0x44>)
 80030d8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030da:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80030e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80030ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <SystemInit+0x48>)
 80030f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80030fc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003102:	608b      	str	r3, [r1, #8]
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000ed00 	.word	0xe000ed00
 800310c:	40023800 	.word	0x40023800
 8003110:	24003010 	.word	0x24003010

08003114 <LL_TIM_OC_DisableFast>:
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003114:	2901      	cmp	r1, #1
{
 8003116:	b510      	push	{r4, lr}
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003118:	d019      	beq.n	800314e <LL_TIM_OC_DisableFast+0x3a>
 800311a:	2904      	cmp	r1, #4
 800311c:	d019      	beq.n	8003152 <LL_TIM_OC_DisableFast+0x3e>
 800311e:	2910      	cmp	r1, #16
 8003120:	d019      	beq.n	8003156 <LL_TIM_OC_DisableFast+0x42>
 8003122:	2940      	cmp	r1, #64	; 0x40
 8003124:	d019      	beq.n	800315a <LL_TIM_OC_DisableFast+0x46>
 8003126:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800312a:	d018      	beq.n	800315e <LL_TIM_OC_DisableFast+0x4a>
 800312c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003130:	bf0c      	ite	eq
 8003132:	2305      	moveq	r3, #5
 8003134:	2306      	movne	r3, #6
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003136:	4a0b      	ldr	r2, [pc, #44]	; (8003164 <LL_TIM_OC_DisableFast+0x50>)
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003138:	4c0b      	ldr	r4, [pc, #44]	; (8003168 <LL_TIM_OC_DisableFast+0x54>)
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800313a:	5cd1      	ldrb	r1, [r2, r3]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800313c:	5ce4      	ldrb	r4, [r4, r3]
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800313e:	3018      	adds	r0, #24
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003140:	2304      	movs	r3, #4
 8003142:	580a      	ldr	r2, [r1, r0]
 8003144:	40a3      	lsls	r3, r4
 8003146:	ea22 0303 	bic.w	r3, r2, r3
 800314a:	500b      	str	r3, [r1, r0]
 800314c:	bd10      	pop	{r4, pc}
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800314e:	2300      	movs	r3, #0
 8003150:	e7f1      	b.n	8003136 <LL_TIM_OC_DisableFast+0x22>
 8003152:	2301      	movs	r3, #1
 8003154:	e7ef      	b.n	8003136 <LL_TIM_OC_DisableFast+0x22>
 8003156:	2302      	movs	r3, #2
 8003158:	e7ed      	b.n	8003136 <LL_TIM_OC_DisableFast+0x22>
 800315a:	2303      	movs	r3, #3
 800315c:	e7eb      	b.n	8003136 <LL_TIM_OC_DisableFast+0x22>
 800315e:	2304      	movs	r3, #4
 8003160:	e7e9      	b.n	8003136 <LL_TIM_OC_DisableFast+0x22>
 8003162:	bf00      	nop
 8003164:	0800aae0 	.word	0x0800aae0
 8003168:	0800aae7 	.word	0x0800aae7

0800316c <LL_TIM_OC_EnablePreload>:
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800316c:	2901      	cmp	r1, #1
{
 800316e:	b510      	push	{r4, lr}
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003170:	d018      	beq.n	80031a4 <LL_TIM_OC_EnablePreload+0x38>
 8003172:	2904      	cmp	r1, #4
 8003174:	d018      	beq.n	80031a8 <LL_TIM_OC_EnablePreload+0x3c>
 8003176:	2910      	cmp	r1, #16
 8003178:	d018      	beq.n	80031ac <LL_TIM_OC_EnablePreload+0x40>
 800317a:	2940      	cmp	r1, #64	; 0x40
 800317c:	d018      	beq.n	80031b0 <LL_TIM_OC_EnablePreload+0x44>
 800317e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003182:	d017      	beq.n	80031b4 <LL_TIM_OC_EnablePreload+0x48>
 8003184:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003188:	bf0c      	ite	eq
 800318a:	2305      	moveq	r3, #5
 800318c:	2306      	movne	r3, #6
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800318e:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <LL_TIM_OC_EnablePreload+0x4c>)
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003190:	4c0a      	ldr	r4, [pc, #40]	; (80031bc <LL_TIM_OC_EnablePreload+0x50>)
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003192:	5cd2      	ldrb	r2, [r2, r3]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003194:	5ce4      	ldrb	r4, [r4, r3]
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003196:	3018      	adds	r0, #24
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003198:	2308      	movs	r3, #8
 800319a:	5811      	ldr	r1, [r2, r0]
 800319c:	40a3      	lsls	r3, r4
 800319e:	430b      	orrs	r3, r1
 80031a0:	5013      	str	r3, [r2, r0]
 80031a2:	bd10      	pop	{r4, pc}
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80031a4:	2300      	movs	r3, #0
 80031a6:	e7f2      	b.n	800318e <LL_TIM_OC_EnablePreload+0x22>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e7f0      	b.n	800318e <LL_TIM_OC_EnablePreload+0x22>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e7ee      	b.n	800318e <LL_TIM_OC_EnablePreload+0x22>
 80031b0:	2303      	movs	r3, #3
 80031b2:	e7ec      	b.n	800318e <LL_TIM_OC_EnablePreload+0x22>
 80031b4:	2304      	movs	r3, #4
 80031b6:	e7ea      	b.n	800318e <LL_TIM_OC_EnablePreload+0x22>
 80031b8:	0800aae0 	.word	0x0800aae0
 80031bc:	0800aae7 	.word	0x0800aae7

080031c0 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <LL_AHB1_GRP1_EnableClock+0x18>)
 80031c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c4:	4302      	orrs	r2, r0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
{
 80031ca:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80031cc:	4018      	ands	r0, r3
 80031ce:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80031d0:	9b01      	ldr	r3, [sp, #4]
}
 80031d2:	b002      	add	sp, #8
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800

080031dc <LL_APB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <LL_APB1_GRP1_EnableClock+0x18>)
 80031de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e0:	4302      	orrs	r2, r0
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 80031e6:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80031e8:	4018      	ands	r0, r3
 80031ea:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80031ec:	9b01      	ldr	r3, [sp, #4]
}
 80031ee:	b002      	add	sp, #8
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800

080031f8 <NVIC_EncodePriority.constprop.1>:
}
 80031f8:	2000      	movs	r0, #0
 80031fa:	4770      	bx	lr

080031fc <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80031fc:	b530      	push	{r4, r5, lr}
 80031fe:	b09b      	sub	sp, #108	; 0x6c
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003200:	2214      	movs	r2, #20
 8003202:	2100      	movs	r1, #0
 8003204:	a801      	add	r0, sp, #4
 8003206:	f005 fd94 	bl	8008d32 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800320a:	2418      	movs	r4, #24
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800320c:	2220      	movs	r2, #32
 800320e:	2100      	movs	r1, #0
 8003210:	a812      	add	r0, sp, #72	; 0x48
 8003212:	f005 fd8e 	bl	8008d32 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8003216:	4622      	mov	r2, r4
 8003218:	eb0d 0004 	add.w	r0, sp, r4
 800321c:	2100      	movs	r1, #0
 800321e:	f005 fd88 	bl	8008d32 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003222:	4622      	mov	r2, r4
 8003224:	2100      	movs	r1, #0
 8003226:	a80c      	add	r0, sp, #48	; 0x30
 8003228:	f005 fd83 	bl	8008d32 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800322c:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <MX_TIM1_Init+0x15c>)
  TIM_InitStruct.Prescaler = 167;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 19999;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct.RepetitionCounter = 0;
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800322e:	4c4b      	ldr	r4, [pc, #300]	; (800335c <MX_TIM1_Init+0x160>)
 8003230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003240:	9b00      	ldr	r3, [sp, #0]
  TIM_InitStruct.Prescaler = 167;
 8003242:	23a7      	movs	r3, #167	; 0xa7
 8003244:	f8ad 3004 	strh.w	r3, [sp, #4]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003248:	a901      	add	r1, sp, #4
  TIM_InitStruct.Autoreload = 19999;
 800324a:	f644 631f 	movw	r3, #19999	; 0x4e1f
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800324e:	4620      	mov	r0, r4
  TIM_InitStruct.Autoreload = 19999;
 8003250:	9303      	str	r3, [sp, #12]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003252:	f7ff f9f5 	bl	8002640 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800325c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800325e:	68a3      	ldr	r3, [r4, #8]
 8003260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003264:	f023 0307 	bic.w	r3, r3, #7
 8003268:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM1);
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800326a:	4620      	mov	r0, r4
 800326c:	2101      	movs	r1, #1
 800326e:	f7ff ff7d 	bl	800316c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003272:	2360      	movs	r3, #96	; 0x60
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003274:	2500      	movs	r5, #0
  TIM_OC_InitStruct.CompareValue = 1499;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003276:	aa12      	add	r2, sp, #72	; 0x48
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003278:	9312      	str	r3, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800327a:	2101      	movs	r1, #1
  TIM_OC_InitStruct.CompareValue = 1499;
 800327c:	f240 53db 	movw	r3, #1499	; 0x5db
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003280:	4620      	mov	r0, r4
  TIM_OC_InitStruct.CompareValue = 1499;
 8003282:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003284:	9513      	str	r5, [sp, #76]	; 0x4c
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003286:	9514      	str	r5, [sp, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003288:	9516      	str	r5, [sp, #88]	; 0x58
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800328a:	9517      	str	r5, [sp, #92]	; 0x5c
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800328c:	9518      	str	r5, [sp, #96]	; 0x60
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800328e:	9519      	str	r5, [sp, #100]	; 0x64
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003290:	f7ff fa3a 	bl	8002708 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8003294:	4620      	mov	r0, r4
 8003296:	2101      	movs	r1, #1
 8003298:	f7ff ff3c 	bl	8003114 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 800329c:	4620      	mov	r0, r4
 800329e:	2110      	movs	r1, #16
 80032a0:	f7ff ff64 	bl	800316c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80032a4:	aa12      	add	r2, sp, #72	; 0x48
 80032a6:	2110      	movs	r1, #16
 80032a8:	4620      	mov	r0, r4
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80032aa:	9513      	str	r5, [sp, #76]	; 0x4c
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80032ac:	9514      	str	r5, [sp, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80032ae:	f7ff fa2b 	bl	8002708 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 80032b2:	4620      	mov	r0, r4
 80032b4:	2110      	movs	r1, #16
 80032b6:	f7ff ff2d 	bl	8003114 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 80032ba:	4620      	mov	r0, r4
 80032bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032c0:	f7ff ff54 	bl	800316c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80032c4:	aa12      	add	r2, sp, #72	; 0x48
 80032c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ca:	4620      	mov	r0, r4
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80032cc:	9513      	str	r5, [sp, #76]	; 0x4c
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80032ce:	9514      	str	r5, [sp, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80032d0:	f7ff fa1a 	bl	8002708 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80032d4:	4620      	mov	r0, r4
 80032d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032da:	f7ff ff1b 	bl	8003114 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 80032de:	4620      	mov	r0, r4
 80032e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032e4:	f7ff ff42 	bl	800316c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80032e8:	aa12      	add	r2, sp, #72	; 0x48
 80032ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ee:	4620      	mov	r0, r4
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80032f0:	9513      	str	r5, [sp, #76]	; 0x4c
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80032f2:	9514      	str	r5, [sp, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80032f4:	f7ff fa08 	bl	8002708 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 80032f8:	4620      	mov	r0, r4
 80032fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032fe:	f7ff ff09 	bl	8003114 <LL_TIM_OC_DisableFast>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003302:	6863      	ldr	r3, [r4, #4]
 8003304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003308:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800330a:	68a3      	ldr	r3, [r4, #8]
 800330c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003310:	60a3      	str	r3, [r4, #8]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
  TIM_BDTRInitStruct.DeadTime = 0;
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8003312:	a906      	add	r1, sp, #24
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8003314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8003318:	4620      	mov	r0, r4
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800331a:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800331c:	9506      	str	r5, [sp, #24]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800331e:	9507      	str	r5, [sp, #28]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8003320:	9508      	str	r5, [sp, #32]
  TIM_BDTRInitStruct.DeadTime = 0;
 8003322:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8003326:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800332a:	950b      	str	r5, [sp, #44]	; 0x2c
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800332c:	f7ff fac4 	bl	80028b8 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8003330:	2010      	movs	r0, #16
 8003332:	f7ff ff45 	bl	80031c0 <LL_AHB1_GRP1_EnableClock>
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_11|LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8003336:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800333a:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800333c:	2302      	movs	r3, #2
 800333e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003340:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003342:	2301      	movs	r3, #1
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003344:	4806      	ldr	r0, [pc, #24]	; (8003360 <MX_TIM1_Init+0x164>)
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003346:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003348:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800334a:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800334c:	9311      	str	r3, [sp, #68]	; 0x44
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800334e:	f7ff f867 	bl	8002420 <LL_GPIO_Init>

}
 8003352:	b01b      	add	sp, #108	; 0x6c
 8003354:	bd30      	pop	{r4, r5, pc}
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	40010000 	.word	0x40010000
 8003360:	40021000 	.word	0x40021000

08003364 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003364:	b530      	push	{r4, r5, lr}
 8003366:	b095      	sub	sp, #84	; 0x54
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003368:	2214      	movs	r2, #20
 800336a:	2100      	movs	r1, #0
 800336c:	a801      	add	r0, sp, #4
 800336e:	f005 fce0 	bl	8008d32 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003372:	2220      	movs	r2, #32
 8003374:	2100      	movs	r1, #0
 8003376:	a80c      	add	r0, sp, #48	; 0x30
 8003378:	f005 fcdb 	bl	8008d32 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	2218      	movs	r2, #24
 800337e:	eb0d 0002 	add.w	r0, sp, r2
 8003382:	2100      	movs	r1, #0
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8003384:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003388:	f005 fcd3 	bl	8008d32 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800338c:	2001      	movs	r0, #1

  TIM_InitStruct.Prescaler = 0;
 800338e:	2500      	movs	r5, #0
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003390:	f7ff ff24 	bl	80031dc <LL_APB1_GRP1_EnableClock>
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 8399;
 8003394:	f242 03cf 	movw	r3, #8399	; 0x20cf
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003398:	a901      	add	r1, sp, #4
 800339a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_InitStruct.Autoreload = 8399;
 800339e:	9303      	str	r3, [sp, #12]
  TIM_InitStruct.Prescaler = 0;
 80033a0:	f8ad 5004 	strh.w	r5, [sp, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80033a4:	9502      	str	r5, [sp, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80033a6:	9504      	str	r5, [sp, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80033a8:	f7ff f94a 	bl	8002640 <LL_TIM_Init>
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80033b4:	68a3      	ldr	r3, [r4, #8]
 80033b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ba:	f023 0307 	bic.w	r3, r3, #7
 80033be:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM2);
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80033c0:	4620      	mov	r0, r4
 80033c2:	2101      	movs	r1, #1
 80033c4:	f7ff fed2 	bl	800316c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.CompareValue = 0;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80033c8:	aa0c      	add	r2, sp, #48	; 0x30
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80033ca:	2360      	movs	r3, #96	; 0x60
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80033cc:	2101      	movs	r1, #1
 80033ce:	4620      	mov	r0, r4
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80033d0:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80033d2:	950d      	str	r5, [sp, #52]	; 0x34
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80033d4:	950e      	str	r5, [sp, #56]	; 0x38
  TIM_OC_InitStruct.CompareValue = 0;
 80033d6:	950f      	str	r5, [sp, #60]	; 0x3c
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80033d8:	9510      	str	r5, [sp, #64]	; 0x40
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80033da:	f7ff f995 	bl	8002708 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80033de:	2101      	movs	r1, #1
 80033e0:	4620      	mov	r0, r4
 80033e2:	f7ff fe97 	bl	8003114 <LL_TIM_OC_DisableFast>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80033e6:	6863      	ldr	r3, [r4, #4]
 80033e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ec:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80033ee:	68a3      	ldr	r3, [r4, #8]
 80033f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f4:	60a3      	str	r3, [r4, #8]
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM2);
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80033f6:	2001      	movs	r0, #1
 80033f8:	f7ff fee2 	bl	80031c0 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80033fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003400:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003402:	2302      	movs	r3, #2
 8003404:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003406:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003408:	2301      	movs	r3, #1
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340a:	4804      	ldr	r0, [pc, #16]	; (800341c <MX_TIM2_Init+0xb8>)
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800340c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800340e:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003410:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003412:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003414:	f7ff f804 	bl	8002420 <LL_GPIO_Init>

}
 8003418:	b015      	add	sp, #84	; 0x54
 800341a:	bd30      	pop	{r4, r5, pc}
 800341c:	40020000 	.word	0x40020000

08003420 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003420:	b530      	push	{r4, r5, lr}
 8003422:	b095      	sub	sp, #84	; 0x54
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003424:	2214      	movs	r2, #20
 8003426:	2100      	movs	r1, #0
 8003428:	a801      	add	r0, sp, #4
 800342a:	f005 fc82 	bl	8008d32 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800342e:	2220      	movs	r2, #32
 8003430:	2100      	movs	r1, #0
 8003432:	a80c      	add	r0, sp, #48	; 0x30
 8003434:	f005 fc7d 	bl	8008d32 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	2218      	movs	r2, #24
 800343a:	eb0d 0002 	add.w	r0, sp, r2
 800343e:	2100      	movs	r1, #0

  TIM_InitStruct.Prescaler = 83;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 19999;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003440:	4c3f      	ldr	r4, [pc, #252]	; (8003540 <MX_TIM3_Init+0x120>)
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003442:	f005 fc76 	bl	8008d32 <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003446:	2002      	movs	r0, #2
 8003448:	f7ff fec8 	bl	80031dc <LL_APB1_GRP1_EnableClock>
  TIM_InitStruct.Prescaler = 83;
 800344c:	2353      	movs	r3, #83	; 0x53
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800344e:	2500      	movs	r5, #0
  TIM_InitStruct.Prescaler = 83;
 8003450:	f8ad 3004 	strh.w	r3, [sp, #4]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003454:	a901      	add	r1, sp, #4
  TIM_InitStruct.Autoreload = 19999;
 8003456:	f644 631f 	movw	r3, #19999	; 0x4e1f
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800345a:	4620      	mov	r0, r4
  TIM_InitStruct.Autoreload = 19999;
 800345c:	9303      	str	r3, [sp, #12]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800345e:	9502      	str	r5, [sp, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003460:	9504      	str	r5, [sp, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003462:	f7ff f8ed 	bl	8002640 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800346e:	68a3      	ldr	r3, [r4, #8]
 8003470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003474:	f023 0307 	bic.w	r3, r3, #7
 8003478:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 800347a:	4620      	mov	r0, r4
 800347c:	2101      	movs	r1, #1
 800347e:	f7ff fe75 	bl	800316c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003482:	2360      	movs	r3, #96	; 0x60
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.CompareValue = 1500;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003484:	aa0c      	add	r2, sp, #48	; 0x30
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003486:	930c      	str	r3, [sp, #48]	; 0x30
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003488:	2101      	movs	r1, #1
  TIM_OC_InitStruct.CompareValue = 1500;
 800348a:	f240 53dc 	movw	r3, #1500	; 0x5dc
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800348e:	4620      	mov	r0, r4
  TIM_OC_InitStruct.CompareValue = 1500;
 8003490:	930f      	str	r3, [sp, #60]	; 0x3c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003492:	950d      	str	r5, [sp, #52]	; 0x34
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003494:	950e      	str	r5, [sp, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003496:	9510      	str	r5, [sp, #64]	; 0x40
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003498:	f7ff f936 	bl	8002708 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 800349c:	4620      	mov	r0, r4
 800349e:	2101      	movs	r1, #1
 80034a0:	f7ff fe38 	bl	8003114 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 80034a4:	4620      	mov	r0, r4
 80034a6:	2110      	movs	r1, #16
 80034a8:	f7ff fe60 	bl	800316c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80034ac:	aa0c      	add	r2, sp, #48	; 0x30
 80034ae:	2110      	movs	r1, #16
 80034b0:	4620      	mov	r0, r4
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80034b2:	950d      	str	r5, [sp, #52]	; 0x34
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80034b4:	950e      	str	r5, [sp, #56]	; 0x38
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80034b6:	f7ff f927 	bl	8002708 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 80034ba:	4620      	mov	r0, r4
 80034bc:	2110      	movs	r1, #16
 80034be:	f7ff fe29 	bl	8003114 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 80034c2:	4620      	mov	r0, r4
 80034c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034c8:	f7ff fe50 	bl	800316c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80034cc:	aa0c      	add	r2, sp, #48	; 0x30
 80034ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034d2:	4620      	mov	r0, r4
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80034d4:	950d      	str	r5, [sp, #52]	; 0x34
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80034d6:	950e      	str	r5, [sp, #56]	; 0x38
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80034d8:	f7ff f916 	bl	8002708 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 80034dc:	4620      	mov	r0, r4
 80034de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034e2:	f7ff fe17 	bl	8003114 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 80034e6:	4620      	mov	r0, r4
 80034e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034ec:	f7ff fe3e 	bl	800316c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80034f0:	aa0c      	add	r2, sp, #48	; 0x30
 80034f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034f6:	4620      	mov	r0, r4
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80034f8:	950d      	str	r5, [sp, #52]	; 0x34
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80034fa:	950e      	str	r5, [sp, #56]	; 0x38
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80034fc:	f7ff f904 	bl	8002708 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003504:	4620      	mov	r0, r4
 8003506:	f7ff fe05 	bl	8003114 <LL_TIM_OC_DisableFast>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800350a:	6863      	ldr	r3, [r4, #4]
 800350c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003510:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003512:	68a3      	ldr	r3, [r4, #8]
 8003514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003518:	60a3      	str	r3, [r4, #8]
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM3);
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800351a:	2004      	movs	r0, #4
 800351c:	f7ff fe50 	bl	80031c0 <LL_AHB1_GRP1_EnableClock>
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8003520:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003524:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003526:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003528:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800352a:	4806      	ldr	r0, [pc, #24]	; (8003544 <MX_TIM3_Init+0x124>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800352c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800352e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003530:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003532:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003534:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003536:	f7fe ff73 	bl	8002420 <LL_GPIO_Init>

}
 800353a:	b015      	add	sp, #84	; 0x54
 800353c:	bd30      	pop	{r4, r5, pc}
 800353e:	bf00      	nop
 8003540:	40000400 	.word	0x40000400
 8003544:	40020800 	.word	0x40020800

08003548 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003548:	b510      	push	{r4, lr}
 800354a:	b086      	sub	sp, #24
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800354c:	2214      	movs	r2, #20
 800354e:	2100      	movs	r1, #0
 8003550:	a801      	add	r0, sp, #4
 8003552:	f005 fbee 	bl	8008d32 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8003556:	2008      	movs	r0, #8
 8003558:	f7ff fe40 	bl	80031dc <LL_APB1_GRP1_EnableClock>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800355c:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <MX_TIM5_Init+0x70>)

  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 0;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 800355e:	4c17      	ldr	r4, [pc, #92]	; (80035bc <MX_TIM5_Init+0x74>)
 8003560:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003562:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003566:	f7ff fe47 	bl	80031f8 <NVIC_EncodePriority.constprop.1>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <MX_TIM5_Init+0x78>)
 800356c:	0100      	lsls	r0, r0, #4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003572:	b2c0      	uxtb	r0, r0
 8003574:	f883 0332 	strb.w	r0, [r3, #818]	; 0x332
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8003578:	a901      	add	r1, sp, #4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	4620      	mov	r0, r4
  TIM_InitStruct.Prescaler = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	f8ad 3004 	strh.w	r3, [sp, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003584:	9302      	str	r3, [sp, #8]
  TIM_InitStruct.Autoreload = 0;
 8003586:	9303      	str	r3, [sp, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003588:	9304      	str	r3, [sp, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 800358a:	f7ff f859 	bl	8002640 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003594:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003596:	68a3      	ldr	r3, [r4, #8]
 8003598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800359c:	f023 0307 	bic.w	r3, r3, #7
 80035a0:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80035a2:	6863      	ldr	r3, [r4, #4]
 80035a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a8:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80035aa:	68a3      	ldr	r3, [r4, #8]
 80035ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035b0:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM5);
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM5);

}
 80035b2:	b006      	add	sp, #24
 80035b4:	bd10      	pop	{r4, pc}
 80035b6:	bf00      	nop
 80035b8:	e000ed00 	.word	0xe000ed00
 80035bc:	40000c00 	.word	0x40000c00
 80035c0:	e000e100 	.word	0xe000e100

080035c4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80035c4:	b510      	push	{r4, lr}
 80035c6:	b086      	sub	sp, #24
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80035c8:	2214      	movs	r2, #20
 80035ca:	2100      	movs	r1, #0
 80035cc:	a801      	add	r0, sp, #4
 80035ce:	f005 fbb0 	bl	8008d32 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80035d2:	2020      	movs	r0, #32
 80035d4:	f7ff fe02 	bl	80031dc <LL_APB1_GRP1_EnableClock>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d8:	4b12      	ldr	r3, [pc, #72]	; (8003624 <MX_TIM7_Init+0x60>)
  NVIC_EnableIRQ(TIM7_IRQn);

  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 0;
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80035da:	4c13      	ldr	r4, [pc, #76]	; (8003628 <MX_TIM7_Init+0x64>)
 80035dc:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80035de:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80035e2:	f7ff fe09 	bl	80031f8 <NVIC_EncodePriority.constprop.1>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <MX_TIM7_Init+0x68>)
 80035e8:	0100      	lsls	r0, r0, #4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ee:	b2c0      	uxtb	r0, r0
 80035f0:	f883 0337 	strb.w	r0, [r3, #823]	; 0x337
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80035f4:	a901      	add	r1, sp, #4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	4620      	mov	r0, r4
  TIM_InitStruct.Prescaler = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8ad 3004 	strh.w	r3, [sp, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003600:	9302      	str	r3, [sp, #8]
  TIM_InitStruct.Autoreload = 0;
 8003602:	9303      	str	r3, [sp, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8003604:	f7ff f81c 	bl	8002640 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800360e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003610:	6863      	ldr	r3, [r4, #4]
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003618:	68a3      	ldr	r3, [r4, #8]
 800361a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800361e:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM7);
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM7);

}
 8003620:	b006      	add	sp, #24
 8003622:	bd10      	pop	{r4, pc}
 8003624:	e000ed00 	.word	0xe000ed00
 8003628:	40001400 	.word	0x40001400
 800362c:	e000e100 	.word	0xe000e100

08003630 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003630:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 8003632:	480b      	ldr	r0, [pc, #44]	; (8003660 <MX_UART5_Init+0x30>)
  huart5.Init.BaudRate = 115200;
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <MX_UART5_Init+0x34>)
 8003636:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800363a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 800363e:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003640:	2300      	movs	r3, #0
 8003642:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003644:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003646:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003648:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800364a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800364c:	61c3      	str	r3, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 800364e:	f7fe feb5 	bl	80023bc <HAL_HalfDuplex_Init>
 8003652:	b118      	cbz	r0, 800365c <MX_UART5_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003658:	f7ff bc02 	b.w	8002e60 <Error_Handler>
 800365c:	bd08      	pop	{r3, pc}
 800365e:	bf00      	nop
 8003660:	200039ec 	.word	0x200039ec
 8003664:	40005000 	.word	0x40005000

08003668 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003668:	b510      	push	{r4, lr}
 800366a:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800366c:	221c      	movs	r2, #28
 800366e:	2100      	movs	r1, #0
 8003670:	a809      	add	r0, sp, #36	; 0x24
 8003672:	f005 fb5e 	bl	8008d32 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003676:	2218      	movs	r2, #24
 8003678:	2100      	movs	r1, #0
 800367a:	a803      	add	r0, sp, #12
 800367c:	f005 fb59 	bl	8008d32 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8003680:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <MX_USART1_UART_Init+0x98>)
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
  LL_USART_Init(USART1, &USART_InitStruct);
 8003682:	4c20      	ldr	r4, [pc, #128]	; (8003704 <MX_USART1_UART_Init+0x9c>)
 8003684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003686:	4820      	ldr	r0, [pc, #128]	; (8003708 <MX_USART1_UART_Init+0xa0>)
 8003688:	f042 0210 	orr.w	r2, r2, #16
 800368c:	645a      	str	r2, [r3, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800368e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003690:	f002 0210 	and.w	r2, r2, #16
 8003694:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003696:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369a:	f042 0202 	orr.w	r2, r2, #2
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80036a8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80036aa:	23c0      	movs	r3, #192	; 0xc0
 80036ac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80036ae:	2302      	movs	r3, #2
 80036b0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80036b2:	2303      	movs	r3, #3
 80036b4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80036b6:	2301      	movs	r3, #1
 80036b8:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ba:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80036bc:	2307      	movs	r3, #7
 80036be:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c0:	f7fe feae 	bl	8002420 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 921600;
 80036c4:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80036c8:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80036ca:	220c      	movs	r2, #12
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80036cc:	2300      	movs	r3, #0
  LL_USART_Init(USART1, &USART_InitStruct);
 80036ce:	a909      	add	r1, sp, #36	; 0x24
 80036d0:	4620      	mov	r0, r4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80036d2:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80036d4:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80036d6:	930c      	str	r3, [sp, #48]	; 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80036d8:	930e      	str	r3, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80036da:	930f      	str	r3, [sp, #60]	; 0x3c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80036dc:	920d      	str	r2, [sp, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80036de:	f7ff f905 	bl	80028ec <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e2:	6923      	ldr	r3, [r4, #16]
 80036e4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80036e8:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80036ea:	6963      	ldr	r3, [r4, #20]
 80036ec:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80036f0:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80036f2:	68e3      	ldr	r3, [r4, #12]
 80036f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036f8:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART1);
  LL_USART_Enable(USART1);

}
 80036fa:	b010      	add	sp, #64	; 0x40
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	40011000 	.word	0x40011000
 8003708:	40020400 	.word	0x40020400

0800370c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800370c:	b510      	push	{r4, lr}
 800370e:	4604      	mov	r4, r0
 8003710:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003712:	2214      	movs	r2, #20
 8003714:	2100      	movs	r1, #0
 8003716:	a803      	add	r0, sp, #12
 8003718:	f005 fb0b 	bl	8008d32 <memset>
  if(uartHandle->Instance==UART5)
 800371c:	6822      	ldr	r2, [r4, #0]
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_UART_MspInit+0x68>)
 8003720:	429a      	cmp	r2, r3
 8003722:	d125      	bne.n	8003770 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003724:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8003728:	2100      	movs	r1, #0
 800372a:	9101      	str	r1, [sp, #4]
 800372c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800372e:	4812      	ldr	r0, [pc, #72]	; (8003778 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8003730:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
 8003736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003738:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800373c:	9201      	str	r2, [sp, #4]
 800373e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003740:	9102      	str	r1, [sp, #8]
 8003742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003744:	f042 0204 	orr.w	r2, r2, #4
 8003748:	631a      	str	r2, [r3, #48]	; 0x30
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003758:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800375a:	2312      	movs	r3, #18
 800375c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800375e:	2301      	movs	r3, #1
 8003760:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003762:	2303      	movs	r3, #3
 8003764:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003766:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003768:	2308      	movs	r3, #8
 800376a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800376c:	f7fd fe0c 	bl	8001388 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8003770:	b008      	add	sp, #32
 8003772:	bd10      	pop	{r4, pc}
 8003774:	40005000 	.word	0x40005000
 8003778:	40020800 	.word	0x40020800

0800377c <coolant_get_state>:
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <coolant_get_state+0x14>)
 800377e:	6958      	ldr	r0, [r3, #20]
 8003780:	695b      	ldr	r3, [r3, #20]


// Returns current coolant output state. Overrides may alter it from programmed state.
uint8_t coolant_get_state()
{
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 8003782:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  if (bit_istrue(GPIO_ReadOutputData(COOL_FLOOD_GPIO_Port),COOL_FLOOD_Pin))
  {
    cl_state |= COOLANT_STATE_FLOOD;
  }
  #ifdef ENABLE_M7
  if (bit_istrue(GPIO_ReadOutputData(COOL_MIST_GPIO_Port),COOL_MIST_Pin))
 8003786:	065b      	lsls	r3, r3, #25
  {
    cl_state |= COOLANT_STATE_MIST;
 8003788:	bf48      	it	mi
 800378a:	f040 0002 	orrmi.w	r0, r0, #2
    }
  #endif
#endif

  return(cl_state);
}
 800378e:	4770      	bx	lr
 8003790:	40020c00 	.word	0x40020c00

08003794 <coolant_stop>:


// Directly called by coolant_init(), coolant_set_state(), and mc_reset(), which can be at
// an interrupt-level. No report flag set, but only called by routines that don't need it.
void coolant_stop()
{
 8003794:	b510      	push	{r4, lr}
#ifdef STM32
	#ifdef INVERT_COOLANT_FLOOD_PIN
		GPIO_SetBits(COOL_FLOOD_GPIO_Port,COOL_FLOOD_Pin);
	#else
		GPIO_ResetBits(COOL_FLOOD_GPIO_Port,COOL_FLOOD_Pin);
 8003796:	4c05      	ldr	r4, [pc, #20]	; (80037ac <coolant_stop+0x18>)
 8003798:	2180      	movs	r1, #128	; 0x80
 800379a:	4620      	mov	r0, r4
 800379c:	f005 f918 	bl	80089d0 <GPIO_ResetBits>
#endif
#ifdef ENABLE_M7
  #ifdef INVERT_COOLANT_MIST_PIN
    GPIO_SetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
  #else
    GPIO_ResetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
 80037a0:	4620      	mov	r0, r4
 80037a2:	2140      	movs	r1, #64	; 0x40
    #else
      COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
    #endif
  #endif
#endif
}
 80037a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GPIO_ResetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
 80037a8:	f005 b912 	b.w	80089d0 <GPIO_ResetBits>
 80037ac:	40020c00 	.word	0x40020c00

080037b0 <coolant_init>:
  coolant_stop();
 80037b0:	f7ff bff0 	b.w	8003794 <coolant_stop>

080037b4 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 80037b4:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 80037b6:	4c0b      	ldr	r4, [pc, #44]	; (80037e4 <coolant_set_state+0x30>)
 80037b8:	7862      	ldrb	r2, [r4, #1]
{
 80037ba:	4605      	mov	r5, r0
  if (sys.abort) { return; } // Block during abort.  
 80037bc:	b922      	cbnz	r2, 80037c8 <coolant_set_state+0x14>

#ifdef STM32

  if (mode == COOLANT_DISABLE)
 80037be:	b920      	cbnz	r0, 80037ca <coolant_set_state+0x16>
  {
    coolant_stop();
 80037c0:	f7ff ffe8 	bl	8003794 <coolant_stop>
      }
    #endif
  
  }
#endif
  sys.report_ovr_counter = 0; // Set to report change immediately
 80037c4:	2300      	movs	r3, #0
 80037c6:	7323      	strb	r3, [r4, #12]
 80037c8:	bd38      	pop	{r3, r4, r5, pc}
    if (mode & COOLANT_FLOOD_ENABLE)
 80037ca:	0642      	lsls	r2, r0, #25
 80037cc:	d503      	bpl.n	80037d6 <coolant_set_state+0x22>
        GPIO_SetBits(COOL_FLOOD_GPIO_Port,COOL_FLOOD_Pin);
 80037ce:	2180      	movs	r1, #128	; 0x80
 80037d0:	4805      	ldr	r0, [pc, #20]	; (80037e8 <coolant_set_state+0x34>)
 80037d2:	f005 f900 	bl	80089d6 <GPIO_SetBits>
      if (mode & COOLANT_MIST_ENABLE)
 80037d6:	062b      	lsls	r3, r5, #24
 80037d8:	d5f4      	bpl.n	80037c4 <coolant_set_state+0x10>
          GPIO_SetBits(COOL_MIST_GPIO_Port, COOL_MIST_Pin);
 80037da:	2140      	movs	r1, #64	; 0x40
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <coolant_set_state+0x34>)
 80037de:	f005 f8fa 	bl	80089d6 <GPIO_SetBits>
 80037e2:	e7ef      	b.n	80037c4 <coolant_set_state+0x10>
 80037e4:	20003948 	.word	0x20003948
 80037e8:	40020c00 	.word	0x40020c00

080037ec <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 80037ec:	b510      	push	{r4, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <coolant_sync+0x1c>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b02      	cmp	r3, #2
{
 80037f4:	4604      	mov	r4, r0
  if (sys.state == STATE_CHECK_MODE) { return; }
 80037f6:	d006      	beq.n	8003806 <coolant_sync+0x1a>
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 80037f8:	f002 fe18 	bl	800642c <protocol_buffer_synchronize>
  coolant_set_state(mode);
 80037fc:	4620      	mov	r0, r4
}
 80037fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  coolant_set_state(mode);
 8003802:	f7ff bfd7 	b.w	80037b4 <coolant_set_state>
 8003806:	bd10      	pop	{r4, pc}
 8003808:	20003948 	.word	0x20003948

0800380c <eeprom_flush>:
#endif


#ifdef STM32
void eeprom_flush()
{
 800380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FLASH_PageErase(EEPROM_START_ADDRESS);
  FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); //-- !!
  CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
#endif
#ifdef STM32F4
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8003810:	4c1a      	ldr	r4, [pc, #104]	; (800387c <eeprom_flush+0x70>)
  uint32_t nAddress = EEPROM_START_ADDRESS;
 8003812:	4d1b      	ldr	r5, [pc, #108]	; (8003880 <eeprom_flush+0x74>)
  CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
#endif

  while (nSize > 0)
  {
    if (*pBuffer != 0xffff)
 8003814:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8003890 <eeprom_flush+0x84>
 8003818:	4f1a      	ldr	r7, [pc, #104]	; (8003884 <eeprom_flush+0x78>)
  HAL_FLASH_Unlock();
 800381a:	f7fd fd01 	bl	8001220 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 800381e:	23f3      	movs	r3, #243	; 0xf3
 8003820:	60e3      	str	r3, [r4, #12]
  FLASH_Erase_Sector(EEPROM_START_SECTOR, VOLTAGE_RANGE_3);
 8003822:	2102      	movs	r1, #2
 8003824:	2006      	movs	r0, #6
 8003826:	f7fd fd89 	bl	800133c <FLASH_Erase_Sector>
  FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800382a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800382e:	f7fd fd13 	bl	8001258 <FLASH_WaitForLastOperation>
  CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003832:	6923      	ldr	r3, [r4, #16]
 8003834:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003838:	6123      	str	r3, [r4, #16]
    if (*pBuffer != 0xffff)
 800383a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800383e:	f835 2008 	ldrh.w	r2, [r5, r8]
 8003842:	4b11      	ldr	r3, [pc, #68]	; (8003888 <eeprom_flush+0x7c>)
 8003844:	42b2      	cmp	r2, r6
 8003846:	442b      	add	r3, r5
 8003848:	d016      	beq.n	8003878 <eeprom_flush+0x6c>
 800384a:	18fc      	adds	r4, r7, r3
    {
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, nAddress, *pBuffer++);
 800384c:	4629      	mov	r1, r5
 800384e:	2300      	movs	r3, #0
 8003850:	2001      	movs	r0, #1
 8003852:	f7fd fd2b 	bl	80012ac <HAL_FLASH_Program>
 8003856:	4623      	mov	r3, r4
    }
    else
    {
      pBuffer++;
    }
    if (*pBuffer != 0xffff)
 8003858:	881a      	ldrh	r2, [r3, #0]
 800385a:	42b2      	cmp	r2, r6
 800385c:	d004      	beq.n	8003868 <eeprom_flush+0x5c>
    {
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, nAddress+2, *pBuffer++);
 800385e:	2300      	movs	r3, #0
 8003860:	1ca9      	adds	r1, r5, #2
 8003862:	2001      	movs	r0, #1
 8003864:	f7fd fd22 	bl	80012ac <HAL_FLASH_Program>
  while (nSize > 0)
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <eeprom_flush+0x80>)
    else
    {
      pBuffer++;
    }
    nSize -= 4;
    nAddress += 4;
 800386a:	3504      	adds	r5, #4
  while (nSize > 0)
 800386c:	429d      	cmp	r5, r3
 800386e:	d1e6      	bne.n	800383e <eeprom_flush+0x32>
  }

  HAL_FLASH_Lock();

}
 8003870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_FLASH_Lock();
 8003874:	f7fd bce6 	b.w	8001244 <HAL_FLASH_Lock>
 8003878:	443b      	add	r3, r7
 800387a:	e7ed      	b.n	8003858 <eeprom_flush+0x4c>
 800387c:	40023c00 	.word	0x40023c00
 8003880:	08040000 	.word	0x08040000
 8003884:	20003a2c 	.word	0x20003a2c
 8003888:	f7fc0002 	.word	0xf7fc0002
 800388c:	08040800 	.word	0x08040800
 8003890:	17fc3a2c 	.word	0x17fc3a2c

08003894 <eeprom_init>:
  uint16_t VarIdx = 0;
  uint8_t *pTmp = EE_Buffer;

  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
  {
    *pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8003894:	4a0c      	ldr	r2, [pc, #48]	; (80038c8 <eeprom_init+0x34>)
{
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <eeprom_init+0x38>)
 8003898:	b530      	push	{r4, r5, lr}
  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 800389a:	4c0d      	ldr	r4, [pc, #52]	; (80038d0 <eeprom_init+0x3c>)
 800389c:	4610      	mov	r0, r2
    *pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 800389e:	f103 4177 	add.w	r1, r3, #4143972352	; 0xf7000000
 80038a2:	781d      	ldrb	r5, [r3, #0]
 80038a4:	f501 017c 	add.w	r1, r1, #16515072	; 0xfc0000
 80038a8:	3301      	adds	r3, #1
  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 80038aa:	42a3      	cmp	r3, r4
    *pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 80038ac:	5455      	strb	r5, [r2, r1]
  for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 80038ae:	d1f6      	bne.n	800389e <eeprom_init+0xa>
  }

  if (EE_Buffer[0] != SETTINGS_VERSION)
 80038b0:	7813      	ldrb	r3, [r2, #0]
 80038b2:	2b0a      	cmp	r3, #10
 80038b4:	d006      	beq.n	80038c4 <eeprom_init+0x30>
 80038b6:	2300      	movs	r3, #0
  {
    pTmp = EE_Buffer;

    for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
    {
      *pTmp++ = 0xFF;
 80038b8:	22ff      	movs	r2, #255	; 0xff
 80038ba:	54c2      	strb	r2, [r0, r3]
 80038bc:	3301      	adds	r3, #1
    for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 80038be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c2:	d1fa      	bne.n	80038ba <eeprom_init+0x26>
 80038c4:	bd30      	pop	{r4, r5, pc}
 80038c6:	bf00      	nop
 80038c8:	20003a2c 	.word	0x20003a2c
 80038cc:	08040000 	.word	0x08040000
 80038d0:	08040800 	.word	0x08040800

080038d4 <eeprom_get_char>:
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
}
 80038d4:	4b01      	ldr	r3, [pc, #4]	; (80038dc <eeprom_get_char+0x8>)
 80038d6:	5c18      	ldrb	r0, [r3, r0]
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20003a2c 	.word	0x20003a2c

080038e0 <eeprom_put_char>:
 *  \param  new_value  New EEPROM value.
 */
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
#ifdef STM32
  EE_Buffer[addr] = new_value;
 80038e0:	4b01      	ldr	r3, [pc, #4]	; (80038e8 <eeprom_put_char+0x8>)
 80038e2:	5419      	strb	r1, [r3, r0]
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20003a2c 	.word	0x20003a2c

080038ec <memcpy_to_eeprom_with_checksum>:
}

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 80038ec:	b4f0      	push	{r4, r5, r6, r7}
 80038ee:	4c0b      	ldr	r4, [pc, #44]	; (800391c <memcpy_to_eeprom_with_checksum+0x30>)
 80038f0:	1e45      	subs	r5, r0, #1
 80038f2:	4425      	add	r5, r4
 80038f4:	188f      	adds	r7, r1, r2
  unsigned char checksum = 0;
 80038f6:	2300      	movs	r3, #0
  for(; size > 0; size--) { 
 80038f8:	42b9      	cmp	r1, r7
 80038fa:	d104      	bne.n	8003906 <memcpy_to_eeprom_with_checksum+0x1a>
  EE_Buffer[addr] = new_value;
 80038fc:	4420      	add	r0, r4
 80038fe:	5483      	strb	r3, [r0, r2]

#ifdef STM32
  eeprom_flush();
#endif

}
 8003900:	bcf0      	pop	{r4, r5, r6, r7}
  eeprom_flush();
 8003902:	f7ff bf83 	b.w	800380c <eeprom_flush>
    checksum = (checksum << 1) || (checksum >> 7);
 8003906:	b93b      	cbnz	r3, 8003918 <memcpy_to_eeprom_with_checksum+0x2c>
 8003908:	09db      	lsrs	r3, r3, #7
    checksum += *source;
 800390a:	f811 6b01 	ldrb.w	r6, [r1], #1
  EE_Buffer[addr] = new_value;
 800390e:	f805 6f01 	strb.w	r6, [r5, #1]!
    checksum += *source;
 8003912:	4433      	add	r3, r6
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e7ef      	b.n	80038f8 <memcpy_to_eeprom_with_checksum+0xc>
 8003918:	2301      	movs	r3, #1
 800391a:	e7f6      	b.n	800390a <memcpy_to_eeprom_with_checksum+0x1e>
 800391c:	20003a2c 	.word	0x20003a2c

08003920 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8003920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003922:	4c0c      	ldr	r4, [pc, #48]	; (8003954 <memcpy_from_eeprom_with_checksum+0x34>)
 8003924:	1e4d      	subs	r5, r1, #1
 8003926:	4425      	add	r5, r4
 8003928:	1887      	adds	r7, r0, r2
  unsigned char data, checksum = 0;
 800392a:	2300      	movs	r3, #0
  for(; size > 0; size--) { 
 800392c:	42b8      	cmp	r0, r7
 800392e:	d105      	bne.n	800393c <memcpy_from_eeprom_with_checksum+0x1c>
  return EE_Buffer[addr];
 8003930:	4421      	add	r1, r4
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
 8003932:	5c88      	ldrb	r0, [r1, r2]
}
 8003934:	1ac3      	subs	r3, r0, r3
 8003936:	4258      	negs	r0, r3
 8003938:	4158      	adcs	r0, r3
 800393a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return EE_Buffer[addr];
 800393c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    checksum = (checksum << 1) || (checksum >> 7);
 8003940:	b92b      	cbnz	r3, 800394e <memcpy_from_eeprom_with_checksum+0x2e>
 8003942:	09db      	lsrs	r3, r3, #7
    checksum += data;    
 8003944:	4433      	add	r3, r6
 8003946:	b2db      	uxtb	r3, r3
    *(destination++) = data; 
 8003948:	f800 6b01 	strb.w	r6, [r0], #1
 800394c:	e7ee      	b.n	800392c <memcpy_from_eeprom_with_checksum+0xc>
 800394e:	2301      	movs	r3, #1
 8003950:	e7f8      	b.n	8003944 <memcpy_from_eeprom_with_checksum+0x24>
 8003952:	bf00      	nop
 8003954:	20003a2c 	.word	0x20003a2c

08003958 <gc_init>:
parser_block_t gc_block;

#define FAIL(status) return(status);

void gc_init()
{
 8003958:	b508      	push	{r3, lr}
	memset(&gc_state, 0, sizeof(parser_state_t));
 800395a:	2100      	movs	r1, #0
 800395c:	226c      	movs	r2, #108	; 0x6c
 800395e:	4807      	ldr	r0, [pc, #28]	; (800397c <gc_init+0x24>)
 8003960:	f005 f9e7 	bl	8008d32 <memset>

	// Load default G54 coordinate system.
	if (!(settings_read_coord_data(gc_state.modal.coord_select,
 8003964:	4906      	ldr	r1, [pc, #24]	; (8003980 <gc_init+0x28>)
 8003966:	2000      	movs	r0, #0
 8003968:	f003 fb84 	bl	8007074 <settings_read_coord_data>
 800396c:	b920      	cbnz	r0, 8003978 <gc_init+0x20>
			gc_state.coord_system)))
	{
		report_status_message(STATUS_SETTING_READ_FAIL);
 800396e:	2007      	movs	r0, #7
	}
}
 8003970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		report_status_message(STATUS_SETTING_READ_FAIL);
 8003974:	f002 bdb6 	b.w	80064e4 <report_status_message>
 8003978:	bd08      	pop	{r3, pc}
 800397a:	bf00      	nop
 800397c:	2000422c 	.word	0x2000422c
 8003980:	20004264 	.word	0x20004264

08003984 <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
	system_convert_array_steps_to_mpos(gc_state.position, sys_position);
 8003984:	4901      	ldr	r1, [pc, #4]	; (800398c <gc_sync_position+0x8>)
 8003986:	4802      	ldr	r0, [pc, #8]	; (8003990 <gc_sync_position+0xc>)
 8003988:	f004 bc9c 	b.w	80082c4 <system_convert_array_steps_to_mpos>
 800398c:	20003978 	.word	0x20003978
 8003990:	2000424c 	.word	0x2000424c
 8003994:	00000000 	.word	0x00000000

08003998 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8003998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800399c:	ed2d 8b02 	vpush	{d8}
	 updates these modes and commands as the block line is parser and will only be used and
	 executed after successful error-checking. The parser block struct also contains a block
	 values struct, word tracking variables, and a non-modal commands tracker for the new
	 block. This struct contains all of the necessary information to execute the block. */

	memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 80039a0:	2264      	movs	r2, #100	; 0x64
{
 80039a2:	b097      	sub	sp, #92	; 0x5c
 80039a4:	4681      	mov	r9, r0
	memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 80039a6:	2100      	movs	r1, #0
 80039a8:	48b1      	ldr	r0, [pc, #708]	; (8003c70 <gc_execute_line+0x2d8>)
 80039aa:	f005 f9c2 	bl	8008d32 <memset>
	memcpy(&gc_block.modal, &gc_state.modal, sizeof(gc_modal_t)); // Copy current modes
 80039ae:	4bb1      	ldr	r3, [pc, #708]	; (8003c74 <gc_execute_line+0x2dc>)
 80039b0:	4ab1      	ldr	r2, [pc, #708]	; (8003c78 <gc_execute_line+0x2e0>)
 80039b2:	f103 0508 	add.w	r5, r3, #8
 80039b6:	4698      	mov	r8, r3
 80039b8:	461c      	mov	r4, r3
 80039ba:	cc03      	ldmia	r4!, {r0, r1}
 80039bc:	42ac      	cmp	r4, r5
 80039be:	6010      	str	r0, [r2, #0]
 80039c0:	6051      	str	r1, [r2, #4]
 80039c2:	4623      	mov	r3, r4
 80039c4:	f102 0208 	add.w	r2, r2, #8
 80039c8:	d1f6      	bne.n	80039b8 <gc_execute_line+0x20>
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	6010      	str	r0, [r2, #0]
 80039ce:	79a3      	ldrb	r3, [r4, #6]
 80039d0:	88a1      	ldrh	r1, [r4, #4]
 80039d2:	8091      	strh	r1, [r2, #4]
 80039d4:	7193      	strb	r3, [r2, #6]
	uint32_t value_words = 0; // Tracks value words.

	uint8_t gc_parser_flags = GC_PARSER_NONE;

	// Determine if the line is a jogging motion or a normal g-code block.
	if (line[0] == '$')
 80039d6:	f899 3000 	ldrb.w	r3, [r9]
 80039da:	2b24      	cmp	r3, #36	; 0x24
 80039dc:	f04f 0a00 	mov.w	sl, #0
 80039e0:	f040 87c2 	bne.w	8004968 <gc_execute_line+0xfd0>
	{ // NOTE: `$J=` already parsed when passed to this function.
		// Set G1 and G94 enforced modes to ensure accurate error checks.
		gc_parser_flags |= GC_PARSER_JOG_MOTION;
		gc_block.modal.motion = MOTION_MODE_LINEAR;
 80039e4:	4aa2      	ldr	r2, [pc, #648]	; (8003c70 <gc_execute_line+0x2d8>)
 80039e6:	2301      	movs	r3, #1
		gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 80039e8:	f882 a002 	strb.w	sl, [r2, #2]
		gc_block.modal.motion = MOTION_MODE_LINEAR;
 80039ec:	7053      	strb	r3, [r2, #1]
	float value;
	uint8_t int_value = 0;
	uint16_t mantissa = 0;
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
	{
		char_counter = 3;
 80039ee:	2203      	movs	r2, #3
 80039f0:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
		gc_parser_flags |= GC_PARSER_JOG_MOTION;
 80039f4:	469a      	mov	sl, r3
				word_bit = WORD_Y;
				gc_block.values.xyz[Y_AXIS] = value;
				axis_words |= (1 << Y_AXIS);
				break;
			case 'Z':
				word_bit = WORD_Z;
 80039f6:	2400      	movs	r4, #0
		mantissa = round(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 80039f8:	eddf 8aa0 	vldr	s17, [pc, #640]	; 8003c7c <gc_execute_line+0x2e4>
				gc_block.modal.motion = int_value;
 80039fc:	4e9c      	ldr	r6, [pc, #624]	; (8003c70 <gc_execute_line+0x2d8>)
				word_bit = WORD_Z;
 80039fe:	9406      	str	r4, [sp, #24]
 8003a00:	9404      	str	r4, [sp, #16]
 8003a02:	4625      	mov	r5, r4
 8003a04:	4627      	mov	r7, r4
	while (line[char_counter] != 0)
 8003a06:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8003a0a:	f819 b002 	ldrb.w	fp, [r9, r2]
 8003a0e:	f1bb 0f00 	cmp.w	fp, #0
 8003a12:	d123      	bne.n	8003a5c <gc_execute_line+0xc4>
	 */

	// [0. Non-specific/common error-checks and miscellaneous setup]:
	// Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
	// command has been sent. If so, set axis command to current motion mode.
	if (axis_words)
 8003a14:	b115      	cbz	r5, 8003a1c <gc_execute_line+0x84>
	{
		if (!axis_command)
		{
			axis_command = AXIS_COMMAND_MOTION_MODE;
 8003a16:	2f00      	cmp	r7, #0
 8003a18:	bf08      	it	eq
 8003a1a:	2702      	moveq	r7, #2
		} // Assign implicit motion-mode
	}

	// Check for valid line number N value.
	if (bit_istrue(value_words, bit(WORD_N)))
 8003a1c:	06a6      	lsls	r6, r4, #26
 8003a1e:	d505      	bpl.n	8003a2c <gc_execute_line+0x94>
	{
		// Line number value cannot be less than zero (done) or greater than max line number.
		if (gc_block.values.n > MAX_LINE_NUMBER)
 8003a20:	4b93      	ldr	r3, [pc, #588]	; (8003c70 <gc_execute_line+0x2d8>)
 8003a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a24:	4b96      	ldr	r3, [pc, #600]	; (8003c80 <gc_execute_line+0x2e8>)
 8003a26:	429a      	cmp	r2, r3
 8003a28:	f300 8783 	bgt.w	8004932 <gc_execute_line+0xf9a>
	// [1. Comments ]: MSG's NOT SUPPORTED. Comment handling performed by protocol.

	// [2. Set feed rate mode ]: G93 F word missing with G1,G2/3 active, implicitly or explicitly. Feed rate
	//   is not defined after switching to G94 from G93.
	// NOTE: For jogging, ignore prior feed rate mode. Enforce G94 and check for required F word.
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
 8003a2c:	f1ba 0f00 	cmp.w	sl, #0
 8003a30:	f000 81f8 	beq.w	8003e24 <gc_execute_line+0x48c>
	{
		if (bit_isfalse(value_words, bit(WORD_F)))
 8003a34:	07e0      	lsls	r0, r4, #31
 8003a36:	f140 8785 	bpl.w	8004944 <gc_execute_line+0xfac>
		{
			FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE);
		}
		if (gc_block.modal.units == UNITS_MODE_INCHES)
 8003a3a:	4e8d      	ldr	r6, [pc, #564]	; (8003c70 <gc_execute_line+0x2d8>)
			// - In units per mm mode: If F word passed, ensure value is in mm/min, otherwise push last state value.
			if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN)
			{ // Last state is also G94
				if (bit_istrue(value_words, bit(WORD_F)))
				{
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 8003a3c:	78f3      	ldrb	r3, [r6, #3]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	f040 81fd 	bne.w	8003e3e <gc_execute_line+0x4a6>
					{
						gc_block.values.f *= MM_PER_INCH;
 8003a44:	6930      	ldr	r0, [r6, #16]
 8003a46:	f7fc fd77 	bl	8000538 <__aeabi_f2d>
 8003a4a:	a387      	add	r3, pc, #540	; (adr r3, 8003c68 <gc_execute_line+0x2d0>)
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f7fc fdc6 	bl	80005e0 <__aeabi_dmul>
 8003a54:	f7fd f8bc 	bl	8000bd0 <__aeabi_d2f>
 8003a58:	6130      	str	r0, [r6, #16]
 8003a5a:	e1f0      	b.n	8003e3e <gc_execute_line+0x4a6>
		if ((letter < 'A') || (letter > 'Z'))
 8003a5c:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
 8003a60:	9307      	str	r3, [sp, #28]
 8003a62:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8003a66:	2919      	cmp	r1, #25
 8003a68:	f200 8751 	bhi.w	800490e <gc_execute_line+0xf76>
		char_counter++;
 8003a6c:	3201      	adds	r2, #1
 8003a6e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
		if (!read_float(line, &char_counter, &value))
 8003a72:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8003a76:	aa0c      	add	r2, sp, #48	; 0x30
 8003a78:	4648      	mov	r0, r9
 8003a7a:	f001 fbdd 	bl	8005238 <read_float>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	f000 8748 	beq.w	8004914 <gc_execute_line+0xf7c>
		int_value = trunc(value);
 8003a84:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
 8003a88:	ee18 0a10 	vmov	r0, s16
 8003a8c:	f7fc fd54 	bl	8000538 <__aeabi_f2d>
 8003a90:	ec41 0b10 	vmov	d0, r0, r1
 8003a94:	f005 ff08 	bl	80098a8 <trunc>
 8003a98:	ec51 0b10 	vmov	r0, r1, d0
 8003a9c:	f7fd f878 	bl	8000b90 <__aeabi_d2uiz>
 8003aa0:	b2c2      	uxtb	r2, r0
		mantissa = round(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8003aa2:	ee07 2a90 	vmov	s15, r2
 8003aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aaa:	9208      	str	r2, [sp, #32]
 8003aac:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003ab0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8003ab4:	ee17 0a90 	vmov	r0, s15
 8003ab8:	f7fc fd3e 	bl	8000538 <__aeabi_f2d>
 8003abc:	ec41 0b10 	vmov	d0, r0, r1
 8003ac0:	f005 feac 	bl	800981c <round>
 8003ac4:	ec51 0b10 	vmov	r0, r1, d0
 8003ac8:	f7fd f862 	bl	8000b90 <__aeabi_d2uiz>
		switch (letter)
 8003acc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
		mantissa = round(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8003ad0:	b280      	uxth	r0, r0
		switch (letter)
 8003ad2:	9a08      	ldr	r2, [sp, #32]
 8003ad4:	d022      	beq.n	8003b1c <gc_execute_line+0x184>
 8003ad6:	f1bb 0f4d 	cmp.w	fp, #77	; 0x4d
 8003ada:	f000 80d7 	beq.w	8003c8c <gc_execute_line+0x2f4>
			switch (letter)
 8003ade:	9b07      	ldr	r3, [sp, #28]
 8003ae0:	2b19      	cmp	r3, #25
 8003ae2:	d828      	bhi.n	8003b36 <gc_execute_line+0x19e>
 8003ae4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003ae8:	013a0122 	.word	0x013a0122
 8003aec:	00270140 	.word	0x00270140
 8003af0:	014a0146 	.word	0x014a0146
 8003af4:	00270027 	.word	0x00270027
 8003af8:	0156014e 	.word	0x0156014e
 8003afc:	0166015e 	.word	0x0166015e
 8003b00:	016a0027 	.word	0x016a0027
 8003b04:	01700027 	.word	0x01700027
 8003b08:	01780174 	.word	0x01780174
 8003b0c:	0180017c 	.word	0x0180017c
 8003b10:	00270027 	.word	0x00270027
 8003b14:	018c0027 	.word	0x018c0027
 8003b18:	01980192 	.word	0x01980192
			switch (int_value)
 8003b1c:	2a28      	cmp	r2, #40	; 0x28
 8003b1e:	f000 8098 	beq.w	8003c52 <gc_execute_line+0x2ba>
 8003b22:	d81d      	bhi.n	8003b60 <gc_execute_line+0x1c8>
 8003b24:	2a13      	cmp	r2, #19
 8003b26:	d808      	bhi.n	8003b3a <gc_execute_line+0x1a2>
 8003b28:	2a11      	cmp	r2, #17
 8003b2a:	d26f      	bcs.n	8003c0c <gc_execute_line+0x274>
 8003b2c:	2a04      	cmp	r2, #4
 8003b2e:	d058      	beq.n	8003be2 <gc_execute_line+0x24a>
 8003b30:	d311      	bcc.n	8003b56 <gc_execute_line+0x1be>
 8003b32:	2a0a      	cmp	r2, #10
 8003b34:	d050      	beq.n	8003bd8 <gc_execute_line+0x240>
					FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
				} // [G10 L2 R not supported]
			}
			else
			{
				FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 8003b36:	2414      	movs	r4, #20
 8003b38:	e06e      	b.n	8003c18 <gc_execute_line+0x280>
			switch (int_value)
 8003b3a:	2a1c      	cmp	r2, #28
 8003b3c:	d04c      	beq.n	8003bd8 <gc_execute_line+0x240>
 8003b3e:	d806      	bhi.n	8003b4e <gc_execute_line+0x1b6>
 8003b40:	2a15      	cmp	r2, #21
 8003b42:	d8f8      	bhi.n	8003b36 <gc_execute_line+0x19e>
				gc_block.modal.units = 21 - int_value;
 8003b44:	f1c2 0215 	rsb	r2, r2, #21
 8003b48:	70f2      	strb	r2, [r6, #3]
				word_bit = MODAL_GROUP_G6;
 8003b4a:	2306      	movs	r3, #6
				break;
 8003b4c:	e061      	b.n	8003c12 <gc_execute_line+0x27a>
			switch (int_value)
 8003b4e:	2a1e      	cmp	r2, #30
 8003b50:	d042      	beq.n	8003bd8 <gc_execute_line+0x240>
 8003b52:	2a26      	cmp	r2, #38	; 0x26
 8003b54:	d1ef      	bne.n	8003b36 <gc_execute_line+0x19e>
				if (axis_command)
 8003b56:	2f00      	cmp	r7, #0
 8003b58:	f040 86df 	bne.w	800491a <gc_execute_line+0xf82>
				axis_command = AXIS_COMMAND_MOTION_MODE;
 8003b5c:	2702      	movs	r7, #2
 8003b5e:	e01e      	b.n	8003b9e <gc_execute_line+0x206>
			switch (int_value)
 8003b60:	2a3d      	cmp	r2, #61	; 0x3d
 8003b62:	d071      	beq.n	8003c48 <gc_execute_line+0x2b0>
 8003b64:	d815      	bhi.n	8003b92 <gc_execute_line+0x1fa>
 8003b66:	2a35      	cmp	r2, #53	; 0x35
 8003b68:	d03b      	beq.n	8003be2 <gc_execute_line+0x24a>
 8003b6a:	d80c      	bhi.n	8003b86 <gc_execute_line+0x1ee>
 8003b6c:	2a2b      	cmp	r2, #43	; 0x2b
 8003b6e:	d001      	beq.n	8003b74 <gc_execute_line+0x1dc>
 8003b70:	2a31      	cmp	r2, #49	; 0x31
 8003b72:	d1e0      	bne.n	8003b36 <gc_execute_line+0x19e>
				if (axis_command)
 8003b74:	2f00      	cmp	r7, #0
 8003b76:	f040 86d0 	bne.w	800491a <gc_execute_line+0xf82>
				if (int_value == 49)
 8003b7a:	2a31      	cmp	r2, #49	; 0x31
 8003b7c:	d15e      	bne.n	8003c3c <gc_execute_line+0x2a4>
					gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 8003b7e:	71b7      	strb	r7, [r6, #6]
				word_bit = MODAL_GROUP_G8;
 8003b80:	2308      	movs	r3, #8
				axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8003b82:	2703      	movs	r7, #3
 8003b84:	e03a      	b.n	8003bfc <gc_execute_line+0x264>
			switch (int_value)
 8003b86:	2a3b      	cmp	r2, #59	; 0x3b
 8003b88:	d8d5      	bhi.n	8003b36 <gc_execute_line+0x19e>
				gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8003b8a:	3a36      	subs	r2, #54	; 0x36
 8003b8c:	71f2      	strb	r2, [r6, #7]
				word_bit = MODAL_GROUP_G12;
 8003b8e:	2309      	movs	r3, #9
				break;
 8003b90:	e03f      	b.n	8003c12 <gc_execute_line+0x27a>
			switch (int_value)
 8003b92:	2a5b      	cmp	r2, #91	; 0x5b
 8003b94:	d817      	bhi.n	8003bc6 <gc_execute_line+0x22e>
 8003b96:	2a5a      	cmp	r2, #90	; 0x5a
 8003b98:	d244      	bcs.n	8003c24 <gc_execute_line+0x28c>
 8003b9a:	2a50      	cmp	r2, #80	; 0x50
 8003b9c:	d1cb      	bne.n	8003b36 <gc_execute_line+0x19e>
				if (int_value == 38)
 8003b9e:	2a26      	cmp	r2, #38	; 0x26
				gc_block.modal.motion = int_value;
 8003ba0:	7072      	strb	r2, [r6, #1]
				if (int_value == 38)
 8003ba2:	d15a      	bne.n	8003c5a <gc_execute_line+0x2c2>
					if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40)
 8003ba4:	f1a0 0314 	sub.w	r3, r0, #20
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b1e      	cmp	r3, #30
 8003bac:	d8c3      	bhi.n	8003b36 <gc_execute_line+0x19e>
 8003bae:	4a35      	ldr	r2, [pc, #212]	; (8003c84 <gc_execute_line+0x2ec>)
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb4:	07da      	lsls	r2, r3, #31
 8003bb6:	d5be      	bpl.n	8003b36 <gc_execute_line+0x19e>
					gc_block.modal.motion += (mantissa / 10) + 100;
 8003bb8:	220a      	movs	r2, #10
 8003bba:	fbb0 f0f2 	udiv	r0, r0, r2
 8003bbe:	3876      	subs	r0, #118	; 0x76
 8003bc0:	7070      	strb	r0, [r6, #1]
				word_bit = MODAL_GROUP_G1;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e01a      	b.n	8003bfc <gc_execute_line+0x264>
			switch (int_value)
 8003bc6:	2a5c      	cmp	r2, #92	; 0x5c
 8003bc8:	d006      	beq.n	8003bd8 <gc_execute_line+0x240>
 8003bca:	2a5e      	cmp	r2, #94	; 0x5e
 8003bcc:	d8b3      	bhi.n	8003b36 <gc_execute_line+0x19e>
				gc_block.modal.feed_rate = 94 - int_value;
 8003bce:	f1c2 025e 	rsb	r2, r2, #94	; 0x5e
 8003bd2:	70b2      	strb	r2, [r6, #2]
				word_bit = MODAL_GROUP_G5;
 8003bd4:	2305      	movs	r3, #5
				break;
 8003bd6:	e01c      	b.n	8003c12 <gc_execute_line+0x27a>
				if (mantissa == 0)
 8003bd8:	b918      	cbnz	r0, 8003be2 <gc_execute_line+0x24a>
					if (axis_command)
 8003bda:	2f00      	cmp	r7, #0
 8003bdc:	f040 869d 	bne.w	800491a <gc_execute_line+0xf82>
					axis_command = AXIS_COMMAND_NON_MODAL;
 8003be0:	2701      	movs	r7, #1
				if ((int_value == 28) || (int_value == 30) || (int_value == 92))
 8003be2:	f002 03fd 	and.w	r3, r2, #253	; 0xfd
 8003be6:	2b1c      	cmp	r3, #28
				gc_block.non_modal_command = int_value;
 8003be8:	7032      	strb	r2, [r6, #0]
				if ((int_value == 28) || (int_value == 30) || (int_value == 92))
 8003bea:	d001      	beq.n	8003bf0 <gc_execute_line+0x258>
 8003bec:	2a5c      	cmp	r2, #92	; 0x5c
 8003bee:	d132      	bne.n	8003c56 <gc_execute_line+0x2be>
					if (!((mantissa == 0) || (mantissa == 10)))
 8003bf0:	b108      	cbz	r0, 8003bf6 <gc_execute_line+0x25e>
 8003bf2:	280a      	cmp	r0, #10
 8003bf4:	d19f      	bne.n	8003b36 <gc_execute_line+0x19e>
					gc_block.non_modal_command += mantissa;
 8003bf6:	4410      	add	r0, r2
 8003bf8:	7030      	strb	r0, [r6, #0]
				word_bit = MODAL_GROUP_G0;
 8003bfa:	2300      	movs	r3, #0
			if (bit_istrue(command_words, bit(word_bit)))
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	9a06      	ldr	r2, [sp, #24]
 8003c04:	421a      	tst	r2, r3
 8003c06:	d02a      	beq.n	8003c5e <gc_execute_line+0x2c6>
				FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION);
 8003c08:	2415      	movs	r4, #21
 8003c0a:	e005      	b.n	8003c18 <gc_execute_line+0x280>
				gc_block.modal.plane_select = int_value - 17;
 8003c0c:	3a11      	subs	r2, #17
 8003c0e:	7172      	strb	r2, [r6, #5]
				word_bit = MODAL_GROUP_G2;
 8003c10:	2302      	movs	r3, #2
			if (mantissa > 0)
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d0f2      	beq.n	8003bfc <gc_execute_line+0x264>
				FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER);
 8003c16:	2417      	movs	r4, #23
#endif

	// TODO: % to denote start of program.

	return (STATUS_OK);
}
 8003c18:	4620      	mov	r0, r4
 8003c1a:	b017      	add	sp, #92	; 0x5c
 8003c1c:	ecbd 8b02 	vpop	{d8}
 8003c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (mantissa == 0)
 8003c24:	b918      	cbnz	r0, 8003c2e <gc_execute_line+0x296>
					gc_block.modal.distance = int_value - 90;
 8003c26:	3a5a      	subs	r2, #90	; 0x5a
 8003c28:	7132      	strb	r2, [r6, #4]
					word_bit = MODAL_GROUP_G3;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e7e6      	b.n	8003bfc <gc_execute_line+0x264>
					if ((mantissa != 10) || (int_value == 90))
 8003c2e:	280a      	cmp	r0, #10
 8003c30:	d181      	bne.n	8003b36 <gc_execute_line+0x19e>
 8003c32:	2a5a      	cmp	r2, #90	; 0x5a
 8003c34:	f43f af7f 	beq.w	8003b36 <gc_execute_line+0x19e>
					word_bit = MODAL_GROUP_G4;
 8003c38:	2304      	movs	r3, #4
 8003c3a:	e7df      	b.n	8003bfc <gc_execute_line+0x264>
				else if (mantissa == 10)
 8003c3c:	280a      	cmp	r0, #10
 8003c3e:	f47f af7a 	bne.w	8003b36 <gc_execute_line+0x19e>
					gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8003c42:	2301      	movs	r3, #1
 8003c44:	71b3      	strb	r3, [r6, #6]
 8003c46:	e79b      	b.n	8003b80 <gc_execute_line+0x1e8>
				if (mantissa != 0)
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	f47f af74 	bne.w	8003b36 <gc_execute_line+0x19e>
				word_bit = MODAL_GROUP_G13;
 8003c4e:	230a      	movs	r3, #10
 8003c50:	e7d4      	b.n	8003bfc <gc_execute_line+0x264>
				word_bit = MODAL_GROUP_G7;
 8003c52:	2307      	movs	r3, #7
 8003c54:	e7dd      	b.n	8003c12 <gc_execute_line+0x27a>
				word_bit = MODAL_GROUP_G0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e7db      	b.n	8003c12 <gc_execute_line+0x27a>
				word_bit = MODAL_GROUP_G1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e7d9      	b.n	8003c12 <gc_execute_line+0x27a>
			command_words |= bit(word_bit);
 8003c5e:	9a06      	ldr	r2, [sp, #24]
			command_words |= bit(word_bit);
 8003c60:	431a      	orrs	r2, r3
 8003c62:	9206      	str	r2, [sp, #24]
			break;
 8003c64:	e6cf      	b.n	8003a06 <gc_execute_line+0x6e>
 8003c66:	bf00      	nop
 8003c68:	66666666 	.word	0x66666666
 8003c6c:	40396666 	.word	0x40396666
 8003c70:	20004298 	.word	0x20004298
 8003c74:	2000422c 	.word	0x2000422c
 8003c78:	20004299 	.word	0x20004299
 8003c7c:	42c80000 	.word	0x42c80000
 8003c80:	00989680 	.word	0x00989680
 8003c84:	40100401 	.word	0x40100401
 8003c88:	437f0000 	.word	0x437f0000
			if (mantissa > 0)
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d1c2      	bne.n	8003c16 <gc_execute_line+0x27e>
			switch (int_value)
 8003c90:	2a09      	cmp	r2, #9
 8003c92:	d814      	bhi.n	8003cbe <gc_execute_line+0x326>
 8003c94:	2a07      	cmp	r2, #7
 8003c96:	d235      	bcs.n	8003d04 <gc_execute_line+0x36c>
 8003c98:	2a02      	cmp	r2, #2
 8003c9a:	d926      	bls.n	8003cea <gc_execute_line+0x352>
 8003c9c:	2a05      	cmp	r2, #5
 8003c9e:	f63f af4a 	bhi.w	8003b36 <gc_execute_line+0x19e>
				switch (int_value)
 8003ca2:	2a04      	cmp	r2, #4
 8003ca4:	d02a      	beq.n	8003cfc <gc_execute_line+0x364>
 8003ca6:	2a05      	cmp	r2, #5
 8003ca8:	d02a      	beq.n	8003d00 <gc_execute_line+0x368>
					gc_block.modal.spindle = SPINDLE_ENABLE_CW;
 8003caa:	2310      	movs	r3, #16
					gc_block.modal.spindle = SPINDLE_DISABLE;
 8003cac:	72b3      	strb	r3, [r6, #10]
				word_bit = MODAL_GROUP_M7;
 8003cae:	230c      	movs	r3, #12
			if (bit_istrue(command_words, bit(word_bit)))
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	9a06      	ldr	r2, [sp, #24]
 8003cb8:	421a      	tst	r2, r3
 8003cba:	d0d1      	beq.n	8003c60 <gc_execute_line+0x2c8>
 8003cbc:	e7a4      	b.n	8003c08 <gc_execute_line+0x270>
			switch (int_value)
 8003cbe:	2a3f      	cmp	r2, #63	; 0x3f
 8003cc0:	d02c      	beq.n	8003d1c <gc_execute_line+0x384>
 8003cc2:	d808      	bhi.n	8003cd6 <gc_execute_line+0x33e>
 8003cc4:	2a1e      	cmp	r2, #30
 8003cc6:	d013      	beq.n	8003cf0 <gc_execute_line+0x358>
 8003cc8:	2a3e      	cmp	r2, #62	; 0x3e
 8003cca:	f47f af34 	bne.w	8003b36 <gc_execute_line+0x19e>
				gc_block.modal.digital = DIGITAL_CONTROL_ON;
 8003cce:	2301      	movs	r3, #1
				gc_block.modal.digital = DIGITAL_CONTROL_OFF;
 8003cd0:	7333      	strb	r3, [r6, #12]
				word_bit = MODAL_GROUP_MO;
 8003cd2:	230f      	movs	r3, #15
				break;
 8003cd4:	e7ec      	b.n	8003cb0 <gc_execute_line+0x318>
			switch (int_value)
 8003cd6:	2a43      	cmp	r2, #67	; 0x43
 8003cd8:	d022      	beq.n	8003d20 <gc_execute_line+0x388>
 8003cda:	2a64      	cmp	r2, #100	; 0x64
 8003cdc:	d023      	beq.n	8003d26 <gc_execute_line+0x38e>
 8003cde:	2a42      	cmp	r2, #66	; 0x42
 8003ce0:	f47f af29 	bne.w	8003b36 <gc_execute_line+0x19e>
				gc_block.modal.waitoninput = WAITONINPUT_CONTROL;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	7373      	strb	r3, [r6, #13]
 8003ce8:	e7f3      	b.n	8003cd2 <gc_execute_line+0x33a>
				switch (int_value)
 8003cea:	b11a      	cbz	r2, 8003cf4 <gc_execute_line+0x35c>
 8003cec:	2a01      	cmp	r2, #1
 8003cee:	d003      	beq.n	8003cf8 <gc_execute_line+0x360>
					gc_block.modal.program_flow = int_value; // Program end and reset
 8003cf0:	7232      	strb	r2, [r6, #8]
 8003cf2:	e001      	b.n	8003cf8 <gc_execute_line+0x360>
					gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	7233      	strb	r3, [r6, #8]
				word_bit = MODAL_GROUP_M4;
 8003cf8:	230b      	movs	r3, #11
 8003cfa:	e7d9      	b.n	8003cb0 <gc_execute_line+0x318>
					gc_block.modal.spindle = SPINDLE_ENABLE_CCW;
 8003cfc:	2320      	movs	r3, #32
 8003cfe:	e7d5      	b.n	8003cac <gc_execute_line+0x314>
					gc_block.modal.spindle = SPINDLE_DISABLE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e7d3      	b.n	8003cac <gc_execute_line+0x314>
				switch (int_value)
 8003d04:	2a08      	cmp	r2, #8
 8003d06:	d005      	beq.n	8003d14 <gc_execute_line+0x37c>
 8003d08:	2a09      	cmp	r2, #9
 8003d0a:	d005      	beq.n	8003d18 <gc_execute_line+0x380>
					gc_block.modal.coolant = COOLANT_MIST_ENABLE;
 8003d0c:	2380      	movs	r3, #128	; 0x80
					gc_block.modal.coolant = COOLANT_DISABLE;
 8003d0e:	7273      	strb	r3, [r6, #9]
				word_bit = MODAL_GROUP_M8;
 8003d10:	230d      	movs	r3, #13
					break;
 8003d12:	e7cd      	b.n	8003cb0 <gc_execute_line+0x318>
					gc_block.modal.coolant = COOLANT_FLOOD_ENABLE;
 8003d14:	2340      	movs	r3, #64	; 0x40
 8003d16:	e7fa      	b.n	8003d0e <gc_execute_line+0x376>
					gc_block.modal.coolant = COOLANT_DISABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e7f8      	b.n	8003d0e <gc_execute_line+0x376>
				gc_block.modal.digital = DIGITAL_CONTROL_OFF;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e7d7      	b.n	8003cd0 <gc_execute_line+0x338>
				gc_block.modal.analog = ANALOG_CONTROL;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73b3      	strb	r3, [r6, #14]
 8003d24:	e7d5      	b.n	8003cd2 <gc_execute_line+0x33a>
				gc_block.modal.accel_scaling = ACCEL_SCALING;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73f3      	strb	r3, [r6, #15]
 8003d2a:	e7d2      	b.n	8003cd2 <gc_execute_line+0x33a>
				gc_block.values.xyz[A_AXIS] = value;
 8003d2c:	ed86 8a14 	vstr	s16, [r6, #80]	; 0x50
				axis_words |= (1 << A_AXIS);
 8003d30:	f045 0508 	orr.w	r5, r5, #8
				word_bit = WORD_A;
 8003d34:	230d      	movs	r3, #13
			if (bit_istrue(value_words, bit(word_bit)))
 8003d36:	2201      	movs	r2, #1
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	4214      	tst	r4, r2
 8003d3c:	f040 85f3 	bne.w	8004926 <gc_execute_line+0xf8e>
			if ( bit(word_bit)
 8003d40:	f240 3161 	movw	r1, #865	; 0x361
 8003d44:	fa41 f303 	asr.w	r3, r1, r3
 8003d48:	07db      	lsls	r3, r3, #31
 8003d4a:	d505      	bpl.n	8003d58 <gc_execute_line+0x3c0>
				if (value < 0.0)
 8003d4c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d54:	f100 85ea 	bmi.w	800492c <gc_execute_line+0xf94>
			value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8003d58:	4314      	orrs	r4, r2
 8003d5a:	e654      	b.n	8003a06 <gc_execute_line+0x6e>
				gc_block.values.xyz[B_AXIS] = value;
 8003d5c:	ed86 8a15 	vstr	s16, [r6, #84]	; 0x54
				axis_words |= (1 << B_AXIS);
 8003d60:	f045 0510 	orr.w	r5, r5, #16
				word_bit = WORD_B;
 8003d64:	230e      	movs	r3, #14
				break;
 8003d66:	e7e6      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.xyz[C_AXIS] = value;
 8003d68:	ed86 8a16 	vstr	s16, [r6, #88]	; 0x58
				axis_words |= (1 << C_AXIS);
 8003d6c:	f045 0520 	orr.w	r5, r5, #32
				word_bit = WORD_C;
 8003d70:	230f      	movs	r3, #15
				break;
 8003d72:	e7e0      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.e = int_value;
 8003d74:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
				word_bit = WORD_E;
 8003d78:	2310      	movs	r3, #16
				break;
 8003d7a:	e7dc      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.f = value;
 8003d7c:	ed86 8a04 	vstr	s16, [r6, #16]
				word_bit = WORD_F;
 8003d80:	2300      	movs	r3, #0
				break;
 8003d82:	e7d8      	b.n	8003d36 <gc_execute_line+0x39e>
				ijk_words |= (1 << X_AXIS);
 8003d84:	9b04      	ldr	r3, [sp, #16]
				gc_block.values.ijk[X_AXIS] = value;
 8003d86:	ed86 8a05 	vstr	s16, [r6, #20]
				ijk_words |= (1 << X_AXIS);
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	9304      	str	r3, [sp, #16]
				word_bit = WORD_I;
 8003d90:	2301      	movs	r3, #1
				break;
 8003d92:	e7d0      	b.n	8003d36 <gc_execute_line+0x39e>
				ijk_words |= (1 << Y_AXIS);
 8003d94:	9b04      	ldr	r3, [sp, #16]
				gc_block.values.ijk[Y_AXIS] = value;
 8003d96:	ed86 8a06 	vstr	s16, [r6, #24]
				ijk_words |= (1 << Y_AXIS);
 8003d9a:	f043 0302 	orr.w	r3, r3, #2
 8003d9e:	9304      	str	r3, [sp, #16]
				word_bit = WORD_J;
 8003da0:	2302      	movs	r3, #2
				break;
 8003da2:	e7c8      	b.n	8003d36 <gc_execute_line+0x39e>
				ijk_words |= (1 << Z_AXIS);
 8003da4:	9b04      	ldr	r3, [sp, #16]
				gc_block.values.ijk[Z_AXIS] = value;
 8003da6:	ed86 8a07 	vstr	s16, [r6, #28]
				ijk_words |= (1 << Z_AXIS);
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	9304      	str	r3, [sp, #16]
				word_bit = WORD_K;
 8003db0:	2303      	movs	r3, #3
				break;
 8003db2:	e7c0      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.l = int_value;
 8003db4:	f886 202c 	strb.w	r2, [r6, #44]	; 0x2c
				word_bit = WORD_L;
 8003db8:	2304      	movs	r3, #4
				break;
 8003dba:	e7bc      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.n = trunc(value);
 8003dbc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
				word_bit = WORD_N;
 8003dc0:	2305      	movs	r3, #5
				gc_block.values.n = trunc(value);
 8003dc2:	edc6 7a0c 	vstr	s15, [r6, #48]	; 0x30
				break;
 8003dc6:	e7b6      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.p = value;
 8003dc8:	ed86 8a0d 	vstr	s16, [r6, #52]	; 0x34
				word_bit = WORD_P;
 8003dcc:	2306      	movs	r3, #6
				break;
 8003dce:	e7b2      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.q = value;
 8003dd0:	ed86 8a18 	vstr	s16, [r6, #96]	; 0x60
				word_bit = WORD_Q;
 8003dd4:	2311      	movs	r3, #17
				break;
 8003dd6:	e7ae      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.r = value;
 8003dd8:	ed86 8a0e 	vstr	s16, [r6, #56]	; 0x38
				word_bit = WORD_R;
 8003ddc:	2307      	movs	r3, #7
				break;
 8003dde:	e7aa      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.s = value;
 8003de0:	ed86 8a0f 	vstr	s16, [r6, #60]	; 0x3c
				word_bit = WORD_S;
 8003de4:	2308      	movs	r3, #8
				break;
 8003de6:	e7a6      	b.n	8003d36 <gc_execute_line+0x39e>
				if (value > MAX_TOOL_NUMBER)
 8003de8:	ed5f 7a59 	vldr	s15, [pc, #-356]	; 8003c88 <gc_execute_line+0x2f0>
 8003dec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df4:	f300 8594 	bgt.w	8004920 <gc_execute_line+0xf88>
				gc_block.values.t = int_value;
 8003df8:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
				word_bit = WORD_T;
 8003dfc:	2309      	movs	r3, #9
				break;
 8003dfe:	e79a      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.xyz[X_AXIS] = value;
 8003e00:	ed86 8a11 	vstr	s16, [r6, #68]	; 0x44
				axis_words |= (1 << X_AXIS);
 8003e04:	f045 0501 	orr.w	r5, r5, #1
				word_bit = WORD_X;
 8003e08:	230a      	movs	r3, #10
				break;
 8003e0a:	e794      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.xyz[Y_AXIS] = value;
 8003e0c:	ed86 8a12 	vstr	s16, [r6, #72]	; 0x48
				axis_words |= (1 << Y_AXIS);
 8003e10:	f045 0502 	orr.w	r5, r5, #2
				word_bit = WORD_Y;
 8003e14:	230b      	movs	r3, #11
				break;
 8003e16:	e78e      	b.n	8003d36 <gc_execute_line+0x39e>
				gc_block.values.xyz[Z_AXIS] = value;
 8003e18:	ed86 8a13 	vstr	s16, [r6, #76]	; 0x4c
				axis_words |= (1 << Z_AXIS);
 8003e1c:	f045 0504 	orr.w	r5, r5, #4
				word_bit = WORD_Z;
 8003e20:	230c      	movs	r3, #12
				break;
 8003e22:	e788      	b.n	8003d36 <gc_execute_line+0x39e>
		if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME)
 8003e24:	4eb2      	ldr	r6, [pc, #712]	; (80040f0 <gc_execute_line+0x758>)
 8003e26:	78b3      	ldrb	r3, [r6, #2]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d116      	bne.n	8003e5a <gc_execute_line+0x4c2>
			if (axis_command == AXIS_COMMAND_MOTION_MODE)
 8003e2c:	2f02      	cmp	r7, #2
 8003e2e:	d106      	bne.n	8003e3e <gc_execute_line+0x4a6>
				if ((gc_block.modal.motion != MOTION_MODE_NONE)
 8003e30:	7873      	ldrb	r3, [r6, #1]
 8003e32:	2b50      	cmp	r3, #80	; 0x50
 8003e34:	d003      	beq.n	8003e3e <gc_execute_line+0x4a6>
						&& (gc_block.modal.motion != MOTION_MODE_SEEK))
 8003e36:	b113      	cbz	r3, 8003e3e <gc_execute_line+0x4a6>
					if (bit_isfalse(value_words, bit(WORD_F)))
 8003e38:	07e1      	lsls	r1, r4, #31
 8003e3a:	f140 8583 	bpl.w	8004944 <gc_execute_line+0xfac>
	if (bit_isfalse(value_words, bit(WORD_S)))
 8003e3e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003e42:	4eab      	ldr	r6, [pc, #684]	; (80040f0 <gc_execute_line+0x758>)
		gc_block.values.s = gc_state.spindle_speed;
 8003e44:	bf04      	itt	eq
 8003e46:	f8d8 3010 	ldreq.w	r3, [r8, #16]
 8003e4a:	63f3      	streq	r3, [r6, #60]	; 0x3c
	if (gc_block.non_modal_command == NON_MODAL_DWELL)
 8003e4c:	7833      	ldrb	r3, [r6, #0]
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d110      	bne.n	8003e74 <gc_execute_line+0x4dc>
		if (bit_isfalse(value_words, bit(WORD_P)))
 8003e52:	0663      	lsls	r3, r4, #25
 8003e54:	d40c      	bmi.n	8003e70 <gc_execute_line+0x4d8>
			FAIL(STATUS_GCODE_VALUE_WORD_MISSING);
 8003e56:	241c      	movs	r4, #28
 8003e58:	e6de      	b.n	8003c18 <gc_execute_line+0x280>
			if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN)
 8003e5a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1ed      	bne.n	8003e3e <gc_execute_line+0x4a6>
				if (bit_istrue(value_words, bit(WORD_F)))
 8003e62:	07e2      	lsls	r2, r4, #31
 8003e64:	f53f adea 	bmi.w	8003a3c <gc_execute_line+0xa4>
					gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 8003e68:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003e6c:	6133      	str	r3, [r6, #16]
 8003e6e:	e7e6      	b.n	8003e3e <gc_execute_line+0x4a6>
		bit_false(value_words, bit(WORD_P));
 8003e70:	f024 0440 	bic.w	r4, r4, #64	; 0x40
	switch (gc_block.modal.plane_select)
 8003e74:	7973      	ldrb	r3, [r6, #5]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d03b      	beq.n	8003ef2 <gc_execute_line+0x55a>
		axis_linear = X_AXIS;
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	9309      	str	r3, [sp, #36]	; 0x24
 8003e84:	bf0c      	ite	eq
 8003e86:	2300      	moveq	r3, #0
 8003e88:	2302      	movne	r3, #2
 8003e8a:	9308      	str	r3, [sp, #32]
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2302      	moveq	r3, #2
 8003e90:	2301      	movne	r3, #1
		axis_0 = X_AXIS;
 8003e92:	9307      	str	r3, [sp, #28]
	if (gc_block.modal.units == UNITS_MODE_INCHES)
 8003e94:	78f3      	ldrb	r3, [r6, #3]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d030      	beq.n	8003efc <gc_execute_line+0x564>
	if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 8003e9a:	2f03      	cmp	r7, #3
 8003e9c:	d105      	bne.n	8003eaa <gc_execute_line+0x512>
		if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC)
 8003e9e:	79b3      	ldrb	r3, [r6, #6]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d102      	bne.n	8003eaa <gc_execute_line+0x512>
			if (axis_words ^ (1 << TOOL_LENGTH_OFFSET_AXIS))
 8003ea4:	2d04      	cmp	r5, #4
 8003ea6:	f040 8547 	bne.w	8004938 <gc_execute_line+0xfa0>
	memcpy(block_coord_system, gc_state.coord_system,
 8003eaa:	f8df e25c 	ldr.w	lr, [pc, #604]	; 8004108 <gc_execute_line+0x770>
 8003eae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003eb2:	ae10      	add	r6, sp, #64	; 0x40
 8003eb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003eb6:	e89e 0003 	ldmia.w	lr, {r0, r1}
	if (bit_istrue(command_words, bit(MODAL_GROUP_G12)))
 8003eba:	9b06      	ldr	r3, [sp, #24]
 8003ebc:	f413 7f00 	tst.w	r3, #512	; 0x200
	memcpy(block_coord_system, gc_state.coord_system,
 8003ec0:	e886 0003 	stmia.w	r6, {r0, r1}
 8003ec4:	4e8a      	ldr	r6, [pc, #552]	; (80040f0 <gc_execute_line+0x758>)
	if (bit_istrue(command_words, bit(MODAL_GROUP_G12)))
 8003ec6:	d136      	bne.n	8003f36 <gc_execute_line+0x59e>
	switch (gc_block.non_modal_command)
 8003ec8:	7831      	ldrb	r1, [r6, #0]
 8003eca:	290a      	cmp	r1, #10
 8003ecc:	d043      	beq.n	8003f56 <gc_execute_line+0x5be>
 8003ece:	295c      	cmp	r1, #92	; 0x5c
 8003ed0:	f000 811c 	beq.w	800410c <gc_execute_line+0x774>
		if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 8003ed4:	2f03      	cmp	r7, #3
 8003ed6:	f040 814a 	bne.w	800416e <gc_execute_line+0x7d6>
		switch (gc_block.non_modal_command)
 8003eda:	291e      	cmp	r1, #30
 8003edc:	f000 818a 	beq.w	80041f4 <gc_execute_line+0x85c>
 8003ee0:	2935      	cmp	r1, #53	; 0x35
 8003ee2:	f000 81a3 	beq.w	800422c <gc_execute_line+0x894>
 8003ee6:	291c      	cmp	r1, #28
 8003ee8:	f040 813b 	bne.w	8004162 <gc_execute_line+0x7ca>
				if (!settings_read_coord_data(SETTING_INDEX_G28, gc_block.values.ijk))
 8003eec:	4981      	ldr	r1, [pc, #516]	; (80040f4 <gc_execute_line+0x75c>)
 8003eee:	2006      	movs	r0, #6
 8003ef0:	e182      	b.n	80041f8 <gc_execute_line+0x860>
		axis_linear = Z_AXIS;
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	9209      	str	r2, [sp, #36]	; 0x24
		axis_1 = Y_AXIS;
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	9208      	str	r2, [sp, #32]
 8003efa:	e7ca      	b.n	8003e92 <gc_execute_line+0x4fa>
 8003efc:	f8df b204 	ldr.w	fp, [pc, #516]	; 8004104 <gc_execute_line+0x76c>
	if (gc_block.modal.units == UNITS_MODE_INCHES)
 8003f00:	f04f 0900 	mov.w	r9, #0
			if (bit_istrue(axis_words, bit(idx)))
 8003f04:	fa45 f309 	asr.w	r3, r5, r9
 8003f08:	07d8      	lsls	r0, r3, #31
 8003f0a:	d50c      	bpl.n	8003f26 <gc_execute_line+0x58e>
				gc_block.values.xyz[idx] *= MM_PER_INCH;
 8003f0c:	f8db 0000 	ldr.w	r0, [fp]
 8003f10:	f7fc fb12 	bl	8000538 <__aeabi_f2d>
 8003f14:	a374      	add	r3, pc, #464	; (adr r3, 80040e8 <gc_execute_line+0x750>)
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	f7fc fb61 	bl	80005e0 <__aeabi_dmul>
 8003f1e:	f7fc fe57 	bl	8000bd0 <__aeabi_d2f>
 8003f22:	f8cb 0000 	str.w	r0, [fp]
 8003f26:	f109 0901 	add.w	r9, r9, #1
		for (idx = 0; idx < N_AXIS; idx++)
 8003f2a:	f1b9 0f06 	cmp.w	r9, #6
 8003f2e:	f10b 0b04 	add.w	fp, fp, #4
 8003f32:	d1e7      	bne.n	8003f04 <gc_execute_line+0x56c>
 8003f34:	e7b1      	b.n	8003e9a <gc_execute_line+0x502>
		if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM)
 8003f36:	79f0      	ldrb	r0, [r6, #7]
 8003f38:	2806      	cmp	r0, #6
 8003f3a:	d901      	bls.n	8003f40 <gc_execute_line+0x5a8>
			FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS);
 8003f3c:	241d      	movs	r4, #29
 8003f3e:	e66b      	b.n	8003c18 <gc_execute_line+0x280>
		if (gc_state.modal.coord_select != gc_block.modal.coord_select)
 8003f40:	f898 3006 	ldrb.w	r3, [r8, #6]
 8003f44:	4283      	cmp	r3, r0
 8003f46:	d0bf      	beq.n	8003ec8 <gc_execute_line+0x530>
			if (!(settings_read_coord_data(gc_block.modal.coord_select,
 8003f48:	a910      	add	r1, sp, #64	; 0x40
 8003f4a:	f003 f893 	bl	8007074 <settings_read_coord_data>
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	d1ba      	bne.n	8003ec8 <gc_execute_line+0x530>
					FAIL(STATUS_SETTING_READ_FAIL);
 8003f52:	2407      	movs	r4, #7
 8003f54:	e660      	b.n	8003c18 <gc_execute_line+0x280>
		if (!axis_words)
 8003f56:	b90d      	cbnz	r5, 8003f5c <gc_execute_line+0x5c4>
			FAIL(STATUS_GCODE_NO_AXIS_WORDS)
 8003f58:	241a      	movs	r4, #26
 8003f5a:	e65d      	b.n	8003c18 <gc_execute_line+0x280>
		if (bit_isfalse(value_words, ((1<<WORD_P)|(1<<WORD_L))))
 8003f5c:	f014 0f50 	tst.w	r4, #80	; 0x50
 8003f60:	f43f af79 	beq.w	8003e56 <gc_execute_line+0x4be>
		coord_select = trunc(gc_block.values.p); // Convert p value to int.
 8003f64:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8003f66:	f7fc fae7 	bl	8000538 <__aeabi_f2d>
 8003f6a:	ec41 0b10 	vmov	d0, r0, r1
 8003f6e:	f005 fc9b 	bl	80098a8 <trunc>
 8003f72:	ec51 0b10 	vmov	r0, r1, d0
 8003f76:	f7fc fe0b 	bl	8000b90 <__aeabi_d2uiz>
 8003f7a:	b2c0      	uxtb	r0, r0
		if (coord_select > N_COORDINATE_SYSTEM)
 8003f7c:	2806      	cmp	r0, #6
 8003f7e:	d8dd      	bhi.n	8003f3c <gc_execute_line+0x5a4>
		if (gc_block.values.l != 20)
 8003f80:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8003f84:	2b14      	cmp	r3, #20
 8003f86:	d005      	beq.n	8003f94 <gc_execute_line+0x5fc>
			if (gc_block.values.l == 2)
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	f47f add4 	bne.w	8003b36 <gc_execute_line+0x19e>
				if (bit_istrue(value_words, bit(WORD_R)))
 8003f8e:	0621      	lsls	r1, r4, #24
 8003f90:	f53f add1 	bmi.w	8003b36 <gc_execute_line+0x19e>
		bit_false(value_words, (bit(WORD_L)|bit(WORD_P)));
 8003f94:	f024 0450 	bic.w	r4, r4, #80	; 0x50
		if (coord_select > 0)
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	f000 809c 	beq.w	80040d6 <gc_execute_line+0x73e>
			coord_select--;
 8003f9e:	3801      	subs	r0, #1
 8003fa0:	fa5f fb80 	uxtb.w	fp, r0
		if (!settings_read_coord_data(coord_select, gc_block.values.ijk))
 8003fa4:	4953      	ldr	r1, [pc, #332]	; (80040f4 <gc_execute_line+0x75c>)
 8003fa6:	4658      	mov	r0, fp
 8003fa8:	f003 f864 	bl	8007074 <settings_read_coord_data>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d0d0      	beq.n	8003f52 <gc_execute_line+0x5ba>
						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 8003fb0:	4b51      	ldr	r3, [pc, #324]	; (80040f8 <gc_execute_line+0x760>)
 8003fb2:	4950      	ldr	r1, [pc, #320]	; (80040f4 <gc_execute_line+0x75c>)
				if (gc_block.values.l == 20)
 8003fb4:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 8003fb8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	3320      	adds	r3, #32
 8003fc0:	f1a1 0614 	sub.w	r6, r1, #20
			if (bit_istrue(axis_words, bit(idx)))
 8003fc4:	fa45 fe02 	asr.w	lr, r5, r2
 8003fc8:	f01e 0f01 	tst.w	lr, #1
 8003fcc:	d014      	beq.n	8003ff8 <gc_execute_line+0x660>
				if (gc_block.values.l == 20)
 8003fce:	2814      	cmp	r0, #20
 8003fd0:	f040 8084 	bne.w	80040dc <gc_execute_line+0x744>
							- gc_state.coord_offset[idx] - gc_block.values.xyz[idx];
 8003fd4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003fd8:	edd3 7a00 	vldr	s15, [r3]
 8003fdc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003fe0:	edd1 6a0c 	vldr	s13, [r1, #48]	; 0x30
 8003fe4:	ee77 7ae6 	vsub.f32	s15, s15, s13
					if (idx == TOOL_LENGTH_OFFSET_AXIS)
 8003fe8:	2a02      	cmp	r2, #2
					gc_block.values.ijk[idx] = gc_state.position[idx]
 8003fea:	edc1 7a00 	vstr	s15, [r1]
					if (idx == TOOL_LENGTH_OFFSET_AXIS)
 8003fee:	d103      	bne.n	8003ff8 <gc_execute_line+0x660>
						gc_block.values.ijk[idx] -= gc_state.tool_length_offset;
 8003ff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ff4:	edc6 7a07 	vstr	s15, [r6, #28]
 8003ff8:	3201      	adds	r2, #1
		for (idx = 0; idx < N_AXIS; idx++)
 8003ffa:	2a06      	cmp	r2, #6
 8003ffc:	f101 0104 	add.w	r1, r1, #4
 8004000:	f103 0304 	add.w	r3, r3, #4
 8004004:	d1de      	bne.n	8003fc4 <gc_execute_line+0x62c>
	if (gc_block.modal.motion == MOTION_MODE_NONE)
 8004006:	4a3a      	ldr	r2, [pc, #232]	; (80040f0 <gc_execute_line+0x758>)
 8004008:	7853      	ldrb	r3, [r2, #1]
 800400a:	2b50      	cmp	r3, #80	; 0x50
 800400c:	4691      	mov	r9, r2
 800400e:	f040 8113 	bne.w	8004238 <gc_execute_line+0x8a0>
		if (axis_words)
 8004012:	2d00      	cmp	r5, #0
 8004014:	f040 8493 	bne.w	800493e <gc_execute_line+0xfa6>
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
 8004018:	f01a 0201 	ands.w	r2, sl, #1
		bit_false(value_words, (bit(WORD_N)|bit(WORD_F)|bit(WORD_S)|bit(WORD_T))); // Remove single-meaning value words.
 800401c:	bf0a      	itet	eq
 800401e:	f424 7448 	biceq.w	r4, r4, #800	; 0x320
		bit_false(value_words, (bit(WORD_N)|bit(WORD_F)));
 8004022:	f024 0421 	bicne.w	r4, r4, #33	; 0x21
		bit_false(value_words, (bit(WORD_N)|bit(WORD_F)|bit(WORD_S)|bit(WORD_T))); // Remove single-meaning value words.
 8004026:	f024 0401 	biceq.w	r4, r4, #1
	if (axis_command)
 800402a:	b10f      	cbz	r7, 8004030 <gc_execute_line+0x698>
		bit_false(value_words,
 800402c:	f424 447c 	bic.w	r4, r4, #64512	; 0xfc00
	if (gc_block.modal.digital)
 8004030:	4e2f      	ldr	r6, [pc, #188]	; (80040f0 <gc_execute_line+0x758>)
 8004032:	7b33      	ldrb	r3, [r6, #12]
 8004034:	b123      	cbz	r3, 8004040 <gc_execute_line+0x6a8>
		if (bit_isfalse(value_words, bit(WORD_P)))
 8004036:	0663      	lsls	r3, r4, #25
 8004038:	f57f af0d 	bpl.w	8003e56 <gc_execute_line+0x4be>
		bit_false(value_words, bit(WORD_P));
 800403c:	f024 0440 	bic.w	r4, r4, #64	; 0x40
	if (gc_block.modal.waitoninput)
 8004040:	7b73      	ldrb	r3, [r6, #13]
 8004042:	b143      	cbz	r3, 8004056 <gc_execute_line+0x6be>
		if (bit_isfalse(value_words, (bit(WORD_P)|bit(WORD_L)|bit(WORD_Q))))
 8004044:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <gc_execute_line+0x764>)
 8004046:	4023      	ands	r3, r4
 8004048:	2b00      	cmp	r3, #0
 800404a:	f43f af04 	beq.w	8003e56 <gc_execute_line+0x4be>
		bit_false(value_words, (bit(WORD_P)|bit(WORD_L)|bit(WORD_Q)));
 800404e:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 8004052:	f024 0450 	bic.w	r4, r4, #80	; 0x50
	if (gc_block.modal.analog)
 8004056:	7bb3      	ldrb	r3, [r6, #14]
 8004058:	b12b      	cbz	r3, 8004066 <gc_execute_line+0x6ce>
		if (bit_isfalse(value_words, (bit(WORD_E)|bit(WORD_Q))))
 800405a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800405e:	f43f aefa 	beq.w	8003e56 <gc_execute_line+0x4be>
		bit_false(value_words, (bit(WORD_E)|bit(WORD_Q)));
 8004062:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
	if (gc_block.modal.accel_scaling)
 8004066:	7bf3      	ldrb	r3, [r6, #15]
 8004068:	b143      	cbz	r3, 800407c <gc_execute_line+0x6e4>
		if (bit_isfalse(value_words, (bit(WORD_P)|bit(WORD_Q))))
 800406a:	4b25      	ldr	r3, [pc, #148]	; (8004100 <gc_execute_line+0x768>)
 800406c:	4023      	ands	r3, r4
 800406e:	2b00      	cmp	r3, #0
 8004070:	f43f aef1 	beq.w	8003e56 <gc_execute_line+0x4be>
		bit_false(value_words, (bit(WORD_P)|bit(WORD_Q)));
 8004074:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 8004078:	f024 0440 	bic.w	r4, r4, #64	; 0x40
	if (value_words)
 800407c:	2c00      	cmp	r4, #0
 800407e:	f040 846d 	bne.w	800495c <gc_execute_line+0xfc4>
	memset(pl_data, 0, sizeof(plan_line_data_t)); // Zero pl_data struct
 8004082:	940d      	str	r4, [sp, #52]	; 0x34
 8004084:	940e      	str	r4, [sp, #56]	; 0x38
 8004086:	940f      	str	r4, [sp, #60]	; 0x3c
	if (gc_parser_flags & GC_PARSER_JOG_MOTION)
 8004088:	2a00      	cmp	r2, #0
 800408a:	f000 8258 	beq.w	800453e <gc_execute_line+0xba6>
		if (command_words
 800408e:	9b06      	ldr	r3, [sp, #24]
 8004090:	f033 0349 	bics.w	r3, r3, #73	; 0x49
 8004094:	f040 8465 	bne.w	8004962 <gc_execute_line+0xfca>
		if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE
 8004098:	7833      	ldrb	r3, [r6, #0]
 800409a:	2b35      	cmp	r3, #53	; 0x35
 800409c:	d002      	beq.n	80040a4 <gc_execute_line+0x70c>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 845f 	bne.w	8004962 <gc_execute_line+0xfca>
		pl_data->spindle_speed = gc_state.spindle_speed;
 80040a4:	4d14      	ldr	r5, [pc, #80]	; (80040f8 <gc_execute_line+0x760>)
		uint8_t status = jog_execute(&plan_data, &gc_block);
 80040a6:	4912      	ldr	r1, [pc, #72]	; (80040f0 <gc_execute_line+0x758>)
		pl_data->spindle_speed = gc_state.spindle_speed;
 80040a8:	692b      	ldr	r3, [r5, #16]
 80040aa:	930e      	str	r3, [sp, #56]	; 0x38
		plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80040ac:	7a2a      	ldrb	r2, [r5, #8]
 80040ae:	7a6b      	ldrb	r3, [r5, #9]
		uint8_t status = jog_execute(&plan_data, &gc_block);
 80040b0:	a80d      	add	r0, sp, #52	; 0x34
		plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
		uint8_t status = jog_execute(&plan_data, &gc_block);
 80040b8:	f000 fc64 	bl	8004984 <jog_execute>
		if (status == STATUS_OK)
 80040bc:	4604      	mov	r4, r0
 80040be:	2800      	cmp	r0, #0
 80040c0:	f47f adaa 	bne.w	8003c18 <gc_execute_line+0x280>
			memcpy(gc_state.position, gc_block.values.xyz,
 80040c4:	4e0f      	ldr	r6, [pc, #60]	; (8004104 <gc_execute_line+0x76c>)
 80040c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80040c8:	3520      	adds	r5, #32
 80040ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040cc:	e896 0003 	ldmia.w	r6, {r0, r1}
 80040d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80040d4:	e5a0      	b.n	8003c18 <gc_execute_line+0x280>
			coord_select = gc_block.modal.coord_select;
 80040d6:	f896 b007 	ldrb.w	fp, [r6, #7]
 80040da:	e763      	b.n	8003fa4 <gc_execute_line+0x60c>
					gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 80040dc:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
 80040e0:	f8c1 e000 	str.w	lr, [r1]
 80040e4:	e788      	b.n	8003ff8 <gc_execute_line+0x660>
 80040e6:	bf00      	nop
 80040e8:	66666666 	.word	0x66666666
 80040ec:	40396666 	.word	0x40396666
 80040f0:	20004298 	.word	0x20004298
 80040f4:	200042ac 	.word	0x200042ac
 80040f8:	2000422c 	.word	0x2000422c
 80040fc:	00020050 	.word	0x00020050
 8004100:	00020040 	.word	0x00020040
 8004104:	200042dc 	.word	0x200042dc
 8004108:	20004264 	.word	0x20004264
		if (!axis_words)
 800410c:	2d00      	cmp	r5, #0
 800410e:	f43f af23 	beq.w	8003f58 <gc_execute_line+0x5c0>
					gc_block.values.xyz[idx] -= gc_state.tool_length_offset;
 8004112:	4bcb      	ldr	r3, [pc, #812]	; (8004440 <gc_execute_line+0xaa8>)
 8004114:	48cb      	ldr	r0, [pc, #812]	; (8004444 <gc_execute_line+0xaac>)
 8004116:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800411a:	2100      	movs	r1, #0
 800411c:	3320      	adds	r3, #32
 800411e:	f1a0 0644 	sub.w	r6, r0, #68	; 0x44
			if (bit_istrue(axis_words, bit(idx)))
 8004122:	fa45 f201 	asr.w	r2, r5, r1
 8004126:	07d2      	lsls	r2, r2, #31
 8004128:	d51e      	bpl.n	8004168 <gc_execute_line+0x7d0>
						- block_coord_system[idx] - gc_block.values.xyz[idx];
 800412a:	aa10      	add	r2, sp, #64	; 0x40
 800412c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004130:	edd2 6a00 	vldr	s13, [r2]
 8004134:	edd3 7a00 	vldr	s15, [r3]
 8004138:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800413c:	edd0 6a00 	vldr	s13, [r0]
 8004140:	ee77 7ae6 	vsub.f32	s15, s15, s13
				if (idx == TOOL_LENGTH_OFFSET_AXIS)
 8004144:	2902      	cmp	r1, #2
				gc_block.values.xyz[idx] = gc_state.position[idx]
 8004146:	edc0 7a00 	vstr	s15, [r0]
				if (idx == TOOL_LENGTH_OFFSET_AXIS)
 800414a:	d103      	bne.n	8004154 <gc_execute_line+0x7bc>
					gc_block.values.xyz[idx] -= gc_state.tool_length_offset;
 800414c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004150:	edc6 7a13 	vstr	s15, [r6, #76]	; 0x4c
 8004154:	3101      	adds	r1, #1
		for (idx = 0; idx < N_AXIS; idx++)
 8004156:	2906      	cmp	r1, #6
 8004158:	f103 0304 	add.w	r3, r3, #4
 800415c:	f100 0004 	add.w	r0, r0, #4
 8004160:	d1df      	bne.n	8004122 <gc_execute_line+0x78a>
	uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8004162:	f04f 0b00 	mov.w	fp, #0
 8004166:	e74e      	b.n	8004006 <gc_execute_line+0x66e>
				gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8004168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416a:	6002      	str	r2, [r0, #0]
 800416c:	e7f2      	b.n	8004154 <gc_execute_line+0x7bc>
			if (axis_words)
 800416e:	2d00      	cmp	r5, #0
 8004170:	f43f aeb3 	beq.w	8003eda <gc_execute_line+0x542>
									gc_block.values.xyz[idx] += gc_state.tool_length_offset;
 8004174:	4ab2      	ldr	r2, [pc, #712]	; (8004440 <gc_execute_line+0xaa8>)
 8004176:	4bb3      	ldr	r3, [pc, #716]	; (8004444 <gc_execute_line+0xaac>)
							if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE)
 8004178:	f896 c004 	ldrb.w	ip, [r6, #4]
									gc_block.values.xyz[idx] += gc_state.tool_length_offset;
 800417c:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 8004180:	2000      	movs	r0, #0
 8004182:	3220      	adds	r2, #32
 8004184:	f1a3 0644 	sub.w	r6, r3, #68	; 0x44
					if (bit_isfalse(axis_words, bit(idx)))
 8004188:	fa45 fe00 	asr.w	lr, r5, r0
 800418c:	f01e 0f01 	tst.w	lr, #1
 8004190:	d10b      	bne.n	80041aa <gc_execute_line+0x812>
						gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8004192:	f8d2 e000 	ldr.w	lr, [r2]
 8004196:	f8c3 e000 	str.w	lr, [r3]
 800419a:	3001      	adds	r0, #1
				for (idx = 0; idx < N_AXIS; idx++)
 800419c:	2806      	cmp	r0, #6
 800419e:	f102 0204 	add.w	r2, r2, #4
 80041a2:	f103 0304 	add.w	r3, r3, #4
 80041a6:	d1ef      	bne.n	8004188 <gc_execute_line+0x7f0>
 80041a8:	e697      	b.n	8003eda <gc_execute_line+0x542>
						if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE)
 80041aa:	2935      	cmp	r1, #53	; 0x35
 80041ac:	d0f5      	beq.n	800419a <gc_execute_line+0x802>
							if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE)
 80041ae:	f1bc 0f00 	cmp.w	ip, #0
 80041b2:	d116      	bne.n	80041e2 <gc_execute_line+0x84a>
								gc_block.values.xyz[idx] += block_coord_system[idx]
 80041b4:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 80041b8:	eb0e 0e80 	add.w	lr, lr, r0, lsl #2
										+ gc_state.coord_offset[idx];
 80041bc:	edd2 6a0c 	vldr	s13, [r2, #48]	; 0x30
 80041c0:	edde 7a00 	vldr	s15, [lr]
 80041c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
								gc_block.values.xyz[idx] += block_coord_system[idx]
 80041c8:	edd3 6a00 	vldr	s13, [r3]
 80041cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
								if (idx == TOOL_LENGTH_OFFSET_AXIS)
 80041d0:	2802      	cmp	r0, #2
								gc_block.values.xyz[idx] += block_coord_system[idx]
 80041d2:	edc3 7a00 	vstr	s15, [r3]
								if (idx == TOOL_LENGTH_OFFSET_AXIS)
 80041d6:	d1e0      	bne.n	800419a <gc_execute_line+0x802>
									gc_block.values.xyz[idx] += gc_state.tool_length_offset;
 80041d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041dc:	edc6 7a13 	vstr	s15, [r6, #76]	; 0x4c
 80041e0:	e7db      	b.n	800419a <gc_execute_line+0x802>
								gc_block.values.xyz[idx] += gc_state.position[idx];
 80041e2:	edd3 7a00 	vldr	s15, [r3]
 80041e6:	edd2 6a00 	vldr	s13, [r2]
 80041ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ee:	edc3 7a00 	vstr	s15, [r3]
 80041f2:	e7d2      	b.n	800419a <gc_execute_line+0x802>
				if (!settings_read_coord_data(SETTING_INDEX_G30, gc_block.values.ijk))
 80041f4:	4994      	ldr	r1, [pc, #592]	; (8004448 <gc_execute_line+0xab0>)
 80041f6:	2007      	movs	r0, #7
				if (!settings_read_coord_data(SETTING_INDEX_G28, gc_block.values.ijk))
 80041f8:	f002 ff3c 	bl	8007074 <settings_read_coord_data>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	f43f aea8 	beq.w	8003f52 <gc_execute_line+0x5ba>
			if (axis_words)
 8004202:	b915      	cbnz	r5, 800420a <gc_execute_line+0x872>
	uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8004204:	46ab      	mov	fp, r5
				axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 8004206:	462f      	mov	r7, r5
 8004208:	e6fd      	b.n	8004006 <gc_execute_line+0x66e>
 800420a:	4990      	ldr	r1, [pc, #576]	; (800444c <gc_execute_line+0xab4>)
 800420c:	4a8e      	ldr	r2, [pc, #568]	; (8004448 <gc_execute_line+0xab0>)
			if (axis_words)
 800420e:	2300      	movs	r3, #0
					if (!(axis_words & (1 << idx)))
 8004210:	fa45 f003 	asr.w	r0, r5, r3
 8004214:	07c0      	lsls	r0, r0, #31
						gc_block.values.ijk[idx] = gc_state.position[idx];
 8004216:	bf5c      	itt	pl
 8004218:	6808      	ldrpl	r0, [r1, #0]
 800421a:	6010      	strpl	r0, [r2, #0]
 800421c:	3301      	adds	r3, #1
				for (idx = 0; idx < N_AXIS; idx++)
 800421e:	2b06      	cmp	r3, #6
 8004220:	f101 0104 	add.w	r1, r1, #4
 8004224:	f102 0204 	add.w	r2, r2, #4
 8004228:	d1f2      	bne.n	8004210 <gc_execute_line+0x878>
 800422a:	e79a      	b.n	8004162 <gc_execute_line+0x7ca>
			if (!(gc_block.modal.motion == MOTION_MODE_SEEK
 800422c:	4b88      	ldr	r3, [pc, #544]	; (8004450 <gc_execute_line+0xab8>)
 800422e:	785b      	ldrb	r3, [r3, #1]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d996      	bls.n	8004162 <gc_execute_line+0x7ca>
				FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 8004234:	241e      	movs	r4, #30
 8004236:	e4ef      	b.n	8003c18 <gc_execute_line+0x280>
	else if (axis_command == AXIS_COMMAND_MOTION_MODE)
 8004238:	2f02      	cmp	r7, #2
 800423a:	f47f aeed 	bne.w	8004018 <gc_execute_line+0x680>
		if (gc_block.modal.motion == MOTION_MODE_SEEK)
 800423e:	b91b      	cbnz	r3, 8004248 <gc_execute_line+0x8b0>
					axis_command = AXIS_COMMAND_NONE;
 8004240:	2d00      	cmp	r5, #0
 8004242:	bf08      	it	eq
 8004244:	2700      	moveq	r7, #0
 8004246:	e6e7      	b.n	8004018 <gc_execute_line+0x680>
			if (gc_block.values.f == 0.0)
 8004248:	edd2 7a04 	vldr	s15, [r2, #16]
 800424c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004254:	f000 8376 	beq.w	8004944 <gc_execute_line+0xfac>
			switch (gc_block.modal.motion)
 8004258:	2b8c      	cmp	r3, #140	; 0x8c
 800425a:	d010      	beq.n	800427e <gc_execute_line+0x8e6>
 800425c:	d807      	bhi.n	800426e <gc_execute_line+0x8d6>
 800425e:	2b02      	cmp	r3, #2
 8004260:	d01e      	beq.n	80042a0 <gc_execute_line+0x908>
 8004262:	2b03      	cmp	r3, #3
 8004264:	d01e      	beq.n	80042a4 <gc_execute_line+0x90c>
 8004266:	2b01      	cmp	r3, #1
 8004268:	f47f aed6 	bne.w	8004018 <gc_execute_line+0x680>
 800426c:	e7e8      	b.n	8004240 <gc_execute_line+0x8a8>
 800426e:	2b8e      	cmp	r3, #142	; 0x8e
 8004270:	d005      	beq.n	800427e <gc_execute_line+0x8e6>
 8004272:	d302      	bcc.n	800427a <gc_execute_line+0x8e2>
 8004274:	2b8f      	cmp	r3, #143	; 0x8f
 8004276:	f47f aecf 	bne.w	8004018 <gc_execute_line+0x680>
				gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 800427a:	f04a 0a10 	orr.w	sl, sl, #16
						|| (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR))
 800427e:	3372      	adds	r3, #114	; 0x72
				if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY)
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b01      	cmp	r3, #1
					gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY;
 8004284:	bf98      	it	ls
 8004286:	f04a 0a08 	orrls.w	sl, sl, #8
				if (!axis_words)
 800428a:	2d00      	cmp	r5, #0
 800428c:	f43f ae64 	beq.w	8003f58 <gc_execute_line+0x5c0>
				if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 8004290:	2218      	movs	r2, #24
 8004292:	496c      	ldr	r1, [pc, #432]	; (8004444 <gc_execute_line+0xaac>)
 8004294:	486d      	ldr	r0, [pc, #436]	; (800444c <gc_execute_line+0xab4>)
 8004296:	f004 fd3d 	bl	8008d14 <memcmp>
 800429a:	2800      	cmp	r0, #0
 800429c:	d036      	beq.n	800430c <gc_execute_line+0x974>
 800429e:	e6bb      	b.n	8004018 <gc_execute_line+0x680>
				gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 80042a0:	f04a 0a04 	orr.w	sl, sl, #4
				if (!axis_words)
 80042a4:	2d00      	cmp	r5, #0
 80042a6:	f43f ae57 	beq.w	8003f58 <gc_execute_line+0x5c0>
				if (!(axis_words & (bit(axis_0) | bit(axis_1))))
 80042aa:	9a07      	ldr	r2, [sp, #28]
 80042ac:	9908      	ldr	r1, [sp, #32]
 80042ae:	2301      	movs	r3, #1
 80042b0:	fa03 f202 	lsl.w	r2, r3, r2
 80042b4:	408b      	lsls	r3, r1
 80042b6:	4313      	orrs	r3, r2
 80042b8:	421d      	tst	r5, r3
 80042ba:	f000 8346 	beq.w	800494a <gc_execute_line+0xfb2>
				x = gc_block.values.xyz[axis_0] - gc_state.position[axis_0]; // Delta x between current position and target
 80042be:	4860      	ldr	r0, [pc, #384]	; (8004440 <gc_execute_line+0xaa8>)
 80042c0:	9a07      	ldr	r2, [sp, #28]
 80042c2:	9907      	ldr	r1, [sp, #28]
 80042c4:	4e62      	ldr	r6, [pc, #392]	; (8004450 <gc_execute_line+0xab8>)
 80042c6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80042ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80042ce:	edd1 7a08 	vldr	s15, [r1, #32]
 80042d2:	edd2 8a11 	vldr	s17, [r2, #68]	; 0x44
				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current position and target
 80042d6:	9908      	ldr	r1, [sp, #32]
 80042d8:	9a08      	ldr	r2, [sp, #32]
 80042da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80042de:	eb09 0282 	add.w	r2, r9, r2, lsl #2
				x = gc_block.values.xyz[axis_0] - gc_state.position[axis_0]; // Delta x between current position and target
 80042e2:	ee78 8ae7 	vsub.f32	s17, s17, s15
				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current position and target
 80042e6:	ed92 8a11 	vldr	s16, [r2, #68]	; 0x44
 80042ea:	edd1 7a08 	vldr	s15, [r1, #32]
				if (value_words & bit(WORD_R))
 80042ee:	f014 0880 	ands.w	r8, r4, #128	; 0x80
				y = gc_block.values.xyz[axis_1] - gc_state.position[axis_1]; // Delta y between current position and target
 80042f2:	ee38 8a67 	vsub.f32	s16, s16, s15
				if (value_words & bit(WORD_R))
 80042f6:	f000 80af 	beq.w	8004458 <gc_execute_line+0xac0>
					if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 80042fa:	2218      	movs	r2, #24
 80042fc:	f106 0144 	add.w	r1, r6, #68	; 0x44
 8004300:	3020      	adds	r0, #32
					bit_false(value_words, bit(WORD_R));
 8004302:	f024 0480 	bic.w	r4, r4, #128	; 0x80
					if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 8004306:	f004 fd05 	bl	8008d14 <memcmp>
 800430a:	b908      	cbnz	r0, 8004310 <gc_execute_line+0x978>
						FAIL(STATUS_GCODE_INVALID_TARGET);
 800430c:	2421      	movs	r4, #33	; 0x21
 800430e:	e483      	b.n	8003c18 <gc_execute_line+0x280>
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 8004310:	f899 3003 	ldrb.w	r3, [r9, #3]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d10c      	bne.n	8004332 <gc_execute_line+0x99a>
						gc_block.values.r *= MM_PER_INCH;
 8004318:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 800431c:	f7fc f90c 	bl	8000538 <__aeabi_f2d>
 8004320:	a345      	add	r3, pc, #276	; (adr r3, 8004438 <gc_execute_line+0xaa0>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fc f95b 	bl	80005e0 <__aeabi_dmul>
 800432a:	f7fc fc51 	bl	8000bd0 <__aeabi_d2f>
 800432e:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
					float h_x2_div_d = 4.0 * gc_block.values.r * gc_block.values.r - x * x
 8004332:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8004334:	f7fc f900 	bl	8000538 <__aeabi_f2d>
 8004338:	2200      	movs	r2, #0
 800433a:	4680      	mov	r8, r0
 800433c:	4689      	mov	r9, r1
 800433e:	4b45      	ldr	r3, [pc, #276]	; (8004454 <gc_execute_line+0xabc>)
 8004340:	f7fc f94e 	bl	80005e0 <__aeabi_dmul>
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	f7fc f94a 	bl	80005e0 <__aeabi_dmul>
 800434c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8004350:	4680      	mov	r8, r0
 8004352:	ee17 0a90 	vmov	r0, s15
 8004356:	4689      	mov	r9, r1
 8004358:	f7fc f8ee 	bl	8000538 <__aeabi_f2d>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4640      	mov	r0, r8
 8004362:	4649      	mov	r1, r9
 8004364:	f7fb ff88 	bl	8000278 <__aeabi_dsub>
							- y * y;
 8004368:	ee68 7a08 	vmul.f32	s15, s16, s16
					float h_x2_div_d = 4.0 * gc_block.values.r * gc_block.values.r - x * x
 800436c:	4680      	mov	r8, r0
							- y * y;
 800436e:	ee17 0a90 	vmov	r0, s15
					float h_x2_div_d = 4.0 * gc_block.values.r * gc_block.values.r - x * x
 8004372:	4689      	mov	r9, r1
							- y * y;
 8004374:	f7fc f8e0 	bl	8000538 <__aeabi_f2d>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4640      	mov	r0, r8
 800437e:	4649      	mov	r1, r9
 8004380:	f7fb ff7a 	bl	8000278 <__aeabi_dsub>
					float h_x2_div_d = 4.0 * gc_block.values.r * gc_block.values.r - x * x
 8004384:	f7fc fc24 	bl	8000bd0 <__aeabi_d2f>
					if (h_x2_div_d < 0)
 8004388:	ee07 0a90 	vmov	s15, r0
 800438c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004394:	f100 82dc 	bmi.w	8004950 <gc_execute_line+0xfb8>
					h_x2_div_d = -sqrt(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 8004398:	f7fc f8ce 	bl	8000538 <__aeabi_f2d>
 800439c:	ec41 0b10 	vmov	d0, r0, r1
 80043a0:	f005 fb7a 	bl	8009a98 <sqrt>
 80043a4:	ec53 2b10 	vmov	r2, r3, d0
 80043a8:	eef0 0a48 	vmov.f32	s1, s16
 80043ac:	eeb0 0a68 	vmov.f32	s0, s17
 80043b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043b4:	f001 f806 	bl	80053c4 <hypot_f>
 80043b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043bc:	ee10 0a10 	vmov	r0, s0
 80043c0:	4690      	mov	r8, r2
 80043c2:	f103 4900 	add.w	r9, r3, #2147483648	; 0x80000000
 80043c6:	f7fc f8b7 	bl	8000538 <__aeabi_f2d>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4640      	mov	r0, r8
 80043d0:	4649      	mov	r1, r9
 80043d2:	f7fc fa2f 	bl	8000834 <__aeabi_ddiv>
 80043d6:	f7fc fbfb 	bl	8000bd0 <__aeabi_d2f>
					if (gc_block.modal.motion == MOTION_MODE_CCW_ARC)
 80043da:	7873      	ldrb	r3, [r6, #1]
					gc_block.values.ijk[axis_0] = 0.5 * (x - (y * h_x2_div_d));
 80043dc:	9a07      	ldr	r2, [sp, #28]
					if (gc_block.modal.motion == MOTION_MODE_CCW_ARC)
 80043de:	2b03      	cmp	r3, #3
					if (gc_block.values.r < 0)
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <gc_execute_line+0xab8>)
 80043e2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
					h_x2_div_d = -sqrt(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 80043e6:	ee07 0a90 	vmov	s15, r0
					if (gc_block.values.r < 0)
 80043ea:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
						h_x2_div_d = -h_x2_div_d;
 80043ee:	bf08      	it	eq
 80043f0:	eef1 7a67 	vnegeq.f32	s15, s15
					if (gc_block.values.r < 0)
 80043f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 80043f8:	bf42      	ittt	mi
 80043fa:	eeb1 7a47 	vnegmi.f32	s14, s14
						h_x2_div_d = -h_x2_div_d;
 80043fe:	eef1 7a67 	vnegmi.f32	s15, s15
						gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8004402:	ed83 7a0e 	vstrmi	s14, [r3, #56]	; 0x38
					gc_block.values.ijk[axis_0] = 0.5 * (x - (y * h_x2_div_d));
 8004406:	eeb0 7a68 	vmov.f32	s14, s17
 800440a:	eea7 7ac8 	vfms.f32	s14, s15, s16
 800440e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004412:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
					gc_block.values.ijk[axis_1] = 0.5 * (y + (x * h_x2_div_d));
 8004416:	eea7 8aa8 	vfma.f32	s16, s15, s17
					gc_block.values.ijk[axis_0] = 0.5 * (x - (y * h_x2_div_d));
 800441a:	ee27 7a26 	vmul.f32	s14, s14, s13
					gc_block.values.ijk[axis_1] = 0.5 * (y + (x * h_x2_div_d));
 800441e:	ee28 8a26 	vmul.f32	s16, s16, s13
					gc_block.values.ijk[axis_0] = 0.5 * (x - (y * h_x2_div_d));
 8004422:	ed82 7a05 	vstr	s14, [r2, #20]
					gc_block.values.ijk[axis_1] = 0.5 * (y + (x * h_x2_div_d));
 8004426:	9a08      	ldr	r2, [sp, #32]
 8004428:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800442c:	ed83 8a05 	vstr	s16, [r3, #20]
 8004430:	e5f2      	b.n	8004018 <gc_execute_line+0x680>
 8004432:	bf00      	nop
 8004434:	f3af 8000 	nop.w
 8004438:	66666666 	.word	0x66666666
 800443c:	40396666 	.word	0x40396666
 8004440:	2000422c 	.word	0x2000422c
 8004444:	200042dc 	.word	0x200042dc
 8004448:	200042ac 	.word	0x200042ac
 800444c:	2000424c 	.word	0x2000424c
 8004450:	20004298 	.word	0x20004298
 8004454:	40100000 	.word	0x40100000
					if (!(ijk_words & (bit(axis_0) | bit(axis_1))))
 8004458:	9a04      	ldr	r2, [sp, #16]
 800445a:	4213      	tst	r3, r2
 800445c:	f000 827b 	beq.w	8004956 <gc_execute_line+0xfbe>
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 8004460:	f899 3003 	ldrb.w	r3, [r9, #3]
 8004464:	2b01      	cmp	r3, #1
					bit_false(value_words, (bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8004466:	f024 040e 	bic.w	r4, r4, #14
					if (gc_block.modal.units == UNITS_MODE_INCHES)
 800446a:	d04c      	beq.n	8004506 <gc_execute_line+0xb6e>
					y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 800446c:	9b08      	ldr	r3, [sp, #32]
 800446e:	f103 0904 	add.w	r9, r3, #4
					x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8004472:	9b07      	ldr	r3, [sp, #28]
 8004474:	f103 0804 	add.w	r8, r3, #4
					y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8004478:	eb06 0989 	add.w	r9, r6, r9, lsl #2
					x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 800447c:	eb06 0888 	add.w	r8, r6, r8, lsl #2
					y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8004480:	edd9 0a01 	vldr	s1, [r9, #4]
					x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8004484:	ed98 0a01 	vldr	s0, [r8, #4]
					float target_r = hypot_f(x, y);
 8004488:	ee78 0a60 	vsub.f32	s1, s16, s1
 800448c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8004490:	f000 ff98 	bl	80053c4 <hypot_f>
					gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0],
 8004494:	edd9 0a01 	vldr	s1, [r9, #4]
					float target_r = hypot_f(x, y);
 8004498:	eeb0 8a40 	vmov.f32	s16, s0
					gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0],
 800449c:	ed98 0a01 	vldr	s0, [r8, #4]
 80044a0:	f000 ff90 	bl	80053c4 <hypot_f>
					float delta_r = fabs(target_r - gc_block.values.r);
 80044a4:	ee38 8a40 	vsub.f32	s16, s16, s0
					gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0],
 80044a8:	ed86 0a0e 	vstr	s0, [r6, #56]	; 0x38
					float delta_r = fabs(target_r - gc_block.values.r);
 80044ac:	eeb0 8ac8 	vabs.f32	s16, s16
					if (delta_r > 0.005)
 80044b0:	ee18 0a10 	vmov	r0, s16
					gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0],
 80044b4:	eef0 8a40 	vmov.f32	s17, s0
					if (delta_r > 0.005)
 80044b8:	f7fc f83e 	bl	8000538 <__aeabi_f2d>
 80044bc:	a3e2      	add	r3, pc, #904	; (adr r3, 8004848 <gc_execute_line+0xeb0>)
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	4680      	mov	r8, r0
 80044c4:	4689      	mov	r9, r1
 80044c6:	f7fc fb1b 	bl	8000b00 <__aeabi_dcmpgt>
 80044ca:	2800      	cmp	r0, #0
 80044cc:	f43f ada4 	beq.w	8004018 <gc_execute_line+0x680>
						if (delta_r > 0.5)
 80044d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80044d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80044d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044dc:	f73f af16 	bgt.w	800430c <gc_execute_line+0x974>
						if (delta_r > (0.001 * gc_block.values.r))
 80044e0:	ee18 0a90 	vmov	r0, s17
 80044e4:	f7fc f828 	bl	8000538 <__aeabi_f2d>
 80044e8:	a3d9      	add	r3, pc, #868	; (adr r3, 8004850 <gc_execute_line+0xeb8>)
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	f7fc f877 	bl	80005e0 <__aeabi_dmul>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4640      	mov	r0, r8
 80044f8:	4649      	mov	r1, r9
 80044fa:	f7fc fb01 	bl	8000b00 <__aeabi_dcmpgt>
 80044fe:	2800      	cmp	r0, #0
 8004500:	f47f af04 	bne.w	800430c <gc_execute_line+0x974>
 8004504:	e588      	b.n	8004018 <gc_execute_line+0x680>
 8004506:	f106 0914 	add.w	r9, r6, #20
							if (ijk_words & bit(idx))
 800450a:	9b04      	ldr	r3, [sp, #16]
 800450c:	fa43 f308 	asr.w	r3, r3, r8
 8004510:	07da      	lsls	r2, r3, #31
 8004512:	d50c      	bpl.n	800452e <gc_execute_line+0xb96>
								gc_block.values.ijk[idx] *= MM_PER_INCH;
 8004514:	f8d9 0000 	ldr.w	r0, [r9]
 8004518:	f7fc f80e 	bl	8000538 <__aeabi_f2d>
 800451c:	a3ce      	add	r3, pc, #824	; (adr r3, 8004858 <gc_execute_line+0xec0>)
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	f7fc f85d 	bl	80005e0 <__aeabi_dmul>
 8004526:	f7fc fb53 	bl	8000bd0 <__aeabi_d2f>
 800452a:	f8c9 0000 	str.w	r0, [r9]
 800452e:	f108 0801 	add.w	r8, r8, #1
						for (idx = 0; idx < N_AXIS; idx++)
 8004532:	f1b8 0f06 	cmp.w	r8, #6
 8004536:	f109 0904 	add.w	r9, r9, #4
 800453a:	d1e6      	bne.n	800450a <gc_execute_line+0xb72>
 800453c:	e796      	b.n	800446c <gc_execute_line+0xad4>
	if (bit_istrue(settings.flags, BITFLAG_LASER_MODE))
 800453e:	4bb8      	ldr	r3, [pc, #736]	; (8004820 <gc_execute_line+0xe88>)
 8004540:	4cb8      	ldr	r4, [pc, #736]	; (8004824 <gc_execute_line+0xe8c>)
 8004542:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8004546:	f013 0f02 	tst.w	r3, #2
 800454a:	d00d      	beq.n	8004568 <gc_execute_line+0xbd0>
		if (!((gc_block.modal.motion == MOTION_MODE_LINEAR)
 800454c:	7873      	ldrb	r3, [r6, #1]
 800454e:	3b01      	subs	r3, #1
 8004550:	2b02      	cmp	r3, #2
			gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 8004552:	bf88      	it	hi
 8004554:	f04a 0a40 	orrhi.w	sl, sl, #64	; 0x40
		if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE))
 8004558:	2d00      	cmp	r5, #0
 800455a:	f000 80ff 	beq.w	800475c <gc_execute_line+0xdc4>
 800455e:	2f02      	cmp	r7, #2
 8004560:	f040 80fc 	bne.w	800475c <gc_execute_line+0xdc4>
			gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8004564:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
	gc_state.line_number = gc_block.values.n;
 8004568:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800456a:	61e3      	str	r3, [r4, #28]
	gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 800456c:	78b3      	ldrb	r3, [r6, #2]
 800456e:	7063      	strb	r3, [r4, #1]
	if (gc_state.modal.feed_rate)
 8004570:	b113      	cbz	r3, 8004578 <gc_execute_line+0xbe0>
		pl_data->condition |= PL_COND_FLAG_INVERSE_TIME;
 8004572:	2308      	movs	r3, #8
 8004574:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	if ((gc_state.spindle_speed != gc_block.values.s)
 8004578:	ed96 0a0f 	vldr	s0, [r6, #60]	; 0x3c
 800457c:	edd4 7a04 	vldr	s15, [r4, #16]
	gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8004580:	6933      	ldr	r3, [r6, #16]
 8004582:	6163      	str	r3, [r4, #20]
	if ((gc_state.spindle_speed != gc_block.values.s)
 8004584:	eef4 7a40 	vcmp.f32	s15, s0
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 800458c:	930d      	str	r3, [sp, #52]	; 0x34
 800458e:	f00a 0540 	and.w	r5, sl, #64	; 0x40
	if ((gc_state.spindle_speed != gc_block.values.s)
 8004592:	d102      	bne.n	800459a <gc_execute_line+0xc02>
			|| bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC))
 8004594:	f01a 0f20 	tst.w	sl, #32
 8004598:	d00b      	beq.n	80045b2 <gc_execute_line+0xc1a>
		if (gc_state.modal.spindle != SPINDLE_DISABLE)
 800459a:	7a60      	ldrb	r0, [r4, #9]
 800459c:	b138      	cbz	r0, 80045ae <gc_execute_line+0xc16>
			if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION))
 800459e:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80045a2:	d104      	bne.n	80045ae <gc_execute_line+0xc16>
				if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 80045a4:	b10d      	cbz	r5, 80045aa <gc_execute_line+0xc12>
					spindle_sync(gc_state.modal.spindle, 0.0);
 80045a6:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8004828 <gc_execute_line+0xe90>
					spindle_sync(gc_state.modal.spindle, gc_block.values.s);
 80045aa:	f002 ffff 	bl	80075ac <spindle_sync>
		gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 80045ae:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80045b0:	6123      	str	r3, [r4, #16]
	if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 80045b2:	b90d      	cbnz	r5, 80045b8 <gc_execute_line+0xc20>
		pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use.
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	930e      	str	r3, [sp, #56]	; 0x38
	gc_state.tool = gc_block.values.t;
 80045b8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80045bc:	7623      	strb	r3, [r4, #24]
	if (gc_state.modal.spindle != gc_block.modal.spindle)
 80045be:	7ab0      	ldrb	r0, [r6, #10]
 80045c0:	7a63      	ldrb	r3, [r4, #9]
 80045c2:	4283      	cmp	r3, r0
 80045c4:	d005      	beq.n	80045d2 <gc_execute_line+0xc3a>
		spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 80045c6:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
 80045ca:	f002 ffef 	bl	80075ac <spindle_sync>
		gc_state.modal.spindle = gc_block.modal.spindle;
 80045ce:	7ab3      	ldrb	r3, [r6, #10]
 80045d0:	7263      	strb	r3, [r4, #9]
	pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80045d2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80045d6:	7a62      	ldrb	r2, [r4, #9]
	if (gc_state.modal.coolant != gc_block.modal.coolant)
 80045d8:	7a70      	ldrb	r0, [r6, #9]
	pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80045da:	4313      	orrs	r3, r2
 80045dc:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	if (gc_state.modal.coolant != gc_block.modal.coolant)
 80045e0:	7a23      	ldrb	r3, [r4, #8]
 80045e2:	4283      	cmp	r3, r0
 80045e4:	d006      	beq.n	80045f4 <gc_execute_line+0xc5c>
		coolant_sync(gc_block.modal.coolant);
 80045e6:	f7ff f901 	bl	80037ec <coolant_sync>
		if (gc_block.modal.coolant == COOLANT_DISABLE)
 80045ea:	7a73      	ldrb	r3, [r6, #9]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f040 80c9 	bne.w	8004784 <gc_execute_line+0xdec>
			gc_state.modal.coolant |= gc_block.modal.coolant;
 80045f2:	7223      	strb	r3, [r4, #8]
	pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 80045f4:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80045f8:	7a22      	ldrb	r2, [r4, #8]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	if (gc_block.non_modal_command == NON_MODAL_DWELL)
 8004600:	7833      	ldrb	r3, [r6, #0]
 8004602:	2b04      	cmp	r3, #4
 8004604:	d103      	bne.n	800460e <gc_execute_line+0xc76>
		mc_dwell(gc_block.values.p);
 8004606:	ed96 0a0d 	vldr	s0, [r6, #52]	; 0x34
 800460a:	f000 fd41 	bl	8005090 <mc_dwell>
	gc_state.modal.plane_select = gc_block.modal.plane_select;
 800460e:	7973      	ldrb	r3, [r6, #5]
 8004610:	7123      	strb	r3, [r4, #4]
	if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 8004612:	2f03      	cmp	r7, #3
	gc_state.modal.units = gc_block.modal.units;
 8004614:	78f3      	ldrb	r3, [r6, #3]
 8004616:	70a3      	strb	r3, [r4, #2]
	if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET)
 8004618:	d111      	bne.n	800463e <gc_execute_line+0xca6>
		gc_state.modal.tool_length = gc_block.modal.tool_length;
 800461a:	79b3      	ldrb	r3, [r6, #6]
 800461c:	7163      	strb	r3, [r4, #5]
		if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL)
 800461e:	b90b      	cbnz	r3, 8004624 <gc_execute_line+0xc8c>
			gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0;
 8004620:	2300      	movs	r3, #0
 8004622:	64f3      	str	r3, [r6, #76]	; 0x4c
				!= gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS])
 8004624:	edd6 7a13 	vldr	s15, [r6, #76]	; 0x4c
		if (gc_state.tool_length_offset
 8004628:	ed94 7a1a 	vldr	s14, [r4, #104]	; 0x68
 800462c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004634:	d003      	beq.n	800463e <gc_execute_line+0xca6>
			gc_state.tool_length_offset =
 8004636:	edc4 7a1a 	vstr	s15, [r4, #104]	; 0x68
			system_flag_wco_change();
 800463a:	f003 fe29 	bl	8008290 <system_flag_wco_change>
	if (gc_state.modal.coord_select != gc_block.modal.coord_select)
 800463e:	79f3      	ldrb	r3, [r6, #7]
 8004640:	79a2      	ldrb	r2, [r4, #6]
 8004642:	429a      	cmp	r2, r3
 8004644:	d00c      	beq.n	8004660 <gc_execute_line+0xcc8>
		memcpy(gc_state.coord_system, block_coord_system, N_AXIS * sizeof(float));
 8004646:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
		gc_state.modal.coord_select = gc_block.modal.coord_select;
 800464a:	71a3      	strb	r3, [r4, #6]
		memcpy(gc_state.coord_system, block_coord_system, N_AXIS * sizeof(float));
 800464c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004650:	4d76      	ldr	r5, [pc, #472]	; (800482c <gc_execute_line+0xe94>)
 8004652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004654:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8004658:	e885 0003 	stmia.w	r5, {r0, r1}
		system_flag_wco_change();
 800465c:	f003 fe18 	bl	8008290 <system_flag_wco_change>
	gc_state.modal.distance = gc_block.modal.distance;
 8004660:	7933      	ldrb	r3, [r6, #4]
 8004662:	70e3      	strb	r3, [r4, #3]
	switch (gc_block.non_modal_command)
 8004664:	7833      	ldrb	r3, [r6, #0]
 8004666:	2b26      	cmp	r3, #38	; 0x26
 8004668:	f000 80c8 	beq.w	80047fc <gc_execute_line+0xe64>
 800466c:	f200 808d 	bhi.w	800478a <gc_execute_line+0xdf2>
 8004670:	2b1c      	cmp	r3, #28
 8004672:	f000 80a9 	beq.w	80047c8 <gc_execute_line+0xe30>
 8004676:	2b1e      	cmp	r3, #30
 8004678:	f000 80a6 	beq.w	80047c8 <gc_execute_line+0xe30>
 800467c:	2b0a      	cmp	r3, #10
 800467e:	f000 808e 	beq.w	800479e <gc_execute_line+0xe06>
	gc_state.modal.motion = gc_block.modal.motion;
 8004682:	7873      	ldrb	r3, [r6, #1]
 8004684:	7023      	strb	r3, [r4, #0]
	if (gc_state.modal.motion != MOTION_MODE_NONE)
 8004686:	2b50      	cmp	r3, #80	; 0x50
 8004688:	d010      	beq.n	80046ac <gc_execute_line+0xd14>
		if (axis_command == AXIS_COMMAND_MOTION_MODE)
 800468a:	2f02      	cmp	r7, #2
 800468c:	d10e      	bne.n	80046ac <gc_execute_line+0xd14>
			if (gc_state.modal.motion == MOTION_MODE_LINEAR)
 800468e:	2b01      	cmp	r3, #1
 8004690:	f040 80e6 	bne.w	8004860 <gc_execute_line+0xec8>
				mc_line(gc_block.values.xyz, pl_data);
 8004694:	a90d      	add	r1, sp, #52	; 0x34
 8004696:	4866      	ldr	r0, [pc, #408]	; (8004830 <gc_execute_line+0xe98>)
 8004698:	f000 fb5a 	bl	8004d50 <mc_line>
				memcpy(gc_state.position, gc_block.values.xyz,
 800469c:	4f64      	ldr	r7, [pc, #400]	; (8004830 <gc_execute_line+0xe98>)
 800469e:	4d65      	ldr	r5, [pc, #404]	; (8004834 <gc_execute_line+0xe9c>)
 80046a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80046a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046a4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80046a8:	e885 0003 	stmia.w	r5, {r0, r1}
	gc_state.modal.program_flow = gc_block.modal.program_flow;
 80046ac:	7a33      	ldrb	r3, [r6, #8]
 80046ae:	71e3      	strb	r3, [r4, #7]
	if (gc_state.modal.program_flow)
 80046b0:	b183      	cbz	r3, 80046d4 <gc_execute_line+0xd3c>
		protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 80046b2:	f001 febb 	bl	800642c <protocol_buffer_synchronize>
		if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED)
 80046b6:	79e3      	ldrb	r3, [r4, #7]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	4b5f      	ldr	r3, [pc, #380]	; (8004838 <gc_execute_line+0xea0>)
 80046bc:	f040 8102 	bne.w	80048c4 <gc_execute_line+0xf2c>
			if (sys.state != STATE_CHECK_MODE)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d004      	beq.n	80046d0 <gc_execute_line+0xd38>
				system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 80046c6:	2008      	movs	r0, #8
 80046c8:	f003 fe24 	bl	8008314 <system_set_exec_state_flag>
				protocol_execute_realtime(); // Execute suspend.
 80046cc:	f001 fd3c 	bl	8006148 <protocol_execute_realtime>
		gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 80046d0:	2300      	movs	r3, #0
 80046d2:	71e3      	strb	r3, [r4, #7]
	if (gc_block.modal.digital)
 80046d4:	7b34      	ldrb	r4, [r6, #12]
 80046d6:	b174      	cbz	r4, 80046f6 <gc_execute_line+0xd5e>
		output_select = trunc(gc_block.values.p); // Convert p value to int.
 80046d8:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80046da:	f7fb ff2d 	bl	8000538 <__aeabi_f2d>
 80046de:	ec41 0b10 	vmov	d0, r0, r1
 80046e2:	f005 f8e1 	bl	80098a8 <trunc>
 80046e6:	ec51 0b10 	vmov	r0, r1, d0
 80046ea:	f7fc fa51 	bl	8000b90 <__aeabi_d2uiz>
		outputs_digital_action(output_select, gc_block.modal.digital);
 80046ee:	4621      	mov	r1, r4
 80046f0:	b2c0      	uxtb	r0, r0
 80046f2:	f004 f84b 	bl	800878c <outputs_digital_action>
	if (gc_block.modal.waitoninput)
 80046f6:	7b73      	ldrb	r3, [r6, #13]
 80046f8:	b18b      	cbz	r3, 800471e <gc_execute_line+0xd86>
		input_select = trunc(gc_block.values.p); // Convert p value to int.
 80046fa:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80046fc:	f7fb ff1c 	bl	8000538 <__aeabi_f2d>
 8004700:	ec41 0b10 	vmov	d0, r0, r1
 8004704:	f005 f8d0 	bl	80098a8 <trunc>
 8004708:	ec51 0b10 	vmov	r0, r1, d0
 800470c:	f7fc fa40 	bl	8000b90 <__aeabi_d2uiz>
		wait_on_input_action(input_select, gc_block.values.l, &gc_block.values.q);
 8004710:	f896 402c 	ldrb.w	r4, [r6, #44]	; 0x2c
 8004714:	4a49      	ldr	r2, [pc, #292]	; (800483c <gc_execute_line+0xea4>)
 8004716:	4621      	mov	r1, r4
 8004718:	b2c0      	uxtb	r0, r0
 800471a:	f004 f8c9 	bl	80088b0 <wait_on_input_action>
	if (gc_block.modal.analog)
 800471e:	7bb3      	ldrb	r3, [r6, #14]
 8004720:	b123      	cbz	r3, 800472c <gc_execute_line+0xd94>
		outputs_analog_action(gc_block.values.e, &gc_block.values.q);
 8004722:	4946      	ldr	r1, [pc, #280]	; (800483c <gc_execute_line+0xea4>)
 8004724:	f896 005c 	ldrb.w	r0, [r6, #92]	; 0x5c
 8004728:	f004 f8a1 	bl	800886e <outputs_analog_action>
	if (gc_block.modal.accel_scaling)
 800472c:	7bf4      	ldrb	r4, [r6, #15]
 800472e:	2c00      	cmp	r4, #0
 8004730:	f43f aa72 	beq.w	8003c18 <gc_execute_line+0x280>
		output_select = trunc(gc_block.values.p); // Convert p value to int.
 8004734:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8004736:	f7fb feff 	bl	8000538 <__aeabi_f2d>
 800473a:	ec41 0b10 	vmov	d0, r0, r1
 800473e:	f005 f8b3 	bl	80098a8 <trunc>
 8004742:	ec51 0b10 	vmov	r0, r1, d0
 8004746:	f7fc fa23 	bl	8000b90 <__aeabi_d2uiz>
		acceleration_scaling(output_select, &gc_block.values.q); // in settings.c
 800474a:	493c      	ldr	r1, [pc, #240]	; (800483c <gc_execute_line+0xea4>)
 800474c:	b2c0      	uxtb	r0, r0
 800474e:	f002 fde3 	bl	8007318 <acceleration_scaling>
	return (STATUS_OK);
 8004752:	2400      	movs	r4, #0
		plan_reset(); // Clear block buffer and planner variables
 8004754:	f000 ff4e 	bl	80055f4 <plan_reset>
 8004758:	f7ff ba5e 	b.w	8003c18 <gc_execute_line+0x280>
			if (gc_state.modal.spindle == SPINDLE_ENABLE_CW)
 800475c:	7a63      	ldrb	r3, [r4, #9]
 800475e:	2b10      	cmp	r3, #16
 8004760:	f47f af02 	bne.w	8004568 <gc_execute_line+0xbd0>
						|| (gc_state.modal.motion == MOTION_MODE_CCW_ARC))
 8004764:	7823      	ldrb	r3, [r4, #0]
				if ((gc_state.modal.motion == MOTION_MODE_LINEAR)
 8004766:	3b01      	subs	r3, #1
 8004768:	2b02      	cmp	r3, #2
 800476a:	f00a 0340 	and.w	r3, sl, #64	; 0x40
 800476e:	d805      	bhi.n	800477c <gc_execute_line+0xde4>
					if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 8004770:	2b00      	cmp	r3, #0
 8004772:	f43f aef9 	beq.w	8004568 <gc_execute_line+0xbd0>
						gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8004776:	f04a 0a20 	orr.w	sl, sl, #32
 800477a:	e6f5      	b.n	8004568 <gc_execute_line+0xbd0>
					if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE))
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f aef3 	bne.w	8004568 <gc_execute_line+0xbd0>
 8004782:	e7f8      	b.n	8004776 <gc_execute_line+0xdde>
			gc_state.modal.coolant |= gc_block.modal.coolant;
 8004784:	7a22      	ldrb	r2, [r4, #8]
 8004786:	4313      	orrs	r3, r2
 8004788:	e733      	b.n	80045f2 <gc_execute_line+0xc5a>
	switch (gc_block.non_modal_command)
 800478a:	2b5c      	cmp	r3, #92	; 0x5c
 800478c:	d03b      	beq.n	8004806 <gc_execute_line+0xe6e>
 800478e:	2b66      	cmp	r3, #102	; 0x66
 8004790:	d03d      	beq.n	800480e <gc_execute_line+0xe76>
 8004792:	2b28      	cmp	r3, #40	; 0x28
 8004794:	f47f af75 	bne.w	8004682 <gc_execute_line+0xcea>
		settings_write_coord_data(SETTING_INDEX_G30, gc_state.position);
 8004798:	4926      	ldr	r1, [pc, #152]	; (8004834 <gc_execute_line+0xe9c>)
 800479a:	2007      	movs	r0, #7
 800479c:	e030      	b.n	8004800 <gc_execute_line+0xe68>
		settings_write_coord_data(coord_select, gc_block.values.ijk);
 800479e:	4928      	ldr	r1, [pc, #160]	; (8004840 <gc_execute_line+0xea8>)
 80047a0:	4658      	mov	r0, fp
 80047a2:	f002 fb89 	bl	8006eb8 <settings_write_coord_data>
		if (gc_state.modal.coord_select == coord_select)
 80047a6:	79a3      	ldrb	r3, [r4, #6]
 80047a8:	455b      	cmp	r3, fp
 80047aa:	f47f af6a 	bne.w	8004682 <gc_execute_line+0xcea>
			memcpy(gc_state.coord_system, gc_block.values.ijk,
 80047ae:	4d1f      	ldr	r5, [pc, #124]	; (800482c <gc_execute_line+0xe94>)
 80047b0:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8004840 <gc_execute_line+0xea8>
		memcpy(gc_state.coord_offset, gc_block.values.xyz,
 80047b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80047b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047ba:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80047be:	e885 0003 	stmia.w	r5, {r0, r1}
		system_flag_wco_change();
 80047c2:	f003 fd65 	bl	8008290 <system_flag_wco_change>
		break;
 80047c6:	e75c      	b.n	8004682 <gc_execute_line+0xcea>
		pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 80047c8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
		if (axis_command)
 80047d4:	b11f      	cbz	r7, 80047de <gc_execute_line+0xe46>
			mc_line(gc_block.values.xyz, pl_data);
 80047d6:	a90d      	add	r1, sp, #52	; 0x34
 80047d8:	4815      	ldr	r0, [pc, #84]	; (8004830 <gc_execute_line+0xe98>)
 80047da:	f000 fab9 	bl	8004d50 <mc_line>
		mc_line(gc_block.values.ijk, pl_data);
 80047de:	a90d      	add	r1, sp, #52	; 0x34
 80047e0:	4817      	ldr	r0, [pc, #92]	; (8004840 <gc_execute_line+0xea8>)
		memcpy(gc_state.position, gc_block.values.ijk, N_AXIS * sizeof(float));
 80047e2:	4d14      	ldr	r5, [pc, #80]	; (8004834 <gc_execute_line+0xe9c>)
		mc_line(gc_block.values.ijk, pl_data);
 80047e4:	f000 fab4 	bl	8004d50 <mc_line>
		memcpy(gc_state.position, gc_block.values.ijk, N_AXIS * sizeof(float));
 80047e8:	f8df e054 	ldr.w	lr, [pc, #84]	; 8004840 <gc_execute_line+0xea8>
 80047ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80047f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047f2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80047f6:	e885 0003 	stmia.w	r5, {r0, r1}
		break;
 80047fa:	e742      	b.n	8004682 <gc_execute_line+0xcea>
		settings_write_coord_data(SETTING_INDEX_G28, gc_state.position);
 80047fc:	490d      	ldr	r1, [pc, #52]	; (8004834 <gc_execute_line+0xe9c>)
 80047fe:	2006      	movs	r0, #6
		settings_write_coord_data(SETTING_INDEX_G30, gc_state.position);
 8004800:	f002 fb5a 	bl	8006eb8 <settings_write_coord_data>
		break;
 8004804:	e73d      	b.n	8004682 <gc_execute_line+0xcea>
		memcpy(gc_state.coord_offset, gc_block.values.xyz,
 8004806:	4d0f      	ldr	r5, [pc, #60]	; (8004844 <gc_execute_line+0xeac>)
 8004808:	f8df e024 	ldr.w	lr, [pc, #36]	; 8004830 <gc_execute_line+0xe98>
 800480c:	e7d2      	b.n	80047b4 <gc_execute_line+0xe1c>
		clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 800480e:	2218      	movs	r2, #24
 8004810:	2100      	movs	r1, #0
 8004812:	480c      	ldr	r0, [pc, #48]	; (8004844 <gc_execute_line+0xeac>)
 8004814:	f004 fa8d 	bl	8008d32 <memset>
 8004818:	e7d3      	b.n	80047c2 <gc_execute_line+0xe2a>
 800481a:	bf00      	nop
 800481c:	f3af 8000 	nop.w
 8004820:	2000447c 	.word	0x2000447c
 8004824:	2000422c 	.word	0x2000422c
 8004828:	00000000 	.word	0x00000000
 800482c:	20004264 	.word	0x20004264
 8004830:	200042dc 	.word	0x200042dc
 8004834:	2000424c 	.word	0x2000424c
 8004838:	20003948 	.word	0x20003948
 800483c:	200042f8 	.word	0x200042f8
 8004840:	200042ac 	.word	0x200042ac
 8004844:	2000427c 	.word	0x2000427c
 8004848:	47ae147b 	.word	0x47ae147b
 800484c:	3f747ae1 	.word	0x3f747ae1
 8004850:	d2f1a9fc 	.word	0xd2f1a9fc
 8004854:	3f50624d 	.word	0x3f50624d
 8004858:	66666666 	.word	0x66666666
 800485c:	40396666 	.word	0x40396666
			else if (gc_state.modal.motion == MOTION_MODE_SEEK)
 8004860:	b933      	cbnz	r3, 8004870 <gc_execute_line+0xed8>
				pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8004862:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800486e:	e711      	b.n	8004694 <gc_execute_line+0xcfc>
			else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8004870:	3b02      	subs	r3, #2
 8004872:	2b01      	cmp	r3, #1
 8004874:	d812      	bhi.n	800489c <gc_execute_line+0xf04>
				mc_arc(gc_block.values.xyz, pl_data, gc_state.position,
 8004876:	f3ca 0380 	ubfx	r3, sl, #2, #1
 800487a:	9303      	str	r3, [sp, #12]
 800487c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800487e:	9302      	str	r3, [sp, #8]
 8004880:	9b08      	ldr	r3, [sp, #32]
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	9b07      	ldr	r3, [sp, #28]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	4b39      	ldr	r3, [pc, #228]	; (8004970 <gc_execute_line+0xfd8>)
 800488a:	ed96 0a0e 	vldr	s0, [r6, #56]	; 0x38
 800488e:	4a39      	ldr	r2, [pc, #228]	; (8004974 <gc_execute_line+0xfdc>)
 8004890:	a90d      	add	r1, sp, #52	; 0x34
 8004892:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004896:	f000 fa8f 	bl	8004db8 <mc_arc>
 800489a:	e6ff      	b.n	800469c <gc_execute_line+0xd04>
				pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 800489c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
				gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data,
 80048a0:	4835      	ldr	r0, [pc, #212]	; (8004978 <gc_execute_line+0xfe0>)
				pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 80048a2:	f043 0304 	orr.w	r3, r3, #4
				gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data,
 80048a6:	4652      	mov	r2, sl
 80048a8:	a90d      	add	r1, sp, #52	; 0x34
				pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 80048aa:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
				gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data,
 80048ae:	f000 fc31 	bl	8005114 <mc_probe_cycle>
			if (gc_update_pos == GC_UPDATE_POS_TARGET)
 80048b2:	2800      	cmp	r0, #0
 80048b4:	f43f aef2 	beq.w	800469c <gc_execute_line+0xd04>
			else if (gc_update_pos == GC_UPDATE_POS_SYSTEM)
 80048b8:	2801      	cmp	r0, #1
 80048ba:	f47f aef7 	bne.w	80046ac <gc_execute_line+0xd14>
				gc_sync_position(); // gc_state.position[] = sys_position
 80048be:	f7ff f861 	bl	8003984 <gc_sync_position>
 80048c2:	e6f3      	b.n	80046ac <gc_execute_line+0xd14>
			gc_state.modal.motion = MOTION_MODE_LINEAR;
 80048c4:	2201      	movs	r2, #1
 80048c6:	7022      	strb	r2, [r4, #0]
			sys.f_override = DEFAULT_FEED_OVERRIDE;
 80048c8:	2264      	movs	r2, #100	; 0x64
 80048ca:	721a      	strb	r2, [r3, #8]
			sys.r_override = DEFAULT_RAPID_OVERRIDE;
 80048cc:	725a      	strb	r2, [r3, #9]
			sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 80048ce:	729a      	strb	r2, [r3, #10]
			if (sys.state != STATE_CHECK_MODE)
 80048d0:	781b      	ldrb	r3, [r3, #0]
			gc_state.modal.plane_select = PLANE_SELECT_XY;
 80048d2:	2500      	movs	r5, #0
			if (sys.state != STATE_CHECK_MODE)
 80048d4:	2b02      	cmp	r3, #2
			gc_state.modal.plane_select = PLANE_SELECT_XY;
 80048d6:	7125      	strb	r5, [r4, #4]
			gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 80048d8:	70e5      	strb	r5, [r4, #3]
			gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 80048da:	7065      	strb	r5, [r4, #1]
			gc_state.modal.coord_select = 0; // G54
 80048dc:	71a5      	strb	r5, [r4, #6]
			gc_state.modal.spindle = SPINDLE_DISABLE;
 80048de:	7265      	strb	r5, [r4, #9]
			gc_state.modal.coolant = COOLANT_DISABLE;
 80048e0:	7225      	strb	r5, [r4, #8]
			if (sys.state != STATE_CHECK_MODE)
 80048e2:	d010      	beq.n	8004906 <gc_execute_line+0xf6e>
				if (!(settings_read_coord_data(gc_state.modal.coord_select,
 80048e4:	4925      	ldr	r1, [pc, #148]	; (800497c <gc_execute_line+0xfe4>)
 80048e6:	4628      	mov	r0, r5
 80048e8:	f002 fbc4 	bl	8007074 <settings_read_coord_data>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	f43f ab30 	beq.w	8003f52 <gc_execute_line+0x5ba>
				system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 80048f2:	f003 fccd 	bl	8008290 <system_flag_wco_change>
				spindle_set_state(SPINDLE_DISABLE, 0.0);
 80048f6:	4628      	mov	r0, r5
 80048f8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8004980 <gc_execute_line+0xfe8>
 80048fc:	f002 fe1e 	bl	800753c <spindle_set_state>
				coolant_set_state(COOLANT_DISABLE);
 8004900:	4628      	mov	r0, r5
 8004902:	f7fe ff57 	bl	80037b4 <coolant_set_state>
			report_feedback_message(MESSAGE_PROGRAM_END);
 8004906:	2008      	movs	r0, #8
 8004908:	f001 fe14 	bl	8006534 <report_feedback_message>
 800490c:	e6e0      	b.n	80046d0 <gc_execute_line+0xd38>
			FAIL(STATUS_EXPECTED_COMMAND_LETTER);
 800490e:	2401      	movs	r4, #1
 8004910:	f7ff b982 	b.w	8003c18 <gc_execute_line+0x280>
			FAIL(STATUS_BAD_NUMBER_FORMAT);
 8004914:	2402      	movs	r4, #2
 8004916:	f7ff b97f 	b.w	8003c18 <gc_execute_line+0x280>
						FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT);
 800491a:	2418      	movs	r4, #24
 800491c:	f7ff b97c 	b.w	8003c18 <gc_execute_line+0x280>
					FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED);
 8004920:	2426      	movs	r4, #38	; 0x26
 8004922:	f7ff b979 	b.w	8003c18 <gc_execute_line+0x280>
				FAIL(STATUS_GCODE_WORD_REPEATED);
 8004926:	2419      	movs	r4, #25
 8004928:	f7ff b976 	b.w	8003c18 <gc_execute_line+0x280>
					FAIL(STATUS_NEGATIVE_VALUE);
 800492c:	2404      	movs	r4, #4
 800492e:	f7ff b973 	b.w	8003c18 <gc_execute_line+0x280>
			FAIL(STATUS_GCODE_INVALID_LINE_NUMBER);
 8004932:	241b      	movs	r4, #27
 8004934:	f7ff b970 	b.w	8003c18 <gc_execute_line+0x280>
				FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR);
 8004938:	2425      	movs	r4, #37	; 0x25
 800493a:	f7ff b96d 	b.w	8003c18 <gc_execute_line+0x280>
			FAIL(STATUS_GCODE_AXIS_WORDS_EXIST);
 800493e:	241f      	movs	r4, #31
 8004940:	f7ff b96a 	b.w	8003c18 <gc_execute_line+0x280>
				FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE);
 8004944:	2416      	movs	r4, #22
 8004946:	f7ff b967 	b.w	8003c18 <gc_execute_line+0x280>
					FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE);
 800494a:	2420      	movs	r4, #32
 800494c:	f7ff b964 	b.w	8003c18 <gc_execute_line+0x280>
						FAIL(STATUS_GCODE_ARC_RADIUS_ERROR);
 8004950:	2422      	movs	r4, #34	; 0x22
 8004952:	f7ff b961 	b.w	8003c18 <gc_execute_line+0x280>
						FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE);
 8004956:	2423      	movs	r4, #35	; 0x23
 8004958:	f7ff b95e 	b.w	8003c18 <gc_execute_line+0x280>
		FAIL(STATUS_GCODE_UNUSED_WORDS);
 800495c:	2424      	movs	r4, #36	; 0x24
 800495e:	f7ff b95b 	b.w	8003c18 <gc_execute_line+0x280>
			FAIL(STATUS_INVALID_JOG_COMMAND)
 8004962:	2410      	movs	r4, #16
 8004964:	f7ff b958 	b.w	8003c18 <gc_execute_line+0x280>
		char_counter = 0;
 8004968:	f88d a02f 	strb.w	sl, [sp, #47]	; 0x2f
 800496c:	f7ff b843 	b.w	80039f6 <gc_execute_line+0x5e>
 8004970:	200042ac 	.word	0x200042ac
 8004974:	2000424c 	.word	0x2000424c
 8004978:	200042dc 	.word	0x200042dc
 800497c:	20004264 	.word	0x20004264
 8004980:	00000000 	.word	0x00000000

08004984 <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8004984:	b538      	push	{r3, r4, r5, lr}
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
 8004986:	690b      	ldr	r3, [r1, #16]
 8004988:	6003      	str	r3, [r0, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 800498a:	7a03      	ldrb	r3, [r0, #8]
 800498c:	f043 0304 	orr.w	r3, r3, #4
 8004990:	7203      	strb	r3, [r0, #8]
  #ifdef USE_LINE_NUMBERS
    pl_data->line_number = gc_block->values.n;
  #endif

  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <jog_execute+0x58>)
 8004994:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8004998:	f013 0f20 	tst.w	r3, #32
{
 800499c:	4605      	mov	r5, r0
 800499e:	f101 0444 	add.w	r4, r1, #68	; 0x44
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80049a2:	d110      	bne.n	80049c6 <jog_execute+0x42>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
  }

  // Valid jog command. Plan, set state, and execute.
  mc_line(gc_block->values.xyz,pl_data);
 80049a4:	4629      	mov	r1, r5
  if (sys.state == STATE_IDLE) {
 80049a6:	4d0e      	ldr	r5, [pc, #56]	; (80049e0 <jog_execute+0x5c>)
  mc_line(gc_block->values.xyz,pl_data);
 80049a8:	4620      	mov	r0, r4
 80049aa:	f000 f9d1 	bl	8004d50 <mc_line>
  if (sys.state == STATE_IDLE) {
 80049ae:	782c      	ldrb	r4, [r5, #0]
 80049b0:	b984      	cbnz	r4, 80049d4 <jog_execute+0x50>
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 80049b2:	f000 fe4f 	bl	8005654 <plan_get_current_block>
 80049b6:	b168      	cbz	r0, 80049d4 <jog_execute+0x50>
      sys.state = STATE_JOG;
 80049b8:	2320      	movs	r3, #32
 80049ba:	702b      	strb	r3, [r5, #0]
      st_prep_buffer();
 80049bc:	f003 f8b4 	bl	8007b28 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 80049c0:	f002 fe0e 	bl	80075e0 <st_wake_up>
 80049c4:	e007      	b.n	80049d6 <jog_execute+0x52>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 80049c6:	4620      	mov	r0, r4
 80049c8:	f003 fc8a 	bl	80082e0 <system_check_travel_limits>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d0e9      	beq.n	80049a4 <jog_execute+0x20>
 80049d0:	240f      	movs	r4, #15
 80049d2:	e000      	b.n	80049d6 <jog_execute+0x52>
    }
  }

  return(STATUS_OK);
 80049d4:	2400      	movs	r4, #0
}
 80049d6:	4620      	mov	r0, r4
 80049d8:	bd38      	pop	{r3, r4, r5, pc}
 80049da:	bf00      	nop
 80049dc:	2000447c 	.word	0x2000447c
 80049e0:	20003948 	.word	0x20003948

080049e4 <limits_disable>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <limits_disable+0x14>)
 80049e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80049ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	4770      	bx	lr
 80049f8:	e000e100 	.word	0xe000e100

080049fc <limits_enable>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049fc:	4b02      	ldr	r3, [pc, #8]	; (8004a08 <limits_enable+0xc>)
 80049fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a02:	605a      	str	r2, [r3, #4]
void limits_enable()
{

#ifdef STM32F4
  NVIC_EnableIRQ(EXTI15_10_IRQn);
  EnableLimitsINT();
 8004a04:	f004 b842 	b.w	8008a8c <EnableLimitsINT>
 8004a08:	e000e100 	.word	0xe000e100

08004a0c <limits_init>:
  if (bit_isfalse(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <limits_init+0x14>)
 8004a0e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8004a12:	071b      	lsls	r3, r3, #28
 8004a14:	d401      	bmi.n	8004a1a <limits_init+0xe>
  	limits_disable();
 8004a16:	f7ff bfe5 	b.w	80049e4 <limits_disable>
  	limits_enable();
 8004a1a:	f7ff bfef 	b.w	80049fc <limits_enable>
 8004a1e:	bf00      	nop
 8004a20:	2000447c 	.word	0x2000447c

08004a24 <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8004a24:	b538      	push	{r3, r4, r5, lr}
  uint16_t pin = 0;
	#ifdef STM32F1
    pin = GPIO_ReadInputData(LIM_GPIO_Port);
	#endif
	#ifdef STM32F4
		pin = GetLimitsState();
 8004a26:	f004 f90b 	bl	8008c40 <GetLimitsState>
	#endif

	#ifdef INVERT_LIMIT_PIN_MASK
		pin ^= INVERT_LIMIT_PIN_MASK;
	#endif
	if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIM_MASK; }
 8004a2a:	4a0f      	ldr	r2, [pc, #60]	; (8004a68 <limits_get_state+0x44>)
 8004a2c:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8004a30:	0652      	lsls	r2, r2, #25
		pin = GetLimitsState();
 8004a32:	4603      	mov	r3, r0
	if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIM_MASK; }
 8004a34:	bf5c      	itt	pl
 8004a36:	f480 6380 	eorpl.w	r3, r0, #1024	; 0x400
 8004a3a:	b29b      	uxthpl	r3, r3
	if (pin)
 8004a3c:	b18b      	cbz	r3, 8004a62 <limits_get_state+0x3e>
 8004a3e:	2200      	movs	r2, #0
	{
		uint8_t idx;
		for (idx=0; idx<N_AXIS; idx++)
		{
			if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8004a40:	490a      	ldr	r1, [pc, #40]	; (8004a6c <limits_get_state+0x48>)
 8004a42:	4610      	mov	r0, r2
 8004a44:	2401      	movs	r4, #1
 8004a46:	f831 5012 	ldrh.w	r5, [r1, r2, lsl #1]
 8004a4a:	422b      	tst	r3, r5
 8004a4c:	bf1c      	itt	ne
 8004a4e:	fa04 f502 	lslne.w	r5, r4, r2
 8004a52:	4328      	orrne	r0, r5
 8004a54:	f102 0201 	add.w	r2, r2, #1
 8004a58:	bf18      	it	ne
 8004a5a:	b2c0      	uxtbne	r0, r0
		for (idx=0; idx<N_AXIS; idx++)
 8004a5c:	2a06      	cmp	r2, #6
 8004a5e:	d1f2      	bne.n	8004a46 <limits_get_state+0x22>
 8004a60:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t limit_state = 0;
 8004a62:	4618      	mov	r0, r3
      if (pin & get_limit_pin_mask(idx)) { limit_state |= (1 << idx); }
    }
  }
#endif
  return(limit_state);
}
 8004a64:	bd38      	pop	{r3, r4, r5, pc}
 8004a66:	bf00      	nop
 8004a68:	2000447c 	.word	0x2000447c
 8004a6c:	0800acf8 	.word	0x0800acf8

08004a70 <HandleLimitIT>:


#ifdef STM32

void HandleLimitIT(void)
{
 8004a70:	b508      	push	{r3, lr}
	// Ignore limit switches if already in an alarm state or in-process of executing an alarm.
	// When in the alarm state, Grbl should have been reset or will force a reset, so any pending
	// moves in the planner and serial buffers are all cleared and newly sent blocks will be
	// locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
	// limit setting if their limits are constantly triggering after a reset and move their axes.
	if (sys.state != STATE_ALARM)
 8004a72:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <HandleLimitIT+0x28>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d00c      	beq.n	8004a94 <HandleLimitIT+0x24>
	{
		if (!(sys_rt_exec_alarm))
 8004a7a:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <HandleLimitIT+0x2c>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	b94b      	cbnz	r3, 8004a94 <HandleLimitIT+0x24>
		{
#ifdef HARD_LIMIT_FORCE_STATE_CHECK
			// Check limit pin state.
			if (limits_get_state())
 8004a80:	f7ff ffd0 	bl	8004a24 <limits_get_state>
 8004a84:	b130      	cbz	r0, 8004a94 <HandleLimitIT+0x24>
			{
				mc_reset(); // Initiate system kill.
 8004a86:	f000 fbad 	bl	80051e4 <mc_reset>
				system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8004a8a:	2001      	movs	r0, #1
			system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif //HARD_LIMIT_FORCE_STATE_CHECK
		}
	}

}
 8004a8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8004a90:	f003 bde4 	b.w	800865c <system_set_exec_alarm>
 8004a94:	bd08      	pop	{r3, pc}
 8004a96:	bf00      	nop
 8004a98:	20003948 	.word	0x20003948
 8004a9c:	20003990 	.word	0x20003990

08004aa0 <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 8004aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa4:	ed2d 8b02 	vpush	{d8}
  if (sys.abort) { return; } // Block if system reset has been issued.
 8004aa8:	4f91      	ldr	r7, [pc, #580]	; (8004cf0 <limits_go_home+0x250>)
 8004aaa:	787e      	ldrb	r6, [r7, #1]
{
 8004aac:	b08f      	sub	sp, #60	; 0x3c
 8004aae:	4680      	mov	r8, r0
  if (sys.abort) { return; } // Block if system reset has been issued.
 8004ab0:	2e00      	cmp	r6, #0
 8004ab2:	f040 80bd 	bne.w	8004c30 <limits_go_home+0x190>

  // Initialize plan data struct for homing motion. Spindle and coolant are disabled.
  plan_line_data_t plan_data;
  plan_line_data_t *pl_data = &plan_data;
  memset(pl_data,0,sizeof(plan_line_data_t));
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8004ab6:	2306      	movs	r3, #6
 8004ab8:	f8df a248 	ldr.w	sl, [pc, #584]	; 8004d04 <limits_go_home+0x264>

  // Initialize variables used for homing computations.
  uint8_t n_cycle = (2*N_HOMING_LOCATE_CYCLE+1);
  uint16_t step_pin[N_AXIS];
  float target[N_AXIS];
  float max_travel = 0.0;
 8004abc:	ed9f 8a8d 	vldr	s16, [pc, #564]	; 8004cf4 <limits_go_home+0x254>
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
    // Initialize step pin masks
    #ifdef STM32
      step_pin[idx] = step_pin_mask[idx];
 8004ac0:	f8df b244 	ldr.w	fp, [pc, #580]	; 8004d08 <limits_go_home+0x268>
  memset(pl_data,0,sizeof(plan_line_data_t));
 8004ac4:	9604      	str	r6, [sp, #16]
 8004ac6:	9602      	str	r6, [sp, #8]
 8004ac8:	9603      	str	r6, [sp, #12]
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8004aca:	f88d 3010 	strb.w	r3, [sp, #16]
      step_pin[idx] = step_pin_mask[idx];
 8004ace:	f10d 0914 	add.w	r9, sp, #20
 8004ad2:	f83b 3016 	ldrh.w	r3, [fp, r6, lsl #1]
 8004ad6:	f829 3016 	strh.w	r3, [r9, r6, lsl #1]
    #endif
    #ifdef COREXY
      if ((idx==A_MOTOR)||(idx==B_MOTOR)) { step_pin[idx] = (get_step_pin_mask(X_AXIS)|get_step_pin_mask(Y_AXIS)); }
    #endif

    if (bit_istrue(cycle_mask,bit(idx))) {
 8004ada:	fa48 f306 	asr.w	r3, r8, r6
 8004ade:	07d9      	lsls	r1, r3, #31
 8004ae0:	d519      	bpl.n	8004b16 <limits_go_home+0x76>
      // Set target based on max_travel setting. Ensure homing switches engaged with search scalar.
      // NOTE: settings.max_travel[] is stored as a negative value.
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8004ae2:	f8da 0000 	ldr.w	r0, [sl]
 8004ae6:	f7fb fd27 	bl	8000538 <__aeabi_f2d>
 8004aea:	2200      	movs	r2, #0
 8004aec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004af0:	f7fb fd76 	bl	80005e0 <__aeabi_dmul>
 8004af4:	4604      	mov	r4, r0
 8004af6:	460d      	mov	r5, r1
 8004af8:	ee18 0a10 	vmov	r0, s16
 8004afc:	f7fb fd1c 	bl	8000538 <__aeabi_f2d>
 8004b00:	4622      	mov	r2, r4
 8004b02:	462b      	mov	r3, r5
 8004b04:	f7fb fffc 	bl	8000b00 <__aeabi_dcmpgt>
 8004b08:	b928      	cbnz	r0, 8004b16 <limits_go_home+0x76>
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	f7fc f85f 	bl	8000bd0 <__aeabi_d2f>
 8004b12:	ee08 0a10 	vmov	s16, r0
 8004b16:	3601      	adds	r6, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8004b18:	2e06      	cmp	r6, #6
 8004b1a:	f10a 0a04 	add.w	sl, sl, #4
 8004b1e:	d1d8      	bne.n	8004ad2 <limits_go_home+0x32>
    }
  }

  // Set search mode with approach at seek rate to quickly engage the specified cycle_mask limit switches.
  bool approach = true;
  float homing_rate = settings.homing_seek_rate;
 8004b20:	4d75      	ldr	r5, [pc, #468]	; (8004cf8 <limits_go_home+0x258>)
 8004b22:	2304      	movs	r3, #4
 8004b24:	edd5 8a20 	vldr	s17, [r5, #128]	; 0x80
 8004b28:	9301      	str	r3, [sp, #4]
  bool approach = true;
 8004b2a:	2601      	movs	r6, #1
  uint8_t limit_state, n_active_axis;
  uint16_t axislock;

  do {

    system_convert_array_steps_to_mpos(target,sys_position);
 8004b2c:	4973      	ldr	r1, [pc, #460]	; (8004cfc <limits_go_home+0x25c>)
 8004b2e:	a808      	add	r0, sp, #32
 8004b30:	f003 fbc8 	bl	80082c4 <system_convert_array_steps_to_mpos>

    // Initialize and declare variables needed for homing routine.
    axislock = 0;
    n_active_axis = 0;
 8004b34:	2200      	movs	r2, #0
        #else
          sys_position[idx] = 0;
        #endif
        // Set target direction based on cycle mask and homing cycle approach state.
        // NOTE: This happens to compile smaller than any other implementation tried.
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8004b36:	f895 e079 	ldrb.w	lr, [r5, #121]	; 0x79
 8004b3a:	a808      	add	r0, sp, #32
 8004b3c:	4611      	mov	r1, r2
    axislock = 0;
 8004b3e:	4692      	mov	sl, r2
          if (approach) { target[idx] = -max_travel; }
          else { target[idx] = max_travel; }
        } else {
          if (approach) { target[idx] = max_travel; }
          else { target[idx] = -max_travel; }
 8004b40:	eef1 7a48 	vneg.f32	s15, s16
      if (bit_istrue(cycle_mask,bit(idx))) {
 8004b44:	fa48 fc01 	asr.w	ip, r8, r1
 8004b48:	f01c 0f01 	tst.w	ip, #1
 8004b4c:	d016      	beq.n	8004b7c <limits_go_home+0xdc>
          sys_position[idx] = 0;
 8004b4e:	4b6b      	ldr	r3, [pc, #428]	; (8004cfc <limits_go_home+0x25c>)
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8004b50:	fa4e fc01 	asr.w	ip, lr, r1
        n_active_axis++;
 8004b54:	3201      	adds	r2, #1
          sys_position[idx] = 0;
 8004b56:	2400      	movs	r4, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8004b58:	f01c 0f01 	tst.w	ip, #1
        n_active_axis++;
 8004b5c:	b2d2      	uxtb	r2, r2
          sys_position[idx] = 0;
 8004b5e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8004b62:	d003      	beq.n	8004b6c <limits_go_home+0xcc>
          if (approach) { target[idx] = -max_travel; }
 8004b64:	b126      	cbz	r6, 8004b70 <limits_go_home+0xd0>
          else { target[idx] = -max_travel; }
 8004b66:	edc0 7a00 	vstr	s15, [r0]
 8004b6a:	e003      	b.n	8004b74 <limits_go_home+0xd4>
          if (approach) { target[idx] = max_travel; }
 8004b6c:	2e00      	cmp	r6, #0
 8004b6e:	d0fa      	beq.n	8004b66 <limits_go_home+0xc6>
 8004b70:	ed80 8a00 	vstr	s16, [r0]
        }
        // Apply axislock to the step port pins active in this cycle.
        axislock |= step_pin[idx];
 8004b74:	f839 c011 	ldrh.w	ip, [r9, r1, lsl #1]
 8004b78:	ea4a 0a0c 	orr.w	sl, sl, ip
 8004b7c:	3101      	adds	r1, #1
    for (idx=0; idx<N_AXIS; idx++) {
 8004b7e:	2906      	cmp	r1, #6
 8004b80:	f100 0004 	add.w	r0, r0, #4
 8004b84:	d1de      	bne.n	8004b44 <limits_go_home+0xa4>
      }

    }
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8004b86:	ee07 2a90 	vmov	s15, r2
 8004b8a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8004b8e:	f004 ffdf 	bl	8009b50 <sqrtf>
 8004b92:	ee28 0a80 	vmul.f32	s0, s17, s0
    sys.homing_axis_lock = axislock;

    // Perform homing cycle. Planner buffer should be empty, as required to initiate the homing cycle.
    pl_data->feed_rate = homing_rate; // Set current homing rate.
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8004b96:	a902      	add	r1, sp, #8
 8004b98:	a808      	add	r0, sp, #32
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 8004b9a:	ed8d 0a02 	vstr	s0, [sp, #8]
    sys.homing_axis_lock = axislock;
 8004b9e:	f8a7 a006 	strh.w	sl, [r7, #6]
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8004ba2:	f000 fe31 	bl	8005808 <plan_buffer_line>

    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	713a      	strb	r2, [r7, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 8004baa:	f002 ffbd 	bl	8007b28 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 8004bae:	f002 fd17 	bl	80075e0 <st_wake_up>
      }

      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.

      // Exit routines: No time to run protocol_execute_realtime() in this loop.
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8004bb2:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004d0c <limits_go_home+0x26c>
      if (approach) {
 8004bb6:	b19e      	cbz	r6, 8004be0 <limits_go_home+0x140>
        limit_state = limits_get_state();
 8004bb8:	f7ff ff34 	bl	8004a24 <limits_get_state>
 8004bbc:	2200      	movs	r2, #0
          if (axislock & step_pin[idx]) {
 8004bbe:	f839 1012 	ldrh.w	r1, [r9, r2, lsl #1]
 8004bc2:	ea11 0f0a 	tst.w	r1, sl
 8004bc6:	d006      	beq.n	8004bd6 <limits_go_home+0x136>
            if (limit_state & (1 << idx)) {
 8004bc8:	fa40 fe02 	asr.w	lr, r0, r2
 8004bcc:	f01e 0f01 	tst.w	lr, #1
                axislock &= ~(step_pin[idx]);
 8004bd0:	bf18      	it	ne
 8004bd2:	ea2a 0a01 	bicne.w	sl, sl, r1
 8004bd6:	3201      	adds	r2, #1
        for (idx=0; idx<N_AXIS; idx++) {
 8004bd8:	2a06      	cmp	r2, #6
 8004bda:	d1f0      	bne.n	8004bbe <limits_go_home+0x11e>
        sys.homing_axis_lock = axislock;
 8004bdc:	f8a7 a006 	strh.w	sl, [r7, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8004be0:	f002 ffa2 	bl	8007b28 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8004be4:	f89b 2000 	ldrb.w	r2, [fp]
 8004be8:	f012 0f34 	tst.w	r2, #52	; 0x34
 8004bec:	d076      	beq.n	8004cdc <limits_go_home+0x23c>
        uint8_t rt_exec = sys_rt_exec_state;
 8004bee:	f89b b000 	ldrb.w	fp, [fp]
 8004bf2:	fa5f fb8b 	uxtb.w	fp, fp
        // Homing failure condition: Reset issued during cycle.
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8004bf6:	f01b 0f10 	tst.w	fp, #16
 8004bfa:	d002      	beq.n	8004c02 <limits_go_home+0x162>
 8004bfc:	2006      	movs	r0, #6
 8004bfe:	f003 fd2d 	bl	800865c <system_set_exec_alarm>
        // Homing failure condition: Safety door was opened.
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8004c02:	f01b 0f20 	tst.w	fp, #32
 8004c06:	d002      	beq.n	8004c0e <limits_go_home+0x16e>
 8004c08:	2007      	movs	r0, #7
 8004c0a:	f003 fd27 	bl	800865c <system_set_exec_alarm>
        // Homing failure condition: Limit switch still engaged after pull-off motion
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8004c0e:	2e00      	cmp	r6, #0
 8004c10:	d169      	bne.n	8004ce6 <limits_go_home+0x246>
 8004c12:	f7ff ff07 	bl	8004a24 <limits_get_state>
 8004c16:	ea18 0f00 	tst.w	r8, r0
 8004c1a:	d002      	beq.n	8004c22 <limits_go_home+0x182>
 8004c1c:	2008      	movs	r0, #8
        // Homing failure condition: Limit switch not found during approach.
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8004c1e:	f003 fd1d 	bl	800865c <system_set_exec_alarm>
        if (sys_rt_exec_alarm) {
 8004c22:	4b37      	ldr	r3, [pc, #220]	; (8004d00 <limits_go_home+0x260>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	b143      	cbz	r3, 8004c3a <limits_go_home+0x19a>
          mc_reset(); // Stop motors, if they are running.
 8004c28:	f000 fadc 	bl	80051e4 <mc_reset>
          protocol_execute_realtime();
 8004c2c:	f001 fa8c 	bl	8006148 <protocol_execute_realtime>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
}
 8004c30:	b00f      	add	sp, #60	; 0x3c
 8004c32:	ecbd 8b02 	vpop	{d8}
 8004c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8004c3a:	2004      	movs	r0, #4
 8004c3c:	f003 fd04 	bl	8008648 <system_clear_exec_state_flag>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8004c40:	f002 fee8 	bl	8007a14 <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 8004c44:	f8b5 0084 	ldrh.w	r0, [r5, #132]	; 0x84
 8004c48:	f000 fbb2 	bl	80053b0 <delay_ms>
 8004c4c:	9b01      	ldr	r3, [sp, #4]
      homing_rate = settings.homing_feed_rate;
 8004c4e:	edd5 7a1f 	vldr	s15, [r5, #124]	; 0x7c
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8004c52:	ed95 8a22 	vldr	s16, [r5, #136]	; 0x88
      homing_rate = settings.homing_seek_rate;
 8004c56:	edd5 8a20 	vldr	s17, [r5, #128]	; 0x80
    if (approach) {
 8004c5a:	f096 0601 	eors.w	r6, r6, #1
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8004c5e:	bf18      	it	ne
 8004c60:	eeb1 7a04 	vmovne.f32	s14, #20	; 0x40a00000  5.0
 8004c64:	f103 34ff 	add.w	r4, r3, #4294967295
 8004c68:	bf1c      	itt	ne
 8004c6a:	ee28 8a07 	vmulne.f32	s16, s16, s14
      homing_rate = settings.homing_feed_rate;
 8004c6e:	eef0 8a67 	vmovne.f32	s17, s15
  } while (n_cycle-- > 0);
 8004c72:	f014 03ff 	ands.w	r3, r4, #255	; 0xff
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	f47f af58 	bne.w	8004b2c <limits_go_home+0x8c>
 8004c7c:	4e1e      	ldr	r6, [pc, #120]	; (8004cf8 <limits_go_home+0x258>)
        sys_position[idx] = set_axis_position;
 8004c7e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8004cfc <limits_go_home+0x25c>
  } while (n_cycle-- > 0);
 8004c82:	461c      	mov	r4, r3
    if (cycle_mask & bit(idx)) {
 8004c84:	fa48 f304 	asr.w	r3, r8, r4
 8004c88:	07da      	lsls	r2, r3, #31
 8004c8a:	d51f      	bpl.n	8004ccc <limits_go_home+0x22c>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8004c8c:	f895 3079 	ldrb.w	r3, [r5, #121]	; 0x79
 8004c90:	4123      	asrs	r3, r4
 8004c92:	07db      	lsls	r3, r3, #31
          set_axis_position = lround((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 8004c94:	bf47      	ittee	mi
 8004c96:	edd6 7a12 	vldrmi	s15, [r6, #72]	; 0x48
 8004c9a:	ed95 7a22 	vldrmi	s14, [r5, #136]	; 0x88
          set_axis_position = lround(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8004c9e:	edd6 7a00 	vldrpl	s15, [r6]
 8004ca2:	ed95 7a22 	vldrpl	s14, [r5, #136]	; 0x88
          set_axis_position = lround((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 8004ca6:	bf45      	ittet	mi
 8004ca8:	ee77 7a87 	vaddmi.f32	s15, s15, s14
 8004cac:	ed96 7a00 	vldrmi	s14, [r6]
          set_axis_position = lround(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8004cb0:	ee67 7a67 	vnmulpl.f32	s15, s14, s15
          set_axis_position = lround((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 8004cb4:	ee67 7a87 	vmulmi.f32	s15, s15, s14
          set_axis_position = lround(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8004cb8:	ee17 0a90 	vmov	r0, s15
 8004cbc:	f7fb fc3c 	bl	8000538 <__aeabi_f2d>
 8004cc0:	ec41 0b10 	vmov	d0, r0, r1
 8004cc4:	f004 fd64 	bl	8009790 <lround>
        sys_position[idx] = set_axis_position;
 8004cc8:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
 8004ccc:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8004cce:	2c06      	cmp	r4, #6
 8004cd0:	f106 0604 	add.w	r6, r6, #4
 8004cd4:	d1d6      	bne.n	8004c84 <limits_go_home+0x1e4>
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	713b      	strb	r3, [r7, #4]
 8004cda:	e7a9      	b.n	8004c30 <limits_go_home+0x190>
    } while (STEP_MASK & axislock);
 8004cdc:	f41a 5ffc 	tst.w	sl, #8064	; 0x1f80
 8004ce0:	f47f af69 	bne.w	8004bb6 <limits_go_home+0x116>
 8004ce4:	e7ac      	b.n	8004c40 <limits_go_home+0x1a0>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8004ce6:	f01b 0f04 	tst.w	fp, #4
 8004cea:	d09a      	beq.n	8004c22 <limits_go_home+0x182>
 8004cec:	2009      	movs	r0, #9
 8004cee:	e796      	b.n	8004c1e <limits_go_home+0x17e>
 8004cf0:	20003948 	.word	0x20003948
 8004cf4:	00000000 	.word	0x00000000
 8004cf8:	2000447c 	.word	0x2000447c
 8004cfc:	20003978 	.word	0x20003978
 8004d00:	20003990 	.word	0x20003990
 8004d04:	200044c4 	.word	0x200044c4
 8004d08:	0800ad04 	.word	0x0800ad04
 8004d0c:	2000395d 	.word	0x2000395d

08004d10 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 8004d10:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 8004d12:	f003 fae5 	bl	80082e0 <system_check_travel_limits>
 8004d16:	b1c0      	cbz	r0, 8004d4a <limits_soft_check+0x3a>
    sys.soft_limit = true;
 8004d18:	4c0c      	ldr	r4, [pc, #48]	; (8004d4c <limits_soft_check+0x3c>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 8004d1a:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 8004d1c:	2201      	movs	r2, #1
    if (sys.state == STATE_CYCLE) {
 8004d1e:	2808      	cmp	r0, #8
    sys.soft_limit = true;
 8004d20:	70e2      	strb	r2, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 8004d22:	d008      	beq.n	8004d36 <limits_soft_check+0x26>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 8004d24:	f000 fa5e 	bl	80051e4 <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 8004d28:	2002      	movs	r0, #2
 8004d2a:	f003 fc97 	bl	800865c <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 8004d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 8004d32:	f001 ba09 	b.w	8006148 <protocol_execute_realtime>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 8004d36:	f003 faed 	bl	8008314 <system_set_exec_state_flag>
        protocol_execute_realtime();
 8004d3a:	f001 fa05 	bl	8006148 <protocol_execute_realtime>
        if (sys.abort) { return; }
 8004d3e:	7863      	ldrb	r3, [r4, #1]
 8004d40:	b91b      	cbnz	r3, 8004d4a <limits_soft_check+0x3a>
      } while ( sys.state != STATE_IDLE );
 8004d42:	7823      	ldrb	r3, [r4, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f8      	bne.n	8004d3a <limits_soft_check+0x2a>
 8004d48:	e7ec      	b.n	8004d24 <limits_soft_check+0x14>
 8004d4a:	bd10      	pop	{r4, pc}
 8004d4c:	20003948 	.word	0x20003948

08004d50 <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8004d52:	4c17      	ldr	r4, [pc, #92]	; (8004db0 <mc_line+0x60>)
 8004d54:	4e17      	ldr	r6, [pc, #92]	; (8004db4 <mc_line+0x64>)
 8004d56:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8004d5a:	f012 0f20 	tst.w	r2, #32
{
 8004d5e:	4607      	mov	r7, r0
 8004d60:	460d      	mov	r5, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8004d62:	d004      	beq.n	8004d6e <mc_line+0x1e>
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8004d64:	7833      	ldrb	r3, [r6, #0]
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d001      	beq.n	8004d6e <mc_line+0x1e>
 8004d6a:	f7ff ffd1 	bl	8004d10 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 8004d6e:	7833      	ldrb	r3, [r6, #0]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d01c      	beq.n	8004dae <mc_line+0x5e>
  // parser and planner are separate from the system machine positions, this is doable.

  // If the buffer is full: good! That means we are well ahead of the robot.
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_realtime(); // Check for any run-time commands
 8004d74:	f001 f9e8 	bl	8006148 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8004d78:	7873      	ldrb	r3, [r6, #1]
 8004d7a:	b9c3      	cbnz	r3, 8004dae <mc_line+0x5e>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8004d7c:	f000 fc98 	bl	80056b0 <plan_check_full_buffer>
 8004d80:	b110      	cbz	r0, 8004d88 <mc_line+0x38>
 8004d82:	f001 f823 	bl	8005dcc <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8004d86:	e7f5      	b.n	8004d74 <mc_line+0x24>
    else { break; }
  } while (1);

  // Plan and queue motion into planner buffer
  if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	f000 fd3c 	bl	8005808 <plan_buffer_line>
 8004d90:	b968      	cbnz	r0, 8004dae <mc_line+0x5e>
    if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8004d92:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8004d96:	079a      	lsls	r2, r3, #30
 8004d98:	d509      	bpl.n	8004dae <mc_line+0x5e>
      // Correctly set spindle state, if there is a coincident position passed. Forces a buffer
      // sync while in M3 laser mode only.
      if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8004d9a:	7a2b      	ldrb	r3, [r5, #8]
 8004d9c:	06db      	lsls	r3, r3, #27
 8004d9e:	d506      	bpl.n	8004dae <mc_line+0x5e>
        spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8004da0:	ed95 0a01 	vldr	s0, [r5, #4]
 8004da4:	2010      	movs	r0, #16
      }
    }
  }
}
 8004da6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8004daa:	f002 bbff 	b.w	80075ac <spindle_sync>
 8004dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db0:	2000447c 	.word	0x2000447c
 8004db4:	20003948 	.word	0x20003948

08004db8 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	ed2d 8b0a 	vpush	{d8-d12}
 8004dc0:	b087      	sub	sp, #28
 8004dc2:	460c      	mov	r4, r1
  float center_axis0 = position[axis_0] + offset[axis_0];
 8004dc4:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
{
 8004dc8:	f89d b070 	ldrb.w	fp, [sp, #112]	; 0x70
 8004dcc:	f89d 8074 	ldrb.w	r8, [sp, #116]	; 0x74
  float center_axis0 = position[axis_0] + offset[axis_0];
 8004dd0:	0089      	lsls	r1, r1, #2
{
 8004dd2:	4616      	mov	r6, r2
  float center_axis0 = position[axis_0] + offset[axis_0];
 8004dd4:	440a      	add	r2, r1
 8004dd6:	ed92 aa00 	vldr	s20, [r2]
 8004dda:	9202      	str	r2, [sp, #8]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8004ddc:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8004de0:	0092      	lsls	r2, r2, #2
{
 8004de2:	4605      	mov	r5, r0
  float center_axis0 = position[axis_0] + offset[axis_0];
 8004de4:	eb03 0a01 	add.w	sl, r3, r1
  float center_axis1 = position[axis_1] + offset[axis_1];
 8004de8:	18b0      	adds	r0, r6, r2
 8004dea:	189f      	adds	r7, r3, r2
  float center_axis0 = position[axis_0] + offset[axis_0];
 8004dec:	edda 9a00 	vldr	s19, [sl]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8004df0:	ed97 8a00 	vldr	s16, [r7]
 8004df4:	edd0 aa00 	vldr	s21, [r0]
 8004df8:	9003      	str	r0, [sp, #12]
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
 8004dfa:	4429      	add	r1, r5
  float rt_axis1 = target[axis_1] - center_axis1;
 8004dfc:	442a      	add	r2, r5
  float center_axis0 = position[axis_0] + offset[axis_0];
 8004dfe:	ee39 aa8a 	vadd.f32	s20, s19, s20
  float center_axis1 = position[axis_1] + offset[axis_1];
 8004e02:	ee78 aa2a 	vadd.f32	s21, s16, s21
  float rt_axis0 = target[axis_0] - center_axis0;
 8004e06:	ed91 7a00 	vldr	s14, [r1]
  float rt_axis1 = target[axis_1] - center_axis1;
 8004e0a:	edd2 7a00 	vldr	s15, [r2]
  float rt_axis0 = target[axis_0] - center_axis0;
 8004e0e:	ee37 7a4a 	vsub.f32	s14, s14, s20
  float rt_axis1 = target[axis_1] - center_axis1;
 8004e12:	ee77 7aea 	vsub.f32	s15, s15, s21
  float r_axis1 = -offset[axis_1];
 8004e16:	eeb1 8a48 	vneg.f32	s16, s16

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8004e1a:	ee68 0a27 	vmul.f32	s1, s16, s15
{
 8004e1e:	eeb0 ba40 	vmov.f32	s22, s0
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8004e22:	ee27 0a48 	vnmul.f32	s0, s14, s16
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8004e26:	eef1 9a69 	vneg.f32	s19, s19
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8004e2a:	eee9 0a87 	vfma.f32	s1, s19, s14
 8004e2e:	eea9 0aa7 	vfma.f32	s0, s19, s15
 8004e32:	f004 fe8b 	bl	8009b4c <atan2f>
 8004e36:	eeb0 9a40 	vmov.f32	s18, s0
  if (is_clockwise_arc) { // Correct atan2 output per direction
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8004e3a:	ee10 0a10 	vmov	r0, s0
  if (is_clockwise_arc) { // Correct atan2 output per direction
 8004e3e:	f1b8 0f00 	cmp.w	r8, #0
 8004e42:	d05a      	beq.n	8004efa <mc_arc+0x142>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8004e44:	f7fb fb78 	bl	8000538 <__aeabi_f2d>
 8004e48:	a38f      	add	r3, pc, #572	; (adr r3, 8005088 <mc_arc+0x2d0>)
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	4680      	mov	r8, r0
 8004e50:	4689      	mov	r9, r1
 8004e52:	f7fb fe4b 	bl	8000aec <__aeabi_dcmpge>
 8004e56:	b150      	cbz	r0, 8004e6e <mc_arc+0xb6>
 8004e58:	a383      	add	r3, pc, #524	; (adr r3, 8005068 <mc_arc+0x2b0>)
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	4640      	mov	r0, r8
 8004e60:	4649      	mov	r1, r9
 8004e62:	f7fb fa09 	bl	8000278 <__aeabi_dsub>
  } else {
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8004e66:	f7fb feb3 	bl	8000bd0 <__aeabi_d2f>
 8004e6a:	ee09 0a10 	vmov	s18, r0
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8004e6e:	4b82      	ldr	r3, [pc, #520]	; (8005078 <mc_arc+0x2c0>)
 8004e70:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004e74:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8004e78:	eeb0 0a67 	vmov.f32	s0, s15
 8004e7c:	ee9b 0a28 	vfnms.f32	s0, s22, s17
 8004e80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e84:	f004 fe64 	bl	8009b50 <sqrtf>
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 8004e88:	ee19 0a10 	vmov	r0, s18
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8004e8c:	ed8d 0a01 	vstr	s0, [sp, #4]
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 8004e90:	f7fb fb52 	bl	8000538 <__aeabi_f2d>
 8004e94:	2200      	movs	r2, #0
 8004e96:	4b79      	ldr	r3, [pc, #484]	; (800507c <mc_arc+0x2c4>)
 8004e98:	f7fb fba2 	bl	80005e0 <__aeabi_dmul>
 8004e9c:	4680      	mov	r8, r0
 8004e9e:	ee1b 0a10 	vmov	r0, s22
 8004ea2:	4689      	mov	r9, r1
 8004ea4:	f7fb fb48 	bl	8000538 <__aeabi_f2d>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4640      	mov	r0, r8
 8004eae:	4649      	mov	r1, r9
 8004eb0:	f7fb fb96 	bl	80005e0 <__aeabi_dmul>
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8004eb4:	ed9d 0a01 	vldr	s0, [sp, #4]
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 8004eb8:	4680      	mov	r8, r0
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8004eba:	ee10 0a10 	vmov	r0, s0
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 8004ebe:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8004ec2:	f7fb fb39 	bl	8000538 <__aeabi_f2d>
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4649      	mov	r1, r9
 8004ecc:	4640      	mov	r0, r8
 8004ece:	f7fb fcb1 	bl	8000834 <__aeabi_ddiv>
 8004ed2:	ec41 0b10 	vmov	d0, r0, r1
 8004ed6:	f004 fbd7 	bl	8009688 <floor>
 8004eda:	ec51 0b10 	vmov	r0, r1, d0
 8004ede:	f7fb fe57 	bl	8000b90 <__aeabi_d2uiz>
 8004ee2:	b283      	uxth	r3, r0
 8004ee4:	9301      	str	r3, [sp, #4]

  if (segments) {
 8004ee6:	b9db      	cbnz	r3, 8004f20 <mc_arc+0x168>
      // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
      if (sys.abort) { return; }
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4628      	mov	r0, r5
}
 8004eec:	b007      	add	sp, #28
 8004eee:	ecbd 8b0a 	vpop	{d8-d12}
 8004ef2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mc_line(target, pl_data);
 8004ef6:	f7ff bf2b 	b.w	8004d50 <mc_line>
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8004efa:	f7fb fb1d 	bl	8000538 <__aeabi_f2d>
 8004efe:	a358      	add	r3, pc, #352	; (adr r3, 8005060 <mc_arc+0x2a8>)
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	4680      	mov	r8, r0
 8004f06:	4689      	mov	r9, r1
 8004f08:	f7fb fde6 	bl	8000ad8 <__aeabi_dcmple>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d0ae      	beq.n	8004e6e <mc_arc+0xb6>
 8004f10:	a355      	add	r3, pc, #340	; (adr r3, 8005068 <mc_arc+0x2b0>)
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	4640      	mov	r0, r8
 8004f18:	4649      	mov	r1, r9
 8004f1a:	f7fb f9af 	bl	800027c <__adddf3>
 8004f1e:	e7a2      	b.n	8004e66 <mc_arc+0xae>
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8004f20:	7a23      	ldrb	r3, [r4, #8]
 8004f22:	eddd 7a01 	vldr	s15, [sp, #4]
 8004f26:	f013 0f08 	tst.w	r3, #8
 8004f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f2e:	d008      	beq.n	8004f42 <mc_arc+0x18a>
      pl_data->feed_rate *= segments; 
 8004f30:	ed94 7a00 	vldr	s14, [r4]
 8004f34:	ee27 7a27 	vmul.f32	s14, s14, s15
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8004f38:	f023 0308 	bic.w	r3, r3, #8
      pl_data->feed_rate *= segments; 
 8004f3c:	ed84 7a00 	vstr	s14, [r4]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8004f40:	7223      	strb	r3, [r4, #8]
    float theta_per_segment = angular_travel/segments;
 8004f42:	ee89 ba27 	vdiv.f32	s22, s18, s15
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8004f46:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004f4a:	eb06 090b 	add.w	r9, r6, fp
 8004f4e:	44ab      	add	fp, r5
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8004f50:	f04f 0801 	mov.w	r8, #1
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8004f54:	edd9 6a00 	vldr	s13, [r9]
 8004f58:	ed9b 7a00 	vldr	s14, [fp]
 8004f5c:	ee37 7a66 	vsub.f32	s14, s14, s13
    float sin_T = theta_per_segment*0.16666667*(cos_T + 4.0);
 8004f60:	ee1b 0a10 	vmov	r0, s22
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8004f64:	eec7 ba27 	vdiv.f32	s23, s14, s15
    float sin_T = theta_per_segment*0.16666667*(cos_T + 4.0);
 8004f68:	f7fb fae6 	bl	8000538 <__aeabi_f2d>
 8004f6c:	a340      	add	r3, pc, #256	; (adr r3, 8005070 <mc_arc+0x2b8>)
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	f7fb fb35 	bl	80005e0 <__aeabi_dmul>
 8004f76:	e9cd 0104 	strd	r0, r1, [sp, #16]
    uint8_t count = 0;
 8004f7a:	f04f 0b00 	mov.w	fp, #0
    float cos_T = 2.0 - theta_per_segment*theta_per_segment;
 8004f7e:	eeeb 8a4b 	vfms.f32	s17, s22, s22
    float sin_T = theta_per_segment*0.16666667*(cos_T + 4.0);
 8004f82:	ee18 0a90 	vmov	r0, s17
 8004f86:	f7fb fad7 	bl	8000538 <__aeabi_f2d>
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4b3c      	ldr	r3, [pc, #240]	; (8005080 <mc_arc+0x2c8>)
 8004f8e:	f7fb f975 	bl	800027c <__adddf3>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f9a:	f7fb fb21 	bl	80005e0 <__aeabi_dmul>
 8004f9e:	f7fb fe17 	bl	8000bd0 <__aeabi_d2f>
    cos_T *= 0.5;
 8004fa2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    float sin_T = theta_per_segment*0.16666667*(cos_T + 4.0);
 8004fa6:	ee0c 0a10 	vmov	s24, r0
    cos_T *= 0.5;
 8004faa:	ee68 8aa7 	vmul.f32	s17, s17, s15
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8004fae:	9b01      	ldr	r3, [sp, #4]
 8004fb0:	fa1f f288 	uxth.w	r2, r8
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d997      	bls.n	8004ee8 <mc_arc+0x130>
      if (count < N_ARC_CORRECTION) {
 8004fb8:	f1bb 0f0b 	cmp.w	fp, #11
 8004fbc:	d82e      	bhi.n	800501c <mc_arc+0x264>
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8004fbe:	ee68 7a28 	vmul.f32	s15, s16, s17
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8004fc2:	ee2c 8a48 	vnmul.f32	s16, s24, s16
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8004fc6:	eee9 7a8c 	vfma.f32	s15, s19, s24
        count++;
 8004fca:	f10b 0301 	add.w	r3, fp, #1
 8004fce:	fa5f fb83 	uxtb.w	fp, r3
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8004fd2:	eea9 8aa8 	vfma.f32	s16, s19, s17
 8004fd6:	eef0 9a48 	vmov.f32	s19, s16
        r_axis1 = r_axisi;
 8004fda:	eeb0 8a67 	vmov.f32	s16, s15
      position[axis_0] = center_axis0 + r_axis0;
 8004fde:	9b02      	ldr	r3, [sp, #8]
 8004fe0:	ee79 7a8a 	vadd.f32	s15, s19, s20
      mc_line(position, pl_data);
 8004fe4:	4621      	mov	r1, r4
      position[axis_0] = center_axis0 + r_axis0;
 8004fe6:	edc3 7a00 	vstr	s15, [r3]
      position[axis_1] = center_axis1 + r_axis1;
 8004fea:	9b03      	ldr	r3, [sp, #12]
 8004fec:	ee78 7a2a 	vadd.f32	s15, s16, s21
      mc_line(position, pl_data);
 8004ff0:	4630      	mov	r0, r6
      position[axis_1] = center_axis1 + r_axis1;
 8004ff2:	edc3 7a00 	vstr	s15, [r3]
      position[axis_linear] += linear_per_segment;
 8004ff6:	edd9 7a00 	vldr	s15, [r9]
 8004ffa:	ee77 7aab 	vadd.f32	s15, s15, s23
 8004ffe:	f108 0801 	add.w	r8, r8, #1
 8005002:	edc9 7a00 	vstr	s15, [r9]
      mc_line(position, pl_data);
 8005006:	f7ff fea3 	bl	8004d50 <mc_line>
      if (sys.abort) { return; }
 800500a:	4b1e      	ldr	r3, [pc, #120]	; (8005084 <mc_arc+0x2cc>)
 800500c:	785a      	ldrb	r2, [r3, #1]
 800500e:	2a00      	cmp	r2, #0
 8005010:	d0cd      	beq.n	8004fae <mc_arc+0x1f6>
}
 8005012:	b007      	add	sp, #28
 8005014:	ecbd 8b0a 	vpop	{d8-d12}
 8005018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cos_Ti = cosf(i*theta_per_segment);
 800501c:	ee07 8a90 	vmov	s15, r8
 8005020:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
        count = 0;
 8005024:	f04f 0b00 	mov.w	fp, #0
        cos_Ti = cosf(i*theta_per_segment);
 8005028:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800502c:	eeb0 0a49 	vmov.f32	s0, s18
 8005030:	f004 fcb0 	bl	8009994 <cosf>
 8005034:	eef0 ca40 	vmov.f32	s25, s0
        sin_Ti = sinf(i*theta_per_segment);
 8005038:	eeb0 0a49 	vmov.f32	s0, s18
 800503c:	f004 fcea 	bl	8009a14 <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8005040:	ed97 8a00 	vldr	s16, [r7]
 8005044:	edda 7a00 	vldr	s15, [sl]
 8005048:	ee60 9a08 	vmul.f32	s19, s0, s16
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 800504c:	ee28 8a6c 	vnmul.f32	s16, s16, s25
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8005050:	eef1 7a67 	vneg.f32	s15, s15
 8005054:	eeec 9aa7 	vfma.f32	s19, s25, s15
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8005058:	eea0 8a27 	vfma.f32	s16, s0, s15
 800505c:	e7bf      	b.n	8004fde <mc_arc+0x226>
 800505e:	bf00      	nop
 8005060:	a0b5ed8d 	.word	0xa0b5ed8d
 8005064:	3ea0c6f7 	.word	0x3ea0c6f7
 8005068:	54442d18 	.word	0x54442d18
 800506c:	401921fb 	.word	0x401921fb
 8005070:	5c7dda4b 	.word	0x5c7dda4b
 8005074:	3fc55555 	.word	0x3fc55555
 8005078:	2000447c 	.word	0x2000447c
 800507c:	3fe00000 	.word	0x3fe00000
 8005080:	40100000 	.word	0x40100000
 8005084:	20003948 	.word	0x20003948
 8005088:	a0b5ed8d 	.word	0xa0b5ed8d
 800508c:	bea0c6f7 	.word	0xbea0c6f7

08005090 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
 8005090:	b508      	push	{r3, lr}
 8005092:	ed2d 8b02 	vpush	{d8}
  if (sys.state == STATE_CHECK_MODE) { return; }
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <mc_dwell+0x30>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b02      	cmp	r3, #2
{
 800509c:	eeb0 8a40 	vmov.f32	s16, s0
  if (sys.state == STATE_CHECK_MODE) { return; }
 80050a0:	d00a      	beq.n	80050b8 <mc_dwell+0x28>
  protocol_buffer_synchronize();
 80050a2:	f001 f9c3 	bl	800642c <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 80050a6:	eeb0 0a48 	vmov.f32	s0, s16
}
 80050aa:	ecbd 8b02 	vpop	{d8}
  delay_sec(seconds, DELAY_MODE_DWELL);
 80050ae:	2000      	movs	r0, #0
}
 80050b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 80050b4:	f000 b954 	b.w	8005360 <delay_sec>
}
 80050b8:	ecbd 8b02 	vpop	{d8}
 80050bc:	bd08      	pop	{r3, pc}
 80050be:	bf00      	nop
 80050c0:	20003948 	.word	0x20003948

080050c4 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 80050c4:	b510      	push	{r4, lr}
 80050c6:	4604      	mov	r4, r0
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 80050c8:	f7ff fc8c 	bl	80049e4 <limits_disable>

  // -------------------------------------------------------------------------------------
  // Perform homing routine. NOTE: Special motion case. Only system reset works.
  
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
 80050cc:	b1bc      	cbz	r4, 80050fe <mc_homing_cycle+0x3a>
 80050ce:	4620      	mov	r0, r4
  #endif
  {
    // Search to engage all axes limit switches at faster homing seek rate.
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
    #ifdef HOMING_CYCLE_1
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 80050d0:	f7ff fce6 	bl	8004aa0 <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 80050d4:	f001 f838 	bl	8006148 <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <mc_homing_cycle+0x48>)
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	b9a3      	cbnz	r3, 8005108 <mc_homing_cycle+0x44>

  // Homing cycle complete! Setup system for normal operation.
  // -------------------------------------------------------------------------------------

  // Sync gcode parser and planner positions to homed position.
  gc_sync_position();
 80050de:	f7fe fc51 	bl	8003984 <gc_sync_position>
  plan_sync_position();
 80050e2:	f000 fd1f 	bl	8005b24 <plan_sync_position>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <mc_homing_cycle+0x4c>)
 80050e8:	f44f 6280 	mov.w	r2, #1024	; 0x400

  // If hard limits feature enabled, re-enable hard limits pin change register after homing cycle.
#ifdef STM32
  LL_EXTI_ClearFlag_0_31(LIM_MASK);
  HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80050ec:	2028      	movs	r0, #40	; 0x28
 80050ee:	615a      	str	r2, [r3, #20]
 80050f0:	f7fc f814 	bl	800111c <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050f4:	2028      	movs	r0, #40	; 0x28

#elif ATMEGA328P
  limits_init();
#endif
}
 80050f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050fa:	f7fb bfeb 	b.w	80010d4 <HAL_NVIC_EnableIRQ>
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 80050fe:	2004      	movs	r0, #4
 8005100:	f7ff fcce 	bl	8004aa0 <limits_go_home>
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8005104:	2003      	movs	r0, #3
 8005106:	e7e3      	b.n	80050d0 <mc_homing_cycle+0xc>
 8005108:	bd10      	pop	{r4, pc}
 800510a:	bf00      	nop
 800510c:	20003948 	.word	0x20003948
 8005110:	40013c00 	.word	0x40013c00

08005114 <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8005114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8005118:	4c2e      	ldr	r4, [pc, #184]	; (80051d4 <mc_probe_cycle+0xc0>)
 800511a:	7823      	ldrb	r3, [r4, #0]
 800511c:	2b02      	cmp	r3, #2
{
 800511e:	4606      	mov	r6, r0
 8005120:	4689      	mov	r9, r1
 8005122:	4690      	mov	r8, r2
 8005124:	4627      	mov	r7, r4
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8005126:	d052      	beq.n	80051ce <mc_probe_cycle+0xba>

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8005128:	f001 f980 	bl	800642c <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 800512c:	7865      	ldrb	r5, [r4, #1]
 800512e:	b115      	cbz	r5, 8005136 <mc_probe_cycle+0x22>
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
    protocol_execute_realtime();
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8005130:	2002      	movs	r0, #2
 8005132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  probe_configure_invert_mask(is_probe_away);
 8005136:	f3c8 00c0 	ubfx	r0, r8, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 800513a:	7165      	strb	r5, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 800513c:	f000 fe02 	bl	8005d44 <probe_configure_invert_mask>
  if ( probe_get_state() ) { // Check probe pin state.
 8005140:	f000 fe18 	bl	8005d74 <probe_get_state>
 8005144:	b140      	cbz	r0, 8005158 <mc_probe_cycle+0x44>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8005146:	2004      	movs	r0, #4
 8005148:	f003 fa88 	bl	800865c <system_set_exec_alarm>
    protocol_execute_realtime();
 800514c:	f000 fffc 	bl	8006148 <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8005150:	4628      	mov	r0, r5
 8005152:	f000 fdf7 	bl	8005d44 <probe_configure_invert_mask>
 8005156:	e7eb      	b.n	8005130 <mc_probe_cycle+0x1c>
  }

  // Setup and queue probing motion. Auto cycle-start should not start the cycle.
  mc_line(target, pl_data);
 8005158:	4630      	mov	r0, r6
 800515a:	4649      	mov	r1, r9

  // Activate the probing state monitor in the stepper module.
  sys_probe_state = PROBE_ACTIVE;
 800515c:	4e1e      	ldr	r6, [pc, #120]	; (80051d8 <mc_probe_cycle+0xc4>)
  mc_line(target, pl_data);
 800515e:	f7ff fdf7 	bl	8004d50 <mc_line>
  sys_probe_state = PROBE_ACTIVE;
 8005162:	2301      	movs	r3, #1

  // Perform probing cycle. Wait here until probe is triggered or motion completes.
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8005164:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 8005166:	7033      	strb	r3, [r6, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8005168:	f003 f8d4 	bl	8008314 <system_set_exec_state_flag>
  do {
    protocol_execute_realtime();
 800516c:	f000 ffec 	bl	8006148 <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8005170:	787b      	ldrb	r3, [r7, #1]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1dc      	bne.n	8005130 <mc_probe_cycle+0x1c>
  } while (sys.state != STATE_IDLE);
 8005176:	783b      	ldrb	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1f7      	bne.n	800516c <mc_probe_cycle+0x58>

  // Probing cycle complete!

  // Set state variables and error out, if the probe failed and cycle with error is enabled.
  if (sys_probe_state == PROBE_ACTIVE) {
 800517c:	7833      	ldrb	r3, [r6, #0]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d122      	bne.n	80051c8 <mc_probe_cycle+0xb4>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8005182:	f018 0f10 	tst.w	r8, #16
 8005186:	d01b      	beq.n	80051c0 <mc_probe_cycle+0xac>
 8005188:	4d14      	ldr	r5, [pc, #80]	; (80051dc <mc_probe_cycle+0xc8>)
 800518a:	4c15      	ldr	r4, [pc, #84]	; (80051e0 <mc_probe_cycle+0xcc>)
 800518c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800518e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005190:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005194:	e884 0003 	stmia.w	r4, {r0, r1}
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
  } else {
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
  }
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8005198:	2000      	movs	r0, #0
 800519a:	7030      	strb	r0, [r6, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 800519c:	f000 fdd2 	bl	8005d44 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 80051a0:	f000 ffd2 	bl	8006148 <protocol_execute_realtime>

  // Reset the stepper and planner buffers to remove the remainder of the probe motion.
  st_reset(); // Reset step segment buffer.
 80051a4:	f002 fc36 	bl	8007a14 <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 80051a8:	f000 fa24 	bl	80055f4 <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 80051ac:	f000 fcba 	bl	8005b24 <plan_sync_position>

  #ifdef MESSAGE_PROBE_COORDINATES
    // All done! Output the probe position as message.
    report_probe_parameters();
 80051b0:	f001 fadc 	bl	800676c <report_probe_parameters>
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 80051b4:	7978      	ldrb	r0, [r7, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80051b6:	3000      	adds	r0, #0
 80051b8:	bf18      	it	ne
 80051ba:	2001      	movne	r0, #1
 80051bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 80051c0:	2005      	movs	r0, #5
 80051c2:	f003 fa4b 	bl	800865c <system_set_exec_alarm>
 80051c6:	e7e7      	b.n	8005198 <mc_probe_cycle+0x84>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 80051c8:	2301      	movs	r3, #1
 80051ca:	717b      	strb	r3, [r7, #5]
 80051cc:	e7e4      	b.n	8005198 <mc_probe_cycle+0x84>
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80051ce:	2000      	movs	r0, #0
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 80051d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051d4:	20003948 	.word	0x20003948
 80051d8:	2000395e 	.word	0x2000395e
 80051dc:	20003978 	.word	0x20003978
 80051e0:	20003960 	.word	0x20003960

080051e4 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 80051e4:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 80051e6:	4b11      	ldr	r3, [pc, #68]	; (800522c <mc_reset+0x48>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	06db      	lsls	r3, r3, #27
 80051ec:	d41d      	bmi.n	800522a <mc_reset+0x46>
    system_set_exec_state_flag(EXEC_RESET);
 80051ee:	2010      	movs	r0, #16
 80051f0:	f003 f890 	bl	8008314 <system_set_exec_state_flag>

    // Kill spindle and coolant.
    spindle_stop();
 80051f4:	f002 f8fc 	bl	80073f0 <spindle_stop>
    coolant_stop();
 80051f8:	f7fe facc 	bl	8003794 <coolant_stop>

    // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
    // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
    // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
    // violated, by which, all bets are off.
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 80051fc:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <mc_reset+0x4c>)
 80051fe:	7813      	ldrb	r3, [r2, #0]
 8005200:	f013 0f2c 	tst.w	r3, #44	; 0x2c
 8005204:	d103      	bne.n	800520e <mc_reset+0x2a>
 8005206:	7912      	ldrb	r2, [r2, #4]
 8005208:	f012 0f06 	tst.w	r2, #6
 800520c:	d00d      	beq.n	800522a <mc_reset+0x46>
    		(sys.step_control & (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION))) {
      if (sys.state == STATE_HOMING) { 
 800520e:	2b04      	cmp	r3, #4
 8005210:	d109      	bne.n	8005226 <mc_reset+0x42>
        if (!sys_rt_exec_alarm) {system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <mc_reset+0x50>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b913      	cbnz	r3, 800521e <mc_reset+0x3a>
 8005218:	2006      	movs	r0, #6
      } else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 800521a:	f003 fa1f 	bl	800865c <system_set_exec_alarm>
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 800521e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8005222:	f002 ba29 	b.w	8007678 <st_go_idle>
      } else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8005226:	2003      	movs	r0, #3
 8005228:	e7f7      	b.n	800521a <mc_reset+0x36>
 800522a:	bd08      	pop	{r3, pc}
 800522c:	2000395d 	.word	0x2000395d
 8005230:	20003948 	.word	0x20003948
 8005234:	20003990 	.word	0x20003990

08005238 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8005238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	4693      	mov	fp, r2
  char *ptr = line + *char_counter;
 800523e:	780a      	ldrb	r2, [r1, #0]
 8005240:	1883      	adds	r3, r0, r2
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 8005242:	5c82      	ldrb	r2, [r0, r2]

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 8005244:	2a2d      	cmp	r2, #45	; 0x2d
{
 8005246:	4606      	mov	r6, r0
 8005248:	468a      	mov	sl, r1
  if (c == '-') {
 800524a:	d118      	bne.n	800527e <read_float+0x46>
    isnegative = true;
    c = *ptr++;
 800524c:	785a      	ldrb	r2, [r3, #1]
 800524e:	1c9d      	adds	r5, r3, #2
    isnegative = true;
 8005250:	2701      	movs	r7, #1

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 8005252:	2100      	movs	r1, #0
  uint8_t ndigit = 0;
 8005254:	4608      	mov	r0, r1
  int8_t exp = 0;
 8005256:	460c      	mov	r4, r1
  uint32_t intval = 0;
 8005258:	460b      	mov	r3, r1
  while(1) {
    c -= '0';
 800525a:	3a30      	subs	r2, #48	; 0x30
 800525c:	b2d2      	uxtb	r2, r2
    if (c <= 9) {
 800525e:	2a09      	cmp	r2, #9
 8005260:	d819      	bhi.n	8005296 <read_float+0x5e>
      ndigit++;
 8005262:	3001      	adds	r0, #1
 8005264:	b2c0      	uxtb	r0, r0
      if (ndigit <= MAX_INT_DIGITS) {
 8005266:	2808      	cmp	r0, #8
 8005268:	d810      	bhi.n	800528c <read_float+0x54>
        if (isdecimal) { exp--; }
 800526a:	b109      	cbz	r1, 8005270 <read_float+0x38>
 800526c:	3c01      	subs	r4, #1
 800526e:	b264      	sxtb	r4, r4
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8005270:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005274:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 8005278:	f815 2b01 	ldrb.w	r2, [r5], #1
    c -= '0';
 800527c:	e7ed      	b.n	800525a <read_float+0x22>
  } else if (c == '+') {
 800527e:	2a2b      	cmp	r2, #43	; 0x2b
  c = *ptr++;
 8005280:	bf12      	itee	ne
 8005282:	1c5d      	addne	r5, r3, #1
    c = *ptr++;
 8005284:	1c9d      	addeq	r5, r3, #2
 8005286:	785a      	ldrbeq	r2, [r3, #1]
  bool isnegative = false;
 8005288:	2700      	movs	r7, #0
 800528a:	e7e2      	b.n	8005252 <read_float+0x1a>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 800528c:	2900      	cmp	r1, #0
 800528e:	d1f3      	bne.n	8005278 <read_float+0x40>
 8005290:	3401      	adds	r4, #1
 8005292:	b264      	sxtb	r4, r4
 8005294:	e7f0      	b.n	8005278 <read_float+0x40>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8005296:	2afe      	cmp	r2, #254	; 0xfe
 8005298:	d102      	bne.n	80052a0 <read_float+0x68>
 800529a:	b909      	cbnz	r1, 80052a0 <read_float+0x68>
      isdecimal = true;
 800529c:	2101      	movs	r1, #1
 800529e:	e7eb      	b.n	8005278 <read_float+0x40>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 80052a0:	b330      	cbz	r0, 80052f0 <read_float+0xb8>

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 7a67 	vcvt.f32.u32	s15, s15

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 80052aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b2:	d013      	beq.n	80052dc <read_float+0xa4>
    while (exp <= -2) {
      fval *= 0.01;
 80052b4:	f20f 0978 	addw	r9, pc, #120	; 0x78
 80052b8:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (exp <= -2) {
 80052bc:	1c63      	adds	r3, r4, #1
 80052be:	db19      	blt.n	80052f4 <read_float+0xbc>
      exp += 2;
    }
    if (exp < 0) {
 80052c0:	d127      	bne.n	8005312 <read_float+0xda>
      fval *= 0.1;
 80052c2:	ee17 0a90 	vmov	r0, s15
 80052c6:	f7fb f937 	bl	8000538 <__aeabi_f2d>
 80052ca:	a31b      	add	r3, pc, #108	; (adr r3, 8005338 <read_float+0x100>)
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f7fb f986 	bl	80005e0 <__aeabi_dmul>
 80052d4:	f7fb fc7c 	bl	8000bd0 <__aeabi_d2f>
 80052d8:	ee07 0a90 	vmov	s15, r0
      } while (--exp > 0);
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 80052dc:	b10f      	cbz	r7, 80052e2 <read_float+0xaa>
    *float_ptr = -fval;
 80052de:	eef1 7a67 	vneg.f32	s15, s15
  } else {
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement
 80052e2:	1bad      	subs	r5, r5, r6
 80052e4:	3d01      	subs	r5, #1
    *float_ptr = fval;
 80052e6:	edcb 7a00 	vstr	s15, [fp]

  return(true);
 80052ea:	2001      	movs	r0, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 80052ec:	f88a 5000 	strb.w	r5, [sl]
}
 80052f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      fval *= 0.01;
 80052f4:	ee17 0a90 	vmov	r0, s15
 80052f8:	f7fb f91e 	bl	8000538 <__aeabi_f2d>
 80052fc:	4642      	mov	r2, r8
 80052fe:	464b      	mov	r3, r9
 8005300:	f7fb f96e 	bl	80005e0 <__aeabi_dmul>
 8005304:	f7fb fc64 	bl	8000bd0 <__aeabi_d2f>
 8005308:	3402      	adds	r4, #2
 800530a:	ee07 0a90 	vmov	s15, r0
 800530e:	b264      	sxtb	r4, r4
 8005310:	e7d4      	b.n	80052bc <read_float+0x84>
    } else if (exp > 0) {
 8005312:	2c00      	cmp	r4, #0
 8005314:	d0e2      	beq.n	80052dc <read_float+0xa4>
        fval *= 10.0;
 8005316:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800531a:	3c01      	subs	r4, #1
 800531c:	b2e3      	uxtb	r3, r4
 800531e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005322:	b25c      	sxtb	r4, r3
      } while (--exp > 0);
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f8      	bne.n	800531a <read_float+0xe2>
 8005328:	e7d8      	b.n	80052dc <read_float+0xa4>
 800532a:	bf00      	nop
 800532c:	f3af 8000 	nop.w
 8005330:	47ae147b 	.word	0x47ae147b
 8005334:	3f847ae1 	.word	0x3f847ae1
 8005338:	9999999a 	.word	0x9999999a
 800533c:	3fb99999 	.word	0x3fb99999

08005340 <_delay_ms>:
  SysTick->CTRL = 0x00;                                            // Close the counter
  SysTick->VAL = 0X00;                                            // Empty the counter
*/
	//HAL_Delay(x);

	uint32_t mililoop = SystemCoreClock/1000;
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <_delay_ms+0x1c>)
 8005342:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	fbb3 f3f2 	udiv	r3, r3, r2
	for (uint32_t i=0; i< mililoop; i++)
 800534c:	2200      	movs	r2, #0
 800534e:	429a      	cmp	r2, r3
 8005350:	d100      	bne.n	8005354 <_delay_ms+0x14>
		__asm__ __volatile__("nop\n\t":::"memory");


}
 8005352:	4770      	bx	lr
		__asm__ __volatile__("nop\n\t":::"memory");
 8005354:	bf00      	nop
	for (uint32_t i=0; i< mililoop; i++)
 8005356:	3201      	adds	r2, #1
 8005358:	e7f9      	b.n	800534e <_delay_ms+0xe>
 800535a:	bf00      	nop
 800535c:	20000008 	.word	0x20000008

08005360 <delay_sec>:
#endif

// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 	uint16_t i = ceil(1000/DWELL_TIME_STEP*seconds);
 8005360:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8005364:	ee60 7a27 	vmul.f32	s15, s0, s15
{
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4606      	mov	r6, r0
 	uint16_t i = ceil(1000/DWELL_TIME_STEP*seconds);
 800536c:	ee17 0a90 	vmov	r0, s15
 8005370:	f7fb f8e2 	bl	8000538 <__aeabi_f2d>
 8005374:	ec41 0b10 	vmov	d0, r0, r1
 8005378:	f004 f902 	bl	8009580 <ceil>
 800537c:	ec51 0b10 	vmov	r0, r1, d0
 8005380:	f7fb fc06 	bl	8000b90 <__aeabi_d2uiz>
	while (i-- > 0) {
		if (sys.abort) { return; }
 8005384:	4d09      	ldr	r5, [pc, #36]	; (80053ac <delay_sec+0x4c>)
 	uint16_t i = ceil(1000/DWELL_TIME_STEP*seconds);
 8005386:	b284      	uxth	r4, r0
	while (i-- > 0) {
 8005388:	b17c      	cbz	r4, 80053aa <delay_sec+0x4a>
		if (sys.abort) { return; }
 800538a:	786b      	ldrb	r3, [r5, #1]
 800538c:	b96b      	cbnz	r3, 80053aa <delay_sec+0x4a>
		if (mode == DELAY_MODE_DWELL) {
 800538e:	b93e      	cbnz	r6, 80053a0 <delay_sec+0x40>
			protocol_execute_realtime();
 8005390:	f000 feda 	bl	8006148 <protocol_execute_realtime>
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
		}
//		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
		HAL_Delay(DWELL_TIME_STEP);
 8005394:	2032      	movs	r0, #50	; 0x32
 8005396:	3c01      	subs	r4, #1
 8005398:	f7fb fe42 	bl	8001020 <HAL_Delay>
 800539c:	b2a4      	uxth	r4, r4
 800539e:	e7f3      	b.n	8005388 <delay_sec+0x28>
		  protocol_exec_rt_system();
 80053a0:	f000 fd1e 	bl	8005de0 <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 80053a4:	78ab      	ldrb	r3, [r5, #2]
 80053a6:	079b      	lsls	r3, r3, #30
 80053a8:	d5f4      	bpl.n	8005394 <delay_sec+0x34>
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
 80053ac:	20003948 	.word	0x20003948

080053b0 <delay_ms>:


// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
 80053b0:	b508      	push	{r3, lr}
 80053b2:	4601      	mov	r1, r0
  while ( ms-- ) { _delay_ms(1); }
 80053b4:	b901      	cbnz	r1, 80053b8 <delay_ms+0x8>
}
 80053b6:	bd08      	pop	{r3, pc}
  while ( ms-- ) { _delay_ms(1); }
 80053b8:	2001      	movs	r0, #1
 80053ba:	f7ff ffc1 	bl	8005340 <_delay_ms>
 80053be:	3901      	subs	r1, #1
 80053c0:	b289      	uxth	r1, r1
 80053c2:	e7f7      	b.n	80053b4 <delay_ms+0x4>

080053c4 <hypot_f>:
  }
}


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 80053c4:	ee60 0aa0 	vmul.f32	s1, s1, s1
 80053c8:	eee0 0a00 	vfma.f32	s1, s0, s0
 80053cc:	eeb0 0a60 	vmov.f32	s0, s1
 80053d0:	f004 bbbe 	b.w	8009b50 <sqrtf>

080053d4 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
  uint8_t idx;
  float magnitude = 0.0;
 80053d4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005418 <convert_delta_vector_to_unit_vector+0x44>
{
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4604      	mov	r4, r0
 80053dc:	f100 0318 	add.w	r3, r0, #24
 80053e0:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0) {
 80053e2:	ecf5 7a01 	vldmia	r5!, {s15}
 80053e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80053ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      magnitude += vector[idx]*vector[idx];
 80053ee:	bf18      	it	ne
 80053f0:	eea7 0aa7 	vfmane.f32	s0, s15, s15
  for (idx=0; idx<N_AXIS; idx++) {
 80053f4:	429d      	cmp	r5, r3
 80053f6:	d1f4      	bne.n	80053e2 <convert_delta_vector_to_unit_vector+0xe>
    }
  }
  magnitude = sqrtf(magnitude);
 80053f8:	f004 fbaa 	bl	8009b50 <sqrtf>
  float inv_magnitude = 1.0/magnitude;
 80053fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005400:	ee87 7a80 	vdiv.f32	s14, s15, s0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8005404:	edd4 7a00 	vldr	s15, [r4]
 8005408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800540c:	ece4 7a01 	vstmia	r4!, {s15}
 8005410:	42ac      	cmp	r4, r5
 8005412:	d1f7      	bne.n	8005404 <convert_delta_vector_to_unit_vector+0x30>
  return(magnitude);
}
 8005414:	bd38      	pop	{r3, r4, r5, pc}
 8005416:	bf00      	nop
 8005418:	00000000 	.word	0x00000000

0800541c <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
 800541c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005458 <limit_value_by_axis_maximum+0x3c>
 8005420:	f101 0318 	add.w	r3, r1, #24
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8005424:	ecb1 7a01 	vldmia	r1!, {s14}
 8005428:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005430:	d00c      	beq.n	800544c <limit_value_by_axis_maximum+0x30>
      limit_value = min(limit_value,fabs(max_value[idx]/unit_vec[idx]));
 8005432:	edd0 6a00 	vldr	s13, [r0]
 8005436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800543a:	eef0 7ae7 	vabs.f32	s15, s15
 800543e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8005442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005446:	bfd8      	it	le
 8005448:	eeb0 0a67 	vmovle.f32	s0, s15
  for (idx=0; idx<N_AXIS; idx++) {
 800544c:	4299      	cmp	r1, r3
 800544e:	f100 0004 	add.w	r0, r0, #4
 8005452:	d1e7      	bne.n	8005424 <limit_value_by_axis_maximum+0x8>
    }
  }
  return(limit_value);
}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	7f7fffff 	.word	0x7f7fffff

0800545c <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 800545c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8005460:	4e56      	ldr	r6, [pc, #344]	; (80055bc <planner_recalculate+0x160>)

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 8005462:	4a57      	ldr	r2, [pc, #348]	; (80055c0 <planner_recalculate+0x164>)
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8005464:	7833      	ldrb	r3, [r6, #0]
  if (block_index == block_buffer_planned) { return; }
 8005466:	7811      	ldrb	r1, [r2, #0]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf08      	it	eq
 800546c:	23c8      	moveq	r3, #200	; 0xc8
  block_index--;
 800546e:	3b01      	subs	r3, #1
 8005470:	b2db      	uxtb	r3, r3
  if (block_index == block_buffer_planned) { return; }
 8005472:	4299      	cmp	r1, r3
 8005474:	4691      	mov	r9, r2
 8005476:	d06b      	beq.n	8005550 <planner_recalculate+0xf4>
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->pbacceleration*current->millimeters);
 8005478:	4f52      	ldr	r7, [pc, #328]	; (80055c4 <planner_recalculate+0x168>)
 800547a:	eb07 1283 	add.w	r2, r7, r3, lsl #6
 800547e:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8005482:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
 8005486:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 800548a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800548e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549a:	bf58      	it	pl
 800549c:	eeb0 7a67 	vmovpl.f32	s14, s15
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf14      	ite	ne
 80054a4:	461c      	movne	r4, r3
 80054a6:	24c8      	moveq	r4, #200	; 0xc8
  block_index--;
 80054a8:	3c01      	subs	r4, #1
 80054aa:	b2e4      	uxtb	r4, r4

  block_index = plan_prev_block_index(block_index);
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 80054ac:	42a1      	cmp	r1, r4
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->pbacceleration*current->millimeters);
 80054ae:	ed82 7a08 	vstr	s14, [r2, #32]
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 80054b2:	d036      	beq.n	8005522 <planner_recalculate+0xc6>
      next = current;
      current = &block_buffer[block_index];
      block_index = plan_prev_block_index(block_index);

      // Check if next block is the tail block(=planned block). If so, update current stepper parameters.
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80054b4:	f8df b110 	ldr.w	fp, [pc, #272]	; 80055c8 <planner_recalculate+0x16c>
  plan_block_t *current = &block_buffer[block_index];
 80054b8:	4615      	mov	r5, r2
    while (block_index != block_buffer_planned) {
 80054ba:	f899 3000 	ldrb.w	r3, [r9]
 80054be:	42a3      	cmp	r3, r4
 80054c0:	d035      	beq.n	800552e <planner_recalculate+0xd2>
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80054c2:	2c00      	cmp	r4, #0
      current = &block_buffer[block_index];
 80054c4:	fa0f fa84 	sxth.w	sl, r4
 80054c8:	46a0      	mov	r8, r4
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80054ca:	bf08      	it	eq
 80054cc:	24c8      	moveq	r4, #200	; 0xc8
  block_index--;
 80054ce:	3c01      	subs	r4, #1
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80054d0:	f89b 3000 	ldrb.w	r3, [fp]
  block_index--;
 80054d4:	b2e4      	uxtb	r4, r4
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80054d6:	42a3      	cmp	r3, r4
      current = &block_buffer[block_index];
 80054d8:	eb07 1a8a 	add.w	sl, r7, sl, lsl #6
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80054dc:	d101      	bne.n	80054e2 <planner_recalculate+0x86>
 80054de:	f002 fb0b 	bl	8007af8 <st_update_plan_block_parameters>

      // Compute maximum entry speed decelerating over the current block from its exit speed.
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 80054e2:	eb07 1388 	add.w	r3, r7, r8, lsl #6
 80054e6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80054ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80054ee:	eef4 7a66 	vcmp.f32	s15, s13
 80054f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f6:	d012      	beq.n	800551e <planner_recalculate+0xc2>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->pbacceleration*current->millimeters;
 80054f8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80054fc:	edd5 7a08 	vldr	s15, [r5, #32]
 8005500:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8005504:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005508:	eee7 7a06 	vfma.f32	s15, s14, s12
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
          current->entry_speed_sqr = entry_speed_sqr;
        } else {
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 800550c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005514:	bfd8      	it	le
 8005516:	eef0 7a66 	vmovle.f32	s15, s13
 800551a:	edc3 7a08 	vstr	s15, [r3, #32]
  block_index--;
 800551e:	4655      	mov	r5, sl
 8005520:	e7cb      	b.n	80054ba <planner_recalculate+0x5e>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8005522:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <planner_recalculate+0x16c>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	428b      	cmp	r3, r1
 8005528:	d101      	bne.n	800552e <planner_recalculate+0xd2>
 800552a:	f002 fae5 	bl	8007af8 <st_update_plan_block_parameters>
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 800552e:	f899 5000 	ldrb.w	r5, [r9]
  block_index = plan_next_block_index(block_buffer_planned);
  while (block_index != block_buffer_head) {
 8005532:	f896 e000 	ldrb.w	lr, [r6]
  block_index++;
 8005536:	1c6b      	adds	r3, r5, #1
 8005538:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800553a:	2bc8      	cmp	r3, #200	; 0xc8
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 800553c:	eb07 1085 	add.w	r0, r7, r5, lsl #6
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8005540:	bf08      	it	eq
 8005542:	2300      	moveq	r3, #0
  while (block_index != block_buffer_head) {
 8005544:	2100      	movs	r1, #0
 8005546:	4573      	cmp	r3, lr
 8005548:	d104      	bne.n	8005554 <planner_recalculate+0xf8>
 800554a:	b109      	cbz	r1, 8005550 <planner_recalculate+0xf4>
 800554c:	f889 5000 	strb.w	r5, [r9]
 8005550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = &block_buffer[block_index];

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8005554:	019a      	lsls	r2, r3, #6
 8005556:	18be      	adds	r6, r7, r2
 8005558:	edd0 7a08 	vldr	s15, [r0, #32]
 800555c:	edd6 6a08 	vldr	s13, [r6, #32]
 8005560:	eef4 7ae6 	vcmpe.f32	s15, s13
    next = &block_buffer[block_index];
 8005564:	b21c      	sxth	r4, r3
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8005566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    next = &block_buffer[block_index];
 800556a:	eb07 1484 	add.w	r4, r7, r4, lsl #6
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 800556e:	d510      	bpl.n	8005592 <planner_recalculate+0x136>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->pbacceleration*current->millimeters;
 8005570:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8005574:	ed90 6a0b 	vldr	s12, [r0, #44]	; 0x2c
 8005578:	ee37 7a07 	vadd.f32	s14, s14, s14
 800557c:	eee7 7a06 	vfma.f32	s15, s14, s12
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8005580:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 8005588:	bfc2      	ittt	gt
 800558a:	edc6 7a08 	vstrgt	s15, [r6, #32]
 800558e:	461d      	movgt	r5, r3
 8005590:	2101      	movgt	r1, #1

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 8005592:	443a      	add	r2, r7
 8005594:	ed92 7a08 	vldr	s14, [r2, #32]
 8005598:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800559c:	eeb4 7a67 	vcmp.f32	s14, s15
 80055a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a4:	bf08      	it	eq
 80055a6:	461d      	moveq	r5, r3
  block_index++;
 80055a8:	f103 0301 	add.w	r3, r3, #1
 80055ac:	b2db      	uxtb	r3, r3
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 80055ae:	bf08      	it	eq
 80055b0:	2101      	moveq	r1, #1
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80055b2:	2bc8      	cmp	r3, #200	; 0xc8
 80055b4:	bf08      	it	eq
 80055b6:	2300      	moveq	r3, #0
  while (block_index != block_buffer_head) {
 80055b8:	4620      	mov	r0, r4
 80055ba:	e7c4      	b.n	8005546 <planner_recalculate+0xea>
 80055bc:	200032b4 	.word	0x200032b4
 80055c0:	200032b5 	.word	0x200032b5
 80055c4:	200000b4 	.word	0x200000b4
 80055c8:	200032b6 	.word	0x200032b6

080055cc <plan_reset_buffer>:
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 80055cc:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <plan_reset_buffer+0x18>)
 80055ce:	2300      	movs	r3, #0
 80055d0:	7013      	strb	r3, [r2, #0]
  block_buffer_head = 0; // Empty = tail
 80055d2:	4a05      	ldr	r2, [pc, #20]	; (80055e8 <plan_reset_buffer+0x1c>)
 80055d4:	7013      	strb	r3, [r2, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80055d6:	4a05      	ldr	r2, [pc, #20]	; (80055ec <plan_reset_buffer+0x20>)
 80055d8:	2101      	movs	r1, #1
 80055da:	7011      	strb	r1, [r2, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 80055dc:	4a04      	ldr	r2, [pc, #16]	; (80055f0 <plan_reset_buffer+0x24>)
 80055de:	7013      	strb	r3, [r2, #0]
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	200032b6 	.word	0x200032b6
 80055e8:	200032b4 	.word	0x200032b4
 80055ec:	200032b7 	.word	0x200032b7
 80055f0:	200032b5 	.word	0x200032b5

080055f4 <plan_reset>:
{
 80055f4:	b508      	push	{r3, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80055f6:	2234      	movs	r2, #52	; 0x34
 80055f8:	2100      	movs	r1, #0
 80055fa:	4803      	ldr	r0, [pc, #12]	; (8005608 <plan_reset+0x14>)
 80055fc:	f003 fb99 	bl	8008d32 <memset>
}
 8005600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  plan_reset_buffer();
 8005604:	f7ff bfe2 	b.w	80055cc <plan_reset_buffer>
 8005608:	200032b8 	.word	0x200032b8

0800560c <plan_discard_current_block>:
}


void plan_discard_current_block()
{
 800560c:	b510      	push	{r4, lr}
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <plan_discard_current_block+0x28>)
 8005610:	4a09      	ldr	r2, [pc, #36]	; (8005638 <plan_discard_current_block+0x2c>)
 8005612:	7819      	ldrb	r1, [r3, #0]
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	428a      	cmp	r2, r1
 8005618:	461a      	mov	r2, r3
 800561a:	d00a      	beq.n	8005632 <plan_discard_current_block+0x26>
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 800561c:	4807      	ldr	r0, [pc, #28]	; (800563c <plan_discard_current_block+0x30>)
  block_index++;
 800561e:	1c4b      	adds	r3, r1, #1
 8005620:	b2db      	uxtb	r3, r3
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8005622:	7804      	ldrb	r4, [r0, #0]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8005624:	2bc8      	cmp	r3, #200	; 0xc8
 8005626:	bf08      	it	eq
 8005628:	2300      	moveq	r3, #0
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 800562a:	428c      	cmp	r4, r1
 800562c:	bf08      	it	eq
 800562e:	7003      	strbeq	r3, [r0, #0]
    block_buffer_tail = block_index;
 8005630:	7013      	strb	r3, [r2, #0]
 8005632:	bd10      	pop	{r4, pc}
 8005634:	200032b6 	.word	0x200032b6
 8005638:	200032b4 	.word	0x200032b4
 800563c:	200032b5 	.word	0x200032b5

08005640 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 8005640:	4b02      	ldr	r3, [pc, #8]	; (800564c <plan_get_system_motion_block+0xc>)
 8005642:	7818      	ldrb	r0, [r3, #0]
}
 8005644:	4b02      	ldr	r3, [pc, #8]	; (8005650 <plan_get_system_motion_block+0x10>)
 8005646:	eb03 1080 	add.w	r0, r3, r0, lsl #6
 800564a:	4770      	bx	lr
 800564c:	200032b4 	.word	0x200032b4
 8005650:	200000b4 	.word	0x200000b4

08005654 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <plan_get_current_block+0x18>)
 8005656:	4a06      	ldr	r2, [pc, #24]	; (8005670 <plan_get_current_block+0x1c>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	7812      	ldrb	r2, [r2, #0]
 800565c:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 800565e:	bf1a      	itte	ne
 8005660:	4804      	ldrne	r0, [pc, #16]	; (8005674 <plan_get_current_block+0x20>)
 8005662:	eb00 1083 	addne.w	r0, r0, r3, lsl #6
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8005666:	2000      	moveq	r0, #0
}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	200032b6 	.word	0x200032b6
 8005670:	200032b4 	.word	0x200032b4
 8005674:	200000b4 	.word	0x200000b4

08005678 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 8005678:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800567a:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 800567c:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800567e:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 8005680:	3301      	adds	r3, #1
 8005682:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8005684:	2bc8      	cmp	r3, #200	; 0xc8
 8005686:	bf08      	it	eq
 8005688:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800568a:	429a      	cmp	r2, r3
  return( block_buffer[block_index].entry_speed_sqr );
 800568c:	bf1d      	ittte	ne
 800568e:	4a06      	ldrne	r2, [pc, #24]	; (80056a8 <plan_get_exec_block_exit_speed_sqr+0x30>)
 8005690:	eb02 1383 	addne.w	r3, r2, r3, lsl #6
 8005694:	ed93 0a08 	vldrne	s0, [r3, #32]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8005698:	ed9f 0a04 	vldreq	s0, [pc, #16]	; 80056ac <plan_get_exec_block_exit_speed_sqr+0x34>
}
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	200032b6 	.word	0x200032b6
 80056a4:	200032b4 	.word	0x200032b4
 80056a8:	200000b4 	.word	0x200000b4
 80056ac:	00000000 	.word	0x00000000

080056b0 <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 80056b0:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <plan_check_full_buffer+0x10>)
 80056b2:	7818      	ldrb	r0, [r3, #0]
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <plan_check_full_buffer+0x14>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 80056b8:	1ac3      	subs	r3, r0, r3
 80056ba:	4258      	negs	r0, r3
 80056bc:	4158      	adcs	r0, r3
 80056be:	4770      	bx	lr
 80056c0:	200032b6 	.word	0x200032b6
 80056c4:	200032b7 	.word	0x200032b7

080056c8 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	ed2d 8b02 	vpush	{d8}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01*sys.r_override); }
 80056ce:	7f43      	ldrb	r3, [r0, #29]
  float nominal_speed = block->programmed_rate;
 80056d0:	ed90 8a0e 	vldr	s16, [r0, #56]	; 0x38
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01*sys.r_override); }
 80056d4:	07da      	lsls	r2, r3, #31
{
 80056d6:	4604      	mov	r4, r0
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01*sys.r_override); }
 80056d8:	d524      	bpl.n	8005724 <plan_compute_profile_nominal_speed+0x5c>
 80056da:	4b27      	ldr	r3, [pc, #156]	; (8005778 <plan_compute_profile_nominal_speed+0xb0>)
 80056dc:	7a58      	ldrb	r0, [r3, #9]
 80056de:	f7fa ff19 	bl	8000514 <__aeabi_i2d>
 80056e2:	a323      	add	r3, pc, #140	; (adr r3, 8005770 <plan_compute_profile_nominal_speed+0xa8>)
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	f7fa ff7a 	bl	80005e0 <__aeabi_dmul>
 80056ec:	4604      	mov	r4, r0
 80056ee:	ee18 0a10 	vmov	r0, s16
 80056f2:	460d      	mov	r5, r1
 80056f4:	f7fa ff20 	bl	8000538 <__aeabi_f2d>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4620      	mov	r0, r4
 80056fe:	4629      	mov	r1, r5
 8005700:	f7fa ff6e 	bl	80005e0 <__aeabi_dmul>
 8005704:	f7fb fa64 	bl	8000bd0 <__aeabi_d2f>
 8005708:	ee08 0a10 	vmov	s16, r0
  else {
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 800570c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  return(MINIMUM_FEED_RATE);
 8005710:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8005714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8005718:	bfc8      	it	gt
 800571a:	eeb0 0a48 	vmovgt.f32	s0, s16
 800571e:	ecbd 8b02 	vpop	{d8}
 8005722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01*sys.f_override); }
 8005724:	075b      	lsls	r3, r3, #29
 8005726:	d418      	bmi.n	800575a <plan_compute_profile_nominal_speed+0x92>
 8005728:	4b13      	ldr	r3, [pc, #76]	; (8005778 <plan_compute_profile_nominal_speed+0xb0>)
 800572a:	7a18      	ldrb	r0, [r3, #8]
 800572c:	f7fa fef2 	bl	8000514 <__aeabi_i2d>
 8005730:	a30f      	add	r3, pc, #60	; (adr r3, 8005770 <plan_compute_profile_nominal_speed+0xa8>)
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f7fa ff53 	bl	80005e0 <__aeabi_dmul>
 800573a:	4606      	mov	r6, r0
 800573c:	ee18 0a10 	vmov	r0, s16
 8005740:	460f      	mov	r7, r1
 8005742:	f7fa fef9 	bl	8000538 <__aeabi_f2d>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4630      	mov	r0, r6
 800574c:	4639      	mov	r1, r7
 800574e:	f7fa ff47 	bl	80005e0 <__aeabi_dmul>
 8005752:	f7fb fa3d 	bl	8000bd0 <__aeabi_d2f>
 8005756:	ee08 0a10 	vmov	s16, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 800575a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800575e:	eeb4 8a67 	vcmp.f32	s16, s15
 8005762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005766:	bfc8      	it	gt
 8005768:	eeb0 8a67 	vmovgt.f32	s16, s15
 800576c:	e7ce      	b.n	800570c <plan_compute_profile_nominal_speed+0x44>
 800576e:	bf00      	nop
 8005770:	47ae147b 	.word	0x47ae147b
 8005774:	3f847ae1 	.word	0x3f847ae1
 8005778:	20003948 	.word	0x20003948

0800577c <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	ed2d 8b02 	vpush	{d8}
  uint8_t block_index = block_buffer_tail;
 8005782:	4b1c      	ldr	r3, [pc, #112]	; (80057f4 <plan_update_velocity_profile_parameters+0x78>)
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8005784:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 80057f8 <plan_update_velocity_profile_parameters+0x7c>
  uint8_t block_index = block_buffer_tail;
 8005788:	781c      	ldrb	r4, [r3, #0]
  while (block_index != block_buffer_head) {
 800578a:	4b1c      	ldr	r3, [pc, #112]	; (80057fc <plan_update_velocity_profile_parameters+0x80>)
    block = &block_buffer[block_index];
 800578c:	4d1c      	ldr	r5, [pc, #112]	; (8005800 <plan_update_velocity_profile_parameters+0x84>)
  while (block_index != block_buffer_head) {
 800578e:	781e      	ldrb	r6, [r3, #0]
 8005790:	42b4      	cmp	r4, r6
 8005792:	d105      	bne.n	80057a0 <plan_update_velocity_profile_parameters+0x24>
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 8005794:	4b1b      	ldr	r3, [pc, #108]	; (8005804 <plan_update_velocity_profile_parameters+0x88>)
 8005796:	ed83 8a0c 	vstr	s16, [r3, #48]	; 0x30
}
 800579a:	ecbd 8b02 	vpop	{d8}
 800579e:	bd70      	pop	{r4, r5, r6, pc}
    nominal_speed = plan_compute_profile_nominal_speed(block);
 80057a0:	eb05 1084 	add.w	r0, r5, r4, lsl #6
 80057a4:	f7ff ff90 	bl	80056c8 <plan_compute_profile_nominal_speed>
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80057a8:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80057ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b0:	ea4f 1384 	mov.w	r3, r4, lsl #6
 80057b4:	bf4c      	ite	mi
 80057b6:	ee28 8a08 	vmulmi.f32	s16, s16, s16
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 80057ba:	ee60 7a00 	vmulpl.f32	s15, s0, s0
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80057be:	eb05 0203 	add.w	r2, r5, r3
 80057c2:	bf4c      	ite	mi
 80057c4:	ed82 8a09 	vstrmi	s16, [r2, #36]	; 0x24
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 80057c8:	edc2 7a09 	vstrpl	s15, [r2, #36]	; 0x24
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80057cc:	442b      	add	r3, r5
 80057ce:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80057d2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
  block_index++;
 80057d6:	3401      	adds	r4, #1
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80057d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  block_index++;
 80057e0:	b2e4      	uxtb	r4, r4
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80057e2:	bfc8      	it	gt
 80057e4:	edc3 7a09 	vstrgt	s15, [r3, #36]	; 0x24
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80057e8:	2cc8      	cmp	r4, #200	; 0xc8
 80057ea:	bf08      	it	eq
 80057ec:	2400      	moveq	r4, #0
 80057ee:	eeb0 8a40 	vmov.f32	s16, s0
 80057f2:	e7cd      	b.n	8005790 <plan_update_velocity_profile_parameters+0x14>
 80057f4:	200032b6 	.word	0x200032b6
 80057f8:	7f7fffff 	.word	0x7f7fffff
 80057fc:	200032b4 	.word	0x200032b4
 8005800:	200000b4 	.word	0x200000b4
 8005804:	200032b8 	.word	0x200032b8

08005808 <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 8005808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 800580c:	4eb6      	ldr	r6, [pc, #728]	; (8005ae8 <plan_buffer_line+0x2e0>)
 800580e:	4cb7      	ldr	r4, [pc, #732]	; (8005aec <plan_buffer_line+0x2e4>)
 8005810:	7835      	ldrb	r5, [r6, #0]
{
 8005812:	ed2d 8b02 	vpush	{d8}
  plan_block_t *block = &block_buffer[block_buffer_head];
 8005816:	eb04 1785 	add.w	r7, r4, r5, lsl #6
{
 800581a:	468b      	mov	fp, r1
 800581c:	b09d      	sub	sp, #116	; 0x74
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 800581e:	2240      	movs	r2, #64	; 0x40
 8005820:	2100      	movs	r1, #0
{
 8005822:	4681      	mov	r9, r0
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 8005824:	4638      	mov	r0, r7
 8005826:	f003 fa84 	bl	8008d32 <memset>
  block->condition = pl_data->condition;
 800582a:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800582e:	777b      	strb	r3, [r7, #29]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) { 
 8005830:	079b      	lsls	r3, r3, #30
    block->spindle_speed = pl_data->spindle_speed;
 8005832:	f8db 2004 	ldr.w	r2, [fp, #4]
    #ifdef COREXY
      position_steps[X_AXIS] = system_convert_corexy_to_x_axis_steps(sys_position);
      position_steps[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      position_steps[Z_AXIS] = sys_position[Z_AXIS];
    #else
      memcpy(position_steps, sys_position, sizeof(sys_position)); 
 8005836:	bf4c      	ite	mi
 8005838:	f8df e2e4 	ldrmi.w	lr, [pc, #740]	; 8005b20 <plan_buffer_line+0x318>
    #endif
  } else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 800583c:	f8df e2c8 	ldrpl.w	lr, [pc, #712]	; 8005b08 <plan_buffer_line+0x300>
    block->spindle_speed = pl_data->spindle_speed;
 8005840:	63fa      	str	r2, [r7, #60]	; 0x3c
  } else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8005842:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
      memcpy(position_steps, sys_position, sizeof(sys_position)); 
 8005846:	ac0a      	add	r4, sp, #40	; 0x28
  } else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8005848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800584a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800584e:	e884 0003 	stmia.w	r4, {r0, r1}
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lround(target[idx]*settings.steps_per_mm[idx]);
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8005852:	4ca6      	ldr	r4, [pc, #664]	; (8005aec <plan_buffer_line+0x2e4>)
 8005854:	4aa6      	ldr	r2, [pc, #664]	; (8005af0 <plan_buffer_line+0x2e8>)
 8005856:	01ad      	lsls	r5, r5, #6
{
 8005858:	f04f 0800 	mov.w	r8, #0
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800585c:	eb04 0a05 	add.w	sl, r4, r5
      target_steps[idx] = lround(target[idx]*settings.steps_per_mm[idx]);
 8005860:	ecb9 7a01 	vldmia	r9!, {s14}
 8005864:	9201      	str	r2, [sp, #4]
 8005866:	ecf2 7a01 	vldmia	r2!, {s15}
 800586a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586e:	9202      	str	r2, [sp, #8]
 8005870:	ee17 0a90 	vmov	r0, s15
 8005874:	9203      	str	r2, [sp, #12]
 8005876:	f7fa fe5f 	bl	8000538 <__aeabi_f2d>
 800587a:	ec41 0b10 	vmov	d0, r0, r1
 800587e:	f003 ff87 	bl	8009790 <lround>
 8005882:	ab04      	add	r3, sp, #16
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8005884:	9a01      	ldr	r2, [sp, #4]
      target_steps[idx] = lround(target[idx]*settings.steps_per_mm[idx]);
 8005886:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
 800588a:	ab0a      	add	r3, sp, #40	; 0x28
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 800588c:	edd2 6a00 	vldr	s13, [r2]
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
 8005890:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8005894:	1a41      	subs	r1, r0, r1
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8005896:	ee07 1a90 	vmov	s15, r1
 800589a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
 800589e:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80058a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
 80058a6:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 80058aa:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80058ae:	f8da 3018 	ldr.w	r3, [sl, #24]
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80058b2:	aa10      	add	r2, sp, #64	; 0x40
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80058b4:	4283      	cmp	r3, r0
 80058b6:	bf38      	it	cc
 80058b8:	4603      	movcc	r3, r0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80058ba:	eb02 0188 	add.w	r1, r2, r8, lsl #2
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80058be:	f8ca 3018 	str.w	r3, [sl, #24]

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0 )
 80058c2:	9a02      	ldr	r2, [sp, #8]
 80058c4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80058c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80058cc:	ed81 7a00 	vstr	s14, [r1]
    if (delta_mm < 0.0 )
 80058d0:	d507      	bpl.n	80058e2 <plan_buffer_line+0xda>
    {
      #ifdef STM32
        block->direction_bits |= direction_pin_mask[idx];
 80058d2:	4988      	ldr	r1, [pc, #544]	; (8005af4 <plan_buffer_line+0x2ec>)
 80058d4:	f811 0018 	ldrb.w	r0, [r1, r8, lsl #1]
 80058d8:	f89a 101c 	ldrb.w	r1, [sl, #28]
 80058dc:	4301      	orrs	r1, r0
 80058de:	f88a 101c 	strb.w	r1, [sl, #28]
 80058e2:	f108 0801 	add.w	r8, r8, #1
  for (idx=0; idx<N_AXIS; idx++) {
 80058e6:	f1b8 0f06 	cmp.w	r8, #6
 80058ea:	d1b9      	bne.n	8005860 <plan_buffer_line+0x58>
      #endif
    }
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80ec 	beq.w	8005aca <plan_buffer_line+0x2c2>

  // Calculate the unit vector of the line move and the block maximum feed rate and acceleration scaled
  // down such that no individual axes maximum values are exceeded with respect to the line direction.
  // NOTE: This calculation assumes all axes are orthogonal (Cartesian) and works with ABC-axes,
  // if they are also orthogonal/independent. Operates on the absolute value of the unit vector.
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 80058f2:	a810      	add	r0, sp, #64	; 0x40
 80058f4:	f7ff fd6e 	bl	80053d4 <convert_delta_vector_to_unit_vector>
 80058f8:	eb04 0805 	add.w	r8, r4, r5
#ifdef ENABLE_ACCEL_SCALING
  block->pbacceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, unit_vec);
 80058fc:	a910      	add	r1, sp, #64	; 0x40
 80058fe:	487e      	ldr	r0, [pc, #504]	; (8005af8 <plan_buffer_line+0x2f0>)
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 8005900:	ed88 0a0b 	vstr	s0, [r8, #44]	; 0x2c
  block->pbacceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, unit_vec);
 8005904:	f7ff fd8a 	bl	800541c <limit_value_by_axis_maximum>
#else
  block->pbacceleration = limit_value_by_axis_maximum(settings.eeacceleration, unit_vec);
#endif
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8005908:	487c      	ldr	r0, [pc, #496]	; (8005afc <plan_buffer_line+0x2f4>)
  block->pbacceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, unit_vec);
 800590a:	ed88 0a0a 	vstr	s0, [r8, #40]	; 0x28
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 800590e:	a910      	add	r1, sp, #64	; 0x40
 8005910:	f7ff fd84 	bl	800541c <limit_value_by_axis_maximum>

  // Store programmed rate.
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8005914:	f898 301d 	ldrb.w	r3, [r8, #29]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8005918:	ed88 0a0d 	vstr	s0, [r8, #52]	; 0x34
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 800591c:	07d8      	lsls	r0, r3, #31
 800591e:	d551      	bpl.n	80059c4 <plan_buffer_line+0x1bc>
 8005920:	ed88 0a0e 	vstr	s0, [r8, #56]	; 0x38
    block->programmed_rate = pl_data->feed_rate;
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
  }

  // TODO: Need to check this method handling zero junction speeds when starting from rest.
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8005924:	4a76      	ldr	r2, [pc, #472]	; (8005b00 <plan_buffer_line+0x2f8>)
 8005926:	7831      	ldrb	r1, [r6, #0]
 8005928:	7812      	ldrb	r2, [r2, #0]
 800592a:	ed9f 8a76 	vldr	s16, [pc, #472]	; 8005b04 <plan_buffer_line+0x2fc>
 800592e:	4291      	cmp	r1, r2
 8005930:	d001      	beq.n	8005936 <plan_buffer_line+0x12e>
 8005932:	079a      	lsls	r2, r3, #30
 8005934:	d554      	bpl.n	80059e0 <plan_buffer_line+0x1d8>

    // Initialize block entry speed as zero. Assume it will be starting from rest. Planner will correct this later.
    // If system motion, the system motion block always is assumed to start from rest and end at a complete stop.
    block->entry_speed_sqr = 0.0;
 8005936:	1963      	adds	r3, r4, r5
 8005938:	ed83 8a08 	vstr	s16, [r3, #32]
    }

    // NOTE: Computed without any expensive trig, sin() or acos(), by trig half angle identity of cos(theta).
    if (junction_cos_theta > 0.999999) {
      //  For a 0 degree acute junction, just set minimum junction speed.
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 800593c:	ed83 8a0c 	vstr	s16, [r3, #48]	; 0x30
      }
    }
  }

  // Block system motion from updating this data to ensure next g-code motion is computed correctly.
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8005940:	eb04 0805 	add.w	r8, r4, r5
 8005944:	f898 301d 	ldrb.w	r3, [r8, #29]
 8005948:	079b      	lsls	r3, r3, #30
 800594a:	d439      	bmi.n	80059c0 <plan_buffer_line+0x1b8>
    float nominal_speed = plan_compute_profile_nominal_speed(block);
 800594c:	4638      	mov	r0, r7
 800594e:	f7ff febb 	bl	80056c8 <plan_compute_profile_nominal_speed>
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8005952:	4b6d      	ldr	r3, [pc, #436]	; (8005b08 <plan_buffer_line+0x300>)
 8005954:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
    pl.previous_nominal_speed = nominal_speed;
 8005958:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 800595c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005964:	bfcc      	ite	gt
 8005966:	ee67 7aa7 	vmulgt.f32	s15, s15, s15
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 800596a:	ee60 7a00 	vmulle.f32	s15, s0, s0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800596e:	442c      	add	r4, r5
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8005970:	edc8 7a09 	vstr	s15, [r8, #36]	; 0x24
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8005974:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8005978:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30

    // Update previous path unit_vector and planner position.
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 800597c:	ad10      	add	r5, sp, #64	; 0x40
 800597e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8005980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005988:	bfc8      	it	gt
 800598a:	edc4 7a09 	vstrgt	s15, [r4, #36]	; 0x24
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 800598e:	4c5f      	ldr	r4, [pc, #380]	; (8005b0c <plan_buffer_line+0x304>)
 8005990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005992:	e895 0003 	ldmia.w	r5, {r0, r1}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8005996:	ad04      	add	r5, sp, #16
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8005998:	e884 0003 	stmia.w	r4, {r0, r1}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 800599c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800599e:	3c28      	subs	r4, #40	; 0x28
 80059a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    // New block is all set. Update buffer head and next buffer head indices.
    block_buffer_head = next_buffer_head;
 80059a2:	4a5b      	ldr	r2, [pc, #364]	; (8005b10 <plan_buffer_line+0x308>)
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 80059a4:	e895 0003 	ldmia.w	r5, {r0, r1}
    block_buffer_head = next_buffer_head;
 80059a8:	7813      	ldrb	r3, [r2, #0]
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 80059aa:	e884 0003 	stmia.w	r4, {r0, r1}
    block_buffer_head = next_buffer_head;
 80059ae:	7033      	strb	r3, [r6, #0]
  block_index++;
 80059b0:	3301      	adds	r3, #1
 80059b2:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80059b4:	2bc8      	cmp	r3, #200	; 0xc8
 80059b6:	bf08      	it	eq
 80059b8:	2300      	moveq	r3, #0
    next_buffer_head = plan_next_block_index(block_buffer_head);
 80059ba:	7013      	strb	r3, [r2, #0]

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
 80059bc:	f7ff fd4e 	bl	800545c <planner_recalculate>
  }
  return(PLAN_OK);
 80059c0:	2001      	movs	r0, #1
 80059c2:	e083      	b.n	8005acc <plan_buffer_line+0x2c4>
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80059c4:	0719      	lsls	r1, r3, #28
    block->programmed_rate = pl_data->feed_rate;
 80059c6:	ed9b 7a00 	vldr	s14, [fp]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80059ca:	bf48      	it	mi
 80059cc:	edd8 7a0b 	vldrmi	s15, [r8, #44]	; 0x2c
    block->programmed_rate = pl_data->feed_rate;
 80059d0:	ed88 7a0e 	vstr	s14, [r8, #56]	; 0x38
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80059d4:	bf44      	itt	mi
 80059d6:	ee67 7a87 	vmulmi.f32	s15, s15, s14
 80059da:	edc8 7a0e 	vstrmi	s15, [r8, #56]	; 0x38
 80059de:	e7a1      	b.n	8005924 <plan_buffer_line+0x11c>
 80059e0:	4b4a      	ldr	r3, [pc, #296]	; (8005b0c <plan_buffer_line+0x304>)
 80059e2:	a910      	add	r1, sp, #64	; 0x40
 80059e4:	aa16      	add	r2, sp, #88	; 0x58
 80059e6:	f103 0018 	add.w	r0, r3, #24
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 80059ea:	eeb0 7a48 	vmov.f32	s14, s16
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80059ee:	ecf3 6a01 	vldmia	r3!, {s13}
 80059f2:	ecf1 7a01 	vldmia	r1!, {s15}
 80059f6:	eea6 7ae7 	vfms.f32	s14, s13, s15
    for (idx=0; idx<N_AXIS; idx++) {
 80059fa:	4298      	cmp	r0, r3
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80059fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a00:	ece2 7a01 	vstmia	r2!, {s15}
    for (idx=0; idx<N_AXIS; idx++) {
 8005a04:	d1f3      	bne.n	80059ee <plan_buffer_line+0x1e6>
    if (junction_cos_theta > 0.999999) {
 8005a06:	ee17 0a10 	vmov	r0, s14
 8005a0a:	f7fa fd95 	bl	8000538 <__aeabi_f2d>
 8005a0e:	a332      	add	r3, pc, #200	; (adr r3, 8005ad8 <plan_buffer_line+0x2d0>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	4680      	mov	r8, r0
 8005a16:	4689      	mov	r9, r1
 8005a18:	f7fb f872 	bl	8000b00 <__aeabi_dcmpgt>
 8005a1c:	b108      	cbz	r0, 8005a22 <plan_buffer_line+0x21a>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8005a1e:	1963      	adds	r3, r4, r5
 8005a20:	e78c      	b.n	800593c <plan_buffer_line+0x134>
      if (junction_cos_theta < -0.999999) {
 8005a22:	a32f      	add	r3, pc, #188	; (adr r3, 8005ae0 <plan_buffer_line+0x2d8>)
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	4640      	mov	r0, r8
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	f7fb f84a 	bl	8000ac4 <__aeabi_dcmplt>
 8005a30:	b118      	cbz	r0, 8005a3a <plan_buffer_line+0x232>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8005a32:	1963      	adds	r3, r4, r5
 8005a34:	4a37      	ldr	r2, [pc, #220]	; (8005b14 <plan_buffer_line+0x30c>)
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
 8005a38:	e782      	b.n	8005940 <plan_buffer_line+0x138>
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 8005a3a:	a816      	add	r0, sp, #88	; 0x58
 8005a3c:	f7ff fcca 	bl	80053d4 <convert_delta_vector_to_unit_vector>
        	float junction_acceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, junction_unit_vec);
 8005a40:	a916      	add	r1, sp, #88	; 0x58
 8005a42:	482d      	ldr	r0, [pc, #180]	; (8005af8 <plan_buffer_line+0x2f0>)
 8005a44:	f7ff fcea 	bl	800541c <limit_value_by_axis_maximum>
        	float sin_theta_d2 = sqrtf(0.5*(1.0-junction_cos_theta)); // Trig half angle identity. Always positive.
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	4932      	ldr	r1, [pc, #200]	; (8005b18 <plan_buffer_line+0x310>)
        	float junction_acceleration = limit_value_by_axis_maximum(adjustments.accel_adjusted, junction_unit_vec);
 8005a50:	eeb0 8a40 	vmov.f32	s16, s0
        	float sin_theta_d2 = sqrtf(0.5*(1.0-junction_cos_theta)); // Trig half angle identity. Always positive.
 8005a54:	f7fa fc10 	bl	8000278 <__aeabi_dsub>
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4b30      	ldr	r3, [pc, #192]	; (8005b1c <plan_buffer_line+0x314>)
 8005a5c:	f7fa fdc0 	bl	80005e0 <__aeabi_dmul>
 8005a60:	f7fb f8b6 	bl	8000bd0 <__aeabi_d2f>
 8005a64:	ee00 0a10 	vmov	s0, r0
 8005a68:	f004 f872 	bl	8009b50 <sqrtf>
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8005a6c:	4b20      	ldr	r3, [pc, #128]	; (8005af0 <plan_buffer_line+0x2e8>)
 8005a6e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005a72:	ee28 8a27 	vmul.f32	s16, s16, s15
        	float sin_theta_d2 = sqrtf(0.5*(1.0-junction_cos_theta)); // Trig half angle identity. Always positive.
 8005a76:	eef0 8a40 	vmov.f32	s17, s0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8005a7a:	ee68 7a00 	vmul.f32	s15, s16, s0
 8005a7e:	ee17 0a90 	vmov	r0, s15
 8005a82:	f7fa fd59 	bl	8000538 <__aeabi_f2d>
 8005a86:	4680      	mov	r8, r0
 8005a88:	ee18 0a90 	vmov	r0, s17
 8005a8c:	4689      	mov	r9, r1
 8005a8e:	f7fa fd53 	bl	8000538 <__aeabi_f2d>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	2000      	movs	r0, #0
 8005a98:	491f      	ldr	r1, [pc, #124]	; (8005b18 <plan_buffer_line+0x310>)
 8005a9a:	f7fa fbed 	bl	8000278 <__aeabi_dsub>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	f7fa fec5 	bl	8000834 <__aeabi_ddiv>
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2300      	movs	r3, #0
 8005aae:	4680      	mov	r8, r0
 8005ab0:	4689      	mov	r9, r1
 8005ab2:	f7fb f807 	bl	8000ac4 <__aeabi_dcmplt>
 8005ab6:	b930      	cbnz	r0, 8005ac6 <plan_buffer_line+0x2be>
 8005ab8:	4640      	mov	r0, r8
 8005aba:	4649      	mov	r1, r9
 8005abc:	f7fb f888 	bl	8000bd0 <__aeabi_d2f>
 8005ac0:	1963      	adds	r3, r4, r5
 8005ac2:	6318      	str	r0, [r3, #48]	; 0x30
 8005ac4:	e73c      	b.n	8005940 <plan_buffer_line+0x138>
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	e7fa      	b.n	8005ac0 <plan_buffer_line+0x2b8>
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8005aca:	4618      	mov	r0, r3
}
 8005acc:	b01d      	add	sp, #116	; 0x74
 8005ace:	ecbd 8b02 	vpop	{d8}
 8005ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad6:	bf00      	nop
 8005ad8:	e7210be9 	.word	0xe7210be9
 8005adc:	3feffffd 	.word	0x3feffffd
 8005ae0:	e7210be9 	.word	0xe7210be9
 8005ae4:	bfeffffd 	.word	0xbfeffffd
 8005ae8:	200032b4 	.word	0x200032b4
 8005aec:	200000b4 	.word	0x200000b4
 8005af0:	2000447c 	.word	0x2000447c
 8005af4:	0800acec 	.word	0x0800acec
 8005af8:	20004524 	.word	0x20004524
 8005afc:	20004494 	.word	0x20004494
 8005b00:	200032b6 	.word	0x200032b6
 8005b04:	00000000 	.word	0x00000000
 8005b08:	200032b8 	.word	0x200032b8
 8005b0c:	200032d0 	.word	0x200032d0
 8005b10:	200032b7 	.word	0x200032b7
 8005b14:	7f7fffff 	.word	0x7f7fffff
 8005b18:	3ff00000 	.word	0x3ff00000
 8005b1c:	3fe00000 	.word	0x3fe00000
 8005b20:	20003978 	.word	0x20003978

08005b24 <plan_sync_position>:
        pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      } else {
        pl.position[idx] = sys_position[idx];
      }
    #else
      pl.position[idx] = sys_position[idx];
 8005b24:	4a05      	ldr	r2, [pc, #20]	; (8005b3c <plan_sync_position+0x18>)
 8005b26:	4806      	ldr	r0, [pc, #24]	; (8005b40 <plan_sync_position+0x1c>)
{
 8005b28:	2300      	movs	r3, #0
      pl.position[idx] = sys_position[idx];
 8005b2a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8005b2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8005b32:	3301      	adds	r3, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8005b34:	2b06      	cmp	r3, #6
 8005b36:	d1f8      	bne.n	8005b2a <plan_sync_position+0x6>
    #endif
  }
}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	200032b8 	.word	0x200032b8
 8005b40:	20003978 	.word	0x20003978

08005b44 <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8005b44:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <plan_get_block_buffer_available+0x1c>)
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <plan_get_block_buffer_available+0x20>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	bf2c      	ite	cs
 8005b50:	f1a3 0039 	subcs.w	r0, r3, #57	; 0x39
  return((block_buffer_tail-block_buffer_head-1));
 8005b54:	f103 30ff 	addcc.w	r0, r3, #4294967295
 8005b58:	1a80      	subs	r0, r0, r2
 8005b5a:	b2c0      	uxtb	r0, r0
}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	200032b4 	.word	0x200032b4
 8005b64:	200032b6 	.word	0x200032b6

08005b68 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8005b68:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8005b6a:	f001 ffc5 	bl	8007af8 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8005b6e:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <plan_cycle_reinitialize+0x18>)
 8005b70:	781a      	ldrb	r2, [r3, #0]
 8005b72:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <plan_cycle_reinitialize+0x1c>)
 8005b74:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 8005b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 8005b7a:	f7ff bc6f 	b.w	800545c <planner_recalculate>
 8005b7e:	bf00      	nop
 8005b80:	200032b6 	.word	0x200032b6
 8005b84:	200032b5 	.word	0x200032b5

08005b88 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	1e44      	subs	r4, r0, #1
  while (*s)
 8005b8c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8005b90:	b900      	cbnz	r0, 8005b94 <printString+0xc>
    serial_write(*s++);
}
 8005b92:	bd10      	pop	{r4, pc}
    serial_write(*s++);
 8005b94:	f001 f8e1 	bl	8006d5a <serial_write>
 8005b98:	e7f8      	b.n	8005b8c <printString+0x4>

08005b9a <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8005b9a:	2863      	cmp	r0, #99	; 0x63
{
 8005b9c:	b538      	push	{r3, r4, r5, lr}
  if (n >= 100) { // 100-255
 8005b9e:	d91d      	bls.n	8005bdc <print_uint8_base10+0x42>
    digit_a = '0' + n % 10;
 8005ba0:	240a      	movs	r4, #10
 8005ba2:	fbb0 f3f4 	udiv	r3, r0, r4
 8005ba6:	fb04 0413 	mls	r4, r4, r3, r0
 8005baa:	3430      	adds	r4, #48	; 0x30
 8005bac:	b2e4      	uxtb	r4, r4
    n /= 10;
 8005bae:	b2d8      	uxtb	r0, r3
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
 8005bb0:	250a      	movs	r5, #10
 8005bb2:	fbb0 f3f5 	udiv	r3, r0, r5
 8005bb6:	fb05 0513 	mls	r5, r5, r3, r0
 8005bba:	3530      	adds	r5, #48	; 0x30
 8005bbc:	b2ed      	uxtb	r5, r5
    n /= 10;
 8005bbe:	b2d8      	uxtb	r0, r3
  }
  serial_write('0' + n);
 8005bc0:	3030      	adds	r0, #48	; 0x30
 8005bc2:	b2c0      	uxtb	r0, r0
 8005bc4:	f001 f8c9 	bl	8006d5a <serial_write>
  if (digit_b) { serial_write(digit_b); }
 8005bc8:	b115      	cbz	r5, 8005bd0 <print_uint8_base10+0x36>
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f001 f8c5 	bl	8006d5a <serial_write>
  if (digit_a) { serial_write(digit_a); }
 8005bd0:	b154      	cbz	r4, 8005be8 <print_uint8_base10+0x4e>
 8005bd2:	4620      	mov	r0, r4
}
 8005bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (digit_a) { serial_write(digit_a); }
 8005bd8:	f001 b8bf 	b.w	8006d5a <serial_write>
  if (n >= 10) { // 10-99
 8005bdc:	2809      	cmp	r0, #9
  uint8_t digit_a = 0;
 8005bde:	f04f 0400 	mov.w	r4, #0
  if (n >= 10) { // 10-99
 8005be2:	d8e5      	bhi.n	8005bb0 <print_uint8_base10+0x16>
  uint8_t digit_b = 0;
 8005be4:	4625      	mov	r5, r4
 8005be6:	e7eb      	b.n	8005bc0 <print_uint8_base10+0x26>
 8005be8:	bd38      	pop	{r3, r4, r5, pc}
	...

08005bec <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	ed2d 8b02 	vpush	{d8}
  if (n < 0) {
 8005bf2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	eeb0 8a40 	vmov.f32	s16, s0
 8005c00:	4605      	mov	r5, r0
  if (n < 0) {
 8005c02:	d504      	bpl.n	8005c0e <printFloat+0x22>
    serial_write('-');
 8005c04:	202d      	movs	r0, #45	; 0x2d
 8005c06:	f001 f8a8 	bl	8006d5a <serial_write>
    n = -n;
 8005c0a:	eeb1 8a48 	vneg.f32	s16, s16
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    n *= 100;
 8005c0e:	eddf 7a29 	vldr	s15, [pc, #164]	; 8005cb4 <printFloat+0xc8>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8005c12:	462b      	mov	r3, r5
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d82c      	bhi.n	8005c72 <printFloat+0x86>
    decimals -= 2;
  }
  if (decimals) { n *= 10; }
 8005c18:	086b      	lsrs	r3, r5, #1
 8005c1a:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8005c1e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005c22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c26:	bf1c      	itt	ne
 8005c28:	eef2 7a04 	vmovne.f32	s15, #36	; 0x41200000  10.0
 8005c2c:	ee28 8a27 	vmulne.f32	s16, s16, s15
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8005c30:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005c34:	ee38 8a00 	vadd.f32	s16, s16, s0

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
  while(a > 0) {
 8005c38:	2200      	movs	r2, #0
  uint32_t a = (long)n;
 8005c3a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    buf[i++] = (a % 10) + '0'; // Get digit
 8005c3e:	210a      	movs	r1, #10
  uint32_t a = (long)n;
 8005c40:	ee17 3a90 	vmov	r3, s15
 8005c44:	b2d4      	uxtb	r4, r2
 8005c46:	3201      	adds	r2, #1
  while(a > 0) {
 8005c48:	b9c3      	cbnz	r3, 8005c7c <printFloat+0x90>
 8005c4a:	1e63      	subs	r3, r4, #1
 8005c4c:	446b      	add	r3, sp
    a /= 10;
  }
  while (i < decimal_places) {
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005c4e:	2230      	movs	r2, #48	; 0x30
  while (i < decimal_places) {
 8005c50:	42ac      	cmp	r4, r5
 8005c52:	d31e      	bcc.n	8005c92 <printFloat+0xa6>
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8005c54:	d106      	bne.n	8005c64 <printFloat+0x78>
    buf[i++] = '0';
 8005c56:	aa04      	add	r2, sp, #16
 8005c58:	1c63      	adds	r3, r4, #1
 8005c5a:	4414      	add	r4, r2
 8005c5c:	2230      	movs	r2, #48	; 0x30
 8005c5e:	f804 2c10 	strb.w	r2, [r4, #-16]
 8005c62:	b2dc      	uxtb	r4, r3
 8005c64:	eb0d 0604 	add.w	r6, sp, r4
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8005c68:	b9c4      	cbnz	r4, 8005c9c <printFloat+0xb0>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
    serial_write(buf[i-1]);
  }
}
 8005c6a:	b004      	add	sp, #16
 8005c6c:	ecbd 8b02 	vpop	{d8}
 8005c70:	bd70      	pop	{r4, r5, r6, pc}
    decimals -= 2;
 8005c72:	3b02      	subs	r3, #2
    n *= 100;
 8005c74:	ee28 8a27 	vmul.f32	s16, s16, s15
    decimals -= 2;
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e7cb      	b.n	8005c14 <printFloat+0x28>
    buf[i++] = (a % 10) + '0'; // Get digit
 8005c7c:	a804      	add	r0, sp, #16
 8005c7e:	4404      	add	r4, r0
 8005c80:	fbb3 f0f1 	udiv	r0, r3, r1
 8005c84:	fb01 3310 	mls	r3, r1, r0, r3
 8005c88:	3330      	adds	r3, #48	; 0x30
 8005c8a:	f804 3c10 	strb.w	r3, [r4, #-16]
    a /= 10;
 8005c8e:	4603      	mov	r3, r0
 8005c90:	e7d8      	b.n	8005c44 <printFloat+0x58>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005c92:	3401      	adds	r4, #1
 8005c94:	b2e4      	uxtb	r4, r4
 8005c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c9a:	e7d9      	b.n	8005c50 <printFloat+0x64>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8005c9c:	42ac      	cmp	r4, r5
 8005c9e:	d102      	bne.n	8005ca6 <printFloat+0xba>
 8005ca0:	202e      	movs	r0, #46	; 0x2e
 8005ca2:	f001 f85a 	bl	8006d5a <serial_write>
    serial_write(buf[i-1]);
 8005ca6:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8005caa:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8005cac:	f001 f855 	bl	8006d5a <serial_write>
  for (; i > 0; i--) {
 8005cb0:	b2e4      	uxtb	r4, r4
 8005cb2:	e7d9      	b.n	8005c68 <printFloat+0x7c>
 8005cb4:	42c80000 	.word	0x42c80000

08005cb8 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8005cb8:	b508      	push	{r3, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8005cba:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <printFloat_CoordValue+0x40>)
 8005cbc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8005cc0:	07db      	lsls	r3, r3, #31
void printFloat_CoordValue(float n) {
 8005cc2:	ee10 0a10 	vmov	r0, s0
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8005cc6:	d50f      	bpl.n	8005ce8 <printFloat_CoordValue+0x30>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8005cc8:	f7fa fc36 	bl	8000538 <__aeabi_f2d>
 8005ccc:	a308      	add	r3, pc, #32	; (adr r3, 8005cf0 <printFloat_CoordValue+0x38>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fc85 	bl	80005e0 <__aeabi_dmul>
 8005cd6:	f7fa ff7b 	bl	8000bd0 <__aeabi_d2f>
 8005cda:	ee00 0a10 	vmov	s0, r0
 8005cde:	2004      	movs	r0, #4
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8005ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
 8005ce4:	f7ff bf82 	b.w	8005bec <printFloat>
 8005ce8:	2003      	movs	r0, #3
 8005cea:	e7f9      	b.n	8005ce0 <printFloat_CoordValue+0x28>
 8005cec:	f3af 8000 	nop.w
 8005cf0:	57e16865 	.word	0x57e16865
 8005cf4:	3fa42851 	.word	0x3fa42851
 8005cf8:	2000447c 	.word	0x2000447c
 8005cfc:	00000000 	.word	0x00000000

08005d00 <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 8005d00:	b508      	push	{r3, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8005d02:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <printFloat_RateValue+0x40>)
 8005d04:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8005d08:	f013 0301 	ands.w	r3, r3, #1
void printFloat_RateValue(float n) {
 8005d0c:	ee10 0a10 	vmov	r0, s0
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8005d10:	d00f      	beq.n	8005d32 <printFloat_RateValue+0x32>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8005d12:	f7fa fc11 	bl	8000538 <__aeabi_f2d>
 8005d16:	a308      	add	r3, pc, #32	; (adr r3, 8005d38 <printFloat_RateValue+0x38>)
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f7fa fc60 	bl	80005e0 <__aeabi_dmul>
 8005d20:	f7fa ff56 	bl	8000bd0 <__aeabi_d2f>
 8005d24:	ee00 0a10 	vmov	s0, r0
 8005d28:	2001      	movs	r0, #1
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8005d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
 8005d2e:	f7ff bf5d 	b.w	8005bec <printFloat>
 8005d32:	4618      	mov	r0, r3
 8005d34:	e7f9      	b.n	8005d2a <printFloat_RateValue+0x2a>
 8005d36:	bf00      	nop
 8005d38:	57e16865 	.word	0x57e16865
 8005d3c:	3fa42851 	.word	0x3fa42851
 8005d40:	2000447c 	.word	0x2000447c

08005d44 <probe_configure_invert_mask>:
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 8005d44:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <probe_configure_invert_mask+0x20>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	801a      	strh	r2, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_Pin; }
 8005d4a:	4a07      	ldr	r2, [pc, #28]	; (8005d68 <probe_configure_invert_mask+0x24>)
 8005d4c:	f992 2078 	ldrsb.w	r2, [r2, #120]	; 0x78
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	bfa4      	itt	ge
 8005d54:	2210      	movge	r2, #16
 8005d56:	801a      	strhge	r2, [r3, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_Pin; }
 8005d58:	b118      	cbz	r0, 8005d62 <probe_configure_invert_mask+0x1e>
 8005d5a:	881a      	ldrh	r2, [r3, #0]
 8005d5c:	f082 0210 	eor.w	r2, r2, #16
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	4770      	bx	lr
 8005d64:	200042fc 	.word	0x200042fc
 8005d68:	2000447c 	.word	0x2000447c

08005d6c <probe_init>:
  probe_configure_invert_mask(false); // Initialize invert mask.
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f7ff bfe9 	b.w	8005d44 <probe_configure_invert_mask>
	...

08005d74 <probe_get_state>:
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8005d74:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <probe_get_state+0x14>)

// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state()
{
#ifdef STM32
  return !((GPIO_ReadInputData(PROBE_GPIO_Port) & PROBE_Pin) ^ probe_invert_mask);
 8005d76:	4a05      	ldr	r2, [pc, #20]	; (8005d8c <probe_get_state+0x18>)
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	8810      	ldrh	r0, [r2, #0]
 8005d7c:	f003 0310 	and.w	r3, r3, #16
#elif ATMEGA328P
  return((PROBE_PIN & PROBE_MASK) ^ probe_invert_mask);
#endif
}
 8005d80:	1a1b      	subs	r3, r3, r0
 8005d82:	4258      	negs	r0, r3
 8005d84:	4158      	adcs	r0, r3
 8005d86:	4770      	bx	lr
 8005d88:	40020400 	.word	0x40020400
 8005d8c:	200042fc 	.word	0x200042fc

08005d90 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8005d90:	b538      	push	{r3, r4, r5, lr}
  if (probe_get_state()) {
 8005d92:	f7ff ffef 	bl	8005d74 <probe_get_state>
 8005d96:	b178      	cbz	r0, 8005db8 <probe_state_monitor+0x28>
    sys_probe_state = PROBE_OFF;
 8005d98:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <probe_state_monitor+0x2c>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8005d9a:	4d09      	ldr	r5, [pc, #36]	; (8005dc0 <probe_state_monitor+0x30>)
 8005d9c:	4c09      	ldr	r4, [pc, #36]	; (8005dc4 <probe_state_monitor+0x34>)
    sys_probe_state = PROBE_OFF;
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8005da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8005da6:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <probe_state_monitor+0x38>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8005da8:	e895 0003 	ldmia.w	r5, {r0, r1}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8005dac:	7813      	ldrb	r3, [r2, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8005dae:	e884 0003 	stmia.w	r4, {r0, r1}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8005db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005db6:	7013      	strb	r3, [r2, #0]
 8005db8:	bd38      	pop	{r3, r4, r5, pc}
 8005dba:	bf00      	nop
 8005dbc:	2000395e 	.word	0x2000395e
 8005dc0:	20003978 	.word	0x20003978
 8005dc4:	20003960 	.word	0x20003960
 8005dc8:	2000395d 	.word	0x2000395d

08005dcc <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 8005dcc:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8005dce:	f7ff fc41 	bl	8005654 <plan_get_current_block>
 8005dd2:	b120      	cbz	r0, 8005dde <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005dd4:	2002      	movs	r0, #2
  }
}
 8005dd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005dda:	f002 ba9b 	b.w	8008314 <system_set_exec_state_flag>
 8005dde:	bd08      	pop	{r3, pc}

08005de0 <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005de2:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <protocol_exec_rt_system+0xe4>)
 8005de4:	4c38      	ldr	r4, [pc, #224]	; (8005ec8 <protocol_exec_rt_system+0xe8>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	4e38      	ldr	r6, [pc, #224]	; (8005ecc <protocol_exec_rt_system+0xec>)
  if (rt_exec) { // Enter only if any bit flag is true
 8005dea:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005dee:	b14b      	cbz	r3, 8005e04 <protocol_exec_rt_system+0x24>
    // System alarm. Everything has shutdown by something that has gone severely wrong. Report
    // the source of the error to the user. If critical, Grbl disables by entering an infinite
    // loop until system reset/abort.
    sys.state = STATE_ALARM; // Set system alarm state
 8005df0:	2701      	movs	r7, #1
    report_alarm_message(rt_exec);
 8005df2:	4628      	mov	r0, r5
    // Halt everything upon a critical event flag. Currently hard and soft limits flag this.
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005df4:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8005df6:	7027      	strb	r7, [r4, #0]
    report_alarm_message(rt_exec);
 8005df8:	f000 fb8a 	bl	8006510 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005dfc:	42bd      	cmp	r5, r7
 8005dfe:	d90c      	bls.n	8005e1a <protocol_exec_rt_system+0x3a>
        // the user and a GUI time to do what is needed before resetting, like killing the
        // incoming stream. The same could be said about soft limits. While the position is not
        // lost, continued streaming could cause a serious crash if by chance it gets executed.
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
 8005e00:	f002 fc36 	bl	8008670 <system_clear_exec_alarm>
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005e04:	7833      	ldrb	r3, [r6, #0]
  if (rt_exec) {
 8005e06:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 80ba 	beq.w	8005f84 <protocol_exec_rt_system+0x1a4>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 8005e10:	06e8      	lsls	r0, r5, #27
 8005e12:	d50c      	bpl.n	8005e2e <protocol_exec_rt_system+0x4e>
      sys.abort = true;  // Only place this is set true.
 8005e14:	2301      	movs	r3, #1
 8005e16:	7063      	strb	r3, [r4, #1]
      return; // Nothing else to do but exit.
 8005e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f000 fb8a 	bl	8006534 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005e20:	2010      	movs	r0, #16
 8005e22:	f002 fc11 	bl	8008648 <system_clear_exec_state_flag>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005e26:	7833      	ldrb	r3, [r6, #0]
 8005e28:	06dd      	lsls	r5, r3, #27
 8005e2a:	d5fc      	bpl.n	8005e26 <protocol_exec_rt_system+0x46>
 8005e2c:	e7e8      	b.n	8005e00 <protocol_exec_rt_system+0x20>
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005e2e:	07e9      	lsls	r1, r5, #31
 8005e30:	d504      	bpl.n	8005e3c <protocol_exec_rt_system+0x5c>
      report_realtime_status();
 8005e32:	f000 fe05 	bl	8006a40 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005e36:	2001      	movs	r0, #1
 8005e38:	f002 fc06 	bl	8008648 <system_clear_exec_state_flag>
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005e3c:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8005e40:	d05a      	beq.n	8005ef8 <protocol_exec_rt_system+0x118>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005e42:	7823      	ldrb	r3, [r4, #0]
 8005e44:	f013 0f03 	tst.w	r3, #3
 8005e48:	b26e      	sxtb	r6, r5
 8005e4a:	d147      	bne.n	8005edc <protocol_exec_rt_system+0xfc>
      
        // If in CYCLE or JOG states, immediately initiate a motion HOLD.
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005e4c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005e50:	d010      	beq.n	8005e74 <protocol_exec_rt_system+0x94>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005e52:	78a3      	ldrb	r3, [r4, #2]
 8005e54:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8005e58:	d10c      	bne.n	8005e74 <protocol_exec_rt_system+0x94>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005e5a:	f001 fe4d 	bl	8007af8 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005e5e:	2302      	movs	r3, #2
 8005e60:	7123      	strb	r3, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005e62:	7823      	ldrb	r3, [r4, #0]
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d105      	bne.n	8005e74 <protocol_exec_rt_system+0x94>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005e68:	2e00      	cmp	r6, #0
 8005e6a:	db07      	blt.n	8005e7c <protocol_exec_rt_system+0x9c>
 8005e6c:	78a3      	ldrb	r3, [r4, #2]
 8005e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e72:	70a3      	strb	r3, [r4, #2]
            }
          }
        }
        // If IDLE, Grbl is not in motion. Simply indicate suspend state and hold is complete.
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005e74:	7823      	ldrb	r3, [r4, #0]
 8005e76:	b90b      	cbnz	r3, 8005e7c <protocol_exec_rt_system+0x9c>
 8005e78:	2201      	movs	r2, #1
 8005e7a:	70a2      	strb	r2, [r4, #2]

        // Execute and flag a motion cancel with deceleration and return to idle. Used primarily by probing cycle
        // to halt and cancel the remainder of the motion.
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005e7c:	066a      	lsls	r2, r5, #25
 8005e7e:	d505      	bpl.n	8005e8c <protocol_exec_rt_system+0xac>
          // MOTION_CANCEL only occurs during a CYCLE, but a HOLD and SAFETY_DOOR may been initiated beforehand
          // to hold the CYCLE. Motion cancel is valid for a single planner block motion only, while jog cancel
          // will handle and clear multiple planner block motions.
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005e80:	069f      	lsls	r7, r3, #26
 8005e82:	bf5e      	ittt	pl
 8005e84:	78a2      	ldrbpl	r2, [r4, #2]
 8005e86:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8005e8a:	70a2      	strbpl	r2, [r4, #2]
        }

        // Execute a feed hold with deceleration, if required. Then, suspend system.
        if (rt_exec & EXEC_FEED_HOLD) {
 8005e8c:	0728      	lsls	r0, r5, #28
 8005e8e:	d504      	bpl.n	8005e9a <protocol_exec_rt_system+0xba>
          // Block SAFETY_DOOR, JOG, and SLEEP states from changing to HOLD state.
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005e90:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005e94:	bf04      	itt	eq
 8005e96:	2310      	moveq	r3, #16
 8005e98:	7023      	strbeq	r3, [r4, #0]
        }

        // Execute a safety door stop with a feed hold and disable spindle/coolant.
        // NOTE: Safety door differs from feed holds by stopping everything no matter state, disables powered
        // devices (spindle/coolant), and blocks resuming until switch is re-engaged.
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005e9a:	06a9      	lsls	r1, r5, #26
 8005e9c:	d51e      	bpl.n	8005edc <protocol_exec_rt_system+0xfc>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005e9e:	2006      	movs	r0, #6
 8005ea0:	f000 fb48 	bl	8006534 <report_feedback_message>
          // If jogging, block safety door methods until jog cancel is complete. Just flag that it happened.
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005ea4:	78a3      	ldrb	r3, [r4, #2]
 8005ea6:	061a      	lsls	r2, r3, #24
 8005ea8:	d414      	bmi.n	8005ed4 <protocol_exec_rt_system+0xf4>
            // Check if the safety re-opened during a restore parking motion only. Ignore if
            // already retracting, parked or in sleep state.
            if (sys.state == STATE_SAFETY_DOOR) {
 8005eaa:	7822      	ldrb	r2, [r4, #0]
 8005eac:	2a40      	cmp	r2, #64	; 0x40
 8005eae:	d10f      	bne.n	8005ed0 <protocol_exec_rt_system+0xf0>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005eb0:	071f      	lsls	r7, r3, #28
 8005eb2:	d504      	bpl.n	8005ebe <protocol_exec_rt_system+0xde>
                    st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
                    sys.step_control = (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION);
                    sys.suspend &= ~(SUSPEND_HOLD_COMPLETE);
                  } // else NO_MOTION is active.
                #endif
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005eb4:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005eb8:	f043 0302 	orr.w	r3, r3, #2
 8005ebc:	70a3      	strb	r3, [r4, #2]
              }
            }
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005ebe:	2340      	movs	r3, #64	; 0x40
 8005ec0:	7023      	strb	r3, [r4, #0]
 8005ec2:	e007      	b.n	8005ed4 <protocol_exec_rt_system+0xf4>
 8005ec4:	20003990 	.word	0x20003990
 8005ec8:	20003948 	.word	0x20003948
 8005ecc:	2000395d 	.word	0x2000395d
 8005ed0:	2a80      	cmp	r2, #128	; 0x80
 8005ed2:	d1f4      	bne.n	8005ebe <protocol_exec_rt_system+0xde>
          }
          // NOTE: This flag doesn't change when the door closes, unlike sys.state. Ensures any parking motions
          // are executed if the door switch closes and the state returns to HOLD.
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005ed4:	78a3      	ldrb	r3, [r4, #2]
 8005ed6:	f043 0320 	orr.w	r3, r3, #32
 8005eda:	70a3      	strb	r3, [r4, #2]
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 8005edc:	2e00      	cmp	r6, #0
 8005ede:	da08      	bge.n	8005ef2 <protocol_exec_rt_system+0x112>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005ee0:	7823      	ldrb	r3, [r4, #0]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	bf02      	ittt	eq
 8005ee6:	78a3      	ldrbeq	r3, [r4, #2]
 8005ee8:	f043 0305 	orreq.w	r3, r3, #5
 8005eec:	70a3      	strbeq	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 8005eee:	2380      	movs	r3, #128	; 0x80
 8005ef0:	7023      	strb	r3, [r4, #0]
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005ef2:	20e8      	movs	r0, #232	; 0xe8
 8005ef4:	f002 fba8 	bl	8008648 <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 8005ef8:	07a8      	lsls	r0, r5, #30
 8005efa:	d523      	bpl.n	8005f44 <protocol_exec_rt_system+0x164>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005efc:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005f00:	d11d      	bne.n	8005f3e <protocol_exec_rt_system+0x15e>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005f02:	7823      	ldrb	r3, [r4, #0]
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	d107      	bne.n	8005f18 <protocol_exec_rt_system+0x138>
 8005f08:	78a3      	ldrb	r3, [r4, #2]
 8005f0a:	f013 0220 	ands.w	r2, r3, #32
 8005f0e:	d103      	bne.n	8005f18 <protocol_exec_rt_system+0x138>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005f10:	06d9      	lsls	r1, r3, #27
 8005f12:	f140 80d4 	bpl.w	80060be <protocol_exec_rt_system+0x2de>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005f16:	7022      	strb	r2, [r4, #0]
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005f18:	7823      	ldrb	r3, [r4, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 80d5 	beq.w	80060ca <protocol_exec_rt_system+0x2ea>
 8005f20:	06df      	lsls	r7, r3, #27
 8005f22:	d50c      	bpl.n	8005f3e <protocol_exec_rt_system+0x15e>
 8005f24:	78a2      	ldrb	r2, [r4, #2]
 8005f26:	07d6      	lsls	r6, r2, #31
 8005f28:	d509      	bpl.n	8005f3e <protocol_exec_rt_system+0x15e>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005f2a:	2b10      	cmp	r3, #16
 8005f2c:	f040 80cd 	bne.w	80060ca <protocol_exec_rt_system+0x2ea>
 8005f30:	7ae3      	ldrb	r3, [r4, #11]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 80c9 	beq.w	80060ca <protocol_exec_rt_system+0x2ea>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005f38:	f043 0308 	orr.w	r3, r3, #8
 8005f3c:	72e3      	strb	r3, [r4, #11]
              sys.state = STATE_IDLE;
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005f3e:	2002      	movs	r0, #2
 8005f40:	f002 fb82 	bl	8008648 <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 8005f44:	0768      	lsls	r0, r5, #29
 8005f46:	d51d      	bpl.n	8005f84 <protocol_exec_rt_system+0x1a4>
      // Reinitializes the cycle plan and stepper system after a feed hold for a resume. Called by
      // realtime command execution in the main program, ensuring that the planner re-plans safely.
      // NOTE: Bresenham algorithm variables are still maintained through both the planner and stepper
      // cycle reinitializations. The stepper path should continue exactly as if nothing has happened.
      // NOTE: EXEC_CYCLE_STOP is set by the stepper subsystem when a cycle or feed hold completes.
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005f48:	7823      	ldrb	r3, [r4, #0]
 8005f4a:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8005f4e:	f000 80d1 	beq.w	80060f4 <protocol_exec_rt_system+0x314>
 8005f52:	78e3      	ldrb	r3, [r4, #3]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f040 80cd 	bne.w	80060f4 <protocol_exec_rt_system+0x314>
 8005f5a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f2c0 80c8 	blt.w	80060f4 <protocol_exec_rt_system+0x314>
        // Hold complete. Set to indicate ready to resume.  Remain in HOLD or DOOR states until user
        // has issued a resume command or reset.
        plan_cycle_reinitialize();
 8005f64:	f7ff fe00 	bl	8005b68 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005f68:	7923      	ldrb	r3, [r4, #4]
 8005f6a:	0799      	lsls	r1, r3, #30
 8005f6c:	bf48      	it	mi
 8005f6e:	78a2      	ldrbmi	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005f70:	f023 0306 	bic.w	r3, r3, #6
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005f74:	bf44      	itt	mi
 8005f76:	f042 0201 	orrmi.w	r2, r2, #1
 8005f7a:	70a2      	strbmi	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005f7c:	7123      	strb	r3, [r4, #4]
        } else {
          sys.suspend = SUSPEND_DISABLE;
          sys.state = STATE_IDLE;
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005f7e:	2004      	movs	r0, #4
 8005f80:	f002 fb62 	bl	8008648 <system_clear_exec_state_flag>
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005f84:	4b6d      	ldr	r3, [pc, #436]	; (800613c <protocol_exec_rt_system+0x35c>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005f88:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d038      	beq.n	8006002 <protocol_exec_rt_system+0x222>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005f90:	f002 fb8a 	bl	80086a8 <system_clear_exec_motion_overrides>

    uint8_t new_f_override =  sys.f_override;
 8005f94:	7a20      	ldrb	r0, [r4, #8]
    if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 8005f96:	f015 0f01 	tst.w	r5, #1
 8005f9a:	bf0c      	ite	eq
 8005f9c:	4603      	moveq	r3, r0
 8005f9e:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005fa0:	07aa      	lsls	r2, r5, #30
 8005fa2:	bf44      	itt	mi
 8005fa4:	330a      	addmi	r3, #10
 8005fa6:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005fa8:	076f      	lsls	r7, r5, #29
 8005faa:	bf44      	itt	mi
 8005fac:	3b0a      	submi	r3, #10
 8005fae:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005fb0:	072e      	lsls	r6, r5, #28
 8005fb2:	bf44      	itt	mi
 8005fb4:	3301      	addmi	r3, #1
 8005fb6:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005fb8:	06e9      	lsls	r1, r5, #27
 8005fba:	bf44      	itt	mi
 8005fbc:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005fc0:	b2db      	uxtbmi	r3, r3
    new_f_override = min(new_f_override,MAX_FEED_RATE_OVERRIDE);
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005fc2:	2bc8      	cmp	r3, #200	; 0xc8
 8005fc4:	bf28      	it	cs
 8005fc6:	23c8      	movcs	r3, #200	; 0xc8
 8005fc8:	2b0a      	cmp	r3, #10

    uint8_t new_r_override = sys.r_override;
 8005fca:	7a61      	ldrb	r1, [r4, #9]
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005fcc:	bf38      	it	cc
 8005fce:	230a      	movcc	r3, #10
    if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 8005fd0:	f015 0f20 	tst.w	r5, #32
 8005fd4:	bf14      	ite	ne
 8005fd6:	2264      	movne	r2, #100	; 0x64
 8005fd8:	460a      	moveq	r2, r1
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005fda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fde:	bf18      	it	ne
 8005fe0:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005fe2:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005fe6:	bf18      	it	ne
 8005fe8:	2219      	movne	r2, #25

    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005fea:	4298      	cmp	r0, r3
 8005fec:	d101      	bne.n	8005ff2 <protocol_exec_rt_system+0x212>
 8005fee:	428a      	cmp	r2, r1
 8005ff0:	d007      	beq.n	8006002 <protocol_exec_rt_system+0x222>
      sys.f_override = new_f_override;
 8005ff2:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005ff4:	2300      	movs	r3, #0
      sys.r_override = new_r_override;
 8005ff6:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005ff8:	7323      	strb	r3, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005ffa:	f7ff fbbf 	bl	800577c <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005ffe:	f7ff fdb3 	bl	8005b68 <plan_cycle_reinitialize>
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 8006002:	4b4f      	ldr	r3, [pc, #316]	; (8006140 <protocol_exec_rt_system+0x360>)
 8006004:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8006006:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 800600a:	2b00      	cmp	r3, #0
 800600c:	d04f      	beq.n	80060ae <protocol_exec_rt_system+0x2ce>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 800600e:	f002 fb53 	bl	80086b8 <system_clear_exec_accessory_overrides>

    // NOTE: Unlike motion overrides, spindle overrides do not require a planner reinitialization.
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8006012:	7aa2      	ldrb	r2, [r4, #10]
    if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 8006014:	f016 0f01 	tst.w	r6, #1
 8006018:	bf0c      	ite	eq
 800601a:	4613      	moveq	r3, r2
 800601c:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800601e:	07b7      	lsls	r7, r6, #30
 8006020:	bf44      	itt	mi
 8006022:	330a      	addmi	r3, #10
 8006024:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8006026:	0775      	lsls	r5, r6, #29
 8006028:	bf44      	itt	mi
 800602a:	3b0a      	submi	r3, #10
 800602c:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800602e:	0730      	lsls	r0, r6, #28
 8006030:	bf44      	itt	mi
 8006032:	3301      	addmi	r3, #1
 8006034:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8006036:	06f1      	lsls	r1, r6, #27
 8006038:	bf44      	itt	mi
 800603a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800603e:	b2db      	uxtbmi	r3, r3
    last_s_override = min(last_s_override,MAX_SPINDLE_SPEED_OVERRIDE);
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8006040:	2bc8      	cmp	r3, #200	; 0xc8
 8006042:	bf28      	it	cs
 8006044:	23c8      	movcs	r3, #200	; 0xc8
 8006046:	2b0a      	cmp	r3, #10
 8006048:	bf38      	it	cc
 800604a:	230a      	movcc	r3, #10

    if (last_s_override != sys.spindle_speed_ovr) {
 800604c:	429a      	cmp	r2, r3
 800604e:	d006      	beq.n	800605e <protocol_exec_rt_system+0x27e>
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006050:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8006052:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006054:	f042 0208 	orr.w	r2, r2, #8
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006058:	2300      	movs	r3, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800605a:	7122      	strb	r2, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 800605c:	7323      	strb	r3, [r4, #12]
    }

    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 800605e:	06b7      	lsls	r7, r6, #26
 8006060:	d507      	bpl.n	8006072 <protocol_exec_rt_system+0x292>
      // Spindle stop override allowed only while in HOLD state.
      // NOTE: Report counters are set in spindle_set_state() when spindle stop is executed.
      if (sys.state == STATE_HOLD) {
 8006062:	7823      	ldrb	r3, [r4, #0]
 8006064:	2b10      	cmp	r3, #16
 8006066:	d104      	bne.n	8006072 <protocol_exec_rt_system+0x292>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8006068:	7ae3      	ldrb	r3, [r4, #11]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d15f      	bne.n	800612e <protocol_exec_rt_system+0x34e>
 800606e:	2302      	movs	r3, #2
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8006070:	72e3      	strb	r3, [r4, #11]
      }
    }

    // NOTE: Since coolant state always performs a planner sync whenever it changes, the current
    // run state can be determined by checking the parser state.
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006072:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8006076:	d01a      	beq.n	80060ae <protocol_exec_rt_system+0x2ce>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006078:	7823      	ldrb	r3, [r4, #0]
 800607a:	b113      	cbz	r3, 8006082 <protocol_exec_rt_system+0x2a2>
 800607c:	f013 0f18 	tst.w	r3, #24
 8006080:	d015      	beq.n	80060ae <protocol_exec_rt_system+0x2ce>
        uint8_t coolant_state = gc_state.modal.coolant;
 8006082:	4f30      	ldr	r7, [pc, #192]	; (8006144 <protocol_exec_rt_system+0x364>)
        #ifdef ENABLE_M7
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8006084:	0630      	lsls	r0, r6, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8006086:	7a3d      	ldrb	r5, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8006088:	d505      	bpl.n	8006096 <protocol_exec_rt_system+0x2b6>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 800608a:	0629      	lsls	r1, r5, #24
 800608c:	bf4c      	ite	mi
 800608e:	f005 057f 	andmi.w	r5, r5, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8006092:	f045 0580 	orrpl.w	r5, r5, #128	; 0x80
          }
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8006096:	0672      	lsls	r2, r6, #25
 8006098:	d505      	bpl.n	80060a6 <protocol_exec_rt_system+0x2c6>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 800609a:	066b      	lsls	r3, r5, #25
 800609c:	bf4c      	ite	mi
 800609e:	f005 05bf 	andmi.w	r5, r5, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 80060a2:	f045 0540 	orrpl.w	r5, r5, #64	; 0x40
          }
        #else
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
          else { coolant_state |= COOLANT_FLOOD_ENABLE; }
        #endif
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 80060a6:	4628      	mov	r0, r5
 80060a8:	f7fd fb84 	bl	80037b4 <coolant_set_state>
        gc_state.modal.coolant = coolant_state;
 80060ac:	723d      	strb	r5, [r7, #8]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 80060ae:	7823      	ldrb	r3, [r4, #0]
 80060b0:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 80060b4:	d040      	beq.n	8006138 <protocol_exec_rt_system+0x358>
    st_prep_buffer();
  }

}
 80060b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 80060ba:	f001 bd35 	b.w	8007b28 <st_prep_buffer>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80060be:	075a      	lsls	r2, r3, #29
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 80060c0:	bf44      	itt	mi
 80060c2:	f043 0308 	orrmi.w	r3, r3, #8
 80060c6:	70a3      	strbmi	r3, [r4, #2]
 80060c8:	e726      	b.n	8005f18 <protocol_exec_rt_system+0x138>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 80060ca:	2300      	movs	r3, #0
 80060cc:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 80060ce:	f7ff fac1 	bl	8005654 <plan_get_current_block>
 80060d2:	b158      	cbz	r0, 80060ec <protocol_exec_rt_system+0x30c>
 80060d4:	78a3      	ldrb	r3, [r4, #2]
 80060d6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80060da:	d107      	bne.n	80060ec <protocol_exec_rt_system+0x30c>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80060dc:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 80060de:	2308      	movs	r3, #8
 80060e0:	7023      	strb	r3, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 80060e2:	f001 fd21 	bl	8007b28 <st_prep_buffer>
              st_wake_up();
 80060e6:	f001 fa7b 	bl	80075e0 <st_wake_up>
 80060ea:	e728      	b.n	8005f3e <protocol_exec_rt_system+0x15e>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80060ec:	2300      	movs	r3, #0
 80060ee:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 80060f0:	7023      	strb	r3, [r4, #0]
 80060f2:	e724      	b.n	8005f3e <protocol_exec_rt_system+0x15e>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 80060f4:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	da09      	bge.n	8006110 <protocol_exec_rt_system+0x330>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 80060fc:	2300      	movs	r3, #0
 80060fe:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8006100:	f7ff fa78 	bl	80055f4 <plan_reset>
          st_reset();
 8006104:	f001 fc86 	bl	8007a14 <st_reset>
          gc_sync_position();
 8006108:	f7fd fc3c 	bl	8003984 <gc_sync_position>
          plan_sync_position();
 800610c:	f7ff fd0a 	bl	8005b24 <plan_sync_position>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8006110:	78a3      	ldrb	r3, [r4, #2]
 8006112:	f013 0220 	ands.w	r2, r3, #32
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8006116:	bf1f      	itttt	ne
 8006118:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 800611c:	f043 0301 	orrne.w	r3, r3, #1
 8006120:	70a3      	strbne	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8006122:	2340      	movne	r3, #64	; 0x40
 8006124:	bf12      	itee	ne
 8006126:	7023      	strbne	r3, [r4, #0]
          sys.suspend = SUSPEND_DISABLE;
 8006128:	70a2      	strbeq	r2, [r4, #2]
          sys.state = STATE_IDLE;
 800612a:	7022      	strbeq	r2, [r4, #0]
 800612c:	e727      	b.n	8005f7e <protocol_exec_rt_system+0x19e>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 800612e:	07dd      	lsls	r5, r3, #31
 8006130:	d59f      	bpl.n	8006072 <protocol_exec_rt_system+0x292>
 8006132:	f043 0304 	orr.w	r3, r3, #4
 8006136:	e79b      	b.n	8006070 <protocol_exec_rt_system+0x290>
 8006138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800613a:	bf00      	nop
 800613c:	20003944 	.word	0x20003944
 8006140:	2000395c 	.word	0x2000395c
 8006144:	2000422c 	.word	0x2000422c

08006148 <protocol_execute_realtime>:
{
 8006148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800614c:	4c6a      	ldr	r4, [pc, #424]	; (80062f8 <protocol_execute_realtime+0x1b0>)
{
 800614e:	ed2d 8b02 	vpush	{d8}
  protocol_exec_rt_system();
 8006152:	f7ff fe45 	bl	8005de0 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006156:	78a3      	ldrb	r3, [r4, #2]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d04b      	beq.n	80061f4 <protocol_execute_realtime+0xac>
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 800615c:	f7ff fa7a 	bl	8005654 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 8006160:	bb98      	cbnz	r0, 80061ca <protocol_execute_realtime+0x82>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8006162:	4b66      	ldr	r3, [pc, #408]	; (80062fc <protocol_execute_realtime+0x1b4>)
 8006164:	7a5e      	ldrb	r6, [r3, #9]
 8006166:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 8006168:	ed93 8a04 	vldr	s16, [r3, #16]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 800616c:	4316      	orrs	r6, r2
    } else {
      restore_condition = block->condition;
      restore_spindle_speed = block->spindle_speed;
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) { 
 800616e:	4f64      	ldr	r7, [pc, #400]	; (8006300 <protocol_execute_realtime+0x1b8>)
 8006170:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8006174:	0798      	lsls	r0, r3, #30
 8006176:	d502      	bpl.n	800617e <protocol_execute_realtime+0x36>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 8006178:	2020      	movs	r0, #32
 800617a:	f002 fa8b 	bl	8008694 <system_set_exec_accessory_override_flag>
            } else {
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
            }
          // Handles restoring of spindle state
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800617e:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80062fc <protocol_execute_realtime+0x1b4>
              spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 8006182:	eddf 8a60 	vldr	s17, [pc, #384]	; 8006304 <protocol_execute_realtime+0x1bc>
  while (sys.suspend) {
 8006186:	78a5      	ldrb	r5, [r4, #2]
 8006188:	b3a5      	cbz	r5, 80061f4 <protocol_execute_realtime+0xac>
    if (sys.abort) { return; }
 800618a:	f894 9001 	ldrb.w	r9, [r4, #1]
 800618e:	f1b9 0f00 	cmp.w	r9, #0
 8006192:	d12f      	bne.n	80061f4 <protocol_execute_realtime+0xac>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 8006194:	07e9      	lsls	r1, r5, #31
 8006196:	d515      	bpl.n	80061c4 <protocol_execute_realtime+0x7c>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 8006198:	7822      	ldrb	r2, [r4, #0]
 800619a:	f012 00c0 	ands.w	r0, r2, #192	; 0xc0
 800619e:	d06e      	beq.n	800627e <protocol_execute_realtime+0x136>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 80061a0:	f015 0504 	ands.w	r5, r5, #4
 80061a4:	d115      	bne.n	80061d2 <protocol_execute_realtime+0x8a>
            spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 80061a6:	eeb0 0a68 	vmov.f32	s0, s17
 80061aa:	4628      	mov	r0, r5
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 80061ac:	72e5      	strb	r5, [r4, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 80061ae:	f001 f9c5 	bl	800753c <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 80061b2:	4628      	mov	r0, r5
 80061b4:	f7fd fafe 	bl	80037b4 <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 80061b8:	78a3      	ldrb	r3, [r4, #2]
 80061ba:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 80061be:	f043 0304 	orr.w	r3, r3, #4
 80061c2:	70a3      	strb	r3, [r4, #2]
        }

      }
    }

    protocol_exec_rt_system();
 80061c4:	f7ff fe0c 	bl	8005de0 <protocol_exec_rt_system>
 80061c8:	e7dd      	b.n	8006186 <protocol_execute_realtime+0x3e>
      restore_condition = block->condition;
 80061ca:	7f46      	ldrb	r6, [r0, #29]
      restore_spindle_speed = block->spindle_speed;
 80061cc:	ed90 8a0f 	vldr	s16, [r0, #60]	; 0x3c
 80061d0:	e7cd      	b.n	800616e <protocol_execute_realtime+0x26>
          if (sys.state == STATE_SLEEP) {
 80061d2:	2a80      	cmp	r2, #128	; 0x80
 80061d4:	d115      	bne.n	8006202 <protocol_execute_realtime+0xba>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 80061d6:	200b      	movs	r0, #11
 80061d8:	f000 f9ac 	bl	8006534 <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 80061dc:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8006304 <protocol_execute_realtime+0x1bc>
 80061e0:	4648      	mov	r0, r9
 80061e2:	f001 f9ab 	bl	800753c <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 80061e6:	4648      	mov	r0, r9
 80061e8:	f7fd fae4 	bl	80037b4 <coolant_set_state>
            st_go_idle(); // Disable steppers
 80061ec:	f001 fa44 	bl	8007678 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 80061f0:	7863      	ldrb	r3, [r4, #1]
 80061f2:	b11b      	cbz	r3, 80061fc <protocol_execute_realtime+0xb4>
}
 80061f4:	ecbd 8b02 	vpop	{d8}
 80061f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 80061fc:	f7ff fdf0 	bl	8005de0 <protocol_exec_rt_system>
 8006200:	e7f6      	b.n	80061f0 <protocol_execute_realtime+0xa8>
          if (sys.state == STATE_SAFETY_DOOR) {
 8006202:	2a40      	cmp	r2, #64	; 0x40
 8006204:	d106      	bne.n	8006214 <protocol_execute_realtime+0xcc>
            if (!(system_check_safety_door_ajar())) {
 8006206:	f002 f823 	bl	8008250 <system_check_safety_door_ajar>
 800620a:	b918      	cbnz	r0, 8006214 <protocol_execute_realtime+0xcc>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 800620c:	78a3      	ldrb	r3, [r4, #2]
 800620e:	f023 0320 	bic.w	r3, r3, #32
 8006212:	70a3      	strb	r3, [r4, #2]
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8006214:	78a3      	ldrb	r3, [r4, #2]
 8006216:	071a      	lsls	r2, r3, #28
 8006218:	d5d4      	bpl.n	80061c4 <protocol_execute_realtime+0x7c>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800621a:	f898 2009 	ldrb.w	r2, [r8, #9]
 800621e:	b14a      	cbz	r2, 8006234 <protocol_execute_realtime+0xec>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8006220:	079d      	lsls	r5, r3, #30
 8006222:	d407      	bmi.n	8006234 <protocol_execute_realtime+0xec>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8006224:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8006228:	0798      	lsls	r0, r3, #30
 800622a:	d51c      	bpl.n	8006266 <protocol_execute_realtime+0x11e>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800622c:	7923      	ldrb	r3, [r4, #4]
 800622e:	f043 0308 	orr.w	r3, r3, #8
 8006232:	7123      	strb	r3, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8006234:	f898 3008 	ldrb.w	r3, [r8, #8]
 8006238:	b15b      	cbz	r3, 8006252 <protocol_execute_realtime+0x10a>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800623a:	78a3      	ldrb	r3, [r4, #2]
 800623c:	0799      	lsls	r1, r3, #30
 800623e:	d408      	bmi.n	8006252 <protocol_execute_realtime+0x10a>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8006240:	f006 0040 	and.w	r0, r6, #64	; 0x40
 8006244:	f7fd fab6 	bl	80037b4 <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8006248:	2001      	movs	r0, #1
 800624a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800624e:	f7ff f887 	bl	8005360 <delay_sec>
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8006252:	78a3      	ldrb	r3, [r4, #2]
 8006254:	079a      	lsls	r2, r3, #30
 8006256:	d4b5      	bmi.n	80061c4 <protocol_execute_realtime+0x7c>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8006258:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 800625c:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 800625e:	70a3      	strb	r3, [r4, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8006260:	f002 f858 	bl	8008314 <system_set_exec_state_flag>
 8006264:	e7ae      	b.n	80061c4 <protocol_execute_realtime+0x7c>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8006266:	eeb0 0a48 	vmov.f32	s0, s16
 800626a:	f006 0030 	and.w	r0, r6, #48	; 0x30
 800626e:	f001 f965 	bl	800753c <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 8006272:	2001      	movs	r0, #1
 8006274:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8006278:	f7ff f872 	bl	8005360 <delay_sec>
 800627c:	e7da      	b.n	8006234 <protocol_execute_realtime+0xec>
        if (sys.spindle_stop_ovr) {
 800627e:	7ae3      	ldrb	r3, [r4, #11]
 8006280:	b35b      	cbz	r3, 80062da <protocol_execute_realtime+0x192>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 8006282:	079d      	lsls	r5, r3, #30
 8006284:	d509      	bpl.n	800629a <protocol_execute_realtime+0x152>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8006286:	f898 3009 	ldrb.w	r3, [r8, #9]
 800628a:	b1eb      	cbz	r3, 80062c8 <protocol_execute_realtime+0x180>
              spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 800628c:	eeb0 0a68 	vmov.f32	s0, s17
 8006290:	f001 f954 	bl	800753c <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 8006294:	2301      	movs	r3, #1
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 8006296:	72e3      	strb	r3, [r4, #11]
 8006298:	e794      	b.n	80061c4 <protocol_execute_realtime+0x7c>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 800629a:	f013 0f0c 	tst.w	r3, #12
 800629e:	d091      	beq.n	80061c4 <protocol_execute_realtime+0x7c>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80062a0:	f898 3009 	ldrb.w	r3, [r8, #9]
 80062a4:	b153      	cbz	r3, 80062bc <protocol_execute_realtime+0x174>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 80062a6:	200a      	movs	r0, #10
 80062a8:	f000 f944 	bl	8006534 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80062ac:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80062b0:	0799      	lsls	r1, r3, #30
 80062b2:	d50b      	bpl.n	80062cc <protocol_execute_realtime+0x184>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80062b4:	7923      	ldrb	r3, [r4, #4]
 80062b6:	f043 0308 	orr.w	r3, r3, #8
 80062ba:	7123      	strb	r3, [r4, #4]
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 80062bc:	7ae3      	ldrb	r3, [r4, #11]
 80062be:	071a      	lsls	r2, r3, #28
 80062c0:	d502      	bpl.n	80062c8 <protocol_execute_realtime+0x180>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 80062c2:	2002      	movs	r0, #2
 80062c4:	f002 f826 	bl	8008314 <system_set_exec_state_flag>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 80062c8:	2300      	movs	r3, #0
 80062ca:	e7e4      	b.n	8006296 <protocol_execute_realtime+0x14e>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80062cc:	eeb0 0a48 	vmov.f32	s0, s16
 80062d0:	f006 0030 	and.w	r0, r6, #48	; 0x30
 80062d4:	f001 f932 	bl	800753c <spindle_set_state>
 80062d8:	e7f0      	b.n	80062bc <protocol_execute_realtime+0x174>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 80062da:	7923      	ldrb	r3, [r4, #4]
 80062dc:	071b      	lsls	r3, r3, #28
 80062de:	f57f af71 	bpl.w	80061c4 <protocol_execute_realtime+0x7c>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80062e2:	eeb0 0a48 	vmov.f32	s0, s16
 80062e6:	f006 0030 	and.w	r0, r6, #48	; 0x30
 80062ea:	f001 f927 	bl	800753c <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80062ee:	7923      	ldrb	r3, [r4, #4]
 80062f0:	f023 0308 	bic.w	r3, r3, #8
 80062f4:	7123      	strb	r3, [r4, #4]
 80062f6:	e765      	b.n	80061c4 <protocol_execute_realtime+0x7c>
 80062f8:	20003948 	.word	0x20003948
 80062fc:	2000422c 	.word	0x2000422c
 8006300:	2000447c 	.word	0x2000447c
 8006304:	00000000 	.word	0x00000000

08006308 <protocol_main_loop>:
{
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 800630c:	4b43      	ldr	r3, [pc, #268]	; (800641c <protocol_main_loop+0x114>)
 800630e:	4e44      	ldr	r6, [pc, #272]	; (8006420 <protocol_main_loop+0x118>)
 8006310:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006314:	f013 0f08 	tst.w	r3, #8
 8006318:	d007      	beq.n	800632a <protocol_main_loop+0x22>
      if (limits_get_state()) {
 800631a:	f7fe fb83 	bl	8004a24 <limits_get_state>
 800631e:	b120      	cbz	r0, 800632a <protocol_main_loop+0x22>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8006320:	2301      	movs	r3, #1
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8006322:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8006324:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8006326:	f000 f905 	bl	8006534 <report_feedback_message>
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 800632a:	7833      	ldrb	r3, [r6, #0]
 800632c:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 8006330:	d014      	beq.n	800635c <protocol_main_loop+0x54>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 8006332:	2002      	movs	r0, #2
 8006334:	f000 f8fe 	bl	8006534 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 8006338:	2301      	movs	r3, #1
 800633a:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 800633c:	2400      	movs	r4, #0
        line[char_counter] = 0; // Set string termination character.
 800633e:	4f39      	ldr	r7, [pc, #228]	; (8006424 <protocol_main_loop+0x11c>)
        line_flags = 0;
 8006340:	4625      	mov	r5, r4
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8006342:	f000 fd0d 	bl	8006d60 <serial_read>
 8006346:	28ff      	cmp	r0, #255	; 0xff
 8006348:	d117      	bne.n	800637a <protocol_main_loop+0x72>
    protocol_auto_cycle_start();
 800634a:	f7ff fd3f 	bl	8005dcc <protocol_auto_cycle_start>
    protocol_execute_realtime();  // Runtime command check point.
 800634e:	f7ff fefb 	bl	8006148 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 8006352:	7873      	ldrb	r3, [r6, #1]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0f4      	beq.n	8006342 <protocol_main_loop+0x3a>
 8006358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sys.state = STATE_IDLE;
 800635c:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 800635e:	f001 ff77 	bl	8008250 <system_check_safety_door_ajar>
 8006362:	b130      	cbz	r0, 8006372 <protocol_main_loop+0x6a>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8006364:	4a30      	ldr	r2, [pc, #192]	; (8006428 <protocol_main_loop+0x120>)
 8006366:	7813      	ldrb	r3, [r2, #0]
 8006368:	f043 0320 	orr.w	r3, r3, #32
 800636c:	7013      	strb	r3, [r2, #0]
      protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 800636e:	f7ff feeb 	bl	8006148 <protocol_execute_realtime>
    system_execute_startup(line); // Execute startup script.
 8006372:	482c      	ldr	r0, [pc, #176]	; (8006424 <protocol_main_loop+0x11c>)
 8006374:	f001 ff72 	bl	800825c <system_execute_startup>
 8006378:	e7e0      	b.n	800633c <protocol_main_loop+0x34>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 800637a:	280a      	cmp	r0, #10
 800637c:	d001      	beq.n	8006382 <protocol_main_loop+0x7a>
 800637e:	280d      	cmp	r0, #13
 8006380:	d12a      	bne.n	80063d8 <protocol_main_loop+0xd0>
        protocol_execute_realtime(); // Runtime command check point.
 8006382:	f7ff fee1 	bl	8006148 <protocol_execute_realtime>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 8006386:	f896 8001 	ldrb.w	r8, [r6, #1]
 800638a:	f1b8 0f00 	cmp.w	r8, #0
 800638e:	d1e3      	bne.n	8006358 <protocol_main_loop+0x50>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 8006390:	f015 0501 	ands.w	r5, r5, #1
        line[char_counter] = 0; // Set string termination character.
 8006394:	f807 8004 	strb.w	r8, [r7, r4]
        if (line_flags & LINE_FLAG_OVERFLOW) {
 8006398:	d005      	beq.n	80063a6 <protocol_main_loop+0x9e>
          report_status_message(STATUS_OVERFLOW);
 800639a:	200b      	movs	r0, #11
 800639c:	f000 f8a2 	bl	80064e4 <report_status_message>
        char_counter = 0;
 80063a0:	4644      	mov	r4, r8
        line_flags = 0;
 80063a2:	4625      	mov	r5, r4
 80063a4:	e7cd      	b.n	8006342 <protocol_main_loop+0x3a>
        } else if (line[0] == 0) {
 80063a6:	783c      	ldrb	r4, [r7, #0]
 80063a8:	b91c      	cbnz	r4, 80063b2 <protocol_main_loop+0xaa>
          report_status_message(STATUS_OK);
 80063aa:	4620      	mov	r0, r4
 80063ac:	f000 f89a 	bl	80064e4 <report_status_message>
 80063b0:	e7f7      	b.n	80063a2 <protocol_main_loop+0x9a>
        } else if (line[0] == '$') {
 80063b2:	2c24      	cmp	r4, #36	; 0x24
 80063b4:	d106      	bne.n	80063c4 <protocol_main_loop+0xbc>
          report_status_message(system_execute_line(line));
 80063b6:	4638      	mov	r0, r7
 80063b8:	f001 ffb6 	bl	8008328 <system_execute_line>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 80063bc:	f000 f892 	bl	80064e4 <report_status_message>
        char_counter = 0;
 80063c0:	462c      	mov	r4, r5
 80063c2:	e7ee      	b.n	80063a2 <protocol_main_loop+0x9a>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 80063c4:	7833      	ldrb	r3, [r6, #0]
 80063c6:	f013 0421 	ands.w	r4, r3, #33	; 0x21
 80063ca:	d001      	beq.n	80063d0 <protocol_main_loop+0xc8>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 80063cc:	2009      	movs	r0, #9
 80063ce:	e7f5      	b.n	80063bc <protocol_main_loop+0xb4>
          report_status_message(gc_execute_line(line));
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7fd fae1 	bl	8003998 <gc_execute_line>
 80063d6:	e7e9      	b.n	80063ac <protocol_main_loop+0xa4>
        if (line_flags) {
 80063d8:	b135      	cbz	r5, 80063e8 <protocol_main_loop+0xe0>
          if (c == ')') {
 80063da:	2829      	cmp	r0, #41	; 0x29
 80063dc:	d1b1      	bne.n	8006342 <protocol_main_loop+0x3a>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 80063de:	07ab      	lsls	r3, r5, #30
 80063e0:	d5af      	bpl.n	8006342 <protocol_main_loop+0x3a>
 80063e2:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 80063e6:	e7ac      	b.n	8006342 <protocol_main_loop+0x3a>
          if (c <= ' ') {
 80063e8:	2820      	cmp	r0, #32
 80063ea:	d9aa      	bls.n	8006342 <protocol_main_loop+0x3a>
          } else if (c == '/') {
 80063ec:	282f      	cmp	r0, #47	; 0x2f
 80063ee:	d0a8      	beq.n	8006342 <protocol_main_loop+0x3a>
          } else if (c == '(') {
 80063f0:	2828      	cmp	r0, #40	; 0x28
 80063f2:	d00d      	beq.n	8006410 <protocol_main_loop+0x108>
          } else if (c == ';') {
 80063f4:	283b      	cmp	r0, #59	; 0x3b
 80063f6:	d00d      	beq.n	8006414 <protocol_main_loop+0x10c>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 80063f8:	2c4e      	cmp	r4, #78	; 0x4e
 80063fa:	d80d      	bhi.n	8006418 <protocol_main_loop+0x110>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 80063fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 8006404:	bf98      	it	ls
 8006406:	3820      	subls	r0, #32
 8006408:	1c63      	adds	r3, r4, #1
            line[char_counter++] = c;
 800640a:	5538      	strb	r0, [r7, r4]
 800640c:	b2dc      	uxtb	r4, r3
 800640e:	e798      	b.n	8006342 <protocol_main_loop+0x3a>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 8006410:	2502      	movs	r5, #2
 8006412:	e796      	b.n	8006342 <protocol_main_loop+0x3a>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 8006414:	2504      	movs	r5, #4
 8006416:	e794      	b.n	8006342 <protocol_main_loop+0x3a>
            line_flags |= LINE_FLAG_OVERFLOW;
 8006418:	2501      	movs	r5, #1
 800641a:	e792      	b.n	8006342 <protocol_main_loop+0x3a>
 800641c:	2000447c 	.word	0x2000447c
 8006420:	20003948 	.word	0x20003948
 8006424:	200032ec 	.word	0x200032ec
 8006428:	2000395d 	.word	0x2000395d

0800642c <protocol_buffer_synchronize>:
{
 800642c:	b510      	push	{r4, lr}
  protocol_auto_cycle_start();
 800642e:	f7ff fccd 	bl	8005dcc <protocol_auto_cycle_start>
    if (sys.abort) { return; } // Check for system abort
 8006432:	4c06      	ldr	r4, [pc, #24]	; (800644c <protocol_buffer_synchronize+0x20>)
    protocol_execute_realtime();   // Check and execute run-time commands
 8006434:	f7ff fe88 	bl	8006148 <protocol_execute_realtime>
    if (sys.abort) { return; } // Check for system abort
 8006438:	7863      	ldrb	r3, [r4, #1]
 800643a:	b933      	cbnz	r3, 800644a <protocol_buffer_synchronize+0x1e>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 800643c:	f7ff f90a 	bl	8005654 <plan_get_current_block>
 8006440:	2800      	cmp	r0, #0
 8006442:	d1f7      	bne.n	8006434 <protocol_buffer_synchronize+0x8>
 8006444:	7823      	ldrb	r3, [r4, #0]
 8006446:	2b08      	cmp	r3, #8
 8006448:	d0f4      	beq.n	8006434 <protocol_buffer_synchronize+0x8>
 800644a:	bd10      	pop	{r4, pc}
 800644c:	20003948 	.word	0x20003948

08006450 <report_util_line_feed>:

#include "grbl.h"

// Internal report utilities to reduce flash with repetitive tasks turned into functions.
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <report_util_line_feed+0x8>)
 8006452:	f7ff bb99 	b.w	8005b88 <printString>
 8006456:	bf00      	nop
 8006458:	0800ac33 	.word	0x0800ac33

0800645c <report_util_feedback_line_feed>:
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 800645c:	b508      	push	{r3, lr}
 800645e:	205d      	movs	r0, #93	; 0x5d
 8006460:	f000 fc7b 	bl	8006d5a <serial_write>
 8006464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006468:	f7ff bff2 	b.w	8006450 <report_util_line_feed>

0800646c <report_util_axis_values>:
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
// static void report_util_comment_line_feed() { serial_write(')'); report_util_line_feed(); }
static void report_util_axis_values(float *axis_value) {
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4605      	mov	r5, r0
 8006470:	2400      	movs	r4, #0
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
    printFloat_CoordValue(axis_value[idx]);
 8006472:	ecb5 0a01 	vldmia	r5!, {s0}
 8006476:	f7ff fc1f 	bl	8005cb8 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800647a:	2c05      	cmp	r4, #5
 800647c:	d002      	beq.n	8006484 <report_util_axis_values+0x18>
 800647e:	202c      	movs	r0, #44	; 0x2c
 8006480:	f000 fc6b 	bl	8006d5a <serial_write>
 8006484:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8006486:	2c06      	cmp	r4, #6
 8006488:	d1f3      	bne.n	8006472 <report_util_axis_values+0x6>
  }
}
 800648a:	bd38      	pop	{r3, r4, r5, pc}

0800648c <report_util_setting_prefix>:
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800648c:	b510      	push	{r4, lr}
 800648e:	4604      	mov	r4, r0
 8006490:	2024      	movs	r0, #36	; 0x24
 8006492:	f000 fc62 	bl	8006d5a <serial_write>
 8006496:	4620      	mov	r0, r4
 8006498:	f7ff fb7f 	bl	8005b9a <print_uint8_base10>
 800649c:	203d      	movs	r0, #61	; 0x3d
 800649e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a2:	f000 bc5a 	b.w	8006d5a <serial_write>

080064a6 <report_util_uint8_setting>:
  }
  report_util_comment_line_feed();
}
*/

static void report_util_uint8_setting(uint8_t n, int val) { 
 80064a6:	b510      	push	{r4, lr}
 80064a8:	460c      	mov	r4, r1
  report_util_setting_prefix(n); 
 80064aa:	f7ff ffef 	bl	800648c <report_util_setting_prefix>
  print_uint8_base10(val); 
 80064ae:	b2e0      	uxtb	r0, r4
 80064b0:	f7ff fb73 	bl	8005b9a <print_uint8_base10>
  report_util_line_feed(); // report_util_setting_string(n); 
}
 80064b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_line_feed(); // report_util_setting_string(n); 
 80064b8:	f7ff bfca 	b.w	8006450 <report_util_line_feed>

080064bc <report_util_float_setting>:
static void report_util_float_setting(uint8_t n, float val, uint8_t n_decimal) { 
 80064bc:	b510      	push	{r4, lr}
 80064be:	ed2d 8b02 	vpush	{d8}
 80064c2:	460c      	mov	r4, r1
 80064c4:	eeb0 8a40 	vmov.f32	s16, s0
  report_util_setting_prefix(n); 
 80064c8:	f7ff ffe0 	bl	800648c <report_util_setting_prefix>
  printFloat(val,n_decimal);
 80064cc:	4620      	mov	r0, r4
 80064ce:	eeb0 0a48 	vmov.f32	s0, s16
 80064d2:	f7ff fb8b 	bl	8005bec <printFloat>
  report_util_line_feed(); // report_util_setting_string(n);
}
 80064d6:	ecbd 8b02 	vpop	{d8}
 80064da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_line_feed(); // report_util_setting_string(n);
 80064de:	f7ff bfb7 	b.w	8006450 <report_util_line_feed>
	...

080064e4 <report_status_message>:
// 'error:'  to indicate some error event with the line or some critical system error during
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
 80064e4:	b510      	push	{r4, lr}
  switch(status_code) {
 80064e6:	4604      	mov	r4, r0
 80064e8:	b920      	cbnz	r0, 80064f4 <report_status_message+0x10>
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
 80064ea:	4807      	ldr	r0, [pc, #28]	; (8006508 <report_status_message+0x24>)
    default:
      printPgmString(PSTR("error:"));
      print_uint8_base10(status_code);
      report_util_line_feed();
  }
}
 80064ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      printPgmString(PSTR("ok\r\n")); break;
 80064f0:	f7ff bb4a 	b.w	8005b88 <printString>
      printPgmString(PSTR("error:"));
 80064f4:	4805      	ldr	r0, [pc, #20]	; (800650c <report_status_message+0x28>)
 80064f6:	f7ff fb47 	bl	8005b88 <printString>
      print_uint8_base10(status_code);
 80064fa:	4620      	mov	r0, r4
 80064fc:	f7ff fb4d 	bl	8005b9a <print_uint8_base10>
}
 8006500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      report_util_line_feed();
 8006504:	f7ff bfa4 	b.w	8006450 <report_util_line_feed>
 8006508:	0800acb0 	.word	0x0800acb0
 800650c:	0800acb5 	.word	0x0800acb5

08006510 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8006510:	b510      	push	{r4, lr}
 8006512:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 8006514:	4806      	ldr	r0, [pc, #24]	; (8006530 <report_alarm_message+0x20>)
 8006516:	f7ff fb37 	bl	8005b88 <printString>
  print_uint8_base10(alarm_code);
 800651a:	4620      	mov	r0, r4
 800651c:	f7ff fb3d 	bl	8005b9a <print_uint8_base10>
  report_util_line_feed();
 8006520:	f7ff ff96 	bl	8006450 <report_util_line_feed>
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 8006524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8006528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 800652c:	f7fe bf40 	b.w	80053b0 <delay_ms>
 8006530:	0800aaee 	.word	0x0800aaee

08006534 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 8006534:	b510      	push	{r4, lr}
 8006536:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 8006538:	4814      	ldr	r0, [pc, #80]	; (800658c <report_feedback_message+0x58>)
 800653a:	f7ff fb25 	bl	8005b88 <printString>
  switch(message_code) {
 800653e:	1e60      	subs	r0, r4, #1
 8006540:	280a      	cmp	r0, #10
 8006542:	d80a      	bhi.n	800655a <report_feedback_message+0x26>
 8006544:	e8df f000 	tbb	[pc, r0]
 8006548:	110f0d06 	.word	0x110f0d06
 800654c:	19171513 	.word	0x19171513
 8006550:	1d1b      	.short	0x1d1b
 8006552:	1f          	.byte	0x1f
 8006553:	00          	.byte	0x00
    case MESSAGE_CRITICAL_EVENT:
      printPgmString(PSTR("Reset to continue")); break;
 8006554:	480e      	ldr	r0, [pc, #56]	; (8006590 <report_feedback_message+0x5c>)
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 8006556:	f7ff fb17 	bl	8005b88 <printString>
  }
  report_util_feedback_line_feed();
}
 800655a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_feedback_line_feed();
 800655e:	f7ff bf7d 	b.w	800645c <report_util_feedback_line_feed>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 8006562:	480c      	ldr	r0, [pc, #48]	; (8006594 <report_feedback_message+0x60>)
 8006564:	e7f7      	b.n	8006556 <report_feedback_message+0x22>
      printPgmString(PSTR("Caution: Unlocked")); break;
 8006566:	480c      	ldr	r0, [pc, #48]	; (8006598 <report_feedback_message+0x64>)
 8006568:	e7f5      	b.n	8006556 <report_feedback_message+0x22>
      printPgmString(PSTR("Enabled")); break;
 800656a:	480c      	ldr	r0, [pc, #48]	; (800659c <report_feedback_message+0x68>)
 800656c:	e7f3      	b.n	8006556 <report_feedback_message+0x22>
      printPgmString(PSTR("Disabled")); break;
 800656e:	480c      	ldr	r0, [pc, #48]	; (80065a0 <report_feedback_message+0x6c>)
 8006570:	e7f1      	b.n	8006556 <report_feedback_message+0x22>
      printPgmString(PSTR("Check Door")); break;
 8006572:	480c      	ldr	r0, [pc, #48]	; (80065a4 <report_feedback_message+0x70>)
 8006574:	e7ef      	b.n	8006556 <report_feedback_message+0x22>
      printPgmString(PSTR("Check Limits")); break;
 8006576:	480c      	ldr	r0, [pc, #48]	; (80065a8 <report_feedback_message+0x74>)
 8006578:	e7ed      	b.n	8006556 <report_feedback_message+0x22>
      printPgmString(PSTR("Pgm End")); break;
 800657a:	480c      	ldr	r0, [pc, #48]	; (80065ac <report_feedback_message+0x78>)
 800657c:	e7eb      	b.n	8006556 <report_feedback_message+0x22>
      printPgmString(PSTR("Restoring defaults")); break;
 800657e:	480c      	ldr	r0, [pc, #48]	; (80065b0 <report_feedback_message+0x7c>)
 8006580:	e7e9      	b.n	8006556 <report_feedback_message+0x22>
      printPgmString(PSTR("Restoring spindle")); break;
 8006582:	480c      	ldr	r0, [pc, #48]	; (80065b4 <report_feedback_message+0x80>)
 8006584:	e7e7      	b.n	8006556 <report_feedback_message+0x22>
      printPgmString(PSTR("Sleeping")); break;
 8006586:	480c      	ldr	r0, [pc, #48]	; (80065b8 <report_feedback_message+0x84>)
 8006588:	e7e5      	b.n	8006556 <report_feedback_message+0x22>
 800658a:	bf00      	nop
 800658c:	0800ab14 	.word	0x0800ab14
 8006590:	0800ab1a 	.word	0x0800ab1a
 8006594:	0800ab2c 	.word	0x0800ab2c
 8006598:	0800ab40 	.word	0x0800ab40
 800659c:	0800ab52 	.word	0x0800ab52
 80065a0:	0800ab5a 	.word	0x0800ab5a
 80065a4:	0800ab63 	.word	0x0800ab63
 80065a8:	0800ab6e 	.word	0x0800ab6e
 80065ac:	0800ab7b 	.word	0x0800ab7b
 80065b0:	0800ab83 	.word	0x0800ab83
 80065b4:	0800ab96 	.word	0x0800ab96
 80065b8:	0800aba8 	.word	0x0800aba8

080065bc <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 80065bc:	4801      	ldr	r0, [pc, #4]	; (80065c4 <report_init_message+0x8>)
 80065be:	f7ff bae3 	b.w	8005b88 <printString>
 80065c2:	bf00      	nop
 80065c4:	0800ac14 	.word	0x0800ac14

080065c8 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 80065c8:	4801      	ldr	r0, [pc, #4]	; (80065d0 <report_grbl_help+0x8>)
 80065ca:	f7ff badd 	b.w	8005b88 <printString>
 80065ce:	bf00      	nop
 80065d0:	0800abca 	.word	0x0800abca

080065d4 <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 80065d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Print Grbl settings.
//  report_util_uint8_setting(0,settings.pulse_microseconds);
	report_util_float_setting(0,settings.fpulse_microseconds,N_DECIMAL_SETTINGVALUE);
 80065d8:	4c62      	ldr	r4, [pc, #392]	; (8006764 <report_grbl_settings+0x190>)
void report_grbl_settings() {
 80065da:	ed2d 8b02 	vpush	{d8}
	report_util_float_setting(0,settings.fpulse_microseconds,N_DECIMAL_SETTINGVALUE);
 80065de:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.eeacceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 80065e2:	ed9f 8a61 	vldr	s16, [pc, #388]	; 8006768 <report_grbl_settings+0x194>
	report_util_float_setting(0,settings.fpulse_microseconds,N_DECIMAL_SETTINGVALUE);
 80065e6:	2103      	movs	r1, #3
 80065e8:	2000      	movs	r0, #0
 80065ea:	f7ff ff67 	bl	80064bc <report_util_float_setting>
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 80065ee:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
 80065f2:	2001      	movs	r0, #1
 80065f4:	f7ff ff57 	bl	80064a6 <report_util_uint8_setting>
  report_util_uint8_setting(2,settings.step_invert_mask);
 80065f8:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 80065fc:	2002      	movs	r0, #2
 80065fe:	f7ff ff52 	bl	80064a6 <report_util_uint8_setting>
  report_util_uint8_setting(3,settings.dir_invert_mask);
 8006602:	f894 1065 	ldrb.w	r1, [r4, #101]	; 0x65
 8006606:	2003      	movs	r0, #3
 8006608:	f7ff ff4d 	bl	80064a6 <report_util_uint8_setting>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 800660c:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8006610:	2004      	movs	r0, #4
 8006612:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8006616:	f7ff ff46 	bl	80064a6 <report_util_uint8_setting>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 800661a:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800661e:	2005      	movs	r0, #5
 8006620:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8006624:	f7ff ff3f 	bl	80064a6 <report_util_uint8_setting>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8006628:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800662c:	2006      	movs	r0, #6
 800662e:	0fc9      	lsrs	r1, r1, #31
 8006630:	f7ff ff39 	bl	80064a6 <report_util_uint8_setting>
  report_util_uint8_setting(10,settings.status_report_mask);
 8006634:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
 8006638:	200a      	movs	r0, #10
 800663a:	f7ff ff34 	bl	80064a6 <report_util_uint8_setting>
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 800663e:	2103      	movs	r1, #3
 8006640:	ed94 0a1a 	vldr	s0, [r4, #104]	; 0x68
 8006644:	200b      	movs	r0, #11
 8006646:	f7ff ff39 	bl	80064bc <report_util_float_setting>
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 800664a:	ed94 0a1b 	vldr	s0, [r4, #108]	; 0x6c
 800664e:	2103      	movs	r1, #3
 8006650:	200c      	movs	r0, #12
 8006652:	f7ff ff33 	bl	80064bc <report_util_float_setting>
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 8006656:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800665a:	200d      	movs	r0, #13
 800665c:	f001 0101 	and.w	r1, r1, #1
 8006660:	f7ff ff21 	bl	80064a6 <report_util_uint8_setting>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8006664:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8006668:	2014      	movs	r0, #20
 800666a:	f3c1 1140 	ubfx	r1, r1, #5, #1
 800666e:	f7ff ff1a 	bl	80064a6 <report_util_uint8_setting>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006672:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8006676:	2015      	movs	r0, #21
 8006678:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800667c:	f7ff ff13 	bl	80064a6 <report_util_uint8_setting>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006680:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8006684:	2016      	movs	r0, #22
 8006686:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800668a:	f7ff ff0c 	bl	80064a6 <report_util_uint8_setting>
  report_util_uint8_setting(23,settings.homing_dir_mask);
 800668e:	f894 1079 	ldrb.w	r1, [r4, #121]	; 0x79
 8006692:	2017      	movs	r0, #23
 8006694:	f7ff ff07 	bl	80064a6 <report_util_uint8_setting>
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 8006698:	2103      	movs	r1, #3
 800669a:	ed94 0a1f 	vldr	s0, [r4, #124]	; 0x7c
 800669e:	2018      	movs	r0, #24
 80066a0:	f7ff ff0c 	bl	80064bc <report_util_float_setting>
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 80066a4:	ed94 0a20 	vldr	s0, [r4, #128]	; 0x80
 80066a8:	2103      	movs	r1, #3
 80066aa:	2019      	movs	r0, #25
 80066ac:	f7ff ff06 	bl	80064bc <report_util_float_setting>
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 80066b0:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 80066b4:	201a      	movs	r0, #26
 80066b6:	f7ff fef6 	bl	80064a6 <report_util_uint8_setting>
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 80066ba:	2103      	movs	r1, #3
 80066bc:	ed94 0a22 	vldr	s0, [r4, #136]	; 0x88
 80066c0:	201b      	movs	r0, #27
 80066c2:	f7ff fefb 	bl	80064bc <report_util_float_setting>
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 80066c6:	2100      	movs	r1, #0
 80066c8:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
 80066cc:	201e      	movs	r0, #30
 80066ce:	f7ff fef5 	bl	80064bc <report_util_float_setting>
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 80066d2:	ed94 0a1d 	vldr	s0, [r4, #116]	; 0x74
 80066d6:	2100      	movs	r1, #0
 80066d8:	201f      	movs	r0, #31
 80066da:	f7ff feef 	bl	80064bc <report_util_float_setting>
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 80066de:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80066e2:	2020      	movs	r0, #32
 80066e4:	f3c1 0140 	ubfx	r1, r1, #1, #1
 80066e8:	f7ff fedd 	bl	80064a6 <report_util_uint8_setting>
    report_util_float_setting(40,settings.analog_max,N_DECIMAL_SETTINGVALUE);
 80066ec:	2103      	movs	r1, #3
 80066ee:	ed94 0a23 	vldr	s0, [r4, #140]	; 0x8c
 80066f2:	2028      	movs	r0, #40	; 0x28
 80066f4:	f7ff fee2 	bl	80064bc <report_util_float_setting>
 80066f8:	f04f 0900 	mov.w	r9, #0
  uint8_t val = AXIS_SETTINGS_START_VAL;
 80066fc:	2564      	movs	r5, #100	; 0x64
 80066fe:	f105 0806 	add.w	r8, r5, #6
 8006702:	4e18      	ldr	r6, [pc, #96]	; (8006764 <report_grbl_settings+0x190>)
 8006704:	fa5f f789 	uxtb.w	r7, r9
 8006708:	fa5f f888 	uxtb.w	r8, r8
void report_grbl_settings() {
 800670c:	462c      	mov	r4, r5
      switch (set_idx) {
 800670e:	2f02      	cmp	r7, #2
 8006710:	d01b      	beq.n	800674a <report_grbl_settings+0x176>
 8006712:	2f03      	cmp	r7, #3
 8006714:	d01f      	beq.n	8006756 <report_grbl_settings+0x182>
 8006716:	2f01      	cmp	r7, #1
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006718:	bf14      	ite	ne
 800671a:	ed96 0a00 	vldrne	s0, [r6]
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 800671e:	ed96 0a06 	vldreq	s0, [r6, #24]
 8006722:	2103      	movs	r1, #3
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006724:	4620      	mov	r0, r4
 8006726:	3401      	adds	r4, #1
 8006728:	b2e4      	uxtb	r4, r4
 800672a:	f7ff fec7 	bl	80064bc <report_util_float_setting>
    for (idx=0; idx<N_AXIS; idx++) {
 800672e:	4544      	cmp	r4, r8
 8006730:	f106 0604 	add.w	r6, r6, #4
 8006734:	d1eb      	bne.n	800670e <report_grbl_settings+0x13a>
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
 8006736:	350a      	adds	r5, #10
 8006738:	b2ed      	uxtb	r5, r5
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 800673a:	2d8c      	cmp	r5, #140	; 0x8c
 800673c:	f109 0901 	add.w	r9, r9, #1
 8006740:	d1dd      	bne.n	80066fe <report_grbl_settings+0x12a>
  }
}
 8006742:	ecbd 8b02 	vpop	{d8}
 8006746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 2: report_util_float_setting(val+idx,settings.eeacceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 800674a:	ed96 0a0c 	vldr	s0, [r6, #48]	; 0x30
 800674e:	2103      	movs	r1, #3
 8006750:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8006754:	e7e6      	b.n	8006724 <report_grbl_settings+0x150>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006756:	ed96 0a12 	vldr	s0, [r6, #72]	; 0x48
 800675a:	4639      	mov	r1, r7
 800675c:	eeb1 0a40 	vneg.f32	s0, s0
 8006760:	e7e0      	b.n	8006724 <report_grbl_settings+0x150>
 8006762:	bf00      	nop
 8006764:	2000447c 	.word	0x2000447c
 8006768:	45610000 	.word	0x45610000

0800676c <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 800676c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 800676e:	480b      	ldr	r0, [pc, #44]	; (800679c <report_probe_parameters+0x30>)
 8006770:	f7ff fa0a 	bl	8005b88 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006774:	490a      	ldr	r1, [pc, #40]	; (80067a0 <report_probe_parameters+0x34>)
 8006776:	4668      	mov	r0, sp
 8006778:	f001 fda4 	bl	80082c4 <system_convert_array_steps_to_mpos>
  report_util_axis_values(print_position);
 800677c:	4668      	mov	r0, sp
 800677e:	f7ff fe75 	bl	800646c <report_util_axis_values>
  serial_write(':');
 8006782:	203a      	movs	r0, #58	; 0x3a
 8006784:	f000 fae9 	bl	8006d5a <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <report_probe_parameters+0x38>)
 800678a:	7958      	ldrb	r0, [r3, #5]
 800678c:	f7ff fa05 	bl	8005b9a <print_uint8_base10>
  report_util_feedback_line_feed();
 8006790:	f7ff fe64 	bl	800645c <report_util_feedback_line_feed>
}
 8006794:	b007      	add	sp, #28
 8006796:	f85d fb04 	ldr.w	pc, [sp], #4
 800679a:	bf00      	nop
 800679c:	0800ac4b 	.word	0x0800ac4b
 80067a0:	20003960 	.word	0x20003960
 80067a4:	20003948 	.word	0x20003948

080067a8 <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 80067a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 80067ac:	4e24      	ldr	r6, [pc, #144]	; (8006840 <report_ngc_parameters+0x98>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 80067ae:	4f25      	ldr	r7, [pc, #148]	; (8006844 <report_ngc_parameters+0x9c>)
      case 7: printPgmString(PSTR("30")); break;
 80067b0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800685c <report_ngc_parameters+0xb4>
{
 80067b4:	b086      	sub	sp, #24
 80067b6:	2500      	movs	r5, #0
 80067b8:	b2ec      	uxtb	r4, r5
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 80067ba:	4669      	mov	r1, sp
 80067bc:	4620      	mov	r0, r4
 80067be:	f000 fc59 	bl	8007074 <settings_read_coord_data>
 80067c2:	b950      	cbnz	r0, 80067da <report_ngc_parameters+0x32>
      printPgmString(PSTR("error:"));
 80067c4:	4820      	ldr	r0, [pc, #128]	; (8006848 <report_ngc_parameters+0xa0>)
 80067c6:	f7ff f9df 	bl	8005b88 <printString>
      print_uint8_base10(status_code);
 80067ca:	2007      	movs	r0, #7
 80067cc:	f7ff f9e5 	bl	8005b9a <print_uint8_base10>
      report_util_line_feed();
 80067d0:	f7ff fe3e 	bl	8006450 <report_util_line_feed>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
  printFloat_CoordValue(gc_state.tool_length_offset);
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 80067d4:	b006      	add	sp, #24
 80067d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printPgmString(PSTR("[G"));
 80067da:	4630      	mov	r0, r6
 80067dc:	f7ff f9d4 	bl	8005b88 <printString>
    switch (coord_select) {
 80067e0:	2c06      	cmp	r4, #6
 80067e2:	d007      	beq.n	80067f4 <report_ngc_parameters+0x4c>
 80067e4:	2c07      	cmp	r4, #7
 80067e6:	d028      	beq.n	800683a <report_ngc_parameters+0x92>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 80067e8:	f104 0036 	add.w	r0, r4, #54	; 0x36
 80067ec:	b2c0      	uxtb	r0, r0
 80067ee:	f7ff f9d4 	bl	8005b9a <print_uint8_base10>
 80067f2:	e002      	b.n	80067fa <report_ngc_parameters+0x52>
      case 6: printPgmString(PSTR("28")); break;
 80067f4:	4638      	mov	r0, r7
      case 7: printPgmString(PSTR("30")); break;
 80067f6:	f7ff f9c7 	bl	8005b88 <printString>
    serial_write(':');
 80067fa:	203a      	movs	r0, #58	; 0x3a
 80067fc:	f000 faad 	bl	8006d5a <serial_write>
 8006800:	3501      	adds	r5, #1
    report_util_axis_values(coord_data);
 8006802:	4668      	mov	r0, sp
 8006804:	f7ff fe32 	bl	800646c <report_util_axis_values>
    report_util_feedback_line_feed();
 8006808:	f7ff fe28 	bl	800645c <report_util_feedback_line_feed>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 800680c:	2d08      	cmp	r5, #8
 800680e:	d1d3      	bne.n	80067b8 <report_ngc_parameters+0x10>
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8006810:	480e      	ldr	r0, [pc, #56]	; (800684c <report_ngc_parameters+0xa4>)
 8006812:	f7ff f9b9 	bl	8005b88 <printString>
  report_util_axis_values(gc_state.coord_offset);
 8006816:	480e      	ldr	r0, [pc, #56]	; (8006850 <report_ngc_parameters+0xa8>)
 8006818:	f7ff fe28 	bl	800646c <report_util_axis_values>
  report_util_feedback_line_feed();
 800681c:	f7ff fe1e 	bl	800645c <report_util_feedback_line_feed>
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8006820:	480c      	ldr	r0, [pc, #48]	; (8006854 <report_ngc_parameters+0xac>)
 8006822:	f7ff f9b1 	bl	8005b88 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <report_ngc_parameters+0xb0>)
 8006828:	ed93 0a1a 	vldr	s0, [r3, #104]	; 0x68
 800682c:	f7ff fa44 	bl	8005cb8 <printFloat_CoordValue>
  report_util_feedback_line_feed();
 8006830:	f7ff fe14 	bl	800645c <report_util_feedback_line_feed>
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
 8006834:	f7ff ff9a 	bl	800676c <report_probe_parameters>
 8006838:	e7cc      	b.n	80067d4 <report_ngc_parameters+0x2c>
      case 7: printPgmString(PSTR("30")); break;
 800683a:	4640      	mov	r0, r8
 800683c:	e7db      	b.n	80067f6 <report_ngc_parameters+0x4e>
 800683e:	bf00      	nop
 8006840:	0800ac36 	.word	0x0800ac36
 8006844:	0800ac39 	.word	0x0800ac39
 8006848:	0800acb5 	.word	0x0800acb5
 800684c:	0800ac3f 	.word	0x0800ac3f
 8006850:	2000427c 	.word	0x2000427c
 8006854:	0800ac45 	.word	0x0800ac45
 8006858:	2000422c 	.word	0x2000422c
 800685c:	0800ac3c 	.word	0x0800ac3c

08006860 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8006860:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006862:	4c46      	ldr	r4, [pc, #280]	; (800697c <report_gcode_modes+0x11c>)
  printPgmString(PSTR("[GC:G"));
 8006864:	4846      	ldr	r0, [pc, #280]	; (8006980 <report_gcode_modes+0x120>)
 8006866:	f7ff f98f 	bl	8005b88 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 800686a:	7820      	ldrb	r0, [r4, #0]
 800686c:	288b      	cmp	r0, #139	; 0x8b
 800686e:	d905      	bls.n	800687c <report_gcode_modes+0x1c>
    printPgmString(PSTR("38."));
 8006870:	4844      	ldr	r0, [pc, #272]	; (8006984 <report_gcode_modes+0x124>)
 8006872:	f7ff f989 	bl	8005b88 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8006876:	7820      	ldrb	r0, [r4, #0]
 8006878:	3076      	adds	r0, #118	; 0x76
 800687a:	b2c0      	uxtb	r0, r0
  } else {
    print_uint8_base10(gc_state.modal.motion);
 800687c:	f7ff f98d 	bl	8005b9a <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006880:	4841      	ldr	r0, [pc, #260]	; (8006988 <report_gcode_modes+0x128>)
 8006882:	f7ff f981 	bl	8005b88 <printString>
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 8006886:	79a0      	ldrb	r0, [r4, #6]
 8006888:	3036      	adds	r0, #54	; 0x36
 800688a:	b2c0      	uxtb	r0, r0
 800688c:	f7ff f985 	bl	8005b9a <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006890:	483d      	ldr	r0, [pc, #244]	; (8006988 <report_gcode_modes+0x128>)
 8006892:	f7ff f979 	bl	8005b88 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 8006896:	7920      	ldrb	r0, [r4, #4]
 8006898:	3011      	adds	r0, #17
 800689a:	b2c0      	uxtb	r0, r0
 800689c:	f7ff f97d 	bl	8005b9a <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80068a0:	4839      	ldr	r0, [pc, #228]	; (8006988 <report_gcode_modes+0x128>)
 80068a2:	f7ff f971 	bl	8005b88 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 80068a6:	78a0      	ldrb	r0, [r4, #2]
 80068a8:	f1c0 0015 	rsb	r0, r0, #21
 80068ac:	b2c0      	uxtb	r0, r0
 80068ae:	f7ff f974 	bl	8005b9a <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80068b2:	4835      	ldr	r0, [pc, #212]	; (8006988 <report_gcode_modes+0x128>)
 80068b4:	f7ff f968 	bl	8005b88 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 80068b8:	78e0      	ldrb	r0, [r4, #3]
 80068ba:	305a      	adds	r0, #90	; 0x5a
 80068bc:	b2c0      	uxtb	r0, r0
 80068be:	f7ff f96c 	bl	8005b9a <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80068c2:	4831      	ldr	r0, [pc, #196]	; (8006988 <report_gcode_modes+0x128>)
 80068c4:	f7ff f960 	bl	8005b88 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 80068c8:	7860      	ldrb	r0, [r4, #1]
 80068ca:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 80068ce:	b2c0      	uxtb	r0, r0
 80068d0:	f7ff f963 	bl	8005b9a <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 80068d4:	79e3      	ldrb	r3, [r4, #7]
 80068d6:	b17b      	cbz	r3, 80068f8 <report_gcode_modes+0x98>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80068d8:	482c      	ldr	r0, [pc, #176]	; (800698c <report_gcode_modes+0x12c>)
 80068da:	f7ff f955 	bl	8005b88 <printString>
    report_util_gcode_modes_M();
    switch (gc_state.modal.program_flow) {
 80068de:	79e0      	ldrb	r0, [r4, #7]
 80068e0:	2803      	cmp	r0, #3
 80068e2:	d006      	beq.n	80068f2 <report_gcode_modes+0x92>
 80068e4:	281e      	cmp	r0, #30
 80068e6:	d001      	beq.n	80068ec <report_gcode_modes+0x8c>
 80068e8:	2802      	cmp	r0, #2
 80068ea:	d105      	bne.n	80068f8 <report_gcode_modes+0x98>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
      // case PROGRAM_FLOW_OPTIONAL_STOP : serial_write('1'); break; // M1 is ignored and not supported.
      case PROGRAM_FLOW_COMPLETED_M2 : 
      case PROGRAM_FLOW_COMPLETED_M30 : 
        print_uint8_base10(gc_state.modal.program_flow);
 80068ec:	f7ff f955 	bl	8005b9a <print_uint8_base10>
        break;
 80068f0:	e002      	b.n	80068f8 <report_gcode_modes+0x98>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 80068f2:	2030      	movs	r0, #48	; 0x30
 80068f4:	f000 fa31 	bl	8006d5a <serial_write>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80068f8:	4824      	ldr	r0, [pc, #144]	; (800698c <report_gcode_modes+0x12c>)
 80068fa:	f7ff f945 	bl	8005b88 <printString>
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 80068fe:	7a63      	ldrb	r3, [r4, #9]
 8006900:	2b10      	cmp	r3, #16
 8006902:	d004      	beq.n	800690e <report_gcode_modes+0xae>
 8006904:	2b20      	cmp	r3, #32
 8006906:	d031      	beq.n	800696c <report_gcode_modes+0x10c>
 8006908:	b923      	cbnz	r3, 8006914 <report_gcode_modes+0xb4>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
    case SPINDLE_DISABLE : serial_write('5'); break;
 800690a:	2035      	movs	r0, #53	; 0x35
 800690c:	e000      	b.n	8006910 <report_gcode_modes+0xb0>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 800690e:	2033      	movs	r0, #51	; 0x33
    case SPINDLE_DISABLE : serial_write('5'); break;
 8006910:	f000 fa23 	bl	8006d5a <serial_write>
  }

  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8006914:	7a23      	ldrb	r3, [r4, #8]
 8006916:	b35b      	cbz	r3, 8006970 <report_gcode_modes+0x110>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8006918:	061a      	lsls	r2, r3, #24
 800691a:	d505      	bpl.n	8006928 <report_gcode_modes+0xc8>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 800691c:	481b      	ldr	r0, [pc, #108]	; (800698c <report_gcode_modes+0x12c>)
 800691e:	f7ff f933 	bl	8005b88 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8006922:	2037      	movs	r0, #55	; 0x37
 8006924:	f000 fa19 	bl	8006d5a <serial_write>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8006928:	7a23      	ldrb	r3, [r4, #8]
 800692a:	065b      	lsls	r3, r3, #25
 800692c:	d505      	bpl.n	800693a <report_gcode_modes+0xda>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 800692e:	4817      	ldr	r0, [pc, #92]	; (800698c <report_gcode_modes+0x12c>)
 8006930:	f7ff f92a 	bl	8005b88 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8006934:	2038      	movs	r0, #56	; 0x38
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8006936:	f000 fa10 	bl	8006d5a <serial_write>
      report_util_gcode_modes_M();
      print_uint8_base10(56);
    }
  #endif
  
  printPgmString(PSTR(" T"));
 800693a:	4815      	ldr	r0, [pc, #84]	; (8006990 <report_gcode_modes+0x130>)
 800693c:	f7ff f924 	bl	8005b88 <printString>
  print_uint8_base10(gc_state.tool);
 8006940:	7e20      	ldrb	r0, [r4, #24]
 8006942:	f7ff f92a 	bl	8005b9a <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8006946:	4813      	ldr	r0, [pc, #76]	; (8006994 <report_gcode_modes+0x134>)
 8006948:	f7ff f91e 	bl	8005b88 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 800694c:	ed94 0a05 	vldr	s0, [r4, #20]
 8006950:	f7ff f9d6 	bl	8005d00 <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 8006954:	4810      	ldr	r0, [pc, #64]	; (8006998 <report_gcode_modes+0x138>)
 8006956:	f7ff f917 	bl	8005b88 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 800695a:	ed94 0a04 	vldr	s0, [r4, #16]
 800695e:	2000      	movs	r0, #0
 8006960:	f7ff f944 	bl	8005bec <printFloat>
  #endif

  report_util_feedback_line_feed();
}
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_feedback_line_feed();
 8006968:	f7ff bd78 	b.w	800645c <report_util_feedback_line_feed>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 800696c:	2034      	movs	r0, #52	; 0x34
 800696e:	e7cf      	b.n	8006910 <report_gcode_modes+0xb0>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006970:	4806      	ldr	r0, [pc, #24]	; (800698c <report_gcode_modes+0x12c>)
 8006972:	f7ff f909 	bl	8005b88 <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8006976:	2039      	movs	r0, #57	; 0x39
 8006978:	e7dd      	b.n	8006936 <report_gcode_modes+0xd6>
 800697a:	bf00      	nop
 800697c:	2000422c 	.word	0x2000422c
 8006980:	0800abb1 	.word	0x0800abb1
 8006984:	0800abb7 	.word	0x0800abb7
 8006988:	0800abbb 	.word	0x0800abbb
 800698c:	0800abbe 	.word	0x0800abbe
 8006990:	0800abc1 	.word	0x0800abc1
 8006994:	0800abc4 	.word	0x0800abc4
 8006998:	0800abc7 	.word	0x0800abc7

0800699c <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4605      	mov	r5, r0
  printPgmString(PSTR("$N"));
 80069a0:	4808      	ldr	r0, [pc, #32]	; (80069c4 <report_startup_line+0x28>)
{
 80069a2:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 80069a4:	f7ff f8f0 	bl	8005b88 <printString>
  print_uint8_base10(n);
 80069a8:	4628      	mov	r0, r5
 80069aa:	f7ff f8f6 	bl	8005b9a <print_uint8_base10>
  serial_write('=');
 80069ae:	203d      	movs	r0, #61	; 0x3d
 80069b0:	f000 f9d3 	bl	8006d5a <serial_write>
  printString(line);
 80069b4:	4620      	mov	r0, r4
 80069b6:	f7ff f8e7 	bl	8005b88 <printString>
  report_util_line_feed();
}
 80069ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  report_util_line_feed();
 80069be:	f7ff bd47 	b.w	8006450 <report_util_line_feed>
 80069c2:	bf00      	nop
 80069c4:	0800acad 	.word	0x0800acad

080069c8 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4605      	mov	r5, r0
  serial_write('>');
 80069cc:	203e      	movs	r0, #62	; 0x3e
{
 80069ce:	460c      	mov	r4, r1
  serial_write('>');
 80069d0:	f000 f9c3 	bl	8006d5a <serial_write>
  printString(line);
 80069d4:	4628      	mov	r0, r5
 80069d6:	f7ff f8d7 	bl	8005b88 <printString>
  serial_write(':');
 80069da:	203a      	movs	r0, #58	; 0x3a
 80069dc:	f000 f9bd 	bl	8006d5a <serial_write>
  report_status_message(status_code);
 80069e0:	4620      	mov	r0, r4
}
 80069e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  report_status_message(status_code);
 80069e6:	f7ff bd7d 	b.w	80064e4 <report_status_message>
	...

080069ec <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 80069ec:	b510      	push	{r4, lr}
 80069ee:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 80069f0:	4811      	ldr	r0, [pc, #68]	; (8006a38 <report_build_info+0x4c>)
 80069f2:	f7ff f8c9 	bl	8005b88 <printString>
  printString(line);
 80069f6:	4620      	mov	r0, r4
 80069f8:	f7ff f8c6 	bl	8005b88 <printString>
  report_util_feedback_line_feed();
 80069fc:	f7ff fd2e 	bl	800645c <report_util_feedback_line_feed>
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 8006a00:	480e      	ldr	r0, [pc, #56]	; (8006a3c <report_build_info+0x50>)
 8006a02:	f7ff f8c1 	bl	8005b88 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 8006a06:	2056      	movs	r0, #86	; 0x56
 8006a08:	f000 f9a7 	bl	8006d5a <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 8006a0c:	204d      	movs	r0, #77	; 0x4d
 8006a0e:	f000 f9a4 	bl	8006d5a <serial_write>
  #endif
  #ifdef HOMING_FORCE_SET_ORIGIN
    serial_write('Z');
  #endif
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    serial_write('H');
 8006a12:	2048      	movs	r0, #72	; 0x48
 8006a14:	f000 f9a1 	bl	8006d5a <serial_write>
  #ifndef HOMING_INIT_LOCK
    serial_write('L');
  #endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
  serial_write(',');
 8006a18:	202c      	movs	r0, #44	; 0x2c
 8006a1a:	f000 f99e 	bl	8006d5a <serial_write>
  print_uint8_base10(BLOCK_BUFFER_SIZE-1);
 8006a1e:	20c7      	movs	r0, #199	; 0xc7
 8006a20:	f7ff f8bb 	bl	8005b9a <print_uint8_base10>
  serial_write(',');
 8006a24:	202c      	movs	r0, #44	; 0x2c
 8006a26:	f000 f998 	bl	8006d5a <serial_write>
  print_uint8_base10(RX_BUFFER_SIZE);
 8006a2a:	20fe      	movs	r0, #254	; 0xfe
 8006a2c:	f7ff f8b5 	bl	8005b9a <print_uint8_base10>

  report_util_feedback_line_feed();
}
 8006a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  report_util_feedback_line_feed();
 8006a34:	f7ff bd12 	b.w	800645c <report_util_feedback_line_feed>
 8006a38:	0800aaf5 	.word	0x0800aaf5
 8006a3c:	0800ab0e 	.word	0x0800ab0e

08006a40 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8006a40:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position,sys_position,sizeof(sys_position));
 8006a42:	4da7      	ldr	r5, [pc, #668]	; (8006ce0 <report_realtime_status+0x2a0>)
 8006a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 8006a46:	b093      	sub	sp, #76	; 0x4c
  memcpy(current_position,sys_position,sizeof(sys_position));
 8006a48:	466c      	mov	r4, sp
 8006a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006a50:	e884 0003 	stmia.w	r4, {r0, r1}
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,current_position);
 8006a54:	4669      	mov	r1, sp
 8006a56:	a806      	add	r0, sp, #24

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8006a58:	4ca2      	ldr	r4, [pc, #648]	; (8006ce4 <report_realtime_status+0x2a4>)
  system_convert_array_steps_to_mpos(print_position,current_position);
 8006a5a:	f001 fc33 	bl	80082c4 <system_convert_array_steps_to_mpos>
  serial_write('<');
 8006a5e:	203c      	movs	r0, #60	; 0x3c
 8006a60:	f000 f97b 	bl	8006d5a <serial_write>
  switch (sys.state) {
 8006a64:	7823      	ldrb	r3, [r4, #0]
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d053      	beq.n	8006b12 <report_realtime_status+0xd2>
 8006a6a:	d835      	bhi.n	8006ad8 <report_realtime_status+0x98>
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d056      	beq.n	8006b1e <report_realtime_status+0xde>
 8006a70:	d34b      	bcc.n	8006b0a <report_realtime_status+0xca>
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d055      	beq.n	8006b22 <report_realtime_status+0xe2>
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d04f      	beq.n	8006b1a <report_realtime_status+0xda>
      break;
    case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006a7a:	4e9b      	ldr	r6, [pc, #620]	; (8006ce8 <report_realtime_status+0x2a8>)
 8006a7c:	f896 2067 	ldrb.w	r2, [r6, #103]	; 0x67
 8006a80:	f012 0201 	ands.w	r2, r2, #1
 8006a84:	d15f      	bne.n	8006b46 <report_realtime_status+0x106>
      (sys.report_wco_counter == 0) ) {
    for (idx=0; idx< N_AXIS; idx++) {
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006a86:	4b99      	ldr	r3, [pc, #612]	; (8006cec <report_realtime_status+0x2ac>)
 8006a88:	ad0c      	add	r5, sp, #48	; 0x30
 8006a8a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8006a8e:	a806      	add	r0, sp, #24
 8006a90:	3338      	adds	r3, #56	; 0x38
 8006a92:	2100      	movs	r1, #0
      wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
 8006a94:	ecf3 7a01 	vldmia	r3!, {s15}
 8006a98:	edd3 6a05 	vldr	s13, [r3, #20]
 8006a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006aa0:	2902      	cmp	r1, #2
      wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
 8006aa2:	edc5 7a00 	vstr	s15, [r5]
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006aa6:	bf04      	itt	eq
 8006aa8:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8006aac:	edcd 7a0e 	vstreq	s15, [sp, #56]	; 0x38
      if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE)) {
 8006ab0:	b93a      	cbnz	r2, 8006ac2 <report_realtime_status+0x82>
        print_position[idx] -= wco[idx];
 8006ab2:	edd0 7a00 	vldr	s15, [r0]
 8006ab6:	edd5 6a00 	vldr	s13, [r5]
 8006aba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006abe:	edc0 7a00 	vstr	s15, [r0]
 8006ac2:	3101      	adds	r1, #1
    for (idx=0; idx< N_AXIS; idx++) {
 8006ac4:	2906      	cmp	r1, #6
 8006ac6:	f105 0504 	add.w	r5, r5, #4
 8006aca:	f100 0004 	add.w	r0, r0, #4
 8006ace:	d1e1      	bne.n	8006a94 <report_realtime_status+0x54>
      }
    }
  }

  // Report machine position
  if (bit_istrue(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE)) {
 8006ad0:	2a00      	cmp	r2, #0
 8006ad2:	d13b      	bne.n	8006b4c <report_realtime_status+0x10c>
    printPgmString(PSTR("|MPos:"));
  } else {
    printPgmString(PSTR("|WPos:"));
 8006ad4:	4886      	ldr	r0, [pc, #536]	; (8006cf0 <report_realtime_status+0x2b0>)
 8006ad6:	e03a      	b.n	8006b4e <report_realtime_status+0x10e>
  switch (sys.state) {
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d01c      	beq.n	8006b16 <report_realtime_status+0xd6>
 8006adc:	d80f      	bhi.n	8006afe <report_realtime_status+0xbe>
 8006ade:	2b10      	cmp	r3, #16
 8006ae0:	d1cb      	bne.n	8006a7a <report_realtime_status+0x3a>
      if (!(sys.suspend & SUSPEND_JOG_CANCEL))
 8006ae2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dbc7      	blt.n	8006a7a <report_realtime_status+0x3a>
        printPgmString(PSTR("Hold:"));
 8006aea:	4882      	ldr	r0, [pc, #520]	; (8006cf4 <report_realtime_status+0x2b4>)
 8006aec:	f7ff f84c 	bl	8005b88 <printString>
        if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 8006af0:	78a3      	ldrb	r3, [r4, #2]
 8006af2:	07de      	lsls	r6, r3, #31
 8006af4:	d523      	bpl.n	8006b3e <report_realtime_status+0xfe>
 8006af6:	2030      	movs	r0, #48	; 0x30
          serial_write('2'); // Retracting
 8006af8:	f000 f92f 	bl	8006d5a <serial_write>
 8006afc:	e7bd      	b.n	8006a7a <report_realtime_status+0x3a>
  switch (sys.state) {
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d011      	beq.n	8006b26 <report_realtime_status+0xe6>
 8006b02:	2b80      	cmp	r3, #128	; 0x80
 8006b04:	d1b9      	bne.n	8006a7a <report_realtime_status+0x3a>
    case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8006b06:	487c      	ldr	r0, [pc, #496]	; (8006cf8 <report_realtime_status+0x2b8>)
 8006b08:	e000      	b.n	8006b0c <report_realtime_status+0xcc>
    case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 8006b0a:	487c      	ldr	r0, [pc, #496]	; (8006cfc <report_realtime_status+0x2bc>)
    case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8006b0c:	f7ff f83c 	bl	8005b88 <printString>
 8006b10:	e7b3      	b.n	8006a7a <report_realtime_status+0x3a>
    case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 8006b12:	487b      	ldr	r0, [pc, #492]	; (8006d00 <report_realtime_status+0x2c0>)
 8006b14:	e7fa      	b.n	8006b0c <report_realtime_status+0xcc>
    case STATE_JOG: printPgmString(PSTR("Jog")); break;
 8006b16:	487b      	ldr	r0, [pc, #492]	; (8006d04 <report_realtime_status+0x2c4>)
 8006b18:	e7f8      	b.n	8006b0c <report_realtime_status+0xcc>
    case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8006b1a:	487b      	ldr	r0, [pc, #492]	; (8006d08 <report_realtime_status+0x2c8>)
 8006b1c:	e7f6      	b.n	8006b0c <report_realtime_status+0xcc>
    case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 8006b1e:	487b      	ldr	r0, [pc, #492]	; (8006d0c <report_realtime_status+0x2cc>)
 8006b20:	e7f4      	b.n	8006b0c <report_realtime_status+0xcc>
    case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 8006b22:	487b      	ldr	r0, [pc, #492]	; (8006d10 <report_realtime_status+0x2d0>)
 8006b24:	e7f2      	b.n	8006b0c <report_realtime_status+0xcc>
      printPgmString(PSTR("Door:"));
 8006b26:	487b      	ldr	r0, [pc, #492]	; (8006d14 <report_realtime_status+0x2d4>)
 8006b28:	f7ff f82e 	bl	8005b88 <printString>
      if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8006b2c:	78a3      	ldrb	r3, [r4, #2]
 8006b2e:	071d      	lsls	r5, r3, #28
 8006b30:	d501      	bpl.n	8006b36 <report_realtime_status+0xf6>
        serial_write('3'); // Restoring
 8006b32:	2033      	movs	r0, #51	; 0x33
 8006b34:	e7e0      	b.n	8006af8 <report_realtime_status+0xb8>
        if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8006b36:	0758      	lsls	r0, r3, #29
 8006b38:	d503      	bpl.n	8006b42 <report_realtime_status+0x102>
          if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 8006b3a:	0699      	lsls	r1, r3, #26
 8006b3c:	d5db      	bpl.n	8006af6 <report_realtime_status+0xb6>
        else { serial_write('1'); } // Actively holding
 8006b3e:	2031      	movs	r0, #49	; 0x31
 8006b40:	e7da      	b.n	8006af8 <report_realtime_status+0xb8>
          serial_write('2'); // Retracting
 8006b42:	2032      	movs	r0, #50	; 0x32
 8006b44:	e7d8      	b.n	8006af8 <report_realtime_status+0xb8>
  if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006b46:	7b63      	ldrb	r3, [r4, #13]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d09c      	beq.n	8006a86 <report_realtime_status+0x46>
    printPgmString(PSTR("|MPos:"));
 8006b4c:	4872      	ldr	r0, [pc, #456]	; (8006d18 <report_realtime_status+0x2d8>)
    printPgmString(PSTR("|WPos:"));
 8006b4e:	f7ff f81b 	bl	8005b88 <printString>
  }
  report_util_axis_values(print_position);
 8006b52:	a806      	add	r0, sp, #24
 8006b54:	f7ff fc8a 	bl	800646c <report_util_axis_values>

  // Returns planner and serial read buffer states.
  #ifdef REPORT_FIELD_BUFFER_STATE
    if (bit_istrue(settings.status_report_mask,BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8006b58:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
 8006b5c:	079a      	lsls	r2, r3, #30
 8006b5e:	d50d      	bpl.n	8006b7c <report_realtime_status+0x13c>
      printPgmString(PSTR("|Bf:"));
 8006b60:	486e      	ldr	r0, [pc, #440]	; (8006d1c <report_realtime_status+0x2dc>)
 8006b62:	f7ff f811 	bl	8005b88 <printString>
      print_uint8_base10(plan_get_block_buffer_available());
 8006b66:	f7fe ffed 	bl	8005b44 <plan_get_block_buffer_available>
 8006b6a:	f7ff f816 	bl	8005b9a <print_uint8_base10>
      serial_write(',');
 8006b6e:	202c      	movs	r0, #44	; 0x2c
 8006b70:	f000 f8f3 	bl	8006d5a <serial_write>
      print_uint8_base10(serial_get_rx_buffer_available());
 8006b74:	f000 f8de 	bl	8006d34 <serial_get_rx_buffer_available>
 8006b78:	f7ff f80f 	bl	8005b9a <print_uint8_base10>
  #endif

  // Report realtime feed speed
  #ifdef REPORT_FIELD_CURRENT_FEED_SPEED
    #ifdef VARIABLE_SPINDLE
      printPgmString(PSTR("|FS:"));
 8006b7c:	4868      	ldr	r0, [pc, #416]	; (8006d20 <report_realtime_status+0x2e0>)
 8006b7e:	f7ff f803 	bl	8005b88 <printString>
      printFloat_RateValue(st_get_realtime_rate());
 8006b82:	f001 fb0d 	bl	80081a0 <st_get_realtime_rate>
 8006b86:	f7ff f8bb 	bl	8005d00 <printFloat_RateValue>
      serial_write(',');
 8006b8a:	202c      	movs	r0, #44	; 0x2c
 8006b8c:	f000 f8e5 	bl	8006d5a <serial_write>
      printFloat(sys.spindle_speed,N_DECIMAL_RPMVALUE);
 8006b90:	ed94 0a04 	vldr	s0, [r4, #16]
 8006b94:	2000      	movs	r0, #0
 8006b96:	f7ff f829 	bl	8005bec <printFloat>
      printFloat_RateValue(st_get_realtime_rate());
    #endif      
  #endif

  #ifdef REPORT_FIELD_PIN_STATE
    uint8_t lim_pin_state = limits_get_state();
 8006b9a:	f7fd ff43 	bl	8004a24 <limits_get_state>
 8006b9e:	4605      	mov	r5, r0
    uint8_t ctrl_pin_state = system_control_get_state();
 8006ba0:	f001 fb12 	bl	80081c8 <system_control_get_state>
 8006ba4:	4606      	mov	r6, r0
    uint8_t prb_pin_state = probe_get_state();
 8006ba6:	f7ff f8e5 	bl	8005d74 <probe_get_state>
    if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8006baa:	ea45 0306 	orr.w	r3, r5, r6
 8006bae:	4303      	orrs	r3, r0
 8006bb0:	f013 0fff 	tst.w	r3, #255	; 0xff
    uint8_t prb_pin_state = probe_get_state();
 8006bb4:	4607      	mov	r7, r0
    if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8006bb6:	d03a      	beq.n	8006c2e <report_realtime_status+0x1ee>
      printPgmString(PSTR("|Pn:"));
 8006bb8:	485a      	ldr	r0, [pc, #360]	; (8006d24 <report_realtime_status+0x2e4>)
 8006bba:	f7fe ffe5 	bl	8005b88 <printString>
      if (prb_pin_state) { serial_write('P'); }
 8006bbe:	b117      	cbz	r7, 8006bc6 <report_realtime_status+0x186>
 8006bc0:	2050      	movs	r0, #80	; 0x50
 8006bc2:	f000 f8ca 	bl	8006d5a <serial_write>
      if (lim_pin_state) {
 8006bc6:	b1ed      	cbz	r5, 8006c04 <report_realtime_status+0x1c4>
        if (bit_istrue(lim_pin_state,bit(X_AXIS))) { serial_write('X'); }
 8006bc8:	07eb      	lsls	r3, r5, #31
 8006bca:	d502      	bpl.n	8006bd2 <report_realtime_status+0x192>
 8006bcc:	2058      	movs	r0, #88	; 0x58
 8006bce:	f000 f8c4 	bl	8006d5a <serial_write>
        if (bit_istrue(lim_pin_state,bit(Y_AXIS))) { serial_write('Y'); }
 8006bd2:	07af      	lsls	r7, r5, #30
 8006bd4:	d502      	bpl.n	8006bdc <report_realtime_status+0x19c>
 8006bd6:	2059      	movs	r0, #89	; 0x59
 8006bd8:	f000 f8bf 	bl	8006d5a <serial_write>
        if (bit_istrue(lim_pin_state,bit(Z_AXIS))) { serial_write('Z'); }
 8006bdc:	0768      	lsls	r0, r5, #29
 8006bde:	d502      	bpl.n	8006be6 <report_realtime_status+0x1a6>
 8006be0:	205a      	movs	r0, #90	; 0x5a
 8006be2:	f000 f8ba 	bl	8006d5a <serial_write>
        #if ( defined(STM32F1_5) || defined(STM32F4_5) )
          if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
          if (bit_istrue(lim_pin_state, bit(B_AXIS))) { serial_write('B'); }
        #endif
        #if ( defined(STM32F1_6) || defined(STM32F4_6) )
          if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 8006be6:	0729      	lsls	r1, r5, #28
 8006be8:	d502      	bpl.n	8006bf0 <report_realtime_status+0x1b0>
 8006bea:	2041      	movs	r0, #65	; 0x41
 8006bec:	f000 f8b5 	bl	8006d5a <serial_write>
          if (bit_istrue(lim_pin_state, bit(B_AXIS))) { serial_write('B'); }
 8006bf0:	06ea      	lsls	r2, r5, #27
 8006bf2:	d502      	bpl.n	8006bfa <report_realtime_status+0x1ba>
 8006bf4:	2042      	movs	r0, #66	; 0x42
 8006bf6:	f000 f8b0 	bl	8006d5a <serial_write>
          if (bit_istrue(lim_pin_state, bit(C_AXIS))) { serial_write('C'); }
 8006bfa:	06ab      	lsls	r3, r5, #26
 8006bfc:	d502      	bpl.n	8006c04 <report_realtime_status+0x1c4>
 8006bfe:	2043      	movs	r0, #67	; 0x43
 8006c00:	f000 f8ab 	bl	8006d5a <serial_write>
        #endif
      }
      if (ctrl_pin_state) {
 8006c04:	b19e      	cbz	r6, 8006c2e <report_realtime_status+0x1ee>
        #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
          if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_SAFETY_DOOR)) { serial_write('D'); }
 8006c06:	07f7      	lsls	r7, r6, #31
 8006c08:	d502      	bpl.n	8006c10 <report_realtime_status+0x1d0>
 8006c0a:	2044      	movs	r0, #68	; 0x44
 8006c0c:	f000 f8a5 	bl	8006d5a <serial_write>
        #endif
        if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8006c10:	07b5      	lsls	r5, r6, #30
 8006c12:	d502      	bpl.n	8006c1a <report_realtime_status+0x1da>
 8006c14:	2052      	movs	r0, #82	; 0x52
 8006c16:	f000 f8a0 	bl	8006d5a <serial_write>
        if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8006c1a:	0770      	lsls	r0, r6, #29
 8006c1c:	d502      	bpl.n	8006c24 <report_realtime_status+0x1e4>
 8006c1e:	2048      	movs	r0, #72	; 0x48
 8006c20:	f000 f89b 	bl	8006d5a <serial_write>
        if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 8006c24:	0731      	lsls	r1, r6, #28
 8006c26:	d502      	bpl.n	8006c2e <report_realtime_status+0x1ee>
 8006c28:	2053      	movs	r0, #83	; 0x53
 8006c2a:	f000 f896 	bl	8006d5a <serial_write>
      }
    }
  #endif

  #ifdef REPORT_FIELD_WORK_COORD_OFFSET
    if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 8006c2e:	7b63      	ldrb	r3, [r4, #13]
 8006c30:	b163      	cbz	r3, 8006c4c <report_realtime_status+0x20c>
 8006c32:	3b01      	subs	r3, #1
 8006c34:	7363      	strb	r3, [r4, #13]
      report_util_axis_values(wco);
    }
  #endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 8006c36:	7b23      	ldrb	r3, [r4, #12]
 8006c38:	b1d3      	cbz	r3, 8006c70 <report_realtime_status+0x230>
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	7323      	strb	r3, [r4, #12]
        #endif
      }  
    }
  #endif

  serial_write('>');
 8006c3e:	203e      	movs	r0, #62	; 0x3e
 8006c40:	f000 f88b 	bl	8006d5a <serial_write>
  report_util_line_feed();
 8006c44:	f7ff fc04 	bl	8006450 <report_util_line_feed>
}
 8006c48:	b013      	add	sp, #76	; 0x4c
 8006c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8006c4c:	7823      	ldrb	r3, [r4, #0]
 8006c4e:	f013 0f7c 	tst.w	r3, #124	; 0x7c
        sys.report_wco_counter = (REPORT_WCO_REFRESH_BUSY_COUNT-1); // Reset counter for slow refresh
 8006c52:	bf14      	ite	ne
 8006c54:	231d      	movne	r3, #29
      } else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT-1); }
 8006c56:	2309      	moveq	r3, #9
 8006c58:	7363      	strb	r3, [r4, #13]
      if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8006c5a:	7b23      	ldrb	r3, [r4, #12]
 8006c5c:	b90b      	cbnz	r3, 8006c62 <report_realtime_status+0x222>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|WCO:"));
 8006c62:	4831      	ldr	r0, [pc, #196]	; (8006d28 <report_realtime_status+0x2e8>)
 8006c64:	f7fe ff90 	bl	8005b88 <printString>
      report_util_axis_values(wco);
 8006c68:	a80c      	add	r0, sp, #48	; 0x30
 8006c6a:	f7ff fbff 	bl	800646c <report_util_axis_values>
 8006c6e:	e7e2      	b.n	8006c36 <report_realtime_status+0x1f6>
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8006c70:	7823      	ldrb	r3, [r4, #0]
      printPgmString(PSTR("|Ov:"));
 8006c72:	482e      	ldr	r0, [pc, #184]	; (8006d2c <report_realtime_status+0x2ec>)
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8006c74:	f013 0f7c 	tst.w	r3, #124	; 0x7c
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT-1); // Reset counter for slow refresh
 8006c78:	bf14      	ite	ne
 8006c7a:	2313      	movne	r3, #19
      } else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT-1); }
 8006c7c:	2309      	moveq	r3, #9
 8006c7e:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|Ov:"));
 8006c80:	f7fe ff82 	bl	8005b88 <printString>
      print_uint8_base10(sys.f_override);
 8006c84:	7a20      	ldrb	r0, [r4, #8]
 8006c86:	f7fe ff88 	bl	8005b9a <print_uint8_base10>
      serial_write(',');
 8006c8a:	202c      	movs	r0, #44	; 0x2c
 8006c8c:	f000 f865 	bl	8006d5a <serial_write>
      print_uint8_base10(sys.r_override);
 8006c90:	7a60      	ldrb	r0, [r4, #9]
 8006c92:	f7fe ff82 	bl	8005b9a <print_uint8_base10>
      serial_write(',');
 8006c96:	202c      	movs	r0, #44	; 0x2c
 8006c98:	f000 f85f 	bl	8006d5a <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 8006c9c:	7aa0      	ldrb	r0, [r4, #10]
 8006c9e:	f7fe ff7c 	bl	8005b9a <print_uint8_base10>
      uint8_t sp_state = spindle_get_state();
 8006ca2:	f000 fb9b 	bl	80073dc <spindle_get_state>
 8006ca6:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 8006ca8:	f7fc fd68 	bl	800377c <coolant_get_state>
 8006cac:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 8006cae:	b90d      	cbnz	r5, 8006cb4 <report_realtime_status+0x274>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d0c4      	beq.n	8006c3e <report_realtime_status+0x1fe>
        printPgmString(PSTR("|A:"));
 8006cb4:	481e      	ldr	r0, [pc, #120]	; (8006d30 <report_realtime_status+0x2f0>)
 8006cb6:	f7fe ff67 	bl	8005b88 <printString>
        if (sp_state) { // != SPINDLE_STATE_DISABLE
 8006cba:	b12d      	cbz	r5, 8006cc8 <report_realtime_status+0x288>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8006cbc:	2d01      	cmp	r5, #1
 8006cbe:	bf0c      	ite	eq
 8006cc0:	2053      	moveq	r0, #83	; 0x53
              else { serial_write('C'); } // CCW
 8006cc2:	2043      	movne	r0, #67	; 0x43
 8006cc4:	f000 f849 	bl	8006d5a <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8006cc8:	07e2      	lsls	r2, r4, #31
 8006cca:	d502      	bpl.n	8006cd2 <report_realtime_status+0x292>
 8006ccc:	2046      	movs	r0, #70	; 0x46
 8006cce:	f000 f844 	bl	8006d5a <serial_write>
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 8006cd2:	07a3      	lsls	r3, r4, #30
 8006cd4:	d5b3      	bpl.n	8006c3e <report_realtime_status+0x1fe>
 8006cd6:	204d      	movs	r0, #77	; 0x4d
 8006cd8:	f000 f83f 	bl	8006d5a <serial_write>
 8006cdc:	e7af      	b.n	8006c3e <report_realtime_status+0x1fe>
 8006cde:	bf00      	nop
 8006ce0:	20003978 	.word	0x20003978
 8006ce4:	20003948 	.word	0x20003948
 8006ce8:	2000447c 	.word	0x2000447c
 8006cec:	2000422c 	.word	0x2000422c
 8006cf0:	0800ac88 	.word	0x0800ac88
 8006cf4:	0800ac5a 	.word	0x0800ac5a
 8006cf8:	0800ac7b 	.word	0x0800ac7b
 8006cfc:	0800ac51 	.word	0x0800ac51
 8006d00:	0800ac56 	.word	0x0800ac56
 8006d04:	0800ac60 	.word	0x0800ac60
 8006d08:	0800ac64 	.word	0x0800ac64
 8006d0c:	0800ac69 	.word	0x0800ac69
 8006d10:	0800ac6f 	.word	0x0800ac6f
 8006d14:	0800ac75 	.word	0x0800ac75
 8006d18:	0800ac81 	.word	0x0800ac81
 8006d1c:	0800ac8f 	.word	0x0800ac8f
 8006d20:	0800ac94 	.word	0x0800ac94
 8006d24:	0800ac99 	.word	0x0800ac99
 8006d28:	0800ac9e 	.word	0x0800ac9e
 8006d2c:	0800aca4 	.word	0x0800aca4
 8006d30:	0800aca9 	.word	0x0800aca9

08006d34 <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8006d34:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8006d36:	4a07      	ldr	r2, [pc, #28]	; (8006d54 <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8006d38:	781b      	ldrb	r3, [r3, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8006d3a:	7812      	ldrb	r2, [r2, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8006d3c:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	bf94      	ite	ls
 8006d42:	1e98      	subls	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 8006d44:	f103 30ff 	addhi.w	r0, r3, #4294967295
 8006d48:	1a80      	subs	r0, r0, r2
 8006d4a:	b2c0      	uxtb	r0, r0
}
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	2000333d 	.word	0x2000333d
 8006d54:	2000333c 	.word	0x2000333c

08006d58 <serial_init>:
  if (serial_tx_buffer_head >= ttail) { return(serial_tx_buffer_head-ttail); }
  return (TX_RING_BUFFER - (ttail-serial_tx_buffer_head));
}

void serial_init()
{
 8006d58:	4770      	bx	lr

08006d5a <serial_write>:

// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data)
{
#ifdef STM32
	uart_sendch(data);
 8006d5a:	f001 be07 	b.w	800896c <uart_sendch>
	...

08006d60 <serial_read>:
#endif

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8006d60:	4a08      	ldr	r2, [pc, #32]	; (8006d84 <serial_read+0x24>)
  if (serial_rx_buffer_head == tail) {
 8006d62:	4909      	ldr	r1, [pc, #36]	; (8006d88 <serial_read+0x28>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8006d64:	7813      	ldrb	r3, [r2, #0]
  if (serial_rx_buffer_head == tail) {
 8006d66:	7809      	ldrb	r1, [r1, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8006d68:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head == tail) {
 8006d6a:	4299      	cmp	r1, r3
 8006d6c:	d008      	beq.n	8006d80 <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];
 8006d6e:	4907      	ldr	r1, [pc, #28]	; (8006d8c <serial_read+0x2c>)
 8006d70:	5cc8      	ldrb	r0, [r1, r3]

    tail++;
 8006d72:	3301      	adds	r3, #1
 8006d74:	b2db      	uxtb	r3, r3
    if (tail == RX_RING_BUFFER) { tail = 0; }
 8006d76:	2bfe      	cmp	r3, #254	; 0xfe
 8006d78:	bf08      	it	eq
 8006d7a:	2300      	moveq	r3, #0
    serial_rx_buffer_tail = tail;
 8006d7c:	7013      	strb	r3, [r2, #0]

    return data;
 8006d7e:	4770      	bx	lr
    return SERIAL_NO_DATA;
 8006d80:	20ff      	movs	r0, #255	; 0xff
  }
}
 8006d82:	4770      	bx	lr
 8006d84:	2000333d 	.word	0x2000333d
 8006d88:	2000333c 	.word	0x2000333c
 8006d8c:	2000437e 	.word	0x2000437e

08006d90 <HandleUartIT>:
void HandleUartIT(uint8_t data)
{
	uint8_t next_head;
  // Pick off realtime command characters directly from the serial stream. These characters are
  // not passed into the main buffer, but these set system state flag bits for realtime execution.
	switch (data) {
 8006d90:	2821      	cmp	r0, #33	; 0x21
{
 8006d92:	b410      	push	{r4}
	switch (data) {
 8006d94:	d027      	beq.n	8006de6 <HandleUartIT+0x56>
 8006d96:	d817      	bhi.n	8006dc8 <HandleUartIT+0x38>
 8006d98:	2818      	cmp	r0, #24
 8006d9a:	d01b      	beq.n	8006dd4 <HandleUartIT+0x44>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
    default :
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 8006d9c:	0602      	lsls	r2, r0, #24
 8006d9e:	d552      	bpl.n	8006e46 <HandleUartIT+0xb6>
        switch(data) {
 8006da0:	3884      	subs	r0, #132	; 0x84
 8006da2:	281d      	cmp	r0, #29
 8006da4:	d85d      	bhi.n	8006e62 <HandleUartIT+0xd2>
 8006da6:	e8df f000 	tbb	[pc, r0]
 8006daa:	2220      	.short	0x2220
 8006dac:	5c5c5c5c 	.word	0x5c5c5c5c
 8006db0:	5c5c5c5c 	.word	0x5c5c5c5c
 8006db4:	2d285c5c 	.word	0x2d285c5c
 8006db8:	3533312f 	.word	0x3533312f
 8006dbc:	3b5c3937 	.word	0x3b5c3937
 8006dc0:	46444240 	.word	0x46444240
 8006dc4:	4c4a5c48 	.word	0x4c4a5c48
	switch (data) {
 8006dc8:	283f      	cmp	r0, #63	; 0x3f
 8006dca:	d007      	beq.n	8006ddc <HandleUartIT+0x4c>
 8006dcc:	287e      	cmp	r0, #126	; 0x7e
 8006dce:	d1e5      	bne.n	8006d9c <HandleUartIT+0xc>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 8006dd0:	2002      	movs	r0, #2
 8006dd2:	e004      	b.n	8006dde <HandleUartIT+0x4e>
          serial_rx_buffer[serial_rx_buffer_head] = data;
          serial_rx_buffer_head = next_head;
        }
      }
  }
}
 8006dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 8006dd8:	f7fe ba04 	b.w	80051e4 <mc_reset>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 8006ddc:	2001      	movs	r0, #1
}
 8006dde:	f85d 4b04 	ldr.w	r4, [sp], #4
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 8006de2:	f001 ba97 	b.w	8008314 <system_set_exec_state_flag>
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 8006de6:	2008      	movs	r0, #8
 8006de8:	e7f9      	b.n	8006dde <HandleUartIT+0x4e>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 8006dea:	2020      	movs	r0, #32
 8006dec:	e7f7      	b.n	8006dde <HandleUartIT+0x4e>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 8006dee:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <HandleUartIT+0xd8>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	069b      	lsls	r3, r3, #26
 8006df4:	d535      	bpl.n	8006e62 <HandleUartIT+0xd2>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 8006df6:	2040      	movs	r0, #64	; 0x40
 8006df8:	e7f1      	b.n	8006dde <HandleUartIT+0x4e>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 8006dfa:	2001      	movs	r0, #1
}
 8006dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 8006e00:	f001 bc3e 	b.w	8008680 <system_set_exec_motion_override_flag>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 8006e04:	2002      	movs	r0, #2
 8006e06:	e7f9      	b.n	8006dfc <HandleUartIT+0x6c>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 8006e08:	2004      	movs	r0, #4
 8006e0a:	e7f7      	b.n	8006dfc <HandleUartIT+0x6c>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 8006e0c:	2008      	movs	r0, #8
 8006e0e:	e7f5      	b.n	8006dfc <HandleUartIT+0x6c>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 8006e10:	2010      	movs	r0, #16
 8006e12:	e7f3      	b.n	8006dfc <HandleUartIT+0x6c>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 8006e14:	2020      	movs	r0, #32
 8006e16:	e7f1      	b.n	8006dfc <HandleUartIT+0x6c>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 8006e18:	2040      	movs	r0, #64	; 0x40
 8006e1a:	e7ef      	b.n	8006dfc <HandleUartIT+0x6c>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 8006e1c:	2080      	movs	r0, #128	; 0x80
 8006e1e:	e7ed      	b.n	8006dfc <HandleUartIT+0x6c>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 8006e20:	2001      	movs	r0, #1
}
 8006e22:	f85d 4b04 	ldr.w	r4, [sp], #4
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8006e26:	f001 bc35 	b.w	8008694 <system_set_exec_accessory_override_flag>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 8006e2a:	2002      	movs	r0, #2
 8006e2c:	e7f9      	b.n	8006e22 <HandleUartIT+0x92>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 8006e2e:	2004      	movs	r0, #4
 8006e30:	e7f7      	b.n	8006e22 <HandleUartIT+0x92>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 8006e32:	2008      	movs	r0, #8
 8006e34:	e7f5      	b.n	8006e22 <HandleUartIT+0x92>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 8006e36:	2010      	movs	r0, #16
 8006e38:	e7f3      	b.n	8006e22 <HandleUartIT+0x92>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 8006e3a:	2020      	movs	r0, #32
 8006e3c:	e7f1      	b.n	8006e22 <HandleUartIT+0x92>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 8006e3e:	2040      	movs	r0, #64	; 0x40
 8006e40:	e7ef      	b.n	8006e22 <HandleUartIT+0x92>
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8006e42:	2080      	movs	r0, #128	; 0x80
 8006e44:	e7ed      	b.n	8006e22 <HandleUartIT+0x92>
        next_head = serial_rx_buffer_head + 1;
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <HandleUartIT+0xdc>)
        if (next_head != serial_rx_buffer_tail) {
 8006e48:	4c09      	ldr	r4, [pc, #36]	; (8006e70 <HandleUartIT+0xe0>)
        next_head = serial_rx_buffer_head + 1;
 8006e4a:	7811      	ldrb	r1, [r2, #0]
        if (next_head != serial_rx_buffer_tail) {
 8006e4c:	7824      	ldrb	r4, [r4, #0]
        next_head = serial_rx_buffer_head + 1;
 8006e4e:	1c4b      	adds	r3, r1, #1
 8006e50:	b2db      	uxtb	r3, r3
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 8006e52:	2bfe      	cmp	r3, #254	; 0xfe
 8006e54:	bf08      	it	eq
 8006e56:	2300      	moveq	r3, #0
        if (next_head != serial_rx_buffer_tail) {
 8006e58:	42a3      	cmp	r3, r4
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8006e5a:	bf1e      	ittt	ne
 8006e5c:	4c05      	ldrne	r4, [pc, #20]	; (8006e74 <HandleUartIT+0xe4>)
          serial_rx_buffer_head = next_head;
 8006e5e:	7013      	strbne	r3, [r2, #0]
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8006e60:	5460      	strbne	r0, [r4, r1]
}
 8006e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20003948 	.word	0x20003948
 8006e6c:	2000333c 	.word	0x2000333c
 8006e70:	2000333d 	.word	0x2000333d
 8006e74:	2000437e 	.word	0x2000437e

08006e78 <serial_reset_read_buffer>:
}
#endif

void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 8006e78:	4b02      	ldr	r3, [pc, #8]	; (8006e84 <serial_reset_read_buffer+0xc>)
 8006e7a:	781a      	ldrb	r2, [r3, #0]
 8006e7c:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <serial_reset_read_buffer+0x10>)
 8006e7e:	701a      	strb	r2, [r3, #0]
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	2000333c 	.word	0x2000333c
 8006e88:	2000333d 	.word	0x2000333d

08006e8c <settings_store_startup_line>:



// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4604      	mov	r4, r0
 8006e90:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 8006e92:	f7ff facb 	bl	800642c <protocol_buffer_synchronize>
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8006e96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e9a:	2051      	movs	r0, #81	; 0x51
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	fb00 3004 	mla	r0, r0, r4, r3
 8006ea2:	2250      	movs	r2, #80	; 0x50
}
 8006ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8006ea8:	f7fc bd20 	b.w	80038ec <memcpy_to_eeprom_with_checksum>

08006eac <settings_store_build_info>:
// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8006eac:	4601      	mov	r1, r0
 8006eae:	2250      	movs	r2, #80	; 0x50
 8006eb0:	f240 30ae 	movw	r0, #942	; 0x3ae
 8006eb4:	f7fc bd1a 	b.w	80038ec <memcpy_to_eeprom_with_checksum>

08006eb8 <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4604      	mov	r4, r0
 8006ebc:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
 8006ebe:	f7ff fab5 	bl	800642c <protocol_buffer_synchronize>
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ec6:	2019      	movs	r0, #25
 8006ec8:	4629      	mov	r1, r5
 8006eca:	fb00 3004 	mla	r0, r0, r4, r3
 8006ece:	2218      	movs	r2, #24
}
 8006ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006ed4:	f7fc bd0a 	b.w	80038ec <memcpy_to_eeprom_with_checksum>

08006ed8 <write_global_settings>:


// Method to store Grbl global settings struct and version number into EEPROM
// NOTE: This function can only be called in IDLE state.
void write_global_settings()
{
 8006ed8:	b508      	push	{r3, lr}
  eeprom_put_char(0, SETTINGS_VERSION);
 8006eda:	210a      	movs	r1, #10
 8006edc:	2000      	movs	r0, #0
 8006ede:	f7fc fcff 	bl	80038e0 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8006ee2:	2290      	movs	r2, #144	; 0x90
 8006ee4:	4902      	ldr	r1, [pc, #8]	; (8006ef0 <write_global_settings+0x18>)
 8006ee6:	2001      	movs	r0, #1
}
 8006ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8006eec:	f7fc bcfe 	b.w	80038ec <memcpy_to_eeprom_with_checksum>
 8006ef0:	2000447c 	.word	0x2000447c

08006ef4 <settings_restore>:


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 8006ef4:	b530      	push	{r4, r5, lr}
 8006ef6:	4604      	mov	r4, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8006ef8:	07e0      	lsls	r0, r4, #31
void settings_restore(uint8_t restore_flag) {
 8006efa:	b087      	sub	sp, #28
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8006efc:	d547      	bpl.n	8006f8e <settings_restore+0x9a>
//    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    settings.fpulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8006efe:	4b3d      	ldr	r3, [pc, #244]	; (8006ff4 <settings_restore+0x100>)
    if (DEFAULT_INVERT_PROBE_PIN) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }

    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8006f00:	483d      	ldr	r0, [pc, #244]	; (8006ff8 <settings_restore+0x104>)
      settings.eeacceleration[B_AXIS] = DEFAULT_B_ACCELERATION;
      settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
      settings.max_travel[B_AXIS] = (-DEFAULT_B_MAX_TRAVEL);
    #endif
    #if ( defined(STM32F1_6) || defined(STM32F4_6) )
      settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8006f02:	4d3e      	ldr	r5, [pc, #248]	; (8006ffc <settings_restore+0x108>)
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8006f04:	6198      	str	r0, [r3, #24]
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8006f06:	2100      	movs	r1, #0
 8006f08:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	6759      	str	r1, [r3, #116]	; 0x74
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8006f10:	2103      	movs	r1, #3
 8006f12:	f883 1079 	strb.w	r1, [r3, #121]	; 0x79
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8006f16:	493a      	ldr	r1, [pc, #232]	; (8007000 <settings_restore+0x10c>)
 8006f18:	67d9      	str	r1, [r3, #124]	; 0x7c
    settings.fpulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8006f1a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8006f1e:	4939      	ldr	r1, [pc, #228]	; (8007004 <settings_restore+0x110>)
    settings.fpulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8006f20:	661a      	str	r2, [r3, #96]	; 0x60
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8006f22:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8006f26:	2201      	movs	r2, #1
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8006f28:	21fa      	movs	r1, #250	; 0xfa
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8006f2a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    settings.dir_invert_mask = DEFAULT_DIRECTION_INVERT_MASK;
 8006f2e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8006f32:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8006f36:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8006f3a:	4a33      	ldr	r2, [pc, #204]	; (8007008 <settings_restore+0x114>)
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8006f3c:	4933      	ldr	r1, [pc, #204]	; (800700c <settings_restore+0x118>)
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8006f3e:	669a      	str	r2, [r3, #104]	; 0x68
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8006f40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8006f44:	4a32      	ldr	r2, [pc, #200]	; (8007010 <settings_restore+0x11c>)
    settings.analog_max = DEFAULT_ANALOG_MAX;
 8006f46:	4933      	ldr	r1, [pc, #204]	; (8007014 <settings_restore+0x120>)
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8006f48:	66da      	str	r2, [r3, #108]	; 0x6c
    settings.analog_max = DEFAULT_ANALOG_MAX;
 8006f4a:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8006f4e:	4a32      	ldr	r2, [pc, #200]	; (8007018 <settings_restore+0x124>)
 8006f50:	671a      	str	r2, [r3, #112]	; 0x70
    if (DEFAULT_INVERT_PROBE_PIN) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8006f52:	2198      	movs	r1, #152	; 0x98
 8006f54:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8006f58:	601a      	str	r2, [r3, #0]
    settings.eeacceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8006f5a:	4930      	ldr	r1, [pc, #192]	; (800701c <settings_restore+0x128>)
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8006f5c:	605a      	str	r2, [r3, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8006f5e:	609a      	str	r2, [r3, #8]
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8006f60:	4a2f      	ldr	r2, [pc, #188]	; (8007020 <settings_restore+0x12c>)
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8006f62:	61d8      	str	r0, [r3, #28]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8006f64:	6218      	str	r0, [r3, #32]
    settings.eeacceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8006f66:	6319      	str	r1, [r3, #48]	; 0x30
    settings.eeacceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8006f68:	6359      	str	r1, [r3, #52]	; 0x34
    settings.eeacceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8006f6a:	6399      	str	r1, [r3, #56]	; 0x38
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8006f6c:	649a      	str	r2, [r3, #72]	; 0x48
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8006f6e:	64da      	str	r2, [r3, #76]	; 0x4c
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8006f70:	651a      	str	r2, [r3, #80]	; 0x50
      settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8006f72:	60dd      	str	r5, [r3, #12]
      settings.steps_per_mm[B_AXIS] = DEFAULT_B_STEPS_PER_MM;
 8006f74:	611d      	str	r5, [r3, #16]
      settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
 8006f76:	615d      	str	r5, [r3, #20]
      settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8006f78:	6258      	str	r0, [r3, #36]	; 0x24
      settings.max_rate[B_AXIS] = DEFAULT_B_MAX_RATE;
 8006f7a:	6298      	str	r0, [r3, #40]	; 0x28
      settings.max_rate[C_AXIS] = DEFAULT_C_MAX_RATE;
 8006f7c:	62d8      	str	r0, [r3, #44]	; 0x2c
      settings.eeacceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8006f7e:	63d9      	str	r1, [r3, #60]	; 0x3c
      settings.eeacceleration[B_AXIS] = DEFAULT_B_ACCELERATION;
 8006f80:	6419      	str	r1, [r3, #64]	; 0x40
      settings.eeacceleration[C_AXIS] = DEFAULT_C_ACCELERATION;
 8006f82:	6459      	str	r1, [r3, #68]	; 0x44
      settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8006f84:	655a      	str	r2, [r3, #84]	; 0x54
      settings.max_travel[B_AXIS] = (-DEFAULT_B_MAX_TRAVEL);
 8006f86:	659a      	str	r2, [r3, #88]	; 0x58
      settings.max_travel[C_AXIS] = (-DEFAULT_C_MAX_TRAVEL);
 8006f88:	65da      	str	r2, [r3, #92]	; 0x5c
    #endif

    write_global_settings();
 8006f8a:	f7ff ffa5 	bl	8006ed8 <write_global_settings>
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 8006f8e:	07a1      	lsls	r1, r4, #30
 8006f90:	d50c      	bpl.n	8006fac <settings_restore+0xb8>
    uint8_t idx;
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
 8006f92:	2218      	movs	r2, #24
 8006f94:	2100      	movs	r1, #0
 8006f96:	4668      	mov	r0, sp
 8006f98:	f001 fecb 	bl	8008d32 <memset>
 8006f9c:	2500      	movs	r5, #0
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8006f9e:	b2e8      	uxtb	r0, r5
 8006fa0:	4669      	mov	r1, sp
 8006fa2:	3501      	adds	r5, #1
 8006fa4:	f7ff ff88 	bl	8006eb8 <settings_write_coord_data>
 8006fa8:	2d08      	cmp	r5, #8
 8006faa:	d1f8      	bne.n	8006f9e <settings_restore+0xaa>
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8006fac:	0762      	lsls	r2, r4, #29
 8006fae:	d513      	bpl.n	8006fd8 <settings_restore+0xe4>
    #if N_STARTUP_LINE > 0
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006fb6:	f7fc fc93 	bl	80038e0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8006fba:	2100      	movs	r1, #0
 8006fbc:	f240 3001 	movw	r0, #769	; 0x301
 8006fc0:	f7fc fc8e 	bl	80038e0 <eeprom_put_char>
    #endif
    #if N_STARTUP_LINE > 1
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	f240 3051 	movw	r0, #849	; 0x351
 8006fca:	f7fc fc89 	bl	80038e0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8006fce:	2100      	movs	r1, #0
 8006fd0:	f240 3052 	movw	r0, #850	; 0x352
 8006fd4:	f7fc fc84 	bl	80038e0 <eeprom_put_char>
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 8006fd8:	0723      	lsls	r3, r4, #28
 8006fda:	d509      	bpl.n	8006ff0 <settings_restore+0xfc>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8006fdc:	2100      	movs	r1, #0
 8006fde:	f240 30ae 	movw	r0, #942	; 0x3ae
 8006fe2:	f7fc fc7d 	bl	80038e0 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	f240 30af 	movw	r0, #943	; 0x3af
 8006fec:	f7fc fc78 	bl	80038e0 <eeprom_put_char>
  }
}
 8006ff0:	b007      	add	sp, #28
 8006ff2:	bd30      	pop	{r4, r5, pc}
 8006ff4:	2000447c 	.word	0x2000447c
 8006ff8:	457a0000 	.word	0x457a0000
 8006ffc:	45480000 	.word	0x45480000
 8007000:	42c80000 	.word	0x42c80000
 8007004:	447a0000 	.word	0x447a0000
 8007008:	3c23d70a 	.word	0x3c23d70a
 800700c:	40a00000 	.word	0x40a00000
 8007010:	3b03126f 	.word	0x3b03126f
 8007014:	461c4000 	.word	0x461c4000
 8007018:	459c4000 	.word	0x459c4000
 800701c:	49afc800 	.word	0x49afc800
 8007020:	c3160000 	.word	0xc3160000

08007024 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 8007024:	b570      	push	{r4, r5, r6, lr}
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8007026:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800702a:	460d      	mov	r5, r1
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 800702c:	2151      	movs	r1, #81	; 0x51
 800702e:	fb01 3100 	mla	r1, r1, r0, r3
{
 8007032:	4606      	mov	r6, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8007034:	2250      	movs	r2, #80	; 0x50
 8007036:	4628      	mov	r0, r5
 8007038:	f7fc fc72 	bl	8003920 <memcpy_from_eeprom_with_checksum>
 800703c:	4604      	mov	r4, r0
 800703e:	b930      	cbnz	r0, 800704e <settings_read_startup_line+0x2a>
    // Reset line with default value
    line[0] = 0; // Empty line
 8007040:	7028      	strb	r0, [r5, #0]
    settings_store_startup_line(n, line);
 8007042:	4629      	mov	r1, r5
 8007044:	4630      	mov	r0, r6
 8007046:	f7ff ff21 	bl	8006e8c <settings_store_startup_line>
    return(false);
 800704a:	4620      	mov	r0, r4
 800704c:	bd70      	pop	{r4, r5, r6, pc}
  }
  return(true);
 800704e:	2001      	movs	r0, #1
}
 8007050:	bd70      	pop	{r4, r5, r6, pc}

08007052 <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 8007052:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8007054:	2250      	movs	r2, #80	; 0x50
 8007056:	f240 31ae 	movw	r1, #942	; 0x3ae
{
 800705a:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 800705c:	f7fc fc60 	bl	8003920 <memcpy_from_eeprom_with_checksum>
 8007060:	4604      	mov	r4, r0
 8007062:	b928      	cbnz	r0, 8007070 <settings_read_build_info+0x1e>
    // Reset line with default value
    line[0] = 0; // Empty line
 8007064:	7028      	strb	r0, [r5, #0]
    settings_store_build_info(line);
 8007066:	4628      	mov	r0, r5
 8007068:	f7ff ff20 	bl	8006eac <settings_store_build_info>
    return(false);
 800706c:	4620      	mov	r0, r4
 800706e:	bd38      	pop	{r3, r4, r5, pc}
  }
  return(true);
 8007070:	2001      	movs	r0, #1
}
 8007072:	bd38      	pop	{r3, r4, r5, pc}

08007074 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 8007074:	b570      	push	{r4, r5, r6, lr}
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 8007076:	f44f 7300 	mov.w	r3, #512	; 0x200
{
 800707a:	460c      	mov	r4, r1
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 800707c:	2119      	movs	r1, #25
 800707e:	fb01 3100 	mla	r1, r1, r0, r3
{
 8007082:	4606      	mov	r6, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 8007084:	2218      	movs	r2, #24
 8007086:	4620      	mov	r0, r4
 8007088:	f7fc fc4a 	bl	8003920 <memcpy_from_eeprom_with_checksum>
 800708c:	4605      	mov	r5, r0
 800708e:	b960      	cbnz	r0, 80070aa <settings_read_coord_data+0x36>
    // Reset with default zero vector
    //clear_vector_float(coord_data);
		coord_data[X_AXIS] = 0.0f;
 8007090:	2300      	movs	r3, #0
    #if ( defined(STM32F1_6) || defined(STM32F4_6) )
      coord_data[A_AXIS] = 0.0f;
      coord_data[B_AXIS] = 0.0f;
      coord_data[C_AXIS] = 0.0f;
    #endif
    settings_write_coord_data(coord_select,coord_data);
 8007092:	4630      	mov	r0, r6
		coord_data[X_AXIS] = 0.0f;
 8007094:	6023      	str	r3, [r4, #0]
		coord_data[Y_AXIS] = 0.0f;
 8007096:	6063      	str	r3, [r4, #4]
		coord_data[Z_AXIS] = 0.0f;
 8007098:	60a3      	str	r3, [r4, #8]
      coord_data[A_AXIS] = 0.0f;
 800709a:	60e3      	str	r3, [r4, #12]
      coord_data[B_AXIS] = 0.0f;
 800709c:	6123      	str	r3, [r4, #16]
      coord_data[C_AXIS] = 0.0f;
 800709e:	6163      	str	r3, [r4, #20]
    settings_write_coord_data(coord_select,coord_data);
 80070a0:	4621      	mov	r1, r4
 80070a2:	f7ff ff09 	bl	8006eb8 <settings_write_coord_data>
    return(false);
 80070a6:	4628      	mov	r0, r5
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
  }
  return(true);
 80070aa:	2001      	movs	r0, #1
}
 80070ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080070b0 <read_global_settings>:


// Reads Grbl global settings struct from EEPROM.
uint8_t read_global_settings() {
 80070b0:	b508      	push	{r3, lr}
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
 80070b2:	2000      	movs	r0, #0
 80070b4:	f7fc fc0e 	bl	80038d4 <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 80070b8:	280a      	cmp	r0, #10
 80070ba:	d108      	bne.n	80070ce <read_global_settings+0x1e>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 80070bc:	2290      	movs	r2, #144	; 0x90
 80070be:	2101      	movs	r1, #1
 80070c0:	4804      	ldr	r0, [pc, #16]	; (80070d4 <read_global_settings+0x24>)
 80070c2:	f7fc fc2d 	bl	8003920 <memcpy_from_eeprom_with_checksum>
      return(false);
    }
  } else {
    return(false);
  }
  return(true);
 80070c6:	3000      	adds	r0, #0
 80070c8:	bf18      	it	ne
 80070ca:	2001      	movne	r0, #1
 80070cc:	bd08      	pop	{r3, pc}
    return(false);
 80070ce:	2000      	movs	r0, #0
}
 80070d0:	bd08      	pop	{r3, pc}
 80070d2:	bf00      	nop
 80070d4:	2000447c 	.word	0x2000447c

080070d8 <settings_store_global_setting>:


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 80070d8:	b510      	push	{r4, lr}
  if (value < 0.0) { return(STATUS_NEGATIVE_VALUE); }
 80070da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80070de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 80070e2:	ed2d 8b02 	vpush	{d8}
 80070e6:	4604      	mov	r4, r0
 80070e8:	eeb0 8a40 	vmov.f32	s16, s0
  if (value < 0.0) { return(STATUS_NEGATIVE_VALUE); }
 80070ec:	f100 8105 	bmi.w	80072fa <settings_store_global_setting+0x222>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 80070f0:	2863      	cmp	r0, #99	; 0x63
 80070f2:	d930      	bls.n	8007156 <settings_store_global_setting+0x7e>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 80070f4:	3864      	subs	r0, #100	; 0x64
 80070f6:	b2c0      	uxtb	r0, r0
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS) {
 80070f8:	2300      	movs	r3, #0
      if (parameter < N_AXIS) {
 80070fa:	2805      	cmp	r0, #5
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	d820      	bhi.n	8007142 <settings_store_global_setting+0x6a>
 8007100:	4b82      	ldr	r3, [pc, #520]	; (800730c <settings_store_global_setting+0x234>)
        // Valid axis setting found.
        switch (set_idx) {
 8007102:	2a02      	cmp	r2, #2
            #ifdef MAX_STEP_RATE_HZ
              if (value*settings.steps_per_mm[parameter] > (MAX_STEP_RATE_HZ*60.0)) {  return(STATUS_MAX_STEP_RATE_EXCEEDED); }
            #endif
            settings.max_rate[parameter] = value;
            break;
          case 2: settings.eeacceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8007104:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        switch (set_idx) {
 8007108:	d00d      	beq.n	8007126 <settings_store_global_setting+0x4e>
 800710a:	2a03      	cmp	r2, #3
 800710c:	d014      	beq.n	8007138 <settings_store_global_setting+0x60>
 800710e:	2a01      	cmp	r2, #1
            settings.steps_per_mm[parameter] = value;
 8007110:	bf14      	ite	ne
 8007112:	ed80 8a00 	vstrne	s16, [r0]
            settings.max_rate[parameter] = value;
 8007116:	ed80 8a06 	vstreq	s16, [r0, #24]

      default:
        return(STATUS_INVALID_STATEMENT);
    }
  }
  write_global_settings();
 800711a:	f7ff fedd 	bl	8006ed8 <write_global_settings>
  return(STATUS_OK);
 800711e:	2000      	movs	r0, #0
}
 8007120:	ecbd 8b02 	vpop	{d8}
 8007124:	bd10      	pop	{r4, pc}
          case 2: settings.eeacceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8007126:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8007310 <settings_store_global_setting+0x238>
 800712a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800712e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007132:	ed80 8a0c 	vstr	s16, [r0, #48]	; 0x30
 8007136:	e7f0      	b.n	800711a <settings_store_global_setting+0x42>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 8007138:	eeb1 8a48 	vneg.f32	s16, s16
 800713c:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
 8007140:	e7eb      	b.n	800711a <settings_store_global_setting+0x42>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007142:	2809      	cmp	r0, #9
 8007144:	f240 80db 	bls.w	80072fe <settings_store_global_setting+0x226>
 8007148:	3301      	adds	r3, #1
 800714a:	2b04      	cmp	r3, #4
 800714c:	f000 80d7 	beq.w	80072fe <settings_store_global_setting+0x226>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007150:	380a      	subs	r0, #10
 8007152:	b2c0      	uxtb	r0, r0
 8007154:	e7d1      	b.n	80070fa <settings_store_global_setting+0x22>
    uint8_t int_value = trunc(value);
 8007156:	ee10 0a10 	vmov	r0, s0
 800715a:	f7f9 f9ed 	bl	8000538 <__aeabi_f2d>
 800715e:	ec41 0b10 	vmov	d0, r0, r1
 8007162:	f002 fba1 	bl	80098a8 <trunc>
 8007166:	ec51 0b10 	vmov	r0, r1, d0
 800716a:	f7f9 fd11 	bl	8000b90 <__aeabi_d2uiz>
 800716e:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 8007170:	2c28      	cmp	r4, #40	; 0x28
 8007172:	f200 80c4 	bhi.w	80072fe <settings_store_global_setting+0x226>
 8007176:	e8df f004 	tbb	[pc, r4]
 800717a:	2115      	.short	0x2115
 800717c:	3b2f2b25 	.word	0x3b2f2b25
 8007180:	c2c2c245 	.word	0xc2c2c245
 8007184:	605c5854 	.word	0x605c5854
 8007188:	c2c2c2c2 	.word	0xc2c2c2c2
 800718c:	7a6ec2c2 	.word	0x7a6ec2c2
 8007190:	9a969288 	.word	0x9a969288
 8007194:	c2c2a29e 	.word	0xc2c2a29e
 8007198:	c2b0aca6 	.word	0xc2b0aca6
 800719c:	c2c2c2c2 	.word	0xc2c2c2c2
 80071a0:	c2c2      	.short	0xc2c2
 80071a2:	ba          	.byte	0xba
 80071a3:	00          	.byte	0x00
        if (value < STATUS_SETTING_STEP_PULSE_MIN_LIMIT) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 80071a4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007314 <settings_store_global_setting+0x23c>
 80071a8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80071ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b0:	f100 80a7 	bmi.w	8007302 <settings_store_global_setting+0x22a>
        settings.fpulse_microseconds = value; break;
 80071b4:	4b55      	ldr	r3, [pc, #340]	; (800730c <settings_store_global_setting+0x234>)
 80071b6:	ed83 8a18 	vstr	s16, [r3, #96]	; 0x60
 80071ba:	e7ae      	b.n	800711a <settings_store_global_setting+0x42>
      case 1: settings.stepper_idle_lock_time = int_value; break;
 80071bc:	4b53      	ldr	r3, [pc, #332]	; (800730c <settings_store_global_setting+0x234>)
 80071be:	f883 0066 	strb.w	r0, [r3, #102]	; 0x66
 80071c2:	e7aa      	b.n	800711a <settings_store_global_setting+0x42>
        settings.step_invert_mask = int_value;
 80071c4:	4b51      	ldr	r3, [pc, #324]	; (800730c <settings_store_global_setting+0x234>)
 80071c6:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 80071ca:	f000 fbe7 	bl	800799c <st_generate_step_dir_invert_masks>
        break;
 80071ce:	e7a4      	b.n	800711a <settings_store_global_setting+0x42>
        settings.dir_invert_mask = int_value;
 80071d0:	4b4e      	ldr	r3, [pc, #312]	; (800730c <settings_store_global_setting+0x234>)
 80071d2:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
 80071d6:	e7f8      	b.n	80071ca <settings_store_global_setting+0xf2>
 80071d8:	4b4c      	ldr	r3, [pc, #304]	; (800730c <settings_store_global_setting+0x234>)
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 80071da:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80071de:	b120      	cbz	r0, 80071ea <settings_store_global_setting+0x112>
 80071e0:	f042 0204 	orr.w	r2, r2, #4
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 80071e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80071e8:	e797      	b.n	800711a <settings_store_global_setting+0x42>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 80071ea:	f022 0204 	bic.w	r2, r2, #4
 80071ee:	e7f9      	b.n	80071e4 <settings_store_global_setting+0x10c>
 80071f0:	4b46      	ldr	r3, [pc, #280]	; (800730c <settings_store_global_setting+0x234>)
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 80071f2:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80071f6:	b110      	cbz	r0, 80071fe <settings_store_global_setting+0x126>
 80071f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071fc:	e7f2      	b.n	80071e4 <settings_store_global_setting+0x10c>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 80071fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007202:	e7ef      	b.n	80071e4 <settings_store_global_setting+0x10c>
 8007204:	4b41      	ldr	r3, [pc, #260]	; (800730c <settings_store_global_setting+0x234>)
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8007206:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800720a:	b138      	cbz	r0, 800721c <settings_store_global_setting+0x144>
 800720c:	f062 027f 	orn	r2, r2, #127	; 0x7f
        probe_configure_invert_mask(false);
 8007210:	2000      	movs	r0, #0
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8007212:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        probe_configure_invert_mask(false);
 8007216:	f7fe fd95 	bl	8005d44 <probe_configure_invert_mask>
        break;
 800721a:	e77e      	b.n	800711a <settings_store_global_setting+0x42>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 800721c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007220:	e7f6      	b.n	8007210 <settings_store_global_setting+0x138>
      case 10: settings.status_report_mask = int_value; break;
 8007222:	4b3a      	ldr	r3, [pc, #232]	; (800730c <settings_store_global_setting+0x234>)
 8007224:	f883 0067 	strb.w	r0, [r3, #103]	; 0x67
 8007228:	e777      	b.n	800711a <settings_store_global_setting+0x42>
      case 11: settings.junction_deviation = value; break;
 800722a:	4b38      	ldr	r3, [pc, #224]	; (800730c <settings_store_global_setting+0x234>)
 800722c:	ed83 8a1a 	vstr	s16, [r3, #104]	; 0x68
 8007230:	e773      	b.n	800711a <settings_store_global_setting+0x42>
      case 12: settings.arc_tolerance = value; break;
 8007232:	4b36      	ldr	r3, [pc, #216]	; (800730c <settings_store_global_setting+0x234>)
 8007234:	ed83 8a1b 	vstr	s16, [r3, #108]	; 0x6c
 8007238:	e76f      	b.n	800711a <settings_store_global_setting+0x42>
 800723a:	4b34      	ldr	r3, [pc, #208]	; (800730c <settings_store_global_setting+0x234>)
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 800723c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8007240:	b130      	cbz	r0, 8007250 <settings_store_global_setting+0x178>
 8007242:	f042 0201 	orr.w	r2, r2, #1
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8007246:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 800724a:	f001 f821 	bl	8008290 <system_flag_wco_change>
        break;
 800724e:	e764      	b.n	800711a <settings_store_global_setting+0x42>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8007250:	f022 0201 	bic.w	r2, r2, #1
 8007254:	e7f7      	b.n	8007246 <settings_store_global_setting+0x16e>
 8007256:	4b2d      	ldr	r3, [pc, #180]	; (800730c <settings_store_global_setting+0x234>)
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8007258:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
        if (int_value) {
 800725c:	b120      	cbz	r0, 8007268 <settings_store_global_setting+0x190>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 800725e:	06d1      	lsls	r1, r2, #27
 8007260:	d551      	bpl.n	8007306 <settings_store_global_setting+0x22e>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 8007262:	f042 0220 	orr.w	r2, r2, #32
 8007266:	e7bd      	b.n	80071e4 <settings_store_global_setting+0x10c>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 8007268:	f022 0220 	bic.w	r2, r2, #32
 800726c:	e7ba      	b.n	80071e4 <settings_store_global_setting+0x10c>
 800726e:	4b27      	ldr	r3, [pc, #156]	; (800730c <settings_store_global_setting+0x234>)
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 8007270:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8007274:	b130      	cbz	r0, 8007284 <settings_store_global_setting+0x1ac>
 8007276:	f042 0208 	orr.w	r2, r2, #8
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 800727a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 800727e:	f7fd fbc5 	bl	8004a0c <limits_init>
        break;
 8007282:	e74a      	b.n	800711a <settings_store_global_setting+0x42>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8007284:	f022 0208 	bic.w	r2, r2, #8
 8007288:	e7f7      	b.n	800727a <settings_store_global_setting+0x1a2>
 800728a:	4b20      	ldr	r3, [pc, #128]	; (800730c <settings_store_global_setting+0x234>)
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 800728c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8007290:	b110      	cbz	r0, 8007298 <settings_store_global_setting+0x1c0>
 8007292:	f042 0210 	orr.w	r2, r2, #16
 8007296:	e7a5      	b.n	80071e4 <settings_store_global_setting+0x10c>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8007298:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800729c:	e7a2      	b.n	80071e4 <settings_store_global_setting+0x10c>
      case 23: settings.homing_dir_mask = int_value; break;
 800729e:	4b1b      	ldr	r3, [pc, #108]	; (800730c <settings_store_global_setting+0x234>)
 80072a0:	f883 0079 	strb.w	r0, [r3, #121]	; 0x79
 80072a4:	e739      	b.n	800711a <settings_store_global_setting+0x42>
      case 24: settings.homing_feed_rate = value; break;
 80072a6:	4b19      	ldr	r3, [pc, #100]	; (800730c <settings_store_global_setting+0x234>)
 80072a8:	ed83 8a1f 	vstr	s16, [r3, #124]	; 0x7c
 80072ac:	e735      	b.n	800711a <settings_store_global_setting+0x42>
      case 25: settings.homing_seek_rate = value; break;
 80072ae:	4b17      	ldr	r3, [pc, #92]	; (800730c <settings_store_global_setting+0x234>)
 80072b0:	ed83 8a20 	vstr	s16, [r3, #128]	; 0x80
 80072b4:	e731      	b.n	800711a <settings_store_global_setting+0x42>
      case 26: settings.homing_debounce_delay = int_value; break;
 80072b6:	4b15      	ldr	r3, [pc, #84]	; (800730c <settings_store_global_setting+0x234>)
 80072b8:	f8a3 0084 	strh.w	r0, [r3, #132]	; 0x84
 80072bc:	e72d      	b.n	800711a <settings_store_global_setting+0x42>
      case 27: settings.homing_pulloff = value; break;
 80072be:	4b13      	ldr	r3, [pc, #76]	; (800730c <settings_store_global_setting+0x234>)
 80072c0:	ed83 8a22 	vstr	s16, [r3, #136]	; 0x88
 80072c4:	e729      	b.n	800711a <settings_store_global_setting+0x42>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 80072c6:	4b11      	ldr	r3, [pc, #68]	; (800730c <settings_store_global_setting+0x234>)
 80072c8:	ed83 8a1c 	vstr	s16, [r3, #112]	; 0x70
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 80072cc:	f000 f898 	bl	8007400 <spindle_init>
 80072d0:	e723      	b.n	800711a <settings_store_global_setting+0x42>
 80072d2:	4b0e      	ldr	r3, [pc, #56]	; (800730c <settings_store_global_setting+0x234>)
 80072d4:	ed83 8a1d 	vstr	s16, [r3, #116]	; 0x74
 80072d8:	e7f8      	b.n	80072cc <settings_store_global_setting+0x1f4>
 80072da:	4b0c      	ldr	r3, [pc, #48]	; (800730c <settings_store_global_setting+0x234>)
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 80072dc:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80072e0:	b110      	cbz	r0, 80072e8 <settings_store_global_setting+0x210>
 80072e2:	f042 0202 	orr.w	r2, r2, #2
 80072e6:	e77d      	b.n	80071e4 <settings_store_global_setting+0x10c>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 80072e8:	f022 0202 	bic.w	r2, r2, #2
 80072ec:	e77a      	b.n	80071e4 <settings_store_global_setting+0x10c>
      case 40: settings.analog_max = value; outputs_analog_init(); break; // Re-initialize analog outputs calibration
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <settings_store_global_setting+0x234>)
 80072f0:	ed83 8a23 	vstr	s16, [r3, #140]	; 0x8c
 80072f4:	f001 fa6c 	bl	80087d0 <outputs_analog_init>
 80072f8:	e70f      	b.n	800711a <settings_store_global_setting+0x42>
  if (value < 0.0) { return(STATUS_NEGATIVE_VALUE); }
 80072fa:	2004      	movs	r0, #4
 80072fc:	e710      	b.n	8007120 <settings_store_global_setting+0x48>
        return(STATUS_INVALID_STATEMENT);
 80072fe:	2003      	movs	r0, #3
 8007300:	e70e      	b.n	8007120 <settings_store_global_setting+0x48>
        if (value < STATUS_SETTING_STEP_PULSE_MIN_LIMIT) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8007302:	2006      	movs	r0, #6
 8007304:	e70c      	b.n	8007120 <settings_store_global_setting+0x48>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8007306:	200a      	movs	r0, #10
 8007308:	e70a      	b.n	8007120 <settings_store_global_setting+0x48>
 800730a:	bf00      	nop
 800730c:	2000447c 	.word	0x2000447c
 8007310:	42700000 	.word	0x42700000
 8007314:	3c23d70a 	.word	0x3c23d70a

08007318 <acceleration_scaling>:


#ifdef ENABLE_ACCEL_SCALING
void acceleration_scaling(uint8_t axis_index, float *pQscale)
{
 8007318:	b510      	push	{r4, lr}
 800731a:	ed2d 8b02 	vpush	{d8}
  uint8_t i;
	float scale = *pQscale;
 800731e:	ed91 8a00 	vldr	s16, [r1]
{
 8007322:	4604      	mov	r4, r0

	protocol_buffer_synchronize();
 8007324:	f7ff f882 	bl	800642c <protocol_buffer_synchronize>

	if (scale <= 0.0f) return;
 8007328:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800732c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007330:	d918      	bls.n	8007364 <acceleration_scaling+0x4c>
	if (scale > 1.0f) scale = 1.0f;
 8007332:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007336:	eeb4 8a67 	vcmp.f32	s16, s15
 800733a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733e:	bfc8      	it	gt
 8007340:	eeb0 8a67 	vmovgt.f32	s16, s15

	if (axis_index == 0xFF) //all axis
 8007344:	2cff      	cmp	r4, #255	; 0xff
 8007346:	d110      	bne.n	800736a <acceleration_scaling+0x52>
 8007348:	4b10      	ldr	r3, [pc, #64]	; (800738c <acceleration_scaling+0x74>)
 800734a:	4a11      	ldr	r2, [pc, #68]	; (8007390 <acceleration_scaling+0x78>)
 800734c:	f103 0118 	add.w	r1, r3, #24
	{
	  for (i=0; i<N_AXIS; i++)
	  {
	  	adjustments.accel_scaling[i] = scale;
	  	adjustments.accel_adjusted[i] = settings.eeacceleration[i] * scale;
 8007350:	ecf3 7a01 	vldmia	r3!, {s15}
	  	adjustments.accel_scaling[i] = scale;
 8007354:	ed02 8a06 	vstr	s16, [r2, #-24]	; 0xffffffe8
	  	adjustments.accel_adjusted[i] = settings.eeacceleration[i] * scale;
 8007358:	ee68 7a27 	vmul.f32	s15, s16, s15
	  for (i=0; i<N_AXIS; i++)
 800735c:	428b      	cmp	r3, r1
	  	adjustments.accel_adjusted[i] = settings.eeacceleration[i] * scale;
 800735e:	ece2 7a01 	vstmia	r2!, {s15}
	  for (i=0; i<N_AXIS; i++)
 8007362:	d1f5      	bne.n	8007350 <acceleration_scaling+0x38>
	else if (axis_index < N_AXIS)
	{
  	adjustments.accel_scaling[axis_index] = scale;
  	adjustments.accel_adjusted[axis_index] = settings.eeacceleration[axis_index] * scale;
	}
}
 8007364:	ecbd 8b02 	vpop	{d8}
 8007368:	bd10      	pop	{r4, pc}
	else if (axis_index < N_AXIS)
 800736a:	2c05      	cmp	r4, #5
 800736c:	d8fa      	bhi.n	8007364 <acceleration_scaling+0x4c>
  	adjustments.accel_scaling[axis_index] = scale;
 800736e:	4b09      	ldr	r3, [pc, #36]	; (8007394 <acceleration_scaling+0x7c>)
  	adjustments.accel_adjusted[axis_index] = settings.eeacceleration[axis_index] * scale;
 8007370:	4809      	ldr	r0, [pc, #36]	; (8007398 <acceleration_scaling+0x80>)
  	adjustments.accel_scaling[axis_index] = scale;
 8007372:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  	adjustments.accel_adjusted[axis_index] = settings.eeacceleration[axis_index] * scale;
 8007376:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800737a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
  	adjustments.accel_scaling[axis_index] = scale;
 800737e:	ed82 8a00 	vstr	s16, [r2]
  	adjustments.accel_adjusted[axis_index] = settings.eeacceleration[axis_index] * scale;
 8007382:	ee27 8a88 	vmul.f32	s16, s15, s16
 8007386:	ed82 8a06 	vstr	s16, [r2, #24]
 800738a:	e7eb      	b.n	8007364 <acceleration_scaling+0x4c>
 800738c:	200044ac 	.word	0x200044ac
 8007390:	20004524 	.word	0x20004524
 8007394:	2000450c 	.word	0x2000450c
 8007398:	2000447c 	.word	0x2000447c

0800739c <settings_init>:
#endif



// Initialize the config subsystem
void settings_init() {
 800739c:	b510      	push	{r4, lr}
  if(!read_global_settings()) {
 800739e:	f7ff fe87 	bl	80070b0 <read_global_settings>
 80073a2:	b938      	cbnz	r0, 80073b4 <settings_init+0x18>
    report_status_message(STATUS_SETTING_READ_FAIL);
 80073a4:	2007      	movs	r0, #7
 80073a6:	f7ff f89d 	bl	80064e4 <report_status_message>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
 80073aa:	20ff      	movs	r0, #255	; 0xff
 80073ac:	f7ff fda2 	bl	8006ef4 <settings_restore>
    report_grbl_settings();
 80073b0:	f7ff f910 	bl	80065d4 <report_grbl_settings>
 80073b4:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <settings_init+0x38>)
 80073b6:	4a08      	ldr	r2, [pc, #32]	; (80073d8 <settings_init+0x3c>)
 80073b8:	f103 0118 	add.w	r1, r3, #24
  }
#ifdef ENABLE_ACCEL_SCALING
  uint8_t i;
  for (i=0; i<N_AXIS; i++)
  {
  	adjustments.accel_scaling[i] = 1.0f;
 80073bc:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
  	adjustments.accel_adjusted[i] = settings.eeacceleration[i];
 80073c0:	f853 0b04 	ldr.w	r0, [r3], #4
  	adjustments.accel_scaling[i] = 1.0f;
 80073c4:	f842 4c18 	str.w	r4, [r2, #-24]
  for (i=0; i<N_AXIS; i++)
 80073c8:	428b      	cmp	r3, r1
  	adjustments.accel_adjusted[i] = settings.eeacceleration[i];
 80073ca:	f842 0b04 	str.w	r0, [r2], #4
  for (i=0; i<N_AXIS; i++)
 80073ce:	d1f7      	bne.n	80073c0 <settings_init+0x24>
  }
#endif
}
 80073d0:	bd10      	pop	{r4, pc}
 80073d2:	bf00      	nop
 80073d4:	200044ac 	.word	0x200044ac
 80073d8:	20004524 	.word	0x20004524

080073dc <spindle_get_state>:
 80073dc:	4b03      	ldr	r3, [pc, #12]	; (80073ec <spindle_get_state+0x10>)
 80073de:	691b      	ldr	r3, [r3, #16]
      #else
        if (bit_istrue(pin,(1<<SPINDLE_ENABLE_BIT))) { return(SPINDLE_STATE_CW); }
      #endif //INVERT_SPINDLE_ENABLE_PIN
    #else
      pin = GPIO_ReadInputData(SPIN_DIR_GPIO_Port);
      if (pin & SPIN_DIR_Pin) { return(SPINDLE_STATE_CCW); }
 80073e0:	f013 0f10 	tst.w	r3, #16
    }
	#endif
#endif

	return(SPINDLE_STATE_DISABLE);
}
 80073e4:	bf14      	ite	ne
 80073e6:	2002      	movne	r0, #2
 80073e8:	2001      	moveq	r0, #1
 80073ea:	4770      	bx	lr
 80073ec:	40020c00 	.word	0x40020c00

080073f0 <spindle_stop>:
  CLEAR_BIT(TIMx->CCER, Channels);
 80073f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80073f4:	6a13      	ldr	r3, [r2, #32]
 80073f6:	f023 0301 	bic.w	r3, r3, #1
 80073fa:	6213      	str	r3, [r2, #32]
 80073fc:	4770      	bx	lr
	...

08007400 <spindle_init>:
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007400:	4b0e      	ldr	r3, [pc, #56]	; (800743c <spindle_init+0x3c>)
 8007402:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8007440 <spindle_init+0x40>
 8007406:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800740a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800740e:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <spindle_init+0x44>)
 8007410:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007418:	ed83 7a00 	vstr	s14, [r3]
  SET_BIT(TIMx->CCER, Channels);
 800741c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007420:	6a1a      	ldr	r2, [r3, #32]
 8007422:	f042 0201 	orr.w	r2, r2, #1
 8007426:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800742a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800742e:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	f042 0201 	orr.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]
  spindle_stop();
 8007438:	f7ff bfda 	b.w	80073f0 <spindle_stop>
 800743c:	2000447c 	.word	0x2000447c
 8007440:	46033800 	.word	0x46033800
 8007444:	20003340 	.word	0x20003340

08007448 <spindle_set_speed>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800744c:	6358      	str	r0, [r3, #52]	; 0x34
  CLEAR_BIT(TIMx->CCER, Channels);
 800744e:	6a1a      	ldr	r2, [r3, #32]
        #else
          SetSpindleEnablebit();
        #endif
      }
    #else
      if (pwm_value == SPINDLE_PWM_OFF_VALUE)
 8007450:	b918      	cbnz	r0, 800745a <spindle_set_speed+0x12>
 8007452:	f022 0201 	bic.w	r2, r2, #1
  SET_BIT(TIMx->CCER, Channels);
 8007456:	621a      	str	r2, [r3, #32]
 8007458:	4770      	bx	lr
 800745a:	f042 0201 	orr.w	r2, r2, #1
 800745e:	e7fa      	b.n	8007456 <spindle_set_speed+0xe>

08007460 <spindle_compute_pwm_value>:
    
  #else 
  
    // Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
    SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm)
    {
 8007460:	b5d0      	push	{r4, r6, r7, lr}
    	SPINDLE_PWM_TYPE pwm_value;
      rpm *= (0.010*sys.spindle_speed_ovr); // Scale by spindle speed override value.
      // Calculate PWM register value based on rpm max/min settings and programmed rpm.
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007462:	4b33      	ldr	r3, [pc, #204]	; (8007530 <spindle_compute_pwm_value+0xd0>)
 8007464:	4c33      	ldr	r4, [pc, #204]	; (8007534 <spindle_compute_pwm_value+0xd4>)
    {
 8007466:	ed2d 8b02 	vpush	{d8}
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800746a:	ed93 8a1d 	vldr	s16, [r3, #116]	; 0x74
 800746e:	edd3 8a1c 	vldr	s17, [r3, #112]	; 0x70
 8007472:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
 800747a:	b082      	sub	sp, #8
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800747c:	da20      	bge.n	80074c0 <spindle_compute_pwm_value+0x60>
      rpm *= (0.010*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 800747e:	7aa0      	ldrb	r0, [r4, #10]
 8007480:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007484:	f7f9 f846 	bl	8000514 <__aeabi_i2d>
 8007488:	a327      	add	r3, pc, #156	; (adr r3, 8007528 <spindle_compute_pwm_value+0xc8>)
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	f7f9 f8a7 	bl	80005e0 <__aeabi_dmul>
 8007492:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007496:	4606      	mov	r6, r0
 8007498:	ee10 0a10 	vmov	r0, s0
 800749c:	460f      	mov	r7, r1
 800749e:	f7f9 f84b 	bl	8000538 <__aeabi_f2d>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4630      	mov	r0, r6
 80074a8:	4639      	mov	r1, r7
 80074aa:	f7f9 f899 	bl	80005e0 <__aeabi_dmul>
 80074ae:	f7f9 fb8f 	bl	8000bd0 <__aeabi_d2f>
 80074b2:	ee07 0a90 	vmov	s15, r0
      if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80074b6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80074ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074be:	db07      	blt.n	80074d0 <spindle_compute_pwm_value+0x70>
        // No PWM range possible. Set simple on/off spindle control pin state.
        sys.spindle_speed = settings.rpm_max;
 80074c0:	edc4 8a04 	vstr	s17, [r4, #16]
        pwm_value = SPINDLE_PWM_MAX_VALUE;
 80074c4:	f242 00cf 	movw	r0, #8399	; 0x20cf
        // NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
        sys.spindle_speed = rpm;
        pwm_value = (SPINDLE_PWM_TYPE)floor((rpm-settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
      }
      return(pwm_value);
    }
 80074c8:	b002      	add	sp, #8
 80074ca:	ecbd 8b02 	vpop	{d8}
 80074ce:	bdd0      	pop	{r4, r6, r7, pc}
      } else if (rpm <= settings.rpm_min) {
 80074d0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80074d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d8:	d80c      	bhi.n	80074f4 <spindle_compute_pwm_value+0x94>
        if (rpm == 0.0) { // S0 disables spindle
 80074da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80074de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          sys.spindle_speed = 0.0;
 80074e2:	bf03      	ittte	eq
 80074e4:	2300      	moveq	r3, #0
 80074e6:	6123      	streq	r3, [r4, #16]
          pwm_value = SPINDLE_PWM_OFF_VALUE;
 80074e8:	2000      	moveq	r0, #0
          sys.spindle_speed = settings.rpm_min;
 80074ea:	ed84 8a04 	vstrne	s16, [r4, #16]
          pwm_value = SPINDLE_PWM_MIN_VALUE;
 80074ee:	bf18      	it	ne
 80074f0:	2001      	movne	r0, #1
 80074f2:	e7e9      	b.n	80074c8 <spindle_compute_pwm_value+0x68>
        pwm_value = (SPINDLE_PWM_TYPE)floor((rpm-settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80074f4:	4b10      	ldr	r3, [pc, #64]	; (8007538 <spindle_compute_pwm_value+0xd8>)
        sys.spindle_speed = rpm;
 80074f6:	6120      	str	r0, [r4, #16]
        pwm_value = (SPINDLE_PWM_TYPE)floor((rpm-settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80074f8:	ed93 7a00 	vldr	s14, [r3]
 80074fc:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8007500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007504:	ee17 0a90 	vmov	r0, s15
 8007508:	f7f9 f816 	bl	8000538 <__aeabi_f2d>
 800750c:	ec41 0b10 	vmov	d0, r0, r1
 8007510:	f002 f8ba 	bl	8009688 <floor>
 8007514:	ec51 0b10 	vmov	r0, r1, d0
 8007518:	f7f9 fb3a 	bl	8000b90 <__aeabi_d2uiz>
 800751c:	3001      	adds	r0, #1
 800751e:	b280      	uxth	r0, r0
 8007520:	e7d2      	b.n	80074c8 <spindle_compute_pwm_value+0x68>
 8007522:	bf00      	nop
 8007524:	f3af 8000 	nop.w
 8007528:	47ae147b 	.word	0x47ae147b
 800752c:	3f847ae1 	.word	0x3f847ae1
 8007530:	2000447c 	.word	0x2000447c
 8007534:	20003948 	.word	0x20003948
 8007538:	20003340 	.word	0x20003340

0800753c <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 800753c:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.
 800753e:	4c17      	ldr	r4, [pc, #92]	; (800759c <spindle_set_state+0x60>)
 8007540:	7863      	ldrb	r3, [r4, #1]
{
 8007542:	ed2d 8b02 	vpush	{d8}
 8007546:	4605      	mov	r5, r0
 8007548:	eeb0 8a40 	vmov.f32	s16, s0
  if (sys.abort) { return; } // Block during abort.
 800754c:	b933      	cbnz	r3, 800755c <spindle_set_state+0x20>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 800754e:	b940      	cbnz	r0, 8007562 <spindle_set_state+0x26>
  
    #ifdef VARIABLE_SPINDLE
      sys.spindle_speed = 0.0;
 8007550:	2300      	movs	r3, #0
 8007552:	6123      	str	r3, [r4, #16]
    #endif
    spindle_stop();
 8007554:	f7ff ff4c 	bl	80073f0 <spindle_stop>
      #endif    
    #endif
  
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007558:	2300      	movs	r3, #0
 800755a:	7323      	strb	r3, [r4, #12]
}
 800755c:	ecbd 8b02 	vpop	{d8}
 8007560:	bd38      	pop	{r3, r4, r5, pc}
      if (state == SPINDLE_ENABLE_CW) {
 8007562:	2810      	cmp	r0, #16
 8007564:	d115      	bne.n	8007592 <spindle_set_state+0x56>
        ResetSpindleDirectionBit();
 8007566:	4601      	mov	r1, r0
 8007568:	480d      	ldr	r0, [pc, #52]	; (80075a0 <spindle_set_state+0x64>)
 800756a:	f001 fa31 	bl	80089d0 <GPIO_ResetBits>
      if (settings.flags & BITFLAG_LASER_MODE) { 
 800756e:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <spindle_set_state+0x68>)
 8007570:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007574:	079b      	lsls	r3, r3, #30
 8007576:	d505      	bpl.n	8007584 <spindle_set_state+0x48>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007578:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80075a8 <spindle_set_state+0x6c>
 800757c:	2d20      	cmp	r5, #32
 800757e:	bf08      	it	eq
 8007580:	eeb0 8a67 	vmoveq.f32	s16, s15
      spindle_set_speed(spindle_compute_pwm_value(rpm));
 8007584:	eeb0 0a48 	vmov.f32	s0, s16
 8007588:	f7ff ff6a 	bl	8007460 <spindle_compute_pwm_value>
 800758c:	f7ff ff5c 	bl	8007448 <spindle_set_speed>
 8007590:	e7e2      	b.n	8007558 <spindle_set_state+0x1c>
        SetSpindleDirectionBit();
 8007592:	2110      	movs	r1, #16
 8007594:	4802      	ldr	r0, [pc, #8]	; (80075a0 <spindle_set_state+0x64>)
 8007596:	f001 fa1e 	bl	80089d6 <GPIO_SetBits>
 800759a:	e7e8      	b.n	800756e <spindle_set_state+0x32>
 800759c:	20003948 	.word	0x20003948
 80075a0:	40020c00 	.word	0x40020c00
 80075a4:	2000447c 	.word	0x2000447c
 80075a8:	00000000 	.word	0x00000000

080075ac <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 80075ac:	b510      	push	{r4, lr}
 80075ae:	ed2d 8b02 	vpush	{d8}
    if (sys.state == STATE_CHECK_MODE) { return; }
 80075b2:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <spindle_sync+0x30>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b02      	cmp	r3, #2
  {
 80075b8:	4604      	mov	r4, r0
 80075ba:	eeb0 8a40 	vmov.f32	s16, s0
    if (sys.state == STATE_CHECK_MODE) { return; }
 80075be:	d00a      	beq.n	80075d6 <spindle_sync+0x2a>
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 80075c0:	f7fe ff34 	bl	800642c <protocol_buffer_synchronize>
    spindle_set_state(state,rpm);
 80075c4:	eeb0 0a48 	vmov.f32	s0, s16
  }
 80075c8:	ecbd 8b02 	vpop	{d8}
    spindle_set_state(state,rpm);
 80075cc:	4620      	mov	r0, r4
  }
 80075ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    spindle_set_state(state,rpm);
 80075d2:	f7ff bfb3 	b.w	800753c <spindle_set_state>
  }
 80075d6:	ecbd 8b02 	vpop	{d8}
 80075da:	bd10      	pop	{r4, pc}
 80075dc:	20003948 	.word	0x20003948

080075e0 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 80075e0:	b513      	push	{r0, r1, r4, lr}
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE))
 80075e2:	4c1d      	ldr	r4, [pc, #116]	; (8007658 <st_wake_up+0x78>)
  {
    SetStepperDisableBit();
 80075e4:	481d      	ldr	r0, [pc, #116]	; (800765c <st_wake_up+0x7c>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE))
 80075e6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 80075ea:	0753      	lsls	r3, r2, #29
    SetStepperDisableBit();
 80075ec:	f04f 0140 	mov.w	r1, #64	; 0x40
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE))
 80075f0:	d52e      	bpl.n	8007650 <st_wake_up+0x70>
    SetStepperDisableBit();
 80075f2:	f001 f9f0 	bl	80089d6 <GPIO_SetBits>
  {
    ResetStepperDisableBit();
  }

  // Initialize stepper output bits to ensure first ISR call does not step.
  st.step_outbits = step_port_invert_mask;
 80075f6:	4b1a      	ldr	r3, [pc, #104]	; (8007660 <st_wake_up+0x80>)
 80075f8:	491a      	ldr	r1, [pc, #104]	; (8007664 <st_wake_up+0x84>)
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	834b      	strh	r3, [r1, #26]
    #ifdef STM32
			#ifdef STM32F1
    		st.step_pulse_time = (settings.fpulse_microseconds)*uTICKS_PER_MICROSECOND;
			#endif
			#ifdef STM32F4
   		st.step_pulse_time = (settings.fpulse_microseconds)*uTICKS_PER_MICROSECOND;
 80075fe:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <st_wake_up+0x88>)
 8007600:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 8007604:	edd3 7a00 	vldr	s15, [r3]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007608:	4a18      	ldr	r2, [pc, #96]	; (800766c <st_wake_up+0x8c>)
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007616:	edcd 7a01 	vstr	s15, [sp, #4]
 800761a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800761e:	764b      	strb	r3, [r1, #25]
    #endif
  #endif

  // Enable Stepper Driver Interrupt
  #ifdef STM32
		LL_TIM_SetAutoReload(STEP_RESET_TIMER, st.step_pulse_time - 1);
 8007620:	3b01      	subs	r3, #1
 8007622:	62d3      	str	r3, [r2, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007624:	6953      	ldr	r3, [r2, #20]
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	6153      	str	r3, [r2, #20]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800762c:	f06f 0301 	mvn.w	r3, #1
 8007630:	6113      	str	r3, [r2, #16]
		LL_TIM_GenerateEvent_UPDATE(STEP_RESET_TIMER);
		LL_TIM_ClearFlag_UPDATE(STEP_RESET_TIMER);

		//TIM4->ARR = st.exec_segment->cycles_per_tick - 1;
		LL_TIM_SetAutoReload(STEP_SET_TIMER,st.exec_segment->cycles_per_tick - 1);
 8007632:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007634:	885a      	ldrh	r2, [r3, #2]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007636:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <st_wake_up+0x90>)
 8007638:	3a01      	subs	r2, #1
 800763a:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800763c:	695a      	ldr	r2, [r3, #20]
 800763e:	f042 0201 	orr.w	r2, r2, #1
 8007642:	615a      	str	r2, [r3, #20]
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <st_wake_up+0x94>)
 8007646:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800764a:	605a      	str	r2, [r3, #4]


  #elif ATMEGA328P
    TIMSK1 |= (1<<OCIE1A);
  #endif
}
 800764c:	b002      	add	sp, #8
 800764e:	bd10      	pop	{r4, pc}
    ResetStepperDisableBit();
 8007650:	f001 f9be 	bl	80089d0 <GPIO_ResetBits>
 8007654:	e7cf      	b.n	80075f6 <st_wake_up+0x16>
 8007656:	bf00      	nop
 8007658:	2000447c 	.word	0x2000447c
 800765c:	40020000 	.word	0x40020000
 8007660:	200038b0 	.word	0x200038b0
 8007664:	20003488 	.word	0x20003488
 8007668:	200038c0 	.word	0x200038c0
 800766c:	40001400 	.word	0x40001400
 8007670:	40000c00 	.word	0x40000c00
 8007674:	e000e100 	.word	0xe000e100

08007678 <st_go_idle>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007678:	4b19      	ldr	r3, [pc, #100]	; (80076e0 <st_go_idle+0x68>)
 800767a:	f44f 2280 	mov.w	r2, #262144	; 0x40000


// Stepper shutdown
void st_go_idle()
{
 800767e:	b510      	push	{r4, lr}
 8007680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007684:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007688:	f3bf 8f6f 	isb	sy
#endif
  busy = false;

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800768c:	4c15      	ldr	r4, [pc, #84]	; (80076e4 <st_go_idle+0x6c>)
  busy = false;
 800768e:	4b16      	ldr	r3, [pc, #88]	; (80076e8 <st_go_idle+0x70>)
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8007690:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
  busy = false;
 8007694:	2200      	movs	r2, #0
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8007696:	28ff      	cmp	r0, #255	; 0xff
  busy = false;
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	4a14      	ldr	r2, [pc, #80]	; (80076ec <st_go_idle+0x74>)
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800769c:	d107      	bne.n	80076ae <st_go_idle+0x36>
 800769e:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <st_go_idle+0x78>)
 80076a0:	7819      	ldrb	r1, [r3, #0]
 80076a2:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 80076a6:	b911      	cbnz	r1, 80076ae <st_go_idle+0x36>
 80076a8:	7811      	ldrb	r1, [r2, #0]
 80076aa:	2980      	cmp	r1, #128	; 0x80
 80076ac:	d105      	bne.n	80076ba <st_go_idle+0x42>
 80076ae:	7813      	ldrb	r3, [r2, #0]
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d00f      	beq.n	80076d4 <st_go_idle+0x5c>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
 80076b4:	f7fd fe7c 	bl	80053b0 <delay_ms>
    pin_state = true; // Override. Disable steppers.
 80076b8:	2301      	movs	r3, #1
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80076ba:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
  if (pin_state)
  {
    SetStepperDisableBit();
 80076be:	480d      	ldr	r0, [pc, #52]	; (80076f4 <st_go_idle+0x7c>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80076c0:	0752      	lsls	r2, r2, #29
 80076c2:	bf48      	it	mi
 80076c4:	f083 0301 	eormi.w	r3, r3, #1
    SetStepperDisableBit();
 80076c8:	2140      	movs	r1, #64	; 0x40
  if (pin_state)
 80076ca:	b12b      	cbz	r3, 80076d8 <st_go_idle+0x60>
  }
  else
  {
    ResetStepperDisableBit();
  }
}
 80076cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SetStepperDisableBit();
 80076d0:	f001 b981 	b.w	80089d6 <GPIO_SetBits>
  bool pin_state = false; // Keep enabled.
 80076d4:	2300      	movs	r3, #0
 80076d6:	e7f0      	b.n	80076ba <st_go_idle+0x42>
}
 80076d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ResetStepperDisableBit();
 80076dc:	f001 b978 	b.w	80089d0 <GPIO_ResetBits>
 80076e0:	e000e100 	.word	0xe000e100
 80076e4:	2000447c 	.word	0x2000447c
 80076e8:	20003344 	.word	0x20003344
 80076ec:	20003948 	.word	0x20003948
 80076f0:	20003990 	.word	0x20003990
 80076f4:	40020000 	.word	0x40020000

080076f8 <HandleStepSetIT>:
// int8 variables and update position counters only when a segment completes. This can get complicated
// with probing and homing cycles that require true real-time positions.

#ifdef STM32
void HandleStepSetIT(void)
{
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (busy) { return; } // The busy-flag is used to avoid reentering this interrupt
 80076fa:	4d91      	ldr	r5, [pc, #580]	; (8007940 <HandleStepSetIT+0x248>)
 80076fc:	782b      	ldrb	r3, [r5, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f040 810f 	bne.w	8007922 <HandleStepSetIT+0x22a>
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8007704:	4a8f      	ldr	r2, [pc, #572]	; (8007944 <HandleStepSetIT+0x24c>)

  // Set the direction pins a couple of nanoseconds before we step the steppers
  GPIO_Write(DIR_GPIO_Port, (GPIO_ReadOutputData(DIR_GPIO_Port) & ~DIR_MASK) | (st.dir_outbits & DIR_MASK));
 8007706:	4e90      	ldr	r6, [pc, #576]	; (8007948 <HandleStepSetIT+0x250>)
 8007708:	6951      	ldr	r1, [r2, #20]
 800770a:	8bb3      	ldrh	r3, [r6, #28]
  NVIC_EnableIRQ(STEP_RESET_IRQ);

  busy = true;

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 800770c:	6c37      	ldr	r7, [r6, #64]	; 0x40
  GPIO_Write(DIR_GPIO_Port, (GPIO_ReadOutputData(DIR_GPIO_Port) & ~DIR_MASK) | (st.dir_outbits & DIR_MASK));
 800770e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8007712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007716:	430b      	orrs	r3, r1
  WRITE_REG(GPIOx->ODR, PortValue);
 8007718:	6153      	str	r3, [r2, #20]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800771a:	4b8c      	ldr	r3, [pc, #560]	; (800794c <HandleStepSetIT+0x254>)
 800771c:	f06f 0101 	mvn.w	r1, #1
 8007720:	6119      	str	r1, [r3, #16]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8007722:	6953      	ldr	r3, [r2, #20]
    GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | st.step_outbits);
 8007724:	8b71      	ldrh	r1, [r6, #26]
 8007726:	f423 53fc 	bic.w	r3, r3, #8064	; 0x1f80
 800772a:	430b      	orrs	r3, r1
  WRITE_REG(GPIOx->ODR, PortValue);
 800772c:	6153      	str	r3, [r2, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800772e:	4b88      	ldr	r3, [pc, #544]	; (8007950 <HandleStepSetIT+0x258>)
 8007730:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007734:	605a      	str	r2, [r3, #4]
  busy = true;
 8007736:	2301      	movs	r3, #1
 8007738:	702b      	strb	r3, [r5, #0]
 800773a:	4634      	mov	r4, r6
  if (st.exec_segment == NULL) {
 800773c:	2f00      	cmp	r7, #0
 800773e:	d146      	bne.n	80077ce <HandleStepSetIT+0xd6>
    // Anything in the buffer? If so, load and initialize next step segment.
    if (segment_buffer_head != segment_buffer_tail) {
 8007740:	4b84      	ldr	r3, [pc, #528]	; (8007954 <HandleStepSetIT+0x25c>)
 8007742:	4985      	ldr	r1, [pc, #532]	; (8007958 <HandleStepSetIT+0x260>)
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	7809      	ldrb	r1, [r1, #0]
 8007748:	4291      	cmp	r1, r2
 800774a:	f000 80eb 	beq.w	8007924 <HandleStepSetIT+0x22c>
      // Initialize new step segment and load number of steps to execute
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	4982      	ldr	r1, [pc, #520]	; (800795c <HandleStepSetIT+0x264>)

      // Initialize step segment timing per step and load number of steps to execute.
      STEP_SET_TIMER->ARR = st.exec_segment->cycles_per_tick - 1;
 8007752:	4f83      	ldr	r7, [pc, #524]	; (8007960 <HandleStepSetIT+0x268>)
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8007754:	b2db      	uxtb	r3, r3
 8007756:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800775a:	6432      	str	r2, [r6, #64]	; 0x40
      STEP_SET_TIMER->ARR = st.exec_segment->cycles_per_tick - 1;
 800775c:	4616      	mov	r6, r2
 800775e:	8852      	ldrh	r2, [r2, #2]
 8007760:	3a01      	subs	r2, #1
 8007762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007764:	00d8      	lsls	r0, r3, #3
        //TIM4->PSC = st.exec_segment->prescaler;
      	STEP_SET_TIMER->PSC = st.exec_segment->prescaler;
      #endif


      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8007766:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800776a:	8723      	strh	r3, [r4, #56]	; 0x38
      // If the new segment starts a new planner block, initialize stepper variables and counters.
      // NOTE: When the segment data index changes, this indicates a new planner block.
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 800776c:	7932      	ldrb	r2, [r6, #4]
 800776e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8007772:	4293      	cmp	r3, r2
 8007774:	d00d      	beq.n	8007792 <HandleStepSetIT+0x9a>
        st.exec_block_index = st.exec_segment->st_block_index;
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8007776:	4b7b      	ldr	r3, [pc, #492]	; (8007964 <HandleStepSetIT+0x26c>)
        st.exec_block_index = st.exec_segment->st_block_index;
 8007778:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
        st.exec_block = &st_block_buffer[st.exec_block_index];
 800777c:	eb03 1642 	add.w	r6, r3, r2, lsl #5
 8007780:	63e6      	str	r6, [r4, #60]	; 0x3c

        // Initialize Bresenham line and distance counters
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = st.counter_c = (st.exec_block->step_event_count >> 1);
 8007782:	69b3      	ldr	r3, [r6, #24]
 8007784:	085b      	lsrs	r3, r3, #1
 8007786:	6163      	str	r3, [r4, #20]
 8007788:	6123      	str	r3, [r4, #16]
 800778a:	60e3      	str	r3, [r4, #12]
 800778c:	60a3      	str	r3, [r4, #8]
 800778e:	6063      	str	r3, [r4, #4]
 8007790:	6023      	str	r3, [r4, #0]
      }
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8007792:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007794:	4e74      	ldr	r6, [pc, #464]	; (8007968 <HandleStepSetIT+0x270>)
 8007796:	7f1a      	ldrb	r2, [r3, #28]
 8007798:	8836      	ldrh	r6, [r6, #0]

      #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
        // With AMASS enabled, adjust Bresenham axis increment counters according to AMASS level.
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800779a:	4401      	add	r1, r0
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 800779c:	4072      	eors	r2, r6
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800779e:	6818      	ldr	r0, [r3, #0]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80077a0:	83a2      	strh	r2, [r4, #28]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80077a2:	794a      	ldrb	r2, [r1, #5]
 80077a4:	40d0      	lsrs	r0, r2
 80077a6:	6220      	str	r0, [r4, #32]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80077a8:	6858      	ldr	r0, [r3, #4]
 80077aa:	40d0      	lsrs	r0, r2
 80077ac:	6260      	str	r0, [r4, #36]	; 0x24
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80077ae:	6898      	ldr	r0, [r3, #8]
 80077b0:	40d0      	lsrs	r0, r2
 80077b2:	62a0      	str	r0, [r4, #40]	; 0x28
        #if ( defined(STM32F1_5) || defined(STM32F4_5) )
          st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
          st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
        #endif
        #if ( defined(STM32F1_6) || defined(STM32F4_6) )
          st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80077b4:	68d8      	ldr	r0, [r3, #12]
 80077b6:	40d0      	lsrs	r0, r2
 80077b8:	62e0      	str	r0, [r4, #44]	; 0x2c
          st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
 80077ba:	6918      	ldr	r0, [r3, #16]
          st.steps[C_AXIS] = st.exec_block->steps[C_AXIS] >> st.exec_segment->amass_level;
 80077bc:	695b      	ldr	r3, [r3, #20]
          st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
 80077be:	40d0      	lsrs	r0, r2
 80077c0:	6320      	str	r0, [r4, #48]	; 0x30
          st.steps[C_AXIS] = st.exec_block->steps[C_AXIS] >> st.exec_segment->amass_level;
 80077c2:	fa23 f202 	lsr.w	r2, r3, r2
        #endif
      #endif

      #ifdef VARIABLE_SPINDLE
        // Set real-time spindle output as segment is loaded, just prior to the first step.
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80077c6:	88c8      	ldrh	r0, [r1, #6]
          st.steps[C_AXIS] = st.exec_block->steps[C_AXIS] >> st.exec_segment->amass_level;
 80077c8:	6362      	str	r2, [r4, #52]	; 0x34
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80077ca:	f7ff fe3d 	bl	8007448 <spindle_set_speed>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 80077ce:	4b67      	ldr	r3, [pc, #412]	; (800796c <HandleStepSetIT+0x274>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HandleStepSetIT+0xe2>
 80077d6:	f7fe fadb 	bl	8005d90 <probe_state_monitor>

  // Reset step out bits.
  st.step_outbits = 0;
 80077da:	2300      	movs	r3, #0

  // Execute step displacement profile by Bresenham line algorithm
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
 80077dc:	6821      	ldr	r1, [r4, #0]
  st.step_outbits = 0;
 80077de:	8363      	strh	r3, [r4, #26]
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 80077e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    st.counter_x += st.steps[X_AXIS];
 80077e2:	6a23      	ldr	r3, [r4, #32]
 80077e4:	4419      	add	r1, r3
  if (st.counter_x > st.exec_block->step_event_count) {
 80077e6:	6993      	ldr	r3, [r2, #24]
    st.counter_x += st.steps[X_AXIS];
 80077e8:	6021      	str	r1, [r4, #0]
  if (st.counter_x > st.exec_block->step_event_count) {
 80077ea:	4299      	cmp	r1, r3
 80077ec:	d90e      	bls.n	800780c <HandleStepSetIT+0x114>
    st.step_outbits |= STEP_X_Pin;
    st.counter_x -= st.exec_block->step_event_count;
 80077ee:	1ac9      	subs	r1, r1, r3
 80077f0:	6021      	str	r1, [r4, #0]
    if (st.exec_block->direction_bits & DIR_X_Pin) { sys_position[X_AXIS]--; }
 80077f2:	7f11      	ldrb	r1, [r2, #28]
 80077f4:	f011 0f01 	tst.w	r1, #1
 80077f8:	495d      	ldr	r1, [pc, #372]	; (8007970 <HandleStepSetIT+0x278>)
    st.step_outbits |= STEP_X_Pin;
 80077fa:	f04f 0080 	mov.w	r0, #128	; 0x80
 80077fe:	8360      	strh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_X_Pin) { sys_position[X_AXIS]--; }
 8007800:	6808      	ldr	r0, [r1, #0]
 8007802:	bf14      	ite	ne
 8007804:	f100 30ff 	addne.w	r0, r0, #4294967295
    else { sys_position[X_AXIS]++; }
 8007808:	3001      	addeq	r0, #1
 800780a:	6008      	str	r0, [r1, #0]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 800780c:	6861      	ldr	r1, [r4, #4]
 800780e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007810:	4401      	add	r1, r0
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 8007812:	428b      	cmp	r3, r1
    st.counter_y += st.steps[Y_AXIS];
 8007814:	6061      	str	r1, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 8007816:	d20f      	bcs.n	8007838 <HandleStepSetIT+0x140>
    st.step_outbits |= STEP_Y_Pin;
    st.counter_y -= st.exec_block->step_event_count;
 8007818:	1ac9      	subs	r1, r1, r3
 800781a:	6061      	str	r1, [r4, #4]
    if (st.exec_block->direction_bits & DIR_Y_Pin) { sys_position[Y_AXIS]--; }
 800781c:	7f11      	ldrb	r1, [r2, #28]
    st.step_outbits |= STEP_Y_Pin;
 800781e:	8b60      	ldrh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_Y_Pin) { sys_position[Y_AXIS]--; }
 8007820:	f011 0f02 	tst.w	r1, #2
 8007824:	4952      	ldr	r1, [pc, #328]	; (8007970 <HandleStepSetIT+0x278>)
    st.step_outbits |= STEP_Y_Pin;
 8007826:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800782a:	8360      	strh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_Y_Pin) { sys_position[Y_AXIS]--; }
 800782c:	6848      	ldr	r0, [r1, #4]
 800782e:	bf14      	ite	ne
 8007830:	f100 30ff 	addne.w	r0, r0, #4294967295
    else { sys_position[Y_AXIS]++; }
 8007834:	3001      	addeq	r0, #1
 8007836:	6048      	str	r0, [r1, #4]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 8007838:	68a1      	ldr	r1, [r4, #8]
 800783a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800783c:	4401      	add	r1, r0
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 800783e:	428b      	cmp	r3, r1
    st.counter_z += st.steps[Z_AXIS];
 8007840:	60a1      	str	r1, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 8007842:	d20f      	bcs.n	8007864 <HandleStepSetIT+0x16c>
    st.step_outbits |= STEP_Z_Pin;
    st.counter_z -= st.exec_block->step_event_count;
 8007844:	1ac9      	subs	r1, r1, r3
 8007846:	60a1      	str	r1, [r4, #8]
    if (st.exec_block->direction_bits & DIR_Z_Pin) { sys_position[Z_AXIS]--; }
 8007848:	7f11      	ldrb	r1, [r2, #28]
    st.step_outbits |= STEP_Z_Pin;
 800784a:	8b60      	ldrh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_Z_Pin) { sys_position[Z_AXIS]--; }
 800784c:	f011 0f04 	tst.w	r1, #4
 8007850:	4947      	ldr	r1, [pc, #284]	; (8007970 <HandleStepSetIT+0x278>)
    st.step_outbits |= STEP_Z_Pin;
 8007852:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8007856:	8360      	strh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_Z_Pin) { sys_position[Z_AXIS]--; }
 8007858:	6888      	ldr	r0, [r1, #8]
 800785a:	bf14      	ite	ne
 800785c:	f100 30ff 	addne.w	r0, r0, #4294967295
    else { sys_position[Z_AXIS]++; }
 8007860:	3001      	addeq	r0, #1
 8007862:	6088      	str	r0, [r1, #8]
    else { sys_position[B_AXIS]++; }
  }
#endif
#if ( defined(STM32F1_6) || defined(STM32F4_6) )
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_a += st.steps[A_AXIS];
 8007864:	68e1      	ldr	r1, [r4, #12]
 8007866:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007868:	4401      	add	r1, r0
  #else
    st.counter_a += st.exec_block->steps[A_AXIS];
  #endif
  if (st.counter_a > st.exec_block->step_event_count) {
 800786a:	428b      	cmp	r3, r1
    st.counter_a += st.steps[A_AXIS];
 800786c:	60e1      	str	r1, [r4, #12]
  if (st.counter_a > st.exec_block->step_event_count) {
 800786e:	d20f      	bcs.n	8007890 <HandleStepSetIT+0x198>
    st.step_outbits |= STEP_A_Pin;
    st.counter_a -= st.exec_block->step_event_count;
 8007870:	1ac9      	subs	r1, r1, r3
 8007872:	60e1      	str	r1, [r4, #12]
    if (st.exec_block->direction_bits & DIR_A_Pin) { sys_position[A_AXIS]--; }
 8007874:	7f11      	ldrb	r1, [r2, #28]
    st.step_outbits |= STEP_A_Pin;
 8007876:	8b60      	ldrh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_A_Pin) { sys_position[A_AXIS]--; }
 8007878:	f011 0f08 	tst.w	r1, #8
 800787c:	493c      	ldr	r1, [pc, #240]	; (8007970 <HandleStepSetIT+0x278>)
    st.step_outbits |= STEP_A_Pin;
 800787e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8007882:	8360      	strh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_A_Pin) { sys_position[A_AXIS]--; }
 8007884:	68c8      	ldr	r0, [r1, #12]
 8007886:	bf14      	ite	ne
 8007888:	f100 30ff 	addne.w	r0, r0, #4294967295
    else { sys_position[A_AXIS]++; }
 800788c:	3001      	addeq	r0, #1
 800788e:	60c8      	str	r0, [r1, #12]
  }

  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_b += st.steps[B_AXIS];
 8007890:	6921      	ldr	r1, [r4, #16]
 8007892:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007894:	4401      	add	r1, r0
  #else
    st.counter_b += st.exec_block->steps[B_AXIS];
  #endif
  if (st.counter_b > st.exec_block->step_event_count) {
 8007896:	428b      	cmp	r3, r1
    st.counter_b += st.steps[B_AXIS];
 8007898:	6121      	str	r1, [r4, #16]
  if (st.counter_b > st.exec_block->step_event_count) {
 800789a:	d20f      	bcs.n	80078bc <HandleStepSetIT+0x1c4>
    st.step_outbits |= STEP_B_Pin;
    st.counter_b -= st.exec_block->step_event_count;
 800789c:	1ac9      	subs	r1, r1, r3
 800789e:	6121      	str	r1, [r4, #16]
    if (st.exec_block->direction_bits & DIR_B_Pin) { sys_position[B_AXIS]--; }
 80078a0:	7f11      	ldrb	r1, [r2, #28]
    st.step_outbits |= STEP_B_Pin;
 80078a2:	8b60      	ldrh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_B_Pin) { sys_position[B_AXIS]--; }
 80078a4:	f011 0f10 	tst.w	r1, #16
 80078a8:	4931      	ldr	r1, [pc, #196]	; (8007970 <HandleStepSetIT+0x278>)
    st.step_outbits |= STEP_B_Pin;
 80078aa:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80078ae:	8360      	strh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_B_Pin) { sys_position[B_AXIS]--; }
 80078b0:	6908      	ldr	r0, [r1, #16]
 80078b2:	bf14      	ite	ne
 80078b4:	f100 30ff 	addne.w	r0, r0, #4294967295
    else { sys_position[B_AXIS]++; }
 80078b8:	3001      	addeq	r0, #1
 80078ba:	6108      	str	r0, [r1, #16]
  }

  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_c += st.steps[C_AXIS];
 80078bc:	6961      	ldr	r1, [r4, #20]
 80078be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80078c0:	4401      	add	r1, r0
  #else
    st.counter_c += st.exec_block->steps[C_AXIS];
  #endif
  if (st.counter_c > st.exec_block->step_event_count) {
 80078c2:	428b      	cmp	r3, r1
    st.counter_c += st.steps[C_AXIS];
 80078c4:	6161      	str	r1, [r4, #20]
  if (st.counter_c > st.exec_block->step_event_count) {
 80078c6:	d20f      	bcs.n	80078e8 <HandleStepSetIT+0x1f0>
    st.step_outbits |= STEP_C_Pin;
    st.counter_c -= st.exec_block->step_event_count;
 80078c8:	1acb      	subs	r3, r1, r3
 80078ca:	6163      	str	r3, [r4, #20]
    if (st.exec_block->direction_bits & DIR_C_Pin) { sys_position[C_AXIS]--; }
 80078cc:	7f13      	ldrb	r3, [r2, #28]
    st.step_outbits |= STEP_C_Pin;
 80078ce:	8b60      	ldrh	r0, [r4, #26]
    if (st.exec_block->direction_bits & DIR_C_Pin) { sys_position[C_AXIS]--; }
 80078d0:	f013 0f20 	tst.w	r3, #32
 80078d4:	4b26      	ldr	r3, [pc, #152]	; (8007970 <HandleStepSetIT+0x278>)
 80078d6:	695a      	ldr	r2, [r3, #20]
    st.step_outbits |= STEP_C_Pin;
 80078d8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    if (st.exec_block->direction_bits & DIR_C_Pin) { sys_position[C_AXIS]--; }
 80078dc:	bf14      	ite	ne
 80078de:	f102 32ff 	addne.w	r2, r2, #4294967295
    else { sys_position[C_AXIS]++; }
 80078e2:	3201      	addeq	r2, #1
    st.step_outbits |= STEP_C_Pin;
 80078e4:	8360      	strh	r0, [r4, #26]
    else { sys_position[C_AXIS]++; }
 80078e6:	615a      	str	r2, [r3, #20]
  }
#endif

  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 80078e8:	4a22      	ldr	r2, [pc, #136]	; (8007974 <HandleStepSetIT+0x27c>)
 80078ea:	7813      	ldrb	r3, [r2, #0]
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	bf01      	itttt	eq
 80078f0:	8b63      	ldrheq	r3, [r4, #26]
 80078f2:	88d2      	ldrheq	r2, [r2, #6]
 80078f4:	4013      	andeq	r3, r2
 80078f6:	8363      	strheq	r3, [r4, #26]

  st.step_count--; // Decrement step events count
 80078f8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	8723      	strh	r3, [r4, #56]	; 0x38
  if (st.step_count == 0) {
 8007900:	b943      	cbnz	r3, 8007914 <HandleStepSetIT+0x21c>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;

    //if ( ++segment_buffer_tail == SEGMENT_BUFFER_SIZE) { segment_buffer_tail = 0; }
  	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8007902:	4a14      	ldr	r2, [pc, #80]	; (8007954 <HandleStepSetIT+0x25c>)
    st.exec_segment = NULL;
 8007904:	6423      	str	r3, [r4, #64]	; 0x40
  	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8007906:	7813      	ldrb	r3, [r2, #0]
 8007908:	3301      	adds	r3, #1
 800790a:	b2db      	uxtb	r3, r3
  	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
  		segment_tail_next = 0;
 800790c:	2b20      	cmp	r3, #32
 800790e:	bf08      	it	eq
 8007910:	2300      	moveq	r3, #0
  	segment_buffer_tail = segment_tail_next;
 8007912:	7013      	strb	r3, [r2, #0]
  }




  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8007914:	4a18      	ldr	r2, [pc, #96]	; (8007978 <HandleStepSetIT+0x280>)
 8007916:	8b63      	ldrh	r3, [r4, #26]
 8007918:	8812      	ldrh	r2, [r2, #0]
 800791a:	4053      	eors	r3, r2
 800791c:	8363      	strh	r3, [r4, #26]
  busy = false;
 800791e:	2300      	movs	r3, #0
 8007920:	702b      	strb	r3, [r5, #0]
 8007922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      st_go_idle();
 8007924:	f7ff fea8 	bl	8007678 <st_go_idle>
        if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 8007928:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800792a:	7f5b      	ldrb	r3, [r3, #29]
 800792c:	b113      	cbz	r3, 8007934 <HandleStepSetIT+0x23c>
 800792e:	4638      	mov	r0, r7
 8007930:	f7ff fd8a 	bl	8007448 <spindle_set_speed>
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 8007934:	2004      	movs	r0, #4


}
 8007936:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 800793a:	f000 bceb 	b.w	8008314 <system_set_exec_state_flag>
 800793e:	bf00      	nop
 8007940:	20003344 	.word	0x20003344
 8007944:	40020000 	.word	0x40020000
 8007948:	20003488 	.word	0x20003488
 800794c:	40001400 	.word	0x40001400
 8007950:	e000e100 	.word	0xe000e100
 8007954:	20003485 	.word	0x20003485
 8007958:	20003484 	.word	0x20003484
 800795c:	20003384 	.word	0x20003384
 8007960:	40000c00 	.word	0x40000c00
 8007964:	200034cc 	.word	0x200034cc
 8007968:	20003346 	.word	0x20003346
 800796c:	2000395e 	.word	0x2000395e
 8007970:	20003978 	.word	0x20003978
 8007974:	20003948 	.word	0x20003948
 8007978:	200038b0 	.word	0x200038b0

0800797c <HandleStepResetIT>:
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800797c:	4905      	ldr	r1, [pc, #20]	; (8007994 <HandleStepResetIT+0x18>)
// a step. This ISR resets the motor port after a short period (settings.pulse_microseconds)
// completing one step cycle.

void HandleStepResetIT()
{
  GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 800797e:	4b06      	ldr	r3, [pc, #24]	; (8007998 <HandleStepResetIT+0x1c>)
 8007980:	694a      	ldr	r2, [r1, #20]
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	f422 52fc 	bic.w	r2, r2, #8064	; 0x1f80
 8007988:	f403 53fc 	and.w	r3, r3, #8064	; 0x1f80
 800798c:	4313      	orrs	r3, r2
  WRITE_REG(GPIOx->ODR, PortValue);
 800798e:	614b      	str	r3, [r1, #20]
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40020000 	.word	0x40020000
 8007998:	200038b0 	.word	0x200038b0

0800799c <st_generate_step_dir_invert_masks>:
#endif


// Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
void st_generate_step_dir_invert_masks()
{
 800799c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t idx;
  step_port_invert_mask = 0;
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    #ifdef STM32
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80079a0:	4817      	ldr	r0, [pc, #92]	; (8007a00 <st_generate_step_dir_invert_masks+0x64>)
  step_port_invert_mask = 0;
 80079a2:	4918      	ldr	r1, [pc, #96]	; (8007a04 <st_generate_step_dir_invert_masks+0x68>)
  dir_port_invert_mask = 0;
 80079a4:	4a18      	ldr	r2, [pc, #96]	; (8007a08 <st_generate_step_dir_invert_masks+0x6c>)
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80079a6:	f8df c064 	ldr.w	ip, [pc, #100]	; 8007a0c <st_generate_step_dir_invert_masks+0x70>
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80079aa:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8007a10 <st_generate_step_dir_invert_masks+0x74>
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80079ae:	f890 7064 	ldrb.w	r7, [r0, #100]	; 0x64
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80079b2:	f890 e065 	ldrb.w	lr, [r0, #101]	; 0x65
  step_port_invert_mask = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	800b      	strh	r3, [r1, #0]
  dir_port_invert_mask = 0;
 80079ba:	8013      	strh	r3, [r2, #0]
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80079bc:	461d      	mov	r5, r3
 80079be:	4618      	mov	r0, r3
 80079c0:	461e      	mov	r6, r3
 80079c2:	461c      	mov	r4, r3
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80079c4:	fa47 f903 	asr.w	r9, r7, r3
 80079c8:	f019 0f01 	tst.w	r9, #1
 80079cc:	bf18      	it	ne
 80079ce:	f83c 6013 	ldrhne.w	r6, [ip, r3, lsl #1]
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80079d2:	fa4e f903 	asr.w	r9, lr, r3
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80079d6:	bf1c      	itt	ne
 80079d8:	4334      	orrne	r4, r6
 80079da:	2601      	movne	r6, #1
      if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80079dc:	f019 0f01 	tst.w	r9, #1
 80079e0:	bf18      	it	ne
 80079e2:	f838 5013 	ldrhne.w	r5, [r8, r3, lsl #1]
 80079e6:	f103 0301 	add.w	r3, r3, #1
 80079ea:	bf1c      	itt	ne
 80079ec:	4328      	orrne	r0, r5
 80079ee:	2501      	movne	r5, #1
  for (idx=0; idx<N_AXIS; idx++) {
 80079f0:	2b06      	cmp	r3, #6
 80079f2:	d1e7      	bne.n	80079c4 <st_generate_step_dir_invert_masks+0x28>
 80079f4:	b106      	cbz	r6, 80079f8 <st_generate_step_dir_invert_masks+0x5c>
 80079f6:	800c      	strh	r4, [r1, #0]
 80079f8:	b105      	cbz	r5, 80079fc <st_generate_step_dir_invert_masks+0x60>
 80079fa:	8010      	strh	r0, [r2, #0]
 80079fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a00:	2000447c 	.word	0x2000447c
 8007a04:	200038b0 	.word	0x200038b0
 8007a08:	20003346 	.word	0x20003346
 8007a0c:	0800ad04 	.word	0x0800ad04
 8007a10:	0800acec 	.word	0x0800acec

08007a14 <st_reset>:
}


// Reset and clear stepper subsystem variables
void st_reset()
{
 8007a14:	b510      	push	{r4, lr}
  // Initialize stepper driver idle state.
  st_go_idle();

  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
  memset(&st, 0, sizeof(stepper_t));
 8007a16:	4c18      	ldr	r4, [pc, #96]	; (8007a78 <st_reset+0x64>)
  st_go_idle();
 8007a18:	f7ff fe2e 	bl	8007678 <st_go_idle>
  memset(&prep, 0, sizeof(st_prep_t));
 8007a1c:	2238      	movs	r2, #56	; 0x38
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4816      	ldr	r0, [pc, #88]	; (8007a7c <st_reset+0x68>)
 8007a22:	f001 f986 	bl	8008d32 <memset>
  memset(&st, 0, sizeof(stepper_t));
 8007a26:	2244      	movs	r2, #68	; 0x44
 8007a28:	2100      	movs	r1, #0
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f001 f981 	bl	8008d32 <memset>
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8007a30:	4a13      	ldr	r2, [pc, #76]	; (8007a80 <st_reset+0x6c>)
 8007a32:	2300      	movs	r3, #0
 8007a34:	6013      	str	r3, [r2, #0]
  segment_buffer_tail = 0;
 8007a36:	4a13      	ldr	r2, [pc, #76]	; (8007a84 <st_reset+0x70>)
 8007a38:	7013      	strb	r3, [r2, #0]
  segment_buffer_head = 0; // empty = tail
 8007a3a:	4a13      	ldr	r2, [pc, #76]	; (8007a88 <st_reset+0x74>)
 8007a3c:	7013      	strb	r3, [r2, #0]
  segment_next_head = 1;
 8007a3e:	4a13      	ldr	r2, [pc, #76]	; (8007a8c <st_reset+0x78>)
 8007a40:	2101      	movs	r1, #1
 8007a42:	7011      	strb	r1, [r2, #0]
  busy = false;
 8007a44:	4a12      	ldr	r2, [pc, #72]	; (8007a90 <st_reset+0x7c>)
 8007a46:	7013      	strb	r3, [r2, #0]

  st_generate_step_dir_invert_masks();
 8007a48:	f7ff ffa8 	bl	800799c <st_generate_step_dir_invert_masks>
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8007a4c:	4911      	ldr	r1, [pc, #68]	; (8007a94 <st_reset+0x80>)
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8007a4e:	4b12      	ldr	r3, [pc, #72]	; (8007a98 <st_reset+0x84>)

  // Initialize step and direction port pins.
#ifdef STM32
  GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8007a50:	4a12      	ldr	r2, [pc, #72]	; (8007a9c <st_reset+0x88>)
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8007a52:	8818      	ldrh	r0, [r3, #0]
  GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8007a54:	8812      	ldrh	r2, [r2, #0]
 8007a56:	694b      	ldr	r3, [r1, #20]
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8007a58:	83a0      	strh	r0, [r4, #28]
  GPIO_Write(STEP_GPIO_Port, (GPIO_ReadOutputData(STEP_GPIO_Port) & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8007a5a:	f423 53fc 	bic.w	r3, r3, #8064	; 0x1f80
 8007a5e:	f402 52fc 	and.w	r2, r2, #8064	; 0x1f80
 8007a62:	431a      	orrs	r2, r3
  WRITE_REG(GPIOx->ODR, PortValue);
 8007a64:	614a      	str	r2, [r1, #20]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8007a66:	694b      	ldr	r3, [r1, #20]
  GPIO_Write(DIR_GPIO_Port, (GPIO_ReadOutputData(DIR_GPIO_Port) & ~DIR_MASK) | (dir_port_invert_mask & DIR_MASK));
 8007a68:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007a6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a70:	4303      	orrs	r3, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8007a72:	614b      	str	r3, [r1, #20]
 8007a74:	bd10      	pop	{r4, pc}
 8007a76:	bf00      	nop
 8007a78:	20003488 	.word	0x20003488
 8007a7c:	2000334c 	.word	0x2000334c
 8007a80:	20003348 	.word	0x20003348
 8007a84:	20003485 	.word	0x20003485
 8007a88:	20003484 	.word	0x20003484
 8007a8c:	20003486 	.word	0x20003486
 8007a90:	20003344 	.word	0x20003344
 8007a94:	40020000 	.word	0x40020000
 8007a98:	20003346 	.word	0x20003346
 8007a9c:	200038b0 	.word	0x200038b0

08007aa0 <stepper_init>:
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007aa0:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <stepper_init+0x50>)
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	f042 0201 	orr.w	r2, r2, #1
 8007aa8:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	f042 0201 	orr.w	r2, r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007ab2:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8007ab6:	f042 0201 	orr.w	r2, r2, #1
 8007aba:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007abe:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8007ac2:	f042 0201 	orr.w	r2, r2, #1
 8007ac6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007aca:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <stepper_init+0x54>)
 8007acc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007ad4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007ae4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40000c00 	.word	0x40000c00
 8007af4:	e000e100 	.word	0xe000e100

08007af8 <st_update_plan_block_parameters>:


// Called by planner_recalculate() when the executing block is updated by the new plan.
void st_update_plan_block_parameters()
{
  if (pl_block != NULL) { // Ignore if at start of a new block.
 8007af8:	4908      	ldr	r1, [pc, #32]	; (8007b1c <st_update_plan_block_parameters+0x24>)
 8007afa:	6808      	ldr	r0, [r1, #0]
 8007afc:	b160      	cbz	r0, 8007b18 <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8007afe:	4b08      	ldr	r3, [pc, #32]	; (8007b20 <st_update_plan_block_parameters+0x28>)
 8007b00:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8007b02:	edd3 7a07 	vldr	s15, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8007b06:	f042 0201 	orr.w	r2, r2, #1
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8007b0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8007b0e:	705a      	strb	r2, [r3, #1]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8007b10:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8007b12:	edc0 7a08 	vstr	s15, [r0, #32]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8007b16:	600b      	str	r3, [r1, #0]
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20003348 	.word	0x20003348
 8007b20:	2000334c 	.word	0x2000334c
 8007b24:	00000000 	.word	0x00000000

08007b28 <st_prep_buffer>:
   longer than the time it takes the stepper algorithm to empty it before refilling it.
   Currently, the segment buffer conservatively holds roughly up to 40-50 msec of steps.
   NOTE: Computation units are in steps, millimeters, and minutes.
*/
void st_prep_buffer()
{
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
	if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8007b2c:	4dc4      	ldr	r5, [pc, #784]	; (8007e40 <st_prep_buffer+0x318>)
{
 8007b2e:	ed2d 8b0c 	vpush	{d8-d13}
	if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8007b32:	792b      	ldrb	r3, [r5, #4]
 8007b34:	07dc      	lsls	r4, r3, #31
{
 8007b36:	b085      	sub	sp, #20
	if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8007b38:	f100 8112 	bmi.w	8007d60 <st_prep_buffer+0x238>

	while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8007b3c:	4bc1      	ldr	r3, [pc, #772]	; (8007e44 <st_prep_buffer+0x31c>)
 8007b3e:	4ac2      	ldr	r2, [pc, #776]	; (8007e48 <st_prep_buffer+0x320>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	7812      	ldrb	r2, [r2, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	f000 810b 	beq.w	8007d60 <st_prep_buffer+0x238>

		// Determine if we need to load a new planner block or if the block needs to be recomputed.
		if (pl_block == NULL) {
 8007b4a:	4fc0      	ldr	r7, [pc, #768]	; (8007e4c <st_prep_buffer+0x324>)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d141      	bne.n	8007bd6 <st_prep_buffer+0xae>

			// Query planner for a queued block
			if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8007b52:	792b      	ldrb	r3, [r5, #4]
 8007b54:	0758      	lsls	r0, r3, #29
 8007b56:	f140 8108 	bpl.w	8007d6a <st_prep_buffer+0x242>
 8007b5a:	f7fd fd71 	bl	8005640 <plan_get_system_motion_block>
			else { pl_block = plan_get_current_block(); }
 8007b5e:	6038      	str	r0, [r7, #0]
			if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8007b60:	683e      	ldr	r6, [r7, #0]
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	f000 80fc 	beq.w	8007d60 <st_prep_buffer+0x238>

			// Check if we need to only recompute the velocity profile or load a new block.
			if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 8007b68:	4cb9      	ldr	r4, [pc, #740]	; (8007e50 <st_prep_buffer+0x328>)
 8007b6a:	f894 e001 	ldrb.w	lr, [r4, #1]
 8007b6e:	f01e 0101 	ands.w	r1, lr, #1
 8007b72:	f000 80fd 	beq.w	8007d70 <st_prep_buffer+0x248>

				#ifdef PARKING_ENABLE
					if (prep.recalculate_flag & PREP_FLAG_PARKING) { prep.recalculate_flag &= ~(PREP_FLAG_RECALCULATE); }
					else { prep.recalculate_flag = false; }
				#else
					prep.recalculate_flag = false;
 8007b76:	2300      	movs	r3, #0
 8007b78:	7063      	strb	r3, [r4, #1]
			 speeds, or recompute the profile of a partially-completed planner block if the
			 planner has updated it. For a commanded forced-deceleration, such as from a feed
			 hold, override the planner velocities and decelerate to the target exit speed.
			*/
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
			float inv_2_accel = 0.5f/pl_block->pbacceleration;
 8007b7a:	6839      	ldr	r1, [r7, #0]
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8007b7c:	792b      	ldrb	r3, [r5, #4]
			float inv_2_accel = 0.5f/pl_block->pbacceleration;
 8007b7e:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8007b82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007b86:	2200      	movs	r2, #0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8007b88:	f013 0002 	ands.w	r0, r3, #2
			float inv_2_accel = 0.5f/pl_block->pbacceleration;
 8007b8c:	ee87 8a27 	vdiv.f32	s16, s14, s15
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007b90:	61a2      	str	r2, [r4, #24]
 8007b92:	eeb0 9a47 	vmov.f32	s18, s14
 8007b96:	ee09 2a90 	vmov	s19, r2
 8007b9a:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8007b9e:	f000 8167 	beq.w	8007e70 <st_prep_buffer+0x348>
				// Compute velocity profile parameters for a feed hold in-progress. This profile overrides
				// the planner block profile, enforcing a deceleration to zero speed.
				prep.ramp_type = RAMP_DECEL;
				// Compute decelerate distance relative to end of block.
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8007ba2:	ed91 0a08 	vldr	s0, [r1, #32]
 8007ba6:	eef0 6a47 	vmov.f32	s13, s14
 8007baa:	eee8 6a40 	vfms.f32	s13, s16, s0
				prep.ramp_type = RAMP_DECEL;
 8007bae:	2302      	movs	r3, #2
 8007bb0:	7523      	strb	r3, [r4, #20]
				if (decel_dist < 0.0f) {
 8007bb2:	eef4 6ae9 	vcmpe.f32	s13, s19
 8007bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bba:	f140 813d 	bpl.w	8007e38 <st_prep_buffer+0x310>
					// Deceleration through entire planner block. End of feed hold is not in this block.
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->pbacceleration*pl_block->millimeters);
 8007bbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007bc2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007bc6:	f001 ffc3 	bl	8009b50 <sqrtf>
 8007bca:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
					prep.maximum_speed = prep.exit_speed;
				}
			}

			#ifdef VARIABLE_SPINDLE
				bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007bce:	792b      	ldrb	r3, [r5, #4]
 8007bd0:	f043 0308 	orr.w	r3, r3, #8
 8007bd4:	712b      	strb	r3, [r5, #4]
			#endif
		}

		// Initialize new segment
		segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8007bd6:	4b9f      	ldr	r3, [pc, #636]	; (8007e54 <st_prep_buffer+0x32c>)

		// Set new segment to point to the current segment data block.
		prep_segment->st_block_index = prep.st_block_index;
 8007bd8:	4c9d      	ldr	r4, [pc, #628]	; (8007e50 <st_prep_buffer+0x328>)
		segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	9301      	str	r3, [sp, #4]
		prep_segment->st_block_index = prep.st_block_index;
 8007bde:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8007be2:	4b9d      	ldr	r3, [pc, #628]	; (8007e58 <st_prep_buffer+0x330>)
 8007be4:	7822      	ldrb	r2, [r4, #0]
		float dt = 0.0f; // Initialize segment time
		float time_var = dt_max; // Time worker variable
		float mm_var; // mm-Distance worker variable
		float speed_var; // Speed worker variable
		float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
		float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8007be6:	ed94 aa04 	vldr	s20, [r4, #16]
 8007bea:	eddf ca9c 	vldr	s25, [pc, #624]	; 8007e5c <st_prep_buffer+0x334>
			switch (prep.ramp_type) {
				case RAMP_DECEL_OVERRIDE:
					speed_var = pl_block->pbacceleration*time_var;
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
						// Cruise or cruise-deceleration types only for deceleration override.
						mm_remaining = prep.accelerate_until;
 8007bee:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
				case RAMP_CRUISE:
					// NOTE: mm_var used to retain the last mm_remaining for incomplete segment time_var calculations.
					// NOTE: If maximum_speed*time_var value is too low, round-off can cause mm_var to not change. To
					//   prevent this, simply enforce a minimum speed threshold in the planner.
					mm_var = mm_remaining - prep.maximum_speed*time_var;
					if (mm_var < prep.decelerate_after) { // End of cruise.
 8007bf2:	ed94 ca0b 	vldr	s24, [r4, #44]	; 0x2c
							prep.current_speed -= speed_var;
							break; // Segment complete. Exit switch-case statement. Continue do-while loop.
						}
					}
					// Otherwise, at end of block or end of forced-deceleration.
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007bf6:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8007e60 <st_prep_buffer+0x338>
 8007bfa:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8007e58 <st_prep_buffer+0x330>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007bfe:	edd4 9a08 	vldr	s19, [r4, #32]
 8007c02:	ed94 8a07 	vldr	s16, [r4, #28]
 8007c06:	f894 a014 	ldrb.w	sl, [r4, #20]
						if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007c0a:	ed94 ba06 	vldr	s22, [r4, #24]
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007c0e:	edd4 da09 	vldr	s27, [r4, #36]	; 0x24
		prep_segment->st_block_index = prep.st_block_index;
 8007c12:	444b      	add	r3, r9
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007c14:	2600      	movs	r6, #0
		prep_segment->st_block_index = prep.st_block_index;
 8007c16:	711a      	strb	r2, [r3, #4]
		float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	9302      	str	r3, [sp, #8]
 8007c1c:	edd3 ba0b 	vldr	s23, [r3, #44]	; 0x2c
		float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8007c20:	ee3b aaca 	vsub.f32	s20, s23, s20
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007c24:	eeb0 7a6b 	vmov.f32	s14, s23
		if (minimum_mm < 0.0f) { minimum_mm = 0.0f; }
 8007c28:	eeb4 aa6c 	vcmp.f32	s20, s25
 8007c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c30:	eef4 aa4c 	vcmp.f32	s21, s24
 8007c34:	bf48      	it	mi
 8007c36:	eeb0 aa6c 	vmovmi.f32	s20, s25
 8007c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3e:	bf0c      	ite	eq
 8007c40:	2302      	moveq	r3, #2
 8007c42:	2301      	movne	r3, #1
 8007c44:	9303      	str	r3, [sp, #12]
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007c46:	46b3      	mov	fp, r6
 8007c48:	eeb0 9a6c 	vmov.f32	s18, s25
 8007c4c:	eeb0 6a67 	vmov.f32	s12, s15
					mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8007c50:	eeb6 da00 	vmov.f32	s26, #96	; 0x3f000000  0.5
			switch (prep.ramp_type) {
 8007c54:	f1ba 0f01 	cmp.w	sl, #1
 8007c58:	f000 81cc 	beq.w	8007ff4 <st_prep_buffer+0x4cc>
 8007c5c:	9b02      	ldr	r3, [sp, #8]
 8007c5e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
					speed_var = pl_block->pbacceleration*time_var;
 8007c62:	ee67 6aa6 	vmul.f32	s13, s15, s13
			switch (prep.ramp_type) {
 8007c66:	f0c0 81a3 	bcc.w	8007fb0 <st_prep_buffer+0x488>
 8007c6a:	f1ba 0f03 	cmp.w	sl, #3
 8007c6e:	f040 81d5 	bne.w	800801c <st_prep_buffer+0x4f4>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007c72:	ee78 5a69 	vsub.f32	s11, s16, s19
 8007c76:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7e:	f2c0 818c 	blt.w	8007f9a <st_prep_buffer+0x472>
						time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007c82:	ee7b 7aea 	vsub.f32	s15, s23, s21
 8007c86:	ee39 8a88 	vadd.f32	s16, s19, s16
 8007c8a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007c8e:	2601      	movs	r6, #1
 8007c90:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8007c94:	46b3      	mov	fp, r6
						prep.ramp_type = RAMP_CRUISE;
 8007c96:	46b2      	mov	sl, r6
						prep.current_speed = prep.maximum_speed;
 8007c98:	eeb0 8a69 	vmov.f32	s16, s19
						mm_remaining = prep.accelerate_until;
 8007c9c:	eef0 8a6a 	vmov.f32	s17, s21
					mm_remaining = prep.mm_complete;
					prep.current_speed = prep.exit_speed;
			}
			dt += time_var; // Add computed ramp time to total segment time.
 8007ca0:	ee39 9a27 	vadd.f32	s18, s18, s15
			if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8007ca4:	eeb4 6ac9 	vcmpe.f32	s12, s18
 8007ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cac:	f340 81d5 	ble.w	800805a <st_prep_buffer+0x532>
					time_var = dt_max - dt;
				} else {
					break; // **Complete** Exit loop. Segment execution time maxed.
				}
			}
		} while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8007cb0:	eef4 8acb 	vcmpe.f32	s17, s22
 8007cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					time_var = dt_max - dt;
 8007cb8:	ee76 7a49 	vsub.f32	s15, s12, s18
		} while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8007cbc:	f300 816a 	bgt.w	8007f94 <st_prep_buffer+0x46c>
 8007cc0:	f1bb 0f00 	cmp.w	fp, #0
 8007cc4:	d001      	beq.n	8007cca <st_prep_buffer+0x1a2>
 8007cc6:	f884 a014 	strb.w	sl, [r4, #20]
 8007cca:	b10e      	cbz	r6, 8007cd0 <st_prep_buffer+0x1a8>
 8007ccc:	ed84 8a07 	vstr	s16, [r4, #28]
		#ifdef VARIABLE_SPINDLE
			/* -----------------------------------------------------------------------------------
				Compute spindle speed PWM output for step segment
			*/

			if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8007cd0:	4b64      	ldr	r3, [pc, #400]	; (8007e64 <st_prep_buffer+0x33c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	7f5a      	ldrb	r2, [r3, #29]
 8007cd6:	b912      	cbnz	r2, 8007cde <st_prep_buffer+0x1b6>
 8007cd8:	792b      	ldrb	r3, [r5, #4]
 8007cda:	0719      	lsls	r1, r3, #28
 8007cdc:	d518      	bpl.n	8007d10 <st_prep_buffer+0x1e8>
				if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8007cde:	9b02      	ldr	r3, [sp, #8]
 8007ce0:	7f5b      	ldrb	r3, [r3, #29]
 8007ce2:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 8007ce6:	f000 81cc 	beq.w	8008082 <st_prep_buffer+0x55a>
					float rpm = pl_block->spindle_speed;
 8007cea:	9b02      	ldr	r3, [sp, #8]
 8007cec:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
					// NOTE: Feed and rapid overrides are independent of PWM value and do not alter laser power/rate.
					if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8007cf0:	b13a      	cbz	r2, 8007d02 <st_prep_buffer+0x1da>
 8007cf2:	edd4 7a07 	vldr	s15, [r4, #28]
 8007cf6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8007cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cfe:	ee20 0a27 	vmul.f32	s0, s0, s15
					// If current_speed is zero, then may need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE)
					// but this would be instantaneous only and during a motion. May not matter at all.
					prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8007d02:	f7ff fbad 	bl	8007460 <spindle_compute_pwm_value>
 8007d06:	86a0      	strh	r0, [r4, #52]	; 0x34
				} else {
					sys.spindle_speed = 0.0f;
					prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
				}
				bit_false(sys.step_control,STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8007d08:	792b      	ldrb	r3, [r5, #4]
 8007d0a:	f023 0308 	bic.w	r3, r3, #8
 8007d0e:	712b      	strb	r3, [r5, #4]
			 However, since floats have only 7.2 significant digits, long moves with extremely
			 high step counts can exceed the precision of floats, which can lead to lost steps.
			 Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
			 supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
		*/
		float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8007d10:	ed94 8a03 	vldr	s16, [r4, #12]
			prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8007d14:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8007d16:	eb08 0309 	add.w	r3, r8, r9
		float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8007d1a:	ee68 9a88 	vmul.f32	s19, s17, s16
			prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8007d1e:	80da      	strh	r2, [r3, #6]
		float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8007d20:	eeb0 0a69 	vmov.f32	s0, s19
 8007d24:	f001 fdf6 	bl	8009914 <ceilf>
 8007d28:	eeb0 8a40 	vmov.f32	s16, s0
		float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8007d2c:	ed94 0a02 	vldr	s0, [r4, #8]
 8007d30:	f001 fdf0 	bl	8009914 <ceilf>
		prep_segment->n_step = (uint16_t)(last_n_steps_remaining-n_steps_remaining); // Compute number of steps to execute.
 8007d34:	ee70 7a48 	vsub.f32	s15, s0, s16
 8007d38:	4b47      	ldr	r3, [pc, #284]	; (8007e58 <st_prep_buffer+0x330>)
 8007d3a:	9a01      	ldr	r2, [sp, #4]
 8007d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d40:	edcd 7a02 	vstr	s15, [sp, #8]
 8007d44:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8007d48:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]

		// Bail if we are at the end of a feed hold and don't have a step to execute.
		if (prep_segment->n_step == 0) {
 8007d4c:	2e00      	cmp	r6, #0
 8007d4e:	f040 819c 	bne.w	800808a <st_prep_buffer+0x562>
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 8007d52:	792b      	ldrb	r3, [r5, #4]
 8007d54:	079a      	lsls	r2, r3, #30
 8007d56:	f140 8198 	bpl.w	800808a <st_prep_buffer+0x562>
				#endif
				return; // Bail!
			} else { // End of planner block
				// The planner block is complete. All steps are set to be executed in the segment buffer.
				if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
					bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 8007d5a:	f043 0301 	orr.w	r3, r3, #1
 8007d5e:	712b      	strb	r3, [r5, #4]
				plan_discard_current_block();
			}
		}

	}
}
 8007d60:	b005      	add	sp, #20
 8007d62:	ecbd 8b0c 	vpop	{d8-d13}
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else { pl_block = plan_get_current_block(); }
 8007d6a:	f7fd fc73 	bl	8005654 <plan_get_current_block>
 8007d6e:	e6f6      	b.n	8007b5e <st_prep_buffer+0x36>
  block_index++;
 8007d70:	7823      	ldrb	r3, [r4, #0]
				st_prep_block = &st_block_buffer[prep.st_block_index];
 8007d72:	4a3d      	ldr	r2, [pc, #244]	; (8007e68 <st_prep_buffer+0x340>)
 8007d74:	483b      	ldr	r0, [pc, #236]	; (8007e64 <st_prep_buffer+0x33c>)
				st_prep_block->direction_bits = pl_block->direction_bits;
 8007d76:	f896 c01c 	ldrb.w	ip, [r6, #28]
  block_index++;
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	b2db      	uxtb	r3, r3
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8007d7e:	2b1f      	cmp	r3, #31
 8007d80:	bf08      	it	eq
 8007d82:	2300      	moveq	r3, #0
				st_prep_block = &st_block_buffer[prep.st_block_index];
 8007d84:	eb02 1843 	add.w	r8, r2, r3, lsl #5
				prep.st_block_index = st_next_block_index(prep.st_block_index);
 8007d88:	7023      	strb	r3, [r4, #0]
				st_prep_block = &st_block_buffer[prep.st_block_index];
 8007d8a:	f8c0 8000 	str.w	r8, [r0]
				st_prep_block->direction_bits = pl_block->direction_bits;
 8007d8e:	015b      	lsls	r3, r3, #5
 8007d90:	f888 c01c 	strb.w	ip, [r8, #28]
					for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8007d94:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
 8007d98:	00c0      	lsls	r0, r0, #3
 8007d9a:	f848 0021 	str.w	r0, [r8, r1, lsl #2]
 8007d9e:	3101      	adds	r1, #1
 8007da0:	2906      	cmp	r1, #6
 8007da2:	d1f7      	bne.n	8007d94 <st_prep_buffer+0x26c>
					st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8007da4:	69b1      	ldr	r1, [r6, #24]
				prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007da6:	edd6 6a0b 	vldr	s13, [r6, #44]	; 0x2c
				prep.steps_remaining = (float)pl_block->step_event_count;
 8007daa:	ee07 1a90 	vmov	s15, r1
 8007dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
					st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8007db2:	441a      	add	r2, r3
				prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007db4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8007db8:	00cb      	lsls	r3, r1, #3
 8007dba:	6193      	str	r3, [r2, #24]
				prep.dt_remainder = 0.0f; // Reset for new segment block
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	6063      	str	r3, [r4, #4]
				if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007dc0:	792b      	ldrb	r3, [r5, #4]
 8007dc2:	0799      	lsls	r1, r3, #30
				prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8007dc4:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
				prep.steps_remaining = (float)pl_block->step_event_count;
 8007dc8:	edc4 7a02 	vstr	s15, [r4, #8]
				prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8007dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
				prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007dd0:	ed84 7a03 	vstr	s14, [r4, #12]
				prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8007dd4:	edc4 7a04 	vstr	s15, [r4, #16]
				if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007dd8:	d402      	bmi.n	8007de0 <st_prep_buffer+0x2b8>
 8007dda:	f01e 0f08 	tst.w	lr, #8
 8007dde:	d024      	beq.n	8007e2a <st_prep_buffer+0x302>
					prep.current_speed = prep.exit_speed;
 8007de0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8007de4:	edc4 7a07 	vstr	s15, [r4, #28]
					pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8007de8:	ee67 7aa7 	vmul.f32	s15, s15, s15
					prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8007dec:	f02e 0e08 	bic.w	lr, lr, #8
					pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8007df0:	edc6 7a08 	vstr	s15, [r6, #32]
					prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8007df4:	f884 e001 	strb.w	lr, [r4, #1]
					st_prep_block->is_pwm_rate_adjusted = false;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f888 301d 	strb.w	r3, [r8, #29]
					if (settings.flags & BITFLAG_LASER_MODE) {
 8007dfe:	4b1b      	ldr	r3, [pc, #108]	; (8007e6c <st_prep_buffer+0x344>)
 8007e00:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007e04:	079a      	lsls	r2, r3, #30
 8007e06:	f57f aeb8 	bpl.w	8007b7a <st_prep_buffer+0x52>
						if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8007e0a:	7f73      	ldrb	r3, [r6, #29]
 8007e0c:	069b      	lsls	r3, r3, #26
 8007e0e:	f57f aeb4 	bpl.w	8007b7a <st_prep_buffer+0x52>
							prep.inv_rate = 1.0f/pl_block->programmed_rate;
 8007e12:	ed96 7a0e 	vldr	s14, [r6, #56]	; 0x38
 8007e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
							st_prep_block->is_pwm_rate_adjusted = true;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	f888 301d 	strb.w	r3, [r8, #29]
							prep.inv_rate = 1.0f/pl_block->programmed_rate;
 8007e24:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
 8007e28:	e6a7      	b.n	8007b7a <st_prep_buffer+0x52>
					prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8007e2a:	ed96 0a08 	vldr	s0, [r6, #32]
 8007e2e:	f001 fe8f 	bl	8009b50 <sqrtf>
 8007e32:	ed84 0a07 	vstr	s0, [r4, #28]
 8007e36:	e7df      	b.n	8007df8 <st_prep_buffer+0x2d0>
					prep.mm_complete = decel_dist; // End of feed hold.
 8007e38:	edc4 6a06 	vstr	s13, [r4, #24]
					prep.exit_speed = 0.0f;
 8007e3c:	6262      	str	r2, [r4, #36]	; 0x24
 8007e3e:	e6c6      	b.n	8007bce <st_prep_buffer+0xa6>
 8007e40:	20003948 	.word	0x20003948
 8007e44:	20003485 	.word	0x20003485
 8007e48:	20003486 	.word	0x20003486
 8007e4c:	20003348 	.word	0x20003348
 8007e50:	2000334c 	.word	0x2000334c
 8007e54:	20003484 	.word	0x20003484
 8007e58:	20003384 	.word	0x20003384
 8007e5c:	00000000 	.word	0x00000000
 8007e60:	365fb23b 	.word	0x365fb23b
 8007e64:	200038ac 	.word	0x200038ac
 8007e68:	200034cc 	.word	0x200034cc
 8007e6c:	2000447c 	.word	0x2000447c
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8007e70:	7520      	strb	r0, [r4, #20]
				if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8007e72:	0758      	lsls	r0, r3, #29
				prep.accelerate_until = pl_block->millimeters;
 8007e74:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
				if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8007e78:	d531      	bpl.n	8007ede <st_prep_buffer+0x3b6>
					prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 8007e7a:	ee08 2a90 	vmov	s17, r2
 8007e7e:	6262      	str	r2, [r4, #36]	; 0x24
				nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8007e80:	6838      	ldr	r0, [r7, #0]
 8007e82:	f7fd fc21 	bl	80056c8 <plan_compute_profile_nominal_speed>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007e86:	683b      	ldr	r3, [r7, #0]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8007e88:	ee60 7a00 	vmul.f32	s15, s0, s0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007e8c:	edd3 6a08 	vldr	s13, [r3, #32]
 8007e90:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
				if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8007e94:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e9c:	d533      	bpl.n	8007f06 <st_prep_buffer+0x3de>
					prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8007e9e:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8007ea2:	eef0 5a46 	vmov.f32	s11, s12
 8007ea6:	eee8 5a47 	vfms.f32	s11, s16, s14
					if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8007eaa:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8007eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8007eb2:	edc4 5a0a 	vstr	s11, [r4, #40]	; 0x28
					if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8007eb6:	d81b      	bhi.n	8007ef0 <st_prep_buffer+0x3c8>
						prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->pbacceleration*pl_block->millimeters);
 8007eb8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007ebc:	ee77 7aa7 	vadd.f32	s15, s15, s15
						prep.ramp_type = RAMP_DECEL;
 8007ec0:	2202      	movs	r2, #2
						prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->pbacceleration*pl_block->millimeters);
 8007ec2:	eee6 6a67 	vfms.f32	s13, s12, s15
						prep.ramp_type = RAMP_DECEL;
 8007ec6:	7522      	strb	r2, [r4, #20]
						prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->pbacceleration*pl_block->millimeters);
 8007ec8:	eeb0 0a66 	vmov.f32	s0, s13
 8007ecc:	f001 fe40 	bl	8009b50 <sqrtf>
						prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8007ed0:	7863      	ldrb	r3, [r4, #1]
						prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->pbacceleration*pl_block->millimeters);
 8007ed2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
						prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8007ed6:	f043 0308 	orr.w	r3, r3, #8
 8007eda:	7063      	strb	r3, [r4, #1]
 8007edc:	e677      	b.n	8007bce <st_prep_buffer+0xa6>
					exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 8007ede:	f7fd fbcb 	bl	8005678 <plan_get_exec_block_exit_speed_sqr>
 8007ee2:	eef0 8a40 	vmov.f32	s17, s0
					prep.exit_speed = sqrtf(exit_speed_sqr);
 8007ee6:	f001 fe33 	bl	8009b50 <sqrtf>
 8007eea:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 8007eee:	e7c7      	b.n	8007e80 <st_prep_buffer+0x358>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8007ef0:	ee77 7ae8 	vsub.f32	s15, s15, s17
						prep.maximum_speed = nominal_speed;
 8007ef4:	ed84 0a08 	vstr	s0, [r4, #32]
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8007ef8:	ee67 7a88 	vmul.f32	s15, s15, s16
						prep.ramp_type = RAMP_DECEL_OVERRIDE;
 8007efc:	2303      	movs	r3, #3
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8007efe:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
						prep.ramp_type = RAMP_DECEL;
 8007f02:	7523      	strb	r3, [r4, #20]
 8007f04:	e663      	b.n	8007bce <st_prep_buffer+0xa6>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007f06:	ee36 7ae8 	vsub.f32	s14, s13, s17
 8007f0a:	eef0 5a46 	vmov.f32	s11, s12
 8007f0e:	eee8 5a07 	vfma.f32	s11, s16, s14
				float intersect_distance =
 8007f12:	ee25 7a89 	vmul.f32	s14, s11, s18
				} else if (intersect_distance > 0.0f) {
 8007f16:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f1e:	dd34      	ble.n	8007f8a <st_prep_buffer+0x462>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 8007f20:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8007f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f28:	dd2d      	ble.n	8007f86 <st_prep_buffer+0x45e>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 8007f2a:	ee37 6ae8 	vsub.f32	s12, s15, s17
 8007f2e:	ee26 6a08 	vmul.f32	s12, s12, s16
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 8007f32:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8007f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 8007f3a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 8007f3e:	dd11      	ble.n	8007f64 <st_prep_buffer+0x43c>
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8007f40:	eef4 7a66 	vcmp.f32	s15, s13
 8007f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							prep.maximum_speed = nominal_speed;
 8007f48:	ed84 0a08 	vstr	s0, [r4, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8007f4c:	d101      	bne.n	8007f52 <st_prep_buffer+0x42a>
								prep.ramp_type = RAMP_CRUISE;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e7d7      	b.n	8007f02 <st_prep_buffer+0x3da>
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 8007f52:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8007f56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f5a:	eea8 7a67 	vfms.f32	s14, s16, s15
 8007f5e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8007f62:	e634      	b.n	8007bce <st_prep_buffer+0xa6>
							prep.maximum_speed = sqrtf(2.0f*pl_block->pbacceleration*intersect_distance+exit_speed_sqr);
 8007f64:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
							prep.accelerate_until = intersect_distance;
 8007f68:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
							prep.maximum_speed = sqrtf(2.0f*pl_block->pbacceleration*intersect_distance+exit_speed_sqr);
 8007f6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007f70:	eeb0 0a68 	vmov.f32	s0, s17
 8007f74:	eea7 0a27 	vfma.f32	s0, s14, s15
							prep.decelerate_after = intersect_distance;
 8007f78:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
							prep.maximum_speed = sqrtf(2.0f*pl_block->pbacceleration*intersect_distance+exit_speed_sqr);
 8007f7c:	f001 fde8 	bl	8009b50 <sqrtf>
 8007f80:	ed84 0a08 	vstr	s0, [r4, #32]
 8007f84:	e623      	b.n	8007bce <st_prep_buffer+0xa6>
						prep.ramp_type = RAMP_DECEL;
 8007f86:	2302      	movs	r3, #2
 8007f88:	e7bb      	b.n	8007f02 <st_prep_buffer+0x3da>
					prep.maximum_speed = prep.exit_speed;
 8007f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					prep.accelerate_until = 0.0f;
 8007f8c:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
					prep.maximum_speed = prep.exit_speed;
 8007f90:	6223      	str	r3, [r4, #32]
 8007f92:	e61c      	b.n	8007bce <st_prep_buffer+0xa6>
 8007f94:	eeb0 7a68 	vmov.f32	s14, s17
 8007f98:	e65c      	b.n	8007c54 <st_prep_buffer+0x12c>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8007f9a:	eef0 5a48 	vmov.f32	s11, s16
 8007f9e:	eee6 5acd 	vfms.f32	s11, s13, s26
 8007fa2:	eea7 7ae5 	vfms.f32	s14, s15, s11
 8007fa6:	eef0 8a47 	vmov.f32	s17, s14
							prep.current_speed -= speed_var;
 8007faa:	ee38 8a66 	vsub.f32	s16, s16, s13
 8007fae:	e01f      	b.n	8007ff0 <st_prep_buffer+0x4c8>
					mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8007fb0:	eef0 5a48 	vmov.f32	s11, s16
 8007fb4:	eee6 5a8d 	vfma.f32	s11, s13, s26
 8007fb8:	eea7 7ae5 	vfms.f32	s14, s15, s11
					if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8007fbc:	eef4 aac7 	vcmpe.f32	s21, s14
 8007fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8007fc4:	eef0 8a47 	vmov.f32	s17, s14
					if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8007fc8:	dd10      	ble.n	8007fec <st_prep_buffer+0x4c4>
						time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007fca:	ee7b 7aea 	vsub.f32	s15, s23, s21
 8007fce:	ee39 8a88 	vadd.f32	s16, s19, s16
 8007fd2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007fd6:	2601      	movs	r6, #1
 8007fd8:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8007fdc:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8007fe0:	46b3      	mov	fp, r6
						prep.current_speed = prep.maximum_speed;
 8007fe2:	eeb0 8a69 	vmov.f32	s16, s19
						mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8007fe6:	eef0 8a6a 	vmov.f32	s17, s21
 8007fea:	e659      	b.n	8007ca0 <st_prep_buffer+0x178>
						prep.current_speed += speed_var;
 8007fec:	ee38 8a26 	vadd.f32	s16, s16, s13
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007ff0:	2601      	movs	r6, #1
 8007ff2:	e655      	b.n	8007ca0 <st_prep_buffer+0x178>
					mm_var = mm_remaining - prep.maximum_speed*time_var;
 8007ff4:	eef0 8a47 	vmov.f32	s17, s14
 8007ff8:	eee7 8ae9 	vfms.f32	s17, s15, s19
					if (mm_var < prep.decelerate_after) { // End of cruise.
 8007ffc:	eef4 8acc 	vcmpe.f32	s17, s24
 8008000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008004:	f57f ae4c 	bpl.w	8007ca0 <st_prep_buffer+0x178>
						time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8008008:	ee37 7a4c 	vsub.f32	s14, s14, s24
 800800c:	46d3      	mov	fp, sl
 800800e:	eec7 7a29 	vdiv.f32	s15, s14, s19
						prep.ramp_type = RAMP_DECEL;
 8008012:	f04f 0a02 	mov.w	sl, #2
						mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 8008016:	eef0 8a4c 	vmov.f32	s17, s24
 800801a:	e641      	b.n	8007ca0 <st_prep_buffer+0x178>
					if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 800801c:	eef4 6ac8 	vcmpe.f32	s13, s16
 8008020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008024:	d50c      	bpl.n	8008040 <st_prep_buffer+0x518>
						mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008026:	eef0 5a48 	vmov.f32	s11, s16
 800802a:	eee6 5acd 	vfms.f32	s11, s13, s26
 800802e:	eef0 8a47 	vmov.f32	s17, s14
 8008032:	eee7 8ae5 	vfms.f32	s17, s15, s11
						if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008036:	eef4 8acb 	vcmpe.f32	s17, s22
 800803a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803e:	dcb4      	bgt.n	8007faa <st_prep_buffer+0x482>
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008040:	ee37 7a4b 	vsub.f32	s14, s14, s22
 8008044:	ee3d 8a88 	vadd.f32	s16, s27, s16
 8008048:	ee37 7a07 	vadd.f32	s14, s14, s14
					mm_remaining = prep.mm_complete;
 800804c:	eef0 8a4b 	vmov.f32	s17, s22
					time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008050:	eec7 7a08 	vdiv.f32	s15, s14, s16
					prep.current_speed = prep.exit_speed;
 8008054:	eeb0 8a6d 	vmov.f32	s16, s27
 8008058:	e7ca      	b.n	8007ff0 <st_prep_buffer+0x4c8>
				if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 800805a:	eef4 8aca 	vcmpe.f32	s17, s20
 800805e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008062:	f77f ae2d 	ble.w	8007cc0 <st_prep_buffer+0x198>
					dt_max += DT_SEGMENT;
 8008066:	ee16 0a10 	vmov	r0, s12
 800806a:	f7f8 fa65 	bl	8000538 <__aeabi_f2d>
 800806e:	a34a      	add	r3, pc, #296	; (adr r3, 8008198 <st_prep_buffer+0x670>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 f902 	bl	800027c <__adddf3>
 8008078:	f7f8 fdaa 	bl	8000bd0 <__aeabi_d2f>
 800807c:	ee06 0a10 	vmov	s12, r0
 8008080:	e616      	b.n	8007cb0 <st_prep_buffer+0x188>
					sys.spindle_speed = 0.0f;
 8008082:	edc5 ca04 	vstr	s25, [r5, #16]
					prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008086:	86a3      	strh	r3, [r4, #52]	; 0x34
 8008088:	e63e      	b.n	8007d08 <st_prep_buffer+0x1e0>
		dt += prep.dt_remainder; // Apply previous segment partial step execute time
 800808a:	edd4 7a01 	vldr	s15, [r4, #4]
		uint32_t cycles = (uint32_t)ceilf(fTICKS_PER_MINUTE*inv_rate); // (cycles/step)
 800808e:	4b3c      	ldr	r3, [pc, #240]	; (8008180 <st_prep_buffer+0x658>)
		dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008090:	ee39 9a27 	vadd.f32	s18, s18, s15
		float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008094:	ee30 0a69 	vsub.f32	s0, s0, s19
 8008098:	ee89 aa00 	vdiv.f32	s20, s18, s0
		uint32_t cycles = (uint32_t)ceilf(fTICKS_PER_MINUTE*inv_rate); // (cycles/step)
 800809c:	ed93 0a00 	vldr	s0, [r3]
 80080a0:	ee2a 0a00 	vmul.f32	s0, s20, s0
 80080a4:	f001 fc36 	bl	8009914 <ceilf>
 80080a8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
			if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 80080ac:	4a35      	ldr	r2, [pc, #212]	; (8008184 <st_prep_buffer+0x65c>)
		uint32_t cycles = (uint32_t)ceilf(fTICKS_PER_MINUTE*inv_rate); // (cycles/step)
 80080ae:	ee17 3a90 	vmov	r3, s15
			if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 80080b2:	6812      	ldr	r2, [r2, #0]
 80080b4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80080b8:	fbb2 f1f1 	udiv	r1, r2, r1
 80080bc:	428b      	cmp	r3, r1
 80080be:	d23d      	bcs.n	800813c <st_prep_buffer+0x614>
 80080c0:	eb08 0209 	add.w	r2, r8, r9
 80080c4:	2100      	movs	r1, #0
 80080c6:	7151      	strb	r1, [r2, #5]
			if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 80080c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080cc:	bf38      	it	cc
 80080ce:	9a01      	ldrcc	r2, [sp, #4]
		prep.steps_remaining = n_steps_remaining;
 80080d0:	ed84 8a02 	vstr	s16, [r4, #8]
			if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 80080d4:	bf32      	itee	cc
 80080d6:	eb08 08c2 	addcc.w	r8, r8, r2, lsl #3
			else { prep_segment->cycles_per_tick = 0xffff; } // Just set the slowest speed possible.
 80080da:	44c8      	addcs	r8, r9
 80080dc:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
 80080e0:	f8a8 3002 	strh.w	r3, [r8, #2]
		segment_buffer_head = segment_next_head;
 80080e4:	4b28      	ldr	r3, [pc, #160]	; (8008188 <st_prep_buffer+0x660>)
 80080e6:	4a29      	ldr	r2, [pc, #164]	; (800818c <st_prep_buffer+0x664>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	7013      	strb	r3, [r2, #0]
		if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 80080ec:	3301      	adds	r3, #1
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	4a25      	ldr	r2, [pc, #148]	; (8008188 <st_prep_buffer+0x660>)
		if (mm_remaining == prep.mm_complete) {
 80080f4:	edd4 7a06 	vldr	s15, [r4, #24]
		prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 80080f8:	ee38 8a69 	vsub.f32	s16, s16, s19
		if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 80080fc:	bf08      	it	eq
 80080fe:	2300      	moveq	r3, #0
 8008100:	7013      	strb	r3, [r2, #0]
		prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008102:	ee28 8a0a 	vmul.f32	s16, s16, s20
		pl_block->millimeters = mm_remaining;
 8008106:	683b      	ldr	r3, [r7, #0]
		prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008108:	ed84 8a01 	vstr	s16, [r4, #4]
		if (mm_remaining == prep.mm_complete) {
 800810c:	eef4 8a67 	vcmp.f32	s17, s15
 8008110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		pl_block->millimeters = mm_remaining;
 8008114:	edc3 8a0b 	vstr	s17, [r3, #44]	; 0x2c
		if (mm_remaining == prep.mm_complete) {
 8008118:	f47f ad10 	bne.w	8007b3c <st_prep_buffer+0x14>
			if (mm_remaining > 0.0f) { // At end of forced-termination.
 800811c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 8008124:	792b      	ldrb	r3, [r5, #4]
			if (mm_remaining > 0.0f) { // At end of forced-termination.
 8008126:	f73f ae18 	bgt.w	8007d5a <st_prep_buffer+0x232>
				if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 800812a:	f013 0204 	ands.w	r2, r3, #4
 800812e:	f47f ae14 	bne.w	8007d5a <st_prep_buffer+0x232>
				pl_block = NULL; // Set pointer to indicate check and load next planner block.
 8008132:	4b17      	ldr	r3, [pc, #92]	; (8008190 <st_prep_buffer+0x668>)
 8008134:	601a      	str	r2, [r3, #0]
				plan_discard_current_block();
 8008136:	f7fd fa69 	bl	800560c <plan_discard_current_block>
 800813a:	e4ff      	b.n	8007b3c <st_prep_buffer+0x14>
				if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 800813c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008140:	fbb2 f1f1 	udiv	r1, r2, r1
 8008144:	428b      	cmp	r3, r1
 8008146:	d20d      	bcs.n	8008164 <st_prep_buffer+0x63c>
 8008148:	eb08 0209 	add.w	r2, r8, r9
 800814c:	2101      	movs	r1, #1
				else { prep_segment->amass_level = 3; }
 800814e:	7151      	strb	r1, [r2, #5]
				cycles >>= prep_segment->amass_level;
 8008150:	eb08 0209 	add.w	r2, r8, r9
				prep_segment->n_step <<= prep_segment->amass_level;
 8008154:	9901      	ldr	r1, [sp, #4]
				cycles >>= prep_segment->amass_level;
 8008156:	7952      	ldrb	r2, [r2, #5]
				prep_segment->n_step <<= prep_segment->amass_level;
 8008158:	4096      	lsls	r6, r2
				cycles >>= prep_segment->amass_level;
 800815a:	40d3      	lsrs	r3, r2
				prep_segment->n_step <<= prep_segment->amass_level;
 800815c:	4a0d      	ldr	r2, [pc, #52]	; (8008194 <st_prep_buffer+0x66c>)
 800815e:	f822 6031 	strh.w	r6, [r2, r1, lsl #3]
 8008162:	e7b1      	b.n	80080c8 <st_prep_buffer+0x5a0>
				else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 8008164:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008168:	fbb2 f2f1 	udiv	r2, r2, r1
 800816c:	4293      	cmp	r3, r2
 800816e:	bf38      	it	cc
 8008170:	2102      	movcc	r1, #2
 8008172:	eb08 0209 	add.w	r2, r8, r9
				else { prep_segment->amass_level = 3; }
 8008176:	bf28      	it	cs
 8008178:	2103      	movcs	r1, #3
 800817a:	e7e8      	b.n	800814e <st_prep_buffer+0x626>
 800817c:	f3af 8000 	nop.w
 8008180:	200038b8 	.word	0x200038b8
 8008184:	20000008 	.word	0x20000008
 8008188:	20003486 	.word	0x20003486
 800818c:	20003484 	.word	0x20003484
 8008190:	20003348 	.word	0x20003348
 8008194:	20003384 	.word	0x20003384
 8008198:	612f3696 	.word	0x612f3696
 800819c:	3ecbf647 	.word	0x3ecbf647

080081a0 <st_get_realtime_rate>:
// however is not exactly the current speed, but the speed computed in the last step segment
// in the segment buffer. It will always be behind by up to the number of segment blocks (-1)
// divided by the ACCELERATION TICKS PER SECOND in seconds.
float st_get_realtime_rate()
{
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 80081a0:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <st_get_realtime_rate+0x18>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 80081a8:	bf1a      	itte	ne
 80081aa:	4b04      	ldrne	r3, [pc, #16]	; (80081bc <st_get_realtime_rate+0x1c>)
 80081ac:	ed93 0a07 	vldrne	s0, [r3, #28]
  }
  return 0.0f;
 80081b0:	ed9f 0a03 	vldreq	s0, [pc, #12]	; 80081c0 <st_get_realtime_rate+0x20>
}
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	20003948 	.word	0x20003948
 80081bc:	2000334c 	.word	0x2000334c
 80081c0:	00000000 	.word	0x00000000

080081c4 <system_init>:
*/

#include "grbl.h"

void system_init()
{
 80081c4:	4770      	bx	lr
	...

080081c8 <system_control_get_state>:
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80081c8:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <system_control_get_state+0x2c>)
 80081ca:	691a      	ldr	r2, [r3, #16]
#endif

  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 80081cc:	b290      	uxth	r0, r2
 80081ce:	b180      	cbz	r0, 80081f2 <system_control_get_state+0x2a>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,CON_SAFETY_DOOR_Pin)) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
 80081d0:	4603      	mov	r3, r0
 80081d2:	f080 0008 	eor.w	r0, r0, #8
  uint8_t control_state = 0;
 80081d6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    #endif
    if (bit_isfalse(pin,CON_RESET_Pin)) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80081da:	0751      	lsls	r1, r2, #29
 80081dc:	bf58      	it	pl
 80081de:	f040 0002 	orrpl.w	r0, r0, #2
    if (bit_isfalse(pin,CON_FEED_HOLD_Pin)) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80081e2:	07da      	lsls	r2, r3, #31
 80081e4:	bf58      	it	pl
 80081e6:	f040 0004 	orrpl.w	r0, r0, #4
    if (bit_isfalse(pin,CON_CYCLE_START_Pin)) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80081ea:	079b      	lsls	r3, r3, #30
 80081ec:	bf58      	it	pl
 80081ee:	f040 0008 	orrpl.w	r0, r0, #8
  }
  return(control_state);
}
 80081f2:	4770      	bx	lr
 80081f4:	40020400 	.word	0x40020400

080081f8 <HandleControlIT>:
// only the realtime command execute variable to have the main program execute these when
// its ready. This works exactly like the character-based realtime commands when picked off
// directly from the incoming serial data stream.
#ifdef STM32
  void HandleControlIT(uint16_t Control_Pin)
  {
 80081f8:	b510      	push	{r4, lr}
 80081fa:	4604      	mov	r4, r0
    uint8_t pin = system_control_get_state();
 80081fc:	f7ff ffe4 	bl	80081c8 <system_control_get_state>
    switch (Control_Pin)
 8008200:	1e63      	subs	r3, r4, #1
 8008202:	2b07      	cmp	r3, #7
 8008204:	d80c      	bhi.n	8008220 <HandleControlIT+0x28>
 8008206:	e8df f003 	tbb	[pc, r3]
 800820a:	0c04      	.short	0x0c04
 800820c:	0b0b130b 	.word	0x0b0b130b
 8008210:	190b      	.short	0x190b
    {
    case CON_FEED_HOLD_Pin:
      if (bit_istrue(pin, CONTROL_PIN_INDEX_FEED_HOLD))
 8008212:	0740      	lsls	r0, r0, #29
 8008214:	d504      	bpl.n	8008220 <HandleControlIT+0x28>
        bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 8008216:	4a0d      	ldr	r2, [pc, #52]	; (800824c <HandleControlIT+0x54>)
 8008218:	7813      	ldrb	r3, [r2, #0]
 800821a:	f043 0308 	orr.w	r3, r3, #8
      if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET))
        mc_reset();
      break;
    case CON_SAFETY_DOOR_Pin:
      if (bit_istrue(pin, CONTROL_PIN_INDEX_SAFETY_DOOR))
        bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 800821e:	7013      	strb	r3, [r2, #0]
 8008220:	bd10      	pop	{r4, pc}
      if (bit_istrue(pin, CONTROL_PIN_INDEX_CYCLE_START))
 8008222:	0701      	lsls	r1, r0, #28
 8008224:	d5fc      	bpl.n	8008220 <HandleControlIT+0x28>
        bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 8008226:	4a09      	ldr	r2, [pc, #36]	; (800824c <HandleControlIT+0x54>)
 8008228:	7813      	ldrb	r3, [r2, #0]
 800822a:	f043 0302 	orr.w	r3, r3, #2
 800822e:	e7f6      	b.n	800821e <HandleControlIT+0x26>
      if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET))
 8008230:	0782      	lsls	r2, r0, #30
 8008232:	d5f5      	bpl.n	8008220 <HandleControlIT+0x28>
      break;
    }
  }
 8008234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mc_reset();
 8008238:	f7fc bfd4 	b.w	80051e4 <mc_reset>
      if (bit_istrue(pin, CONTROL_PIN_INDEX_SAFETY_DOOR))
 800823c:	07c3      	lsls	r3, r0, #31
 800823e:	d5ef      	bpl.n	8008220 <HandleControlIT+0x28>
        bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8008240:	4a02      	ldr	r2, [pc, #8]	; (800824c <HandleControlIT+0x54>)
 8008242:	7813      	ldrb	r3, [r2, #0]
 8008244:	f043 0320 	orr.w	r3, r3, #32
 8008248:	e7e9      	b.n	800821e <HandleControlIT+0x26>
 800824a:	bf00      	nop
 800824c:	2000395d 	.word	0x2000395d

08008250 <system_check_safety_door_ajar>:
  }
#endif

// Returns if safety door is ajar(T) or closed(F), based on pin state.
uint8_t system_check_safety_door_ajar()
{
 8008250:	b508      	push	{r3, lr}
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
 8008252:	f7ff ffb9 	bl	80081c8 <system_control_get_state>
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8008256:	f000 0001 	and.w	r0, r0, #1
 800825a:	bd08      	pop	{r3, pc}

0800825c <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4604      	mov	r4, r0
 8008260:	2500      	movs	r5, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 8008262:	4621      	mov	r1, r4
 8008264:	b2e8      	uxtb	r0, r5
 8008266:	f7fe fedd 	bl	8007024 <settings_read_startup_line>
 800826a:	b940      	cbnz	r0, 800827e <system_execute_startup+0x22>
      line[0] = 0;
 800826c:	7020      	strb	r0, [r4, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 800826e:	2107      	movs	r1, #7
    } else {
      if (line[0] != 0) {
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
 8008270:	4620      	mov	r0, r4
 8008272:	f7fe fba9 	bl	80069c8 <report_execute_startup_message>
 8008276:	3501      	adds	r5, #1
  for (n=0; n < N_STARTUP_LINE; n++) {
 8008278:	2d02      	cmp	r5, #2
 800827a:	d1f2      	bne.n	8008262 <system_execute_startup+0x6>
      }
    }
  }
}
 800827c:	bd38      	pop	{r3, r4, r5, pc}
      if (line[0] != 0) {
 800827e:	7823      	ldrb	r3, [r4, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0f8      	beq.n	8008276 <system_execute_startup+0x1a>
        uint8_t status_code = gc_execute_line(line);
 8008284:	4620      	mov	r0, r4
 8008286:	f7fb fb87 	bl	8003998 <gc_execute_line>
        report_execute_startup_message(line,status_code);
 800828a:	4601      	mov	r1, r0
 800828c:	e7f0      	b.n	8008270 <system_execute_startup+0x14>
	...

08008290 <system_flag_wco_change>:
}



void system_flag_wco_change()
{
 8008290:	b508      	push	{r3, lr}
  #ifdef FORCE_BUFFER_SYNC_DURING_WCO_CHANGE
    protocol_buffer_synchronize();
 8008292:	f7fe f8cb 	bl	800642c <protocol_buffer_synchronize>
  #endif
  sys.report_wco_counter = 0;
 8008296:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <system_flag_wco_change+0x10>)
 8008298:	2200      	movs	r2, #0
 800829a:	735a      	strb	r2, [r3, #13]
 800829c:	bd08      	pop	{r3, pc}
 800829e:	bf00      	nop
 80082a0:	20003948 	.word	0x20003948

080082a4 <system_convert_axis_steps_to_mpos>:
      pos = (float)system_convert_corexy_to_y_axis_steps(steps) / settings.steps_per_mm[idx];
    } else {
      pos = steps[idx]/settings.steps_per_mm[idx];
    }
  #else
    pos = steps[idx]/settings.steps_per_mm[idx];
 80082a4:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80082a8:	ee00 3a10 	vmov	s0, r3
 80082ac:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <system_convert_axis_steps_to_mpos+0x1c>)
 80082ae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80082b2:	edd1 7a00 	vldr	s15, [r1]
 80082b6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
  #endif
  return(pos);
}
 80082ba:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80082be:	4770      	bx	lr
 80082c0:	2000447c 	.word	0x2000447c

080082c4 <system_convert_array_steps_to_mpos>:


void system_convert_array_steps_to_mpos(float *position, int32_t *steps)
{
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	2200      	movs	r2, #0
 80082c8:	460d      	mov	r5, r1
 80082ca:	4604      	mov	r4, r0
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80082cc:	b2d1      	uxtb	r1, r2
 80082ce:	4628      	mov	r0, r5
 80082d0:	f7ff ffe8 	bl	80082a4 <system_convert_axis_steps_to_mpos>
 80082d4:	3201      	adds	r2, #1
  for (idx=0; idx<N_AXIS; idx++) {
 80082d6:	2a06      	cmp	r2, #6
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80082d8:	eca4 0a01 	vstmia	r4!, {s0}
  for (idx=0; idx<N_AXIS; idx++) {
 80082dc:	d1f6      	bne.n	80082cc <system_convert_array_steps_to_mpos+0x8>
  }
  return;
}
 80082de:	bd38      	pop	{r3, r4, r5, pc}

080082e0 <system_check_travel_limits>:
#endif


// Checks and reports if target array exceeds machine travel limits.
uint8_t system_check_travel_limits(float *target)
{
 80082e0:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <system_check_travel_limits+0x30>)
 80082e2:	f100 0218 	add.w	r2, r0, #24
      } else {
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
      }
    #else
      // NOTE: max_travel is stored as negative
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 80082e6:	ecf0 7a01 	vldmia	r0!, {s15}
 80082ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f2:	dc0a      	bgt.n	800830a <system_check_travel_limits+0x2a>
 80082f4:	ecb3 7a01 	vldmia	r3!, {s14}
 80082f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008300:	d403      	bmi.n	800830a <system_check_travel_limits+0x2a>
  for (idx=0; idx<N_AXIS; idx++) {
 8008302:	4290      	cmp	r0, r2
 8008304:	d1ef      	bne.n	80082e6 <system_check_travel_limits+0x6>
    #endif
  }
  return(false);
 8008306:	2000      	movs	r0, #0
 8008308:	4770      	bx	lr
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800830a:	2001      	movs	r0, #1
}
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	200044c4 	.word	0x200044c4

08008314 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 8008314:	b672      	cpsid	i
// Special handlers for setting and clearing Grbl's real-time execution flags.
void system_set_exec_state_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_state |= (mask);
 8008316:	4a03      	ldr	r2, [pc, #12]	; (8008324 <system_set_exec_state_flag+0x10>)
 8008318:	7813      	ldrb	r3, [r2, #0]
 800831a:	4318      	orrs	r0, r3
 800831c:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800831e:	b662      	cpsie	i
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	2000395d 	.word	0x2000395d

08008328 <system_execute_line>:
{
 8008328:	b570      	push	{r4, r5, r6, lr}
  switch( line[char_counter] ) {
 800832a:	7844      	ldrb	r4, [r0, #1]
{
 800832c:	b086      	sub	sp, #24
  uint8_t char_counter = 1;
 800832e:	2301      	movs	r3, #1
  switch( line[char_counter] ) {
 8008330:	2c43      	cmp	r4, #67	; 0x43
{
 8008332:	4605      	mov	r5, r0
  uint8_t char_counter = 1;
 8008334:	f88d 300f 	strb.w	r3, [sp, #15]
  switch( line[char_counter] ) {
 8008338:	d003      	beq.n	8008342 <system_execute_line+0x1a>
 800833a:	d80b      	bhi.n	8008354 <system_execute_line+0x2c>
 800833c:	b184      	cbz	r4, 8008360 <system_execute_line+0x38>
 800833e:	2c24      	cmp	r4, #36	; 0x24
 8008340:	d154      	bne.n	80083ec <system_execute_line+0xc4>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8008342:	78ad      	ldrb	r5, [r5, #2]
 8008344:	b9d5      	cbnz	r5, 800837c <system_execute_line+0x54>
      switch( line[1] ) {
 8008346:	2c43      	cmp	r4, #67	; 0x43
 8008348:	d038      	beq.n	80083bc <system_execute_line+0x94>
 800834a:	d81d      	bhi.n	8008388 <system_execute_line+0x60>
 800834c:	2c24      	cmp	r4, #36	; 0x24
 800834e:	d029      	beq.n	80083a4 <system_execute_line+0x7c>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8008350:	2400      	movs	r4, #0
          break;
 8008352:	e007      	b.n	8008364 <system_execute_line+0x3c>
  switch( line[char_counter] ) {
 8008354:	2c4a      	cmp	r4, #74	; 0x4a
 8008356:	d008      	beq.n	800836a <system_execute_line+0x42>
 8008358:	2c58      	cmp	r4, #88	; 0x58
 800835a:	d0f2      	beq.n	8008342 <system_execute_line+0x1a>
 800835c:	2c47      	cmp	r4, #71	; 0x47
 800835e:	e7ef      	b.n	8008340 <system_execute_line+0x18>
    case 0 : report_grbl_help(); break;
 8008360:	f7fe f932 	bl	80065c8 <report_grbl_help>
}
 8008364:	4620      	mov	r0, r4
 8008366:	b006      	add	sp, #24
 8008368:	bd70      	pop	{r4, r5, r6, pc}
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 800836a:	4bb4      	ldr	r3, [pc, #720]	; (800863c <system_execute_line+0x314>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8008372:	f040 8161 	bne.w	8008638 <system_execute_line+0x310>
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 8008376:	7883      	ldrb	r3, [r0, #2]
 8008378:	2b3d      	cmp	r3, #61	; 0x3d
 800837a:	d001      	beq.n	8008380 <system_execute_line+0x58>
            default: return(STATUS_INVALID_STATEMENT);
 800837c:	2403      	movs	r4, #3
 800837e:	e7f1      	b.n	8008364 <system_execute_line+0x3c>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 8008380:	f7fb fb0a 	bl	8003998 <gc_execute_line>
            return(settings_store_global_setting((uint8_t)parameter, value));
 8008384:	4604      	mov	r4, r0
 8008386:	e7ed      	b.n	8008364 <system_execute_line+0x3c>
      switch( line[1] ) {
 8008388:	2c47      	cmp	r4, #71	; 0x47
 800838a:	d014      	beq.n	80083b6 <system_execute_line+0x8e>
 800838c:	2c58      	cmp	r4, #88	; 0x58
 800838e:	d1df      	bne.n	8008350 <system_execute_line+0x28>
          if (sys.state == STATE_ALARM) {
 8008390:	4daa      	ldr	r5, [pc, #680]	; (800863c <system_execute_line+0x314>)
 8008392:	782b      	ldrb	r3, [r5, #0]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d1db      	bne.n	8008350 <system_execute_line+0x28>
            if (system_check_safety_door_ajar()) { return(STATUS_CHECK_DOOR); }
 8008398:	f7ff ff5a 	bl	8008250 <system_check_safety_door_ajar>
 800839c:	4604      	mov	r4, r0
 800839e:	b300      	cbz	r0, 80083e2 <system_execute_line+0xba>
 80083a0:	240d      	movs	r4, #13
 80083a2:	e7df      	b.n	8008364 <system_execute_line+0x3c>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 80083a4:	4ba5      	ldr	r3, [pc, #660]	; (800863c <system_execute_line+0x314>)
 80083a6:	781c      	ldrb	r4, [r3, #0]
 80083a8:	f014 0418 	ands.w	r4, r4, #24
 80083ac:	f040 8144 	bne.w	8008638 <system_execute_line+0x310>
          else { report_grbl_settings(); }
 80083b0:	f7fe f910 	bl	80065d4 <report_grbl_settings>
          break;
 80083b4:	e7d6      	b.n	8008364 <system_execute_line+0x3c>
          report_gcode_modes();
 80083b6:	f7fe fa53 	bl	8006860 <report_gcode_modes>
 80083ba:	e7c9      	b.n	8008350 <system_execute_line+0x28>
          if ( sys.state == STATE_CHECK_MODE ) {
 80083bc:	4b9f      	ldr	r3, [pc, #636]	; (800863c <system_execute_line+0x314>)
 80083be:	781c      	ldrb	r4, [r3, #0]
 80083c0:	2c02      	cmp	r4, #2
 80083c2:	d105      	bne.n	80083d0 <system_execute_line+0xa8>
            mc_reset();
 80083c4:	f7fc ff0e 	bl	80051e4 <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 80083c8:	2005      	movs	r0, #5
 80083ca:	f7fe f8b3 	bl	8006534 <report_feedback_message>
 80083ce:	e7bf      	b.n	8008350 <system_execute_line+0x28>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 80083d0:	2c00      	cmp	r4, #0
 80083d2:	f040 8131 	bne.w	8008638 <system_execute_line+0x310>
            sys.state = STATE_CHECK_MODE;
 80083d6:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 80083d8:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 80083da:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 80083dc:	f7fe f8aa 	bl	8006534 <report_feedback_message>
 80083e0:	e7c0      	b.n	8008364 <system_execute_line+0x3c>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 80083e2:	2003      	movs	r0, #3
 80083e4:	f7fe f8a6 	bl	8006534 <report_feedback_message>
            sys.state = STATE_IDLE;
 80083e8:	702c      	strb	r4, [r5, #0]
 80083ea:	e7bb      	b.n	8008364 <system_execute_line+0x3c>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 80083ec:	4e93      	ldr	r6, [pc, #588]	; (800863c <system_execute_line+0x314>)
 80083ee:	7833      	ldrb	r3, [r6, #0]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	f200 8121 	bhi.w	8008638 <system_execute_line+0x310>
      switch( line[1] ) {
 80083f6:	2c49      	cmp	r4, #73	; 0x49
 80083f8:	d077      	beq.n	80084ea <system_execute_line+0x1c2>
 80083fa:	d805      	bhi.n	8008408 <system_execute_line+0xe0>
 80083fc:	2c23      	cmp	r4, #35	; 0x23
 80083fe:	d020      	beq.n	8008442 <system_execute_line+0x11a>
 8008400:	2c48      	cmp	r4, #72	; 0x48
 8008402:	d024      	beq.n	800844e <system_execute_line+0x126>
  uint8_t helper_var = 0; // Helper variable
 8008404:	2400      	movs	r4, #0
 8008406:	e0bb      	b.n	8008580 <system_execute_line+0x258>
      switch( line[1] ) {
 8008408:	2c52      	cmp	r4, #82	; 0x52
 800840a:	f000 808c 	beq.w	8008526 <system_execute_line+0x1fe>
 800840e:	2c53      	cmp	r4, #83	; 0x53
 8008410:	d05b      	beq.n	80084ca <system_execute_line+0x1a2>
 8008412:	2c4e      	cmp	r4, #78	; 0x4e
 8008414:	d1f6      	bne.n	8008404 <system_execute_line+0xdc>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 8008416:	78ac      	ldrb	r4, [r5, #2]
 8008418:	2202      	movs	r2, #2
 800841a:	f88d 200f 	strb.w	r2, [sp, #15]
 800841e:	2c00      	cmp	r4, #0
 8008420:	f040 80ab 	bne.w	800857a <system_execute_line+0x252>
 8008424:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 8008426:	4629      	mov	r1, r5
 8008428:	4630      	mov	r0, r6
 800842a:	f7fe fdfb 	bl	8007024 <settings_read_startup_line>
 800842e:	2800      	cmp	r0, #0
 8008430:	f040 809e 	bne.w	8008570 <system_execute_line+0x248>
                report_status_message(STATUS_SETTING_READ_FAIL);
 8008434:	2007      	movs	r0, #7
 8008436:	f7fe f855 	bl	80064e4 <report_status_message>
 800843a:	3401      	adds	r4, #1
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 800843c:	2c02      	cmp	r4, #2
 800843e:	d087      	beq.n	8008350 <system_execute_line+0x28>
 8008440:	e7f0      	b.n	8008424 <system_execute_line+0xfc>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8008442:	78ac      	ldrb	r4, [r5, #2]
 8008444:	2c00      	cmp	r4, #0
 8008446:	d199      	bne.n	800837c <system_execute_line+0x54>
          else { report_ngc_parameters(); }
 8008448:	f7fe f9ae 	bl	80067a8 <report_ngc_parameters>
          break;
 800844c:	e78a      	b.n	8008364 <system_execute_line+0x3c>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 800844e:	4b7c      	ldr	r3, [pc, #496]	; (8008640 <system_execute_line+0x318>)
 8008450:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008454:	06db      	lsls	r3, r3, #27
 8008456:	f140 80ed 	bpl.w	8008634 <system_execute_line+0x30c>
          if (system_check_safety_door_ajar()) { return(STATUS_CHECK_DOOR); } // Block if safety door is ajar.
 800845a:	f7ff fef9 	bl	8008250 <system_check_safety_door_ajar>
 800845e:	2800      	cmp	r0, #0
 8008460:	d19e      	bne.n	80083a0 <system_execute_line+0x78>
          sys.state = STATE_HOMING; // Set system state variable
 8008462:	2304      	movs	r3, #4
 8008464:	7033      	strb	r3, [r6, #0]
          if (line[2] == 0) {
 8008466:	78ab      	ldrb	r3, [r5, #2]
 8008468:	b983      	cbnz	r3, 800848c <system_execute_line+0x164>
                case 'C': mc_homing_cycle(HOMING_CYCLE_C); break;
 800846a:	f7fc fe2b 	bl	80050c4 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 800846e:	7874      	ldrb	r4, [r6, #1]
 8008470:	2c00      	cmp	r4, #0
 8008472:	f47f af6d 	bne.w	8008350 <system_execute_line+0x28>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 8008476:	7034      	strb	r4, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 8008478:	f7ff f8fe 	bl	8007678 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 800847c:	78ab      	ldrb	r3, [r5, #2]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f47f af66 	bne.w	8008350 <system_execute_line+0x28>
 8008484:	4628      	mov	r0, r5
 8008486:	f7ff fee9 	bl	800825c <system_execute_startup>
 800848a:	e76b      	b.n	8008364 <system_execute_line+0x3c>
            } else if (line[3] == 0) {
 800848c:	78ea      	ldrb	r2, [r5, #3]
 800848e:	2a00      	cmp	r2, #0
 8008490:	f47f af74 	bne.w	800837c <system_execute_line+0x54>
              switch (line[2]) {
 8008494:	2b43      	cmp	r3, #67	; 0x43
 8008496:	d016      	beq.n	80084c6 <system_execute_line+0x19e>
 8008498:	d806      	bhi.n	80084a8 <system_execute_line+0x180>
 800849a:	2b41      	cmp	r3, #65	; 0x41
 800849c:	d011      	beq.n	80084c2 <system_execute_line+0x19a>
 800849e:	2b42      	cmp	r3, #66	; 0x42
 80084a0:	f47f af6c 	bne.w	800837c <system_execute_line+0x54>
                case 'B': mc_homing_cycle(HOMING_CYCLE_B); break;
 80084a4:	2010      	movs	r0, #16
 80084a6:	e7e0      	b.n	800846a <system_execute_line+0x142>
              switch (line[2]) {
 80084a8:	2b59      	cmp	r3, #89	; 0x59
 80084aa:	d006      	beq.n	80084ba <system_execute_line+0x192>
 80084ac:	2b5a      	cmp	r3, #90	; 0x5a
 80084ae:	d006      	beq.n	80084be <system_execute_line+0x196>
 80084b0:	2b58      	cmp	r3, #88	; 0x58
 80084b2:	f47f af63 	bne.w	800837c <system_execute_line+0x54>
                case 'X': mc_homing_cycle(HOMING_CYCLE_X); break;
 80084b6:	2001      	movs	r0, #1
 80084b8:	e7d7      	b.n	800846a <system_execute_line+0x142>
                case 'Y': mc_homing_cycle(HOMING_CYCLE_Y); break;
 80084ba:	2002      	movs	r0, #2
 80084bc:	e7d5      	b.n	800846a <system_execute_line+0x142>
                case 'Z': mc_homing_cycle(HOMING_CYCLE_Z); break;
 80084be:	2004      	movs	r0, #4
 80084c0:	e7d3      	b.n	800846a <system_execute_line+0x142>
                case 'A': mc_homing_cycle(HOMING_CYCLE_A); break;
 80084c2:	2008      	movs	r0, #8
 80084c4:	e7d1      	b.n	800846a <system_execute_line+0x142>
                case 'C': mc_homing_cycle(HOMING_CYCLE_C); break;
 80084c6:	2020      	movs	r0, #32
 80084c8:	e7cf      	b.n	800846a <system_execute_line+0x142>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 80084ca:	78ab      	ldrb	r3, [r5, #2]
 80084cc:	2b4c      	cmp	r3, #76	; 0x4c
 80084ce:	f47f af55 	bne.w	800837c <system_execute_line+0x54>
 80084d2:	78eb      	ldrb	r3, [r5, #3]
 80084d4:	2b50      	cmp	r3, #80	; 0x50
 80084d6:	f47f af51 	bne.w	800837c <system_execute_line+0x54>
 80084da:	792c      	ldrb	r4, [r5, #4]
 80084dc:	2c00      	cmp	r4, #0
 80084de:	f47f af4d 	bne.w	800837c <system_execute_line+0x54>
          system_set_exec_state_flag(EXEC_SLEEP); // Set to execute sleep mode immediately
 80084e2:	2080      	movs	r0, #128	; 0x80
 80084e4:	f7ff ff16 	bl	8008314 <system_set_exec_state_flag>
          break;
 80084e8:	e73c      	b.n	8008364 <system_execute_line+0x3c>
          if ( line[++char_counter] == 0 ) {
 80084ea:	78ac      	ldrb	r4, [r5, #2]
 80084ec:	2302      	movs	r3, #2
 80084ee:	f88d 300f 	strb.w	r3, [sp, #15]
 80084f2:	b934      	cbnz	r4, 8008502 <system_execute_line+0x1da>
            settings_read_build_info(line);
 80084f4:	4628      	mov	r0, r5
 80084f6:	f7fe fdac 	bl	8007052 <settings_read_build_info>
            report_build_info(line);
 80084fa:	4628      	mov	r0, r5
 80084fc:	f7fe fa76 	bl	80069ec <report_build_info>
 8008500:	e730      	b.n	8008364 <system_execute_line+0x3c>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8008502:	2c3d      	cmp	r4, #61	; 0x3d
 8008504:	f47f af3a 	bne.w	800837c <system_execute_line+0x54>
 8008508:	2303      	movs	r3, #3
                line[char_counter-helper_var] = line[char_counter];
 800850a:	18ea      	adds	r2, r5, r3
 800850c:	5cec      	ldrb	r4, [r5, r3]
 800850e:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 8008512:	3301      	adds	r3, #1
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2c00      	cmp	r4, #0
 8008518:	d1f7      	bne.n	800850a <system_execute_line+0x1e2>
              settings_store_build_info(line);
 800851a:	4628      	mov	r0, r5
 800851c:	f88d 300f 	strb.w	r3, [sp, #15]
 8008520:	f7fe fcc4 	bl	8006eac <settings_store_build_info>
 8008524:	e71e      	b.n	8008364 <system_execute_line+0x3c>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8008526:	78ab      	ldrb	r3, [r5, #2]
 8008528:	2b53      	cmp	r3, #83	; 0x53
 800852a:	f47f af27 	bne.w	800837c <system_execute_line+0x54>
 800852e:	78eb      	ldrb	r3, [r5, #3]
 8008530:	2b54      	cmp	r3, #84	; 0x54
 8008532:	f47f af23 	bne.w	800837c <system_execute_line+0x54>
 8008536:	792b      	ldrb	r3, [r5, #4]
 8008538:	2b3d      	cmp	r3, #61	; 0x3d
 800853a:	f47f af1f 	bne.w	800837c <system_execute_line+0x54>
 800853e:	79ab      	ldrb	r3, [r5, #6]
 8008540:	2b00      	cmp	r3, #0
 8008542:	f47f af1b 	bne.w	800837c <system_execute_line+0x54>
          switch (line[5]) {
 8008546:	796b      	ldrb	r3, [r5, #5]
 8008548:	2b24      	cmp	r3, #36	; 0x24
 800854a:	d006      	beq.n	800855a <system_execute_line+0x232>
 800854c:	2b2a      	cmp	r3, #42	; 0x2a
 800854e:	d00d      	beq.n	800856c <system_execute_line+0x244>
 8008550:	2b23      	cmp	r3, #35	; 0x23
 8008552:	f47f af13 	bne.w	800837c <system_execute_line+0x54>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 8008556:	2002      	movs	r0, #2
 8008558:	e000      	b.n	800855c <system_execute_line+0x234>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 800855a:	2001      	movs	r0, #1
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 800855c:	f7fe fcca 	bl	8006ef4 <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 8008560:	2009      	movs	r0, #9
 8008562:	f7fd ffe7 	bl	8006534 <report_feedback_message>
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 8008566:	f7fc fe3d 	bl	80051e4 <mc_reset>
 800856a:	e6f1      	b.n	8008350 <system_execute_line+0x28>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 800856c:	20ff      	movs	r0, #255	; 0xff
 800856e:	e7f5      	b.n	800855c <system_execute_line+0x234>
                report_startup_line(helper_var,line);
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f7fe fa12 	bl	800699c <report_startup_line>
 8008578:	e75f      	b.n	800843a <system_execute_line+0x112>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 800857a:	2b00      	cmp	r3, #0
 800857c:	d15c      	bne.n	8008638 <system_execute_line+0x310>
            helper_var = true;  // Set helper_var to flag storing method.
 800857e:	2401      	movs	r4, #1
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8008580:	aa04      	add	r2, sp, #16
 8008582:	f10d 010f 	add.w	r1, sp, #15
 8008586:	4628      	mov	r0, r5
 8008588:	f7fc fe56 	bl	8005238 <read_float>
 800858c:	b908      	cbnz	r0, 8008592 <system_execute_line+0x26a>
 800858e:	2402      	movs	r4, #2
 8008590:	e6e8      	b.n	8008364 <system_execute_line+0x3c>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8008592:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	5ceb      	ldrb	r3, [r5, r3]
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	2b3d      	cmp	r3, #61	; 0x3d
 800859e:	f88d 200f 	strb.w	r2, [sp, #15]
 80085a2:	f47f aeeb 	bne.w	800837c <system_execute_line+0x54>
          if (helper_var) { // Store startup line
 80085a6:	b314      	cbz	r4, 80085ee <system_execute_line+0x2c6>
 80085a8:	4613      	mov	r3, r2
              line[char_counter-helper_var] = line[char_counter];
 80085aa:	1a98      	subs	r0, r3, r2
 80085ac:	5cec      	ldrb	r4, [r5, r3]
 80085ae:	542c      	strb	r4, [r5, r0]
 80085b0:	18e9      	adds	r1, r5, r3
            } while (line[char_counter++] != 0);
 80085b2:	3301      	adds	r3, #1
 80085b4:	7809      	ldrb	r1, [r1, #0]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2900      	cmp	r1, #0
 80085ba:	d1f6      	bne.n	80085aa <system_execute_line+0x282>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 80085bc:	4628      	mov	r0, r5
 80085be:	f88d 300f 	strb.w	r3, [sp, #15]
 80085c2:	f7fb f9e9 	bl	8003998 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 80085c6:	4604      	mov	r4, r0
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f47f aecb 	bne.w	8008364 <system_execute_line+0x3c>
              helper_var = trunc(parameter); // Set helper_var to int value of parameter
 80085ce:	9804      	ldr	r0, [sp, #16]
 80085d0:	f7f7 ffb2 	bl	8000538 <__aeabi_f2d>
 80085d4:	ec41 0b10 	vmov	d0, r0, r1
 80085d8:	f001 f966 	bl	80098a8 <trunc>
 80085dc:	ec51 0b10 	vmov	r0, r1, d0
 80085e0:	f7f8 fad6 	bl	8000b90 <__aeabi_d2uiz>
              settings_store_startup_line(helper_var,line);
 80085e4:	4629      	mov	r1, r5
 80085e6:	b2c0      	uxtb	r0, r0
 80085e8:	f7fe fc50 	bl	8006e8c <settings_store_startup_line>
 80085ec:	e6ba      	b.n	8008364 <system_execute_line+0x3c>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 80085ee:	aa05      	add	r2, sp, #20
 80085f0:	f10d 010f 	add.w	r1, sp, #15
 80085f4:	4628      	mov	r0, r5
 80085f6:	f7fc fe1f 	bl	8005238 <read_float>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d0c7      	beq.n	800858e <system_execute_line+0x266>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 80085fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008602:	5ceb      	ldrb	r3, [r5, r3]
 8008604:	2b00      	cmp	r3, #0
 8008606:	f47f aeb9 	bne.w	800837c <system_execute_line+0x54>
 800860a:	eddd 7a04 	vldr	s15, [sp, #16]
 800860e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008644 <system_execute_line+0x31c>
 8008612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800861a:	f73f aeaf 	bgt.w	800837c <system_execute_line+0x54>
            return(settings_store_global_setting((uint8_t)parameter, value));
 800861e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008622:	ed9d 0a05 	vldr	s0, [sp, #20]
 8008626:	edcd 7a01 	vstr	s15, [sp, #4]
 800862a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800862e:	f7fe fd53 	bl	80070d8 <settings_store_global_setting>
 8008632:	e6a7      	b.n	8008384 <system_execute_line+0x5c>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8008634:	2405      	movs	r4, #5
 8008636:	e695      	b.n	8008364 <system_execute_line+0x3c>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 8008638:	2408      	movs	r4, #8
 800863a:	e693      	b.n	8008364 <system_execute_line+0x3c>
 800863c:	20003948 	.word	0x20003948
 8008640:	2000447c 	.word	0x2000447c
 8008644:	437f0000 	.word	0x437f0000

08008648 <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 8008648:	b672      	cpsid	i

void system_clear_exec_state_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 800864a:	4a03      	ldr	r2, [pc, #12]	; (8008658 <system_clear_exec_state_flag+0x10>)
 800864c:	7813      	ldrb	r3, [r2, #0]
 800864e:	ea23 0000 	bic.w	r0, r3, r0
 8008652:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008654:	b662      	cpsie	i
 8008656:	4770      	bx	lr
 8008658:	2000395d 	.word	0x2000395d

0800865c <system_set_exec_alarm>:
  __ASM volatile ("cpsid i" : : : "memory");
 800865c:	b672      	cpsid	i

void system_set_exec_alarm(uint8_t code)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_alarm |= (code);
 800865e:	4a03      	ldr	r2, [pc, #12]	; (800866c <system_set_exec_alarm+0x10>)
 8008660:	7813      	ldrb	r3, [r2, #0]
 8008662:	4318      	orrs	r0, r3
 8008664:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008666:	b662      	cpsie	i
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	20003990 	.word	0x20003990

08008670 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i" : : : "memory");
 8008670:	b672      	cpsid	i

void system_clear_exec_alarm()
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_alarm = 0;
 8008672:	4b02      	ldr	r3, [pc, #8]	; (800867c <system_clear_exec_alarm+0xc>)
 8008674:	2200      	movs	r2, #0
 8008676:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008678:	b662      	cpsie	i
 800867a:	4770      	bx	lr
 800867c:	20003990 	.word	0x20003990

08008680 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 8008680:	b672      	cpsid	i

void system_set_exec_motion_override_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 8008682:	4a03      	ldr	r2, [pc, #12]	; (8008690 <system_set_exec_motion_override_flag+0x10>)
 8008684:	7813      	ldrb	r3, [r2, #0]
 8008686:	4318      	orrs	r0, r3
 8008688:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800868a:	b662      	cpsie	i
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20003944 	.word	0x20003944

08008694 <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 8008694:	b672      	cpsid	i

void system_set_exec_accessory_override_flag(uint8_t mask)
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 8008696:	4a03      	ldr	r2, [pc, #12]	; (80086a4 <system_set_exec_accessory_override_flag+0x10>)
 8008698:	7813      	ldrb	r3, [r2, #0]
 800869a:	4318      	orrs	r0, r3
 800869c:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800869e:	b662      	cpsie	i
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	2000395c 	.word	0x2000395c

080086a8 <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i" : : : "memory");
 80086a8:	b672      	cpsid	i

void system_clear_exec_motion_overrides()
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 80086aa:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <system_clear_exec_motion_overrides+0xc>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80086b0:	b662      	cpsie	i
 80086b2:	4770      	bx	lr
 80086b4:	20003944 	.word	0x20003944

080086b8 <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i" : : : "memory");
 80086b8:	b672      	cpsid	i

void system_clear_exec_accessory_overrides()
{
#ifdef STM32
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 80086ba:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <system_clear_exec_accessory_overrides+0xc>)
 80086bc:	2200      	movs	r2, #0
 80086be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80086c0:	b662      	cpsie	i
 80086c2:	4770      	bx	lr
 80086c4:	2000395c 	.word	0x2000395c

080086c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80086c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008700 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80086cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80086ce:	e003      	b.n	80086d8 <LoopCopyDataInit>

080086d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80086d0:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80086d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80086d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80086d6:	3104      	adds	r1, #4

080086d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80086d8:	480b      	ldr	r0, [pc, #44]	; (8008708 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80086da:	4b0c      	ldr	r3, [pc, #48]	; (800870c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80086dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80086de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80086e0:	d3f6      	bcc.n	80086d0 <CopyDataInit>
  ldr  r2, =_sbss
 80086e2:	4a0b      	ldr	r2, [pc, #44]	; (8008710 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80086e4:	e002      	b.n	80086ec <LoopFillZerobss>

080086e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80086e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80086e8:	f842 3b04 	str.w	r3, [r2], #4

080086ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80086ec:	4b09      	ldr	r3, [pc, #36]	; (8008714 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80086ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80086f0:	d3f9      	bcc.n	80086e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80086f2:	f7fa fce9 	bl	80030c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80086f6:	f000 fae9 	bl	8008ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80086fa:	f7fa fac9 	bl	8002c90 <main>
  bx  lr    
 80086fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008700:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008704:	0800b160 	.word	0x0800b160
  ldr  r0, =_sdata
 8008708:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800870c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8008710:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8008714:	200045c0 	.word	0x200045c0

08008718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008718:	e7fe      	b.n	8008718 <ADC_IRQHandler>
	...

0800871c <outputs_digital_reset>:

}

// Reset outputs
void outputs_digital_reset()
{
 800871c:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;
  for (i = 0; i < N_OUTPUTS_DIG; i++)
    GPIO_ResetBits(AUX_GPIO_Port, outputs_pin_mask[i]);
 800871e:	4e06      	ldr	r6, [pc, #24]	; (8008738 <outputs_digital_reset+0x1c>)
 8008720:	4d06      	ldr	r5, [pc, #24]	; (800873c <outputs_digital_reset+0x20>)
{
 8008722:	2400      	movs	r4, #0
    GPIO_ResetBits(AUX_GPIO_Port, outputs_pin_mask[i]);
 8008724:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 8008728:	4628      	mov	r0, r5
 800872a:	3401      	adds	r4, #1
 800872c:	f000 f950 	bl	80089d0 <GPIO_ResetBits>
  for (i = 0; i < N_OUTPUTS_DIG; i++)
 8008730:	2c08      	cmp	r4, #8
 8008732:	d1f7      	bne.n	8008724 <outputs_digital_reset+0x8>
}
 8008734:	bd70      	pop	{r4, r5, r6, pc}
 8008736:	bf00      	nop
 8008738:	0800acdc 	.word	0x0800acdc
 800873c:	40020c00 	.word	0x40020c00

08008740 <outputs_digital_set>:
// Set outputs
void outputs_digital_set()
{
 8008740:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;
  for (i = 0; i < N_OUTPUTS_DIG; i++)
    GPIO_SetBits(AUX_GPIO_Port, outputs_pin_mask[i]);
 8008742:	4e06      	ldr	r6, [pc, #24]	; (800875c <outputs_digital_set+0x1c>)
 8008744:	4d06      	ldr	r5, [pc, #24]	; (8008760 <outputs_digital_set+0x20>)
{
 8008746:	2400      	movs	r4, #0
    GPIO_SetBits(AUX_GPIO_Port, outputs_pin_mask[i]);
 8008748:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 800874c:	4628      	mov	r0, r5
 800874e:	3401      	adds	r4, #1
 8008750:	f000 f941 	bl	80089d6 <GPIO_SetBits>
  for (i = 0; i < N_OUTPUTS_DIG; i++)
 8008754:	2c08      	cmp	r4, #8
 8008756:	d1f7      	bne.n	8008748 <outputs_digital_set+0x8>
}
 8008758:	bd70      	pop	{r4, r5, r6, pc}
 800875a:	bf00      	nop
 800875c:	0800acdc 	.word	0x0800acdc
 8008760:	40020c00 	.word	0x40020c00

08008764 <outputs_set_digital>:
  return outputs_state;
}

void outputs_set_digital(uint8_t bit_index, uint8_t OnOff)
{
  if (bit_index < N_OUTPUTS_DIG)
 8008764:	2807      	cmp	r0, #7
 8008766:	d80b      	bhi.n	8008780 <outputs_set_digital+0x1c>
 8008768:	4b06      	ldr	r3, [pc, #24]	; (8008784 <outputs_set_digital+0x20>)
    {
    if (OnOff)
 800876a:	b121      	cbz	r1, 8008776 <outputs_set_digital+0x12>
      GPIO_SetBits(AUX_GPIO_Port, outputs_pin_mask[bit_index]);
 800876c:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8008770:	4805      	ldr	r0, [pc, #20]	; (8008788 <outputs_set_digital+0x24>)
 8008772:	f000 b930 	b.w	80089d6 <GPIO_SetBits>
    else
      GPIO_ResetBits(AUX_GPIO_Port, outputs_pin_mask[bit_index]);
 8008776:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800877a:	4803      	ldr	r0, [pc, #12]	; (8008788 <outputs_set_digital+0x24>)
 800877c:	f000 b928 	b.w	80089d0 <GPIO_ResetBits>
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	0800acdc 	.word	0x0800acdc
 8008788:	40020c00 	.word	0x40020c00

0800878c <outputs_digital_action>:
    }
}

void outputs_digital_action(uint8_t bit_index, uint8_t Action)
{
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4605      	mov	r5, r0
 8008790:	460c      	mov	r4, r1
  protocol_buffer_synchronize();
 8008792:	f7fd fe4b 	bl	800642c <protocol_buffer_synchronize>
  if (bit_index == 0xFF)
 8008796:	2dff      	cmp	r5, #255	; 0xff
 8008798:	d10b      	bne.n	80087b2 <outputs_digital_action+0x26>
    {
    if (Action == DIGITAL_CONTROL_ON)
 800879a:	2c01      	cmp	r4, #1
 800879c:	d103      	bne.n	80087a6 <outputs_digital_action+0x1a>
      outputs_set_digital(bit_index, 1);
    else if (Action == DIGITAL_CONTROL_OFF)
      outputs_set_digital(bit_index, 0);
    }

}
 800879e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      outputs_digital_set();
 80087a2:	f7ff bfcd 	b.w	8008740 <outputs_digital_set>
    else if (Action == DIGITAL_CONTROL_OFF)
 80087a6:	2c02      	cmp	r4, #2
 80087a8:	d111      	bne.n	80087ce <outputs_digital_action+0x42>
}
 80087aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      outputs_digital_reset();
 80087ae:	f7ff bfb5 	b.w	800871c <outputs_digital_reset>
  else if (bit_index < N_OUTPUTS_DIG)
 80087b2:	2d07      	cmp	r5, #7
 80087b4:	d80b      	bhi.n	80087ce <outputs_digital_action+0x42>
    if (Action == DIGITAL_CONTROL_ON)
 80087b6:	2c01      	cmp	r4, #1
 80087b8:	d105      	bne.n	80087c6 <outputs_digital_action+0x3a>
      outputs_set_digital(bit_index, 1);
 80087ba:	4621      	mov	r1, r4
      outputs_set_digital(bit_index, 0);
 80087bc:	4628      	mov	r0, r5
}
 80087be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      outputs_set_digital(bit_index, 0);
 80087c2:	f7ff bfcf 	b.w	8008764 <outputs_set_digital>
    else if (Action == DIGITAL_CONTROL_OFF)
 80087c6:	2c02      	cmp	r4, #2
 80087c8:	d101      	bne.n	80087ce <outputs_digital_action+0x42>
      outputs_set_digital(bit_index, 0);
 80087ca:	2100      	movs	r1, #0
 80087cc:	e7f6      	b.n	80087bc <outputs_digital_action+0x30>
 80087ce:	bd38      	pop	{r3, r4, r5, pc}

080087d0 <outputs_analog_init>:
/*
 * Sequence: Set PWM value, then Enable
 */
// analog outputs ----------------------------------------------------------
void outputs_analog_init()
{
 80087d0:	b508      	push	{r3, lr}
  Analog_Timer_Init();
 80087d2:	f7fa fb0f 	bl	8002df4 <Analog_Timer_Init>
  pwm_analog_gradient = OUTPUTS_PWM_MAX_VALUE / settings.analog_max;
 80087d6:	4b05      	ldr	r3, [pc, #20]	; (80087ec <outputs_analog_init+0x1c>)
 80087d8:	eddf 6a05 	vldr	s13, [pc, #20]	; 80087f0 <outputs_analog_init+0x20>
 80087dc:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80087e0:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <outputs_analog_init+0x24>)
 80087e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087e6:	edc3 7a00 	vstr	s15, [r3]
 80087ea:	bd08      	pop	{r3, pc}
 80087ec:	2000447c 	.word	0x2000447c
 80087f0:	42c80000 	.word	0x42c80000
 80087f4:	200038b4 	.word	0x200038b4

080087f8 <outputs_set_analog>:

}
//--------------------------------------------------------------------------
void outputs_set_analog(uint8_t channel, uint16_t value)
{
  TIM_TypeDef * Timer = ana_outputs_timer[channel];
 80087f8:	4b10      	ldr	r3, [pc, #64]	; (800883c <outputs_set_analog+0x44>)
  uint32_t TimerChannel = ana_outputs_channel[channel];
 80087fa:	4a11      	ldr	r2, [pc, #68]	; (8008840 <outputs_set_analog+0x48>)
  TIM_TypeDef * Timer = ana_outputs_timer[channel];
 80087fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  uint32_t TimerChannel = ana_outputs_channel[channel];
 8008800:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]

  if (value)
 8008804:	b1b1      	cbz	r1, 8008834 <outputs_set_analog+0x3c>
    {
    switch (TimerChannel)
 8008806:	2a10      	cmp	r2, #16
 8008808:	d010      	beq.n	800882c <outputs_set_analog+0x34>
 800880a:	d805      	bhi.n	8008818 <outputs_set_analog+0x20>
 800880c:	2a01      	cmp	r2, #1
 800880e:	d00b      	beq.n	8008828 <outputs_set_analog+0x30>
  SET_BIT(TIMx->CCER, Channels);
 8008810:	6a19      	ldr	r1, [r3, #32]
 8008812:	430a      	orrs	r2, r1
  CLEAR_BIT(TIMx->CCER, Channels);
 8008814:	621a      	str	r2, [r3, #32]
 8008816:	4770      	bx	lr
 8008818:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800881c:	d008      	beq.n	8008830 <outputs_set_analog+0x38>
 800881e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008822:	d1f5      	bne.n	8008810 <outputs_set_analog+0x18>
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008824:	6419      	str	r1, [r3, #64]	; 0x40
 8008826:	e7f3      	b.n	8008810 <outputs_set_analog+0x18>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008828:	6359      	str	r1, [r3, #52]	; 0x34
 800882a:	e7f1      	b.n	8008810 <outputs_set_analog+0x18>
  WRITE_REG(TIMx->CCR2, CompareValue);
 800882c:	6399      	str	r1, [r3, #56]	; 0x38
 800882e:	e7ef      	b.n	8008810 <outputs_set_analog+0x18>
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008830:	63d9      	str	r1, [r3, #60]	; 0x3c
 8008832:	e7ed      	b.n	8008810 <outputs_set_analog+0x18>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008834:	6a19      	ldr	r1, [r3, #32]
 8008836:	ea21 0202 	bic.w	r2, r1, r2
 800883a:	e7eb      	b.n	8008814 <outputs_set_analog+0x1c>
 800883c:	2000000c 	.word	0x2000000c
 8008840:	0800acbc 	.word	0x0800acbc

08008844 <outputs_analog_set>:
{
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4605      	mov	r5, r0
 8008848:	2400      	movs	r4, #0
    outputs_set_analog(i, value);
 800884a:	b2e0      	uxtb	r0, r4
 800884c:	4629      	mov	r1, r5
 800884e:	3401      	adds	r4, #1
 8008850:	f7ff ffd2 	bl	80087f8 <outputs_set_analog>
  for (i = 0; i < N_OUTPUTS_ANA; i++)
 8008854:	2c08      	cmp	r4, #8
 8008856:	d1f8      	bne.n	800884a <outputs_analog_set+0x6>
}
 8008858:	bd38      	pop	{r3, r4, r5, pc}

0800885a <inoutputs_init>:
{
 800885a:	b508      	push	{r3, lr}
  outputs_digital_reset();
 800885c:	f7ff ff5e 	bl	800871c <outputs_digital_reset>
  outputs_analog_init();
 8008860:	f7ff ffb6 	bl	80087d0 <outputs_analog_init>
  outputs_analog_set(0);
 8008864:	2000      	movs	r0, #0
}
 8008866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  outputs_analog_set(0);
 800886a:	f7ff bfeb 	b.w	8008844 <outputs_analog_set>

0800886e <outputs_analog_action>:
  pwm_value = (uint16_t) (Val * pwm_analog_gradient);
  return (pwm_value);
}
//--------------------------------------------------------------------------
void outputs_analog_action(uint8_t Echannel, float *pQval)
{
 800886e:	b538      	push	{r3, r4, r5, lr}
 8008870:	4604      	mov	r4, r0
  uint16_t value = trunc(*pQval);
 8008872:	6808      	ldr	r0, [r1, #0]
 8008874:	f7f7 fe60 	bl	8000538 <__aeabi_f2d>
 8008878:	ec41 0b10 	vmov	d0, r0, r1
 800887c:	f001 f814 	bl	80098a8 <trunc>
 8008880:	ec51 0b10 	vmov	r0, r1, d0
 8008884:	f7f8 f984 	bl	8000b90 <__aeabi_d2uiz>
 8008888:	b285      	uxth	r5, r0
  protocol_buffer_synchronize();
 800888a:	f7fd fdcf 	bl	800642c <protocol_buffer_synchronize>

  if (Echannel == 0xFF)
 800888e:	2cff      	cmp	r4, #255	; 0xff
 8008890:	d104      	bne.n	800889c <outputs_analog_action+0x2e>
    {
    outputs_analog_set(value);	//-- set value to all channels
 8008892:	4628      	mov	r0, r5
  else if (Echannel < N_OUTPUTS_ANA)
    {
    outputs_set_analog(Echannel, value);

    }
}
 8008894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    outputs_analog_set(value);	//-- set value to all channels
 8008898:	f7ff bfd4 	b.w	8008844 <outputs_analog_set>
  else if (Echannel < N_OUTPUTS_ANA)
 800889c:	2c07      	cmp	r4, #7
 800889e:	d805      	bhi.n	80088ac <outputs_analog_action+0x3e>
    outputs_set_analog(Echannel, value);
 80088a0:	4629      	mov	r1, r5
 80088a2:	4620      	mov	r0, r4
}
 80088a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    outputs_set_analog(Echannel, value);
 80088a8:	f7ff bfa6 	b.w	80087f8 <outputs_set_analog>
 80088ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080088b0 <wait_on_input_action>:
void inputs_digital_init()
{
}

void wait_on_input_action(uint8_t bit_index, uint8_t Mode, float *pTimeoutS)
{
 80088b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b4:	4614      	mov	r4, r2
 80088b6:	4605      	mov	r5, r0
 80088b8:	460f      	mov	r7, r1
  uint32_t Start = HAL_GetTick(); //-- milliseconds
 80088ba:	f7f8 fbab 	bl	8001014 <HAL_GetTick>
  uint32_t Now;

  uint32_t Elapsed;
  uint32_t TimeoutMS = *pTimeoutS * 1000;
 80088be:	edd4 7a00 	vldr	s15, [r4]
 80088c2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008928 <wait_on_input_action+0x78>
  protocol_buffer_synchronize();
  while (StillWaiting)
    {
    Now = HAL_GetTick();
    Elapsed = Now - Start;
    if ((Elapsed > TimeoutMS) || (sys.abort))
 80088c6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800892c <wait_on_input_action+0x7c>
  uint32_t TimeoutMS = *pTimeoutS * 1000;
 80088ca:	ee67 7a87 	vmul.f32	s15, s15, s14
  uint32_t Start = HAL_GetTick(); //-- milliseconds
 80088ce:	4680      	mov	r8, r0
  uint32_t TimeoutMS = *pTimeoutS * 1000;
 80088d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  uint8_t bitAction = (1 << bit_index);
 80088d4:	2401      	movs	r4, #1
  uint32_t TimeoutMS = *pTimeoutS * 1000;
 80088d6:	ee17 6a90 	vmov	r6, s15
  protocol_buffer_synchronize();
 80088da:	f7fd fda7 	bl	800642c <protocol_buffer_synchronize>
  uint8_t bitAction = (1 << bit_index);
 80088de:	40ac      	lsls	r4, r5
 80088e0:	b2e4      	uxtb	r4, r4
    Now = HAL_GetTick();
 80088e2:	f7f8 fb97 	bl	8001014 <HAL_GetTick>
    Elapsed = Now - Start;
 80088e6:	eba0 0008 	sub.w	r0, r0, r8
    if ((Elapsed > TimeoutMS) || (sys.abort))
 80088ea:	4286      	cmp	r6, r0
 80088ec:	d317      	bcc.n	800891e <wait_on_input_action+0x6e>
 80088ee:	f899 3001 	ldrb.w	r3, [r9, #1]
 80088f2:	b9a3      	cbnz	r3, 800891e <wait_on_input_action+0x6e>
      {
      StillWaiting = false;
      }
    else
      {
      byInput = ReadInputByte();
 80088f4:	f000 f9da 	bl	8008cac <ReadInputByte>
      if (Mode == 3) // look for HI
 80088f8:	2f03      	cmp	r7, #3
 80088fa:	d109      	bne.n	8008910 <wait_on_input_action+0x60>
        {
        if (bit_istrue(byInput, bitAction))
 80088fc:	4204      	tst	r4, r0
 80088fe:	bf0c      	ite	eq
 8008900:	2501      	moveq	r5, #1
 8008902:	2500      	movne	r5, #0
        {
        if (bit_isfalse(byInput, bitAction))
          StillWaiting = false;
        }
      }
    protocol_execute_realtime();
 8008904:	f7fd fc20 	bl	8006148 <protocol_execute_realtime>
  while (StillWaiting)
 8008908:	2d00      	cmp	r5, #0
 800890a:	d1ea      	bne.n	80088e2 <wait_on_input_action+0x32>
    //HAL_Delay(1);
    //delay_ms(1000);
    }

}
 800890c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      else if (Mode == 4) // look for LO
 8008910:	2f04      	cmp	r7, #4
 8008912:	d106      	bne.n	8008922 <wait_on_input_action+0x72>
        if (bit_isfalse(byInput, bitAction))
 8008914:	4204      	tst	r4, r0
 8008916:	bf14      	ite	ne
 8008918:	2501      	movne	r5, #1
 800891a:	2500      	moveq	r5, #0
 800891c:	e7f2      	b.n	8008904 <wait_on_input_action+0x54>
      StillWaiting = false;
 800891e:	2500      	movs	r5, #0
 8008920:	e7f0      	b.n	8008904 <wait_on_input_action+0x54>
 8008922:	2501      	movs	r5, #1
 8008924:	e7ee      	b.n	8008904 <wait_on_input_action+0x54>
 8008926:	bf00      	nop
 8008928:	447a0000 	.word	0x447a0000
 800892c:	20003948 	.word	0x20003948

08008930 <timing_init>:
char pDbgVal16[17];

//-------------------------------------------------------------------
void timing_init()
{
	uTICKS_PER_MICROSECOND = SystemCoreClock / 1000000;
 8008930:	4b09      	ldr	r3, [pc, #36]	; (8008958 <timing_init+0x28>)
	fTICKS_PER_MINUTE = SystemCoreClock * 60.0f;
 8008932:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800895c <timing_init+0x2c>
	uTICKS_PER_MICROSECOND = SystemCoreClock / 1000000;
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a09      	ldr	r2, [pc, #36]	; (8008960 <timing_init+0x30>)
 800893a:	490a      	ldr	r1, [pc, #40]	; (8008964 <timing_init+0x34>)
 800893c:	fbb3 f2f2 	udiv	r2, r3, r2
	fTICKS_PER_MINUTE = SystemCoreClock * 60.0f;
 8008940:	ee07 3a90 	vmov	s15, r3
 8008944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008948:	4b07      	ldr	r3, [pc, #28]	; (8008968 <timing_init+0x38>)
	uTICKS_PER_MICROSECOND = SystemCoreClock / 1000000;
 800894a:	600a      	str	r2, [r1, #0]
	fTICKS_PER_MINUTE = SystemCoreClock * 60.0f;
 800894c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008950:	edc3 7a00 	vstr	s15, [r3]
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	20000008 	.word	0x20000008
 800895c:	42700000 	.word	0x42700000
 8008960:	000f4240 	.word	0x000f4240
 8008964:	200038c0 	.word	0x200038c0
 8008968:	200038b8 	.word	0x200038b8

0800896c <uart_sendch>:
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800896c:	4b02      	ldr	r3, [pc, #8]	; (8008978 <uart_sendch+0xc>)
 800896e:	6058      	str	r0, [r3, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8008970:	681a      	ldr	r2, [r3, #0]
}

void uart_sendch(uint8_t uC)
{
	LL_USART_TransmitData8(USART1, uC);
	while (!(LL_USART_IsActiveFlag_TXE(USART1)))
 8008972:	0612      	lsls	r2, r2, #24
 8008974:	d5fc      	bpl.n	8008970 <uart_sendch+0x4>
		; // sit till empty
}
 8008976:	4770      	bx	lr
 8008978:	40011000 	.word	0x40011000

0800897c <uart_sendstr>:
{
 800897c:	b508      	push	{r3, lr}
 800897e:	1e41      	subs	r1, r0, #1
	while (*pStr)
 8008980:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008984:	b900      	cbnz	r0, 8008988 <uart_sendstr+0xc>
}
 8008986:	bd08      	pop	{r3, pc}
		uart_sendch(*pStr++);
 8008988:	f7ff fff0 	bl	800896c <uart_sendch>
 800898c:	e7f8      	b.n	8008980 <uart_sendstr+0x4>
	...

08008990 <uart_init>:
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008990:	4a0b      	ldr	r2, [pc, #44]	; (80089c0 <uart_init+0x30>)
 8008992:	68d3      	ldr	r3, [r2, #12]
{
 8008994:	b510      	push	{r4, lr}
	memset(pDbgStr, 0, 80);
 8008996:	4c0b      	ldr	r4, [pc, #44]	; (80089c4 <uart_init+0x34>)
 8008998:	f043 0320 	orr.w	r3, r3, #32
 800899c:	60d3      	str	r3, [r2, #12]
 800899e:	2100      	movs	r1, #0
 80089a0:	2250      	movs	r2, #80	; 0x50
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 f9c5 	bl	8008d32 <memset>
	sprintf(pDbgStr, "\r\nSysClk:%ld\r\n", SystemCoreClock); //-- Clock check for Overclocking case
 80089a8:	4b07      	ldr	r3, [pc, #28]	; (80089c8 <uart_init+0x38>)
 80089aa:	4908      	ldr	r1, [pc, #32]	; (80089cc <uart_init+0x3c>)
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 f9c8 	bl	8008d44 <siprintf>
	uart_sendstr(pDbgStr);
 80089b4:	4620      	mov	r0, r4
}
 80089b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uart_sendstr(pDbgStr);
 80089ba:	f7ff bfdf 	b.w	800897c <uart_sendstr>
 80089be:	bf00      	nop
 80089c0:	40011000 	.word	0x40011000
 80089c4:	2000453f 	.word	0x2000453f
 80089c8:	20000008 	.word	0x20000008
 80089cc:	0800ad10 	.word	0x0800ad10

080089d0 <GPIO_ResetBits>:

//------------------------------------------------------------------------
//-- Pin based calls, need to use HAL since LL pins and HAL pins are incompatible for F1
void GPIO_ResetBits(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80089d0:	2200      	movs	r2, #0
 80089d2:	f7f8 bdb9 	b.w	8001548 <HAL_GPIO_WritePin>

080089d6 <GPIO_SetBits>:
}
void GPIO_SetBits(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80089d6:	2201      	movs	r2, #1
 80089d8:	f7f8 bdb6 	b.w	8001548 <HAL_GPIO_WritePin>

080089dc <SPIRead>:
	SPIWrite(IOC0, SPI_GPINTENB, 0x00);
}

//----------------------------------------------------------------------
uint8_t SPIRead(enum IOExpChip IOC, uint8_t Reg)
{
 80089dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	HAL_StatusTypeDef eResult;
	uint8_t Result = 0;
 80089de:	ad02      	add	r5, sp, #8
 80089e0:	2200      	movs	r2, #0
{
 80089e2:	4607      	mov	r7, r0
 80089e4:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, GPIO_PIN_RESET);
 80089e6:	4812      	ldr	r0, [pc, #72]	; (8008a30 <SPIRead+0x54>)
	uint8_t Result = 0;
 80089e8:	f805 2d01 	strb.w	r2, [r5, #-1]!
	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, GPIO_PIN_RESET);
 80089ec:	2101      	movs	r1, #1
 80089ee:	f7f8 fdab 	bl	8001548 <HAL_GPIO_WritePin>
 80089f2:	4c10      	ldr	r4, [pc, #64]	; (8008a34 <SPIRead+0x58>)
	if (IOC == IOC0)
 80089f4:	b9bf      	cbnz	r7, 8008a26 <SPIRead+0x4a>
	{
		SPIDataC0R[1] = Reg;
 80089f6:	4910      	ldr	r1, [pc, #64]	; (8008a38 <SPIRead+0x5c>)
		HAL_SPI_Transmit(pHSPI, SPIDataC0R, 2, SPI_TIMEOUT);
		eResult = HAL_SPI_Receive(pHSPI, &Result, 1, SPI_TIMEOUT);
	}
	else //-- IOC1
	{
		SPIDataC1R[1] = Reg;
 80089f8:	704e      	strb	r6, [r1, #1]
		HAL_SPI_Transmit(pHSPI, SPIDataC1R, 2, SPI_TIMEOUT);
 80089fa:	2302      	movs	r3, #2
 80089fc:	461a      	mov	r2, r3
 80089fe:	6820      	ldr	r0, [r4, #0]
 8008a00:	f7f9 f993 	bl	8001d2a <HAL_SPI_Transmit>
		eResult = HAL_SPI_Receive(pHSPI, &Result, 1, SPI_TIMEOUT);
 8008a04:	2201      	movs	r2, #1
 8008a06:	4629      	mov	r1, r5
 8008a08:	6820      	ldr	r0, [r4, #0]
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	f7f9 fb25 	bl	800205a <HAL_SPI_Receive>
	}

	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, GPIO_PIN_SET);
 8008a10:	2201      	movs	r2, #1
		eResult = HAL_SPI_Receive(pHSPI, &Result, 1, SPI_TIMEOUT);
 8008a12:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, GPIO_PIN_SET);
 8008a14:	4611      	mov	r1, r2
 8008a16:	4806      	ldr	r0, [pc, #24]	; (8008a30 <SPIRead+0x54>)
 8008a18:	f7f8 fd96 	bl	8001548 <HAL_GPIO_WritePin>

	if (eResult == HAL_OK)
 8008a1c:	b92c      	cbnz	r4, 8008a2a <SPIRead+0x4e>
		return (Result);
 8008a1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
	else
		return 0;
}
 8008a22:	b003      	add	sp, #12
 8008a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SPIDataC1R[1] = Reg;
 8008a26:	4905      	ldr	r1, [pc, #20]	; (8008a3c <SPIRead+0x60>)
 8008a28:	e7e6      	b.n	80089f8 <SPIRead+0x1c>
		return 0;
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e7f9      	b.n	8008a22 <SPIRead+0x46>
 8008a2e:	bf00      	nop
 8008a30:	40021000 	.word	0x40021000
 8008a34:	200038bc 	.word	0x200038bc
 8008a38:	20004598 	.word	0x20004598
 8008a3c:	200045af 	.word	0x200045af

08008a40 <SPIWrite>:
//----------------------------------------------------------------------
HAL_StatusTypeDef SPIWrite(enum IOExpChip IOC, uint8_t Reg, uint8_t Val)
{
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	4606      	mov	r6, r0
 8008a44:	460d      	mov	r5, r1
	HAL_StatusTypeDef eResult;
	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, GPIO_PIN_RESET);
 8008a46:	480d      	ldr	r0, [pc, #52]	; (8008a7c <SPIWrite+0x3c>)
{
 8008a48:	4614      	mov	r4, r2
	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, GPIO_PIN_RESET);
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f7f8 fd7b 	bl	8001548 <HAL_GPIO_WritePin>
 8008a52:	480b      	ldr	r0, [pc, #44]	; (8008a80 <SPIWrite+0x40>)

	if (IOC == IOC0)
 8008a54:	b97e      	cbnz	r6, 8008a76 <SPIWrite+0x36>
	{
		SPIDataC0W[1] = Reg;
 8008a56:	490b      	ldr	r1, [pc, #44]	; (8008a84 <SPIWrite+0x44>)
		SPIDataC0W[2] = Val;
		eResult = HAL_SPI_Transmit(pHSPI, SPIDataC0W, 3, SPI_TIMEOUT);
	}
	else //-- IOC1
	{
		SPIDataC1W[1] = Reg;
 8008a58:	704d      	strb	r5, [r1, #1]
		SPIDataC1W[2] = Val;
 8008a5a:	708c      	strb	r4, [r1, #2]
		eResult = HAL_SPI_Transmit(pHSPI, SPIDataC1W, 3, SPI_TIMEOUT);
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	2203      	movs	r2, #3
 8008a60:	6800      	ldr	r0, [r0, #0]
 8008a62:	f7f9 f962 	bl	8001d2a <HAL_SPI_Transmit>
	}

	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, GPIO_PIN_SET);
 8008a66:	2201      	movs	r2, #1
		eResult = HAL_SPI_Transmit(pHSPI, SPIDataC1W, 3, SPI_TIMEOUT);
 8008a68:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, GPIO_PIN_SET);
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	4803      	ldr	r0, [pc, #12]	; (8008a7c <SPIWrite+0x3c>)
 8008a6e:	f7f8 fd6b 	bl	8001548 <HAL_GPIO_WritePin>
	return (eResult);
}
 8008a72:	4620      	mov	r0, r4
 8008a74:	bd70      	pop	{r4, r5, r6, pc}
		SPIDataC1W[1] = Reg;
 8008a76:	4904      	ldr	r1, [pc, #16]	; (8008a88 <SPIWrite+0x48>)
 8008a78:	e7ee      	b.n	8008a58 <SPIWrite+0x18>
 8008a7a:	bf00      	nop
 8008a7c:	40021000 	.word	0x40021000
 8008a80:	200038bc 	.word	0x200038bc
 8008a84:	2000453c 	.word	0x2000453c
 8008a88:	200045ac 	.word	0x200045ac

08008a8c <EnableLimitsINT>:
{
 8008a8c:	b508      	push	{r3, lr}
	SPIWrite(IOC0, SPI_GPINTENA, 0xF0); //-- enable interrupts for 4 upper bits on A (B,C Pos&Neg pins)
 8008a8e:	22f0      	movs	r2, #240	; 0xf0
 8008a90:	2104      	movs	r1, #4
 8008a92:	2000      	movs	r0, #0
 8008a94:	f7ff ffd4 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_GPINTENB, 0xFF); //-- enable interrupts for all bits on B (X,Y,Z,A Pos&Neg pins)
 8008a98:	22ff      	movs	r2, #255	; 0xff
 8008a9a:	2105      	movs	r1, #5
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	f7ff ffcf 	bl	8008a40 <SPIWrite>
	SPIRead(IOC0, SPI_INTCAPA);  //-- read to clear capture port
 8008aa2:	2110      	movs	r1, #16
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	f7ff ff99 	bl	80089dc <SPIRead>
	SPIRead(IOC0, SPI_INTCAPB);  //-- read to clear capture port
 8008aaa:	2111      	movs	r1, #17
 8008aac:	2000      	movs	r0, #0
}
 8008aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SPIRead(IOC0, SPI_INTCAPB);  //-- read to clear capture port
 8008ab2:	f7ff bf93 	b.w	80089dc <SPIRead>

08008ab6 <DisableLimitsINT>:
{
 8008ab6:	b508      	push	{r3, lr}
	SPIWrite(IOC0, SPI_GPINTENA, 0x00);
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2104      	movs	r1, #4
 8008abc:	4610      	mov	r0, r2
 8008abe:	f7ff ffbf 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_GPINTENB, 0x00);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2105      	movs	r1, #5
 8008ac6:	4610      	mov	r0, r2
}
 8008ac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SPIWrite(IOC0, SPI_GPINTENB, 0x00);
 8008acc:	f7ff bfb8 	b.w	8008a40 <SPIWrite>

08008ad0 <SPIInit>:
{
 8008ad0:	b538      	push	{r3, r4, r5, lr}
	pHSPI = HSPI;
 8008ad2:	4b52      	ldr	r3, [pc, #328]	; (8008c1c <SPIInit+0x14c>)
 8008ad4:	6018      	str	r0, [r3, #0]
	SPIDataC0W[0] = 0x40; //-- 0b01000000
 8008ad6:	4b52      	ldr	r3, [pc, #328]	; (8008c20 <SPIInit+0x150>)
	memset(pDbgVal16, 0, 17);
 8008ad8:	4852      	ldr	r0, [pc, #328]	; (8008c24 <SPIInit+0x154>)
	SPIDataC0W[1] = 0x00;
 8008ada:	2400      	movs	r4, #0
	SPIDataC0W[0] = 0x40; //-- 0b01000000
 8008adc:	2240      	movs	r2, #64	; 0x40
 8008ade:	701a      	strb	r2, [r3, #0]
	SPIDataC0W[1] = 0x00;
 8008ae0:	705c      	strb	r4, [r3, #1]
	SPIDataC0W[2] = 0x00;
 8008ae2:	709c      	strb	r4, [r3, #2]
	SPIDataC0R[0] = 0x41; //-- 0b01000001
 8008ae4:	4b50      	ldr	r3, [pc, #320]	; (8008c28 <SPIInit+0x158>)
 8008ae6:	2241      	movs	r2, #65	; 0x41
 8008ae8:	701a      	strb	r2, [r3, #0]
	SPIDataC0R[1] = 0x00;
 8008aea:	705c      	strb	r4, [r3, #1]
	SPIDataC0R[2] = 0x00;
 8008aec:	709c      	strb	r4, [r3, #2]
	SPIDataC1W[0] = 0x42; //-- 0b01000010
 8008aee:	4b4f      	ldr	r3, [pc, #316]	; (8008c2c <SPIInit+0x15c>)
 8008af0:	2242      	movs	r2, #66	; 0x42
 8008af2:	701a      	strb	r2, [r3, #0]
	SPIDataC1W[1] = 0x00;
 8008af4:	705c      	strb	r4, [r3, #1]
	SPIDataC1W[2] = 0x00;
 8008af6:	709c      	strb	r4, [r3, #2]
	SPIDataC1R[0] = 0x43; //-- 0b01000011
 8008af8:	4b4d      	ldr	r3, [pc, #308]	; (8008c30 <SPIInit+0x160>)
 8008afa:	2243      	movs	r2, #67	; 0x43
 8008afc:	701a      	strb	r2, [r3, #0]
	SPIDataC1R[1] = 0x00;
 8008afe:	705c      	strb	r4, [r3, #1]
	SPIDataC1R[2] = 0x00;
 8008b00:	709c      	strb	r4, [r3, #2]
	memset(pDbgVal8a, 0, 9);
 8008b02:	4b4c      	ldr	r3, [pc, #304]	; (8008c34 <SPIInit+0x164>)
 8008b04:	601c      	str	r4, [r3, #0]
 8008b06:	605c      	str	r4, [r3, #4]
 8008b08:	721c      	strb	r4, [r3, #8]
	memset(pDbgVal8b, 0, 9);
 8008b0a:	4b4b      	ldr	r3, [pc, #300]	; (8008c38 <SPIInit+0x168>)
	memset(pDbgVal16, 0, 17);
 8008b0c:	2511      	movs	r5, #17
	memset(pDbgVal8b, 0, 9);
 8008b0e:	601c      	str	r4, [r3, #0]
 8008b10:	605c      	str	r4, [r3, #4]
 8008b12:	721c      	strb	r4, [r3, #8]
	memset(pDbgVal16, 0, 17);
 8008b14:	462a      	mov	r2, r5
 8008b16:	4621      	mov	r1, r4
 8008b18:	f000 f90b 	bl	8008d32 <memset>
	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, GPIO_PIN_SET);//-- CS High, disable initially
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	4611      	mov	r1, r2
 8008b20:	4846      	ldr	r0, [pc, #280]	; (8008c3c <SPIInit+0x16c>)
 8008b22:	f7f8 fd11 	bl	8001548 <HAL_GPIO_WritePin>
	SPIWrite(IOC0, SPI_IOCONA, 0b01111000); //-- BANK0,MIRROR1,SEQOP1,DISSLW1,HAEN1,ODR0,INTPOL0,0
 8008b26:	2278      	movs	r2, #120	; 0x78
 8008b28:	210a      	movs	r1, #10
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f7ff ff88 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_IOCONB, 0b01111000); //-- BANK0,MIRROR1,SEQOP1,DISSLW1,HAEN1,ODR0,INTPOL0,0
 8008b30:	2278      	movs	r2, #120	; 0x78
 8008b32:	210b      	movs	r1, #11
 8008b34:	4620      	mov	r0, r4
 8008b36:	f7ff ff83 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_IODIRA, 0xF0);   //-- upper nibble inputs
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	22f0      	movs	r2, #240	; 0xf0
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f7ff ff7e 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_GPPUA, 0xF0);    //-- pull up upper nibble;
 8008b44:	22f0      	movs	r2, #240	; 0xf0
 8008b46:	210c      	movs	r1, #12
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f7ff ff79 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_IOPOLA, 0x00);   //-- normal polarity
 8008b4e:	4622      	mov	r2, r4
 8008b50:	2102      	movs	r1, #2
 8008b52:	4620      	mov	r0, r4
 8008b54:	f7ff ff74 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_INTCONA, 0xFF); // Interrupt control (0 = interrupt on change from previous, 1 = interrupt on change from DEFVAL)
 8008b58:	22ff      	movs	r2, #255	; 0xff
 8008b5a:	2108      	movs	r1, #8
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f7ff ff6f 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_DEFVALA, 0xFF); // Default comparison for interrupt on change (interrupts on opposite)
 8008b62:	22ff      	movs	r2, #255	; 0xff
 8008b64:	2106      	movs	r1, #6
 8008b66:	4620      	mov	r0, r4
 8008b68:	f7ff ff6a 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_IODIRB, 0xFF);   //-- all bits inputs
 8008b6c:	22ff      	movs	r2, #255	; 0xff
 8008b6e:	2101      	movs	r1, #1
 8008b70:	4620      	mov	r0, r4
 8008b72:	f7ff ff65 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_GPPUB, 0xFF);    //-- pull up all bits;
 8008b76:	22ff      	movs	r2, #255	; 0xff
 8008b78:	210d      	movs	r1, #13
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f7ff ff60 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_IOPOLB, 0x00);   //-- normal polarity
 8008b80:	4622      	mov	r2, r4
 8008b82:	2103      	movs	r1, #3
 8008b84:	4620      	mov	r0, r4
 8008b86:	f7ff ff5b 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_INTCONB, 0xFF); // Interrupt control (0 = interrupt on change from previous, 1 = interrupt on change from DEFVAL)
 8008b8a:	22ff      	movs	r2, #255	; 0xff
 8008b8c:	2109      	movs	r1, #9
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f7ff ff56 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC0, SPI_DEFVALB, 0xFF); // Default comparison for interrupt on change (interrupts on opposite)
 8008b94:	22ff      	movs	r2, #255	; 0xff
 8008b96:	2107      	movs	r1, #7
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f7ff ff51 	bl	8008a40 <SPIWrite>
	DisableLimitsINT();	//-- disable initially
 8008b9e:	f7ff ff8a 	bl	8008ab6 <DisableLimitsINT>
	SPIWrite(IOC1, SPI_IOCONA, 0b00111000); //-- BANK0,MIRROR0,SEQOP1,DISSLW1,HAEN1,ODR0,INTPOL0,0
 8008ba2:	2238      	movs	r2, #56	; 0x38
 8008ba4:	210a      	movs	r1, #10
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	f7ff ff4a 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC1, SPI_IOCONB, 0b00111000); //-- BANK0,MIRROR0,SEQOP1,DISSLW1,HAEN1,ODR0,INTPOL0,0
 8008bac:	2238      	movs	r2, #56	; 0x38
 8008bae:	210b      	movs	r1, #11
 8008bb0:	2001      	movs	r0, #1
 8008bb2:	f7ff ff45 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC1, SPI_IODIRA, 0xFF); //-- all inputs for A
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	22ff      	movs	r2, #255	; 0xff
 8008bba:	2001      	movs	r0, #1
 8008bbc:	f7ff ff40 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC1, SPI_GPPUA, 0xFF);    //-- pull up all bits;
 8008bc0:	22ff      	movs	r2, #255	; 0xff
 8008bc2:	210c      	movs	r1, #12
 8008bc4:	2001      	movs	r0, #1
 8008bc6:	f7ff ff3b 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC1, SPI_IOPOLA, 0x00);   //-- normal polarity
 8008bca:	4622      	mov	r2, r4
 8008bcc:	2102      	movs	r1, #2
 8008bce:	2001      	movs	r0, #1
 8008bd0:	f7ff ff36 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC1, SPI_IODIRB, 0x3F);   //-- first 6 bits as inputs for B
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	223f      	movs	r2, #63	; 0x3f
 8008bd8:	4608      	mov	r0, r1
 8008bda:	f7ff ff31 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC1, SPI_GPPUB, 0x3F);    //-- pull up all input bits;
 8008bde:	223f      	movs	r2, #63	; 0x3f
 8008be0:	210d      	movs	r1, #13
 8008be2:	2001      	movs	r0, #1
 8008be4:	f7ff ff2c 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC1, SPI_IOPOLB, 0x00);   //-- normal polarity
 8008be8:	4622      	mov	r2, r4
 8008bea:	2103      	movs	r1, #3
 8008bec:	2001      	movs	r0, #1
 8008bee:	f7ff ff27 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC1, SPI_INTCONB, 0xFF); // Interrupt control (0 = interrupt on change from previous, 1 = interrupt on change from DEFVAL)
 8008bf2:	22ff      	movs	r2, #255	; 0xff
 8008bf4:	2109      	movs	r1, #9
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	f7ff ff22 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC1, SPI_DEFVALB, 0xFF); // Default comparison for interrupt on change (interrupts on opposite)
 8008bfc:	22ff      	movs	r2, #255	; 0xff
 8008bfe:	2107      	movs	r1, #7
 8008c00:	2001      	movs	r0, #1
 8008c02:	f7ff ff1d 	bl	8008a40 <SPIWrite>
	SPIWrite(IOC1, SPI_GPINTENB, 0x3F); //-- enable interrupts for lower 6 bits on B (6 home pins)
 8008c06:	2105      	movs	r1, #5
 8008c08:	223f      	movs	r2, #63	; 0x3f
 8008c0a:	2001      	movs	r0, #1
 8008c0c:	f7ff ff18 	bl	8008a40 <SPIWrite>
	SPIRead(IOC1, SPI_INTCAPB);  //-- read to clear capture port
 8008c10:	4629      	mov	r1, r5
 8008c12:	2001      	movs	r0, #1
}
 8008c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SPIRead(IOC1, SPI_INTCAPB);  //-- read to clear capture port
 8008c18:	f7ff bee0 	b.w	80089dc <SPIRead>
 8008c1c:	200038bc 	.word	0x200038bc
 8008c20:	2000453c 	.word	0x2000453c
 8008c24:	2000459b 	.word	0x2000459b
 8008c28:	20004598 	.word	0x20004598
 8008c2c:	200045ac 	.word	0x200045ac
 8008c30:	200045af 	.word	0x200045af
 8008c34:	2000458f 	.word	0x2000458f
 8008c38:	200045b2 	.word	0x200045b2
 8008c3c:	40021000 	.word	0x40021000

08008c40 <GetLimitsState>:
 // triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
 // number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
 *
 */
uint16_t GetLimitsState()
{
 8008c40:	b510      	push	{r4, lr}
	uint16_t uActiveLimitsMask = 0;
	uint8_t PortA, PortB; //, debugValA,debugValB;
//	DisableLimitsINT();	//-- disable limits interrupt

	SPIRead(IOC0, SPI_INTCAPA);  //-- read to clear capture port
 8008c42:	2110      	movs	r1, #16
 8008c44:	2000      	movs	r0, #0
 8008c46:	f7ff fec9 	bl	80089dc <SPIRead>
	SPIRead(IOC0, SPI_INTCAPB);  //-- read to clear capture port
 8008c4a:	2111      	movs	r1, #17
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	f7ff fec5 	bl	80089dc <SPIRead>

	//-- read SPI Chip0 for all limit pins
	PortA = SPIRead(IOC0, SPI_GPIOA); //-- axes BC in high nibble
 8008c52:	2112      	movs	r1, #18
 8008c54:	2000      	movs	r0, #0
 8008c56:	f7ff fec1 	bl	80089dc <SPIRead>
	PortB = SPIRead(IOC0, SPI_GPIOB); //-- axis XYZA
 8008c5a:	2113      	movs	r1, #19
	PortA = SPIRead(IOC0, SPI_GPIOA); //-- axes BC in high nibble
 8008c5c:	4604      	mov	r4, r0
	PortB = SPIRead(IOC0, SPI_GPIOB); //-- axis XYZA
 8008c5e:	2000      	movs	r0, #0
 8008c60:	f7ff febc 	bl	80089dc <SPIRead>

//	debugValA = SPIRead(IOC0,SPI_DEFVALA);
//	debugValB = SPIRead(IOC0,SPI_DEFVALB);

	//-- go through the axes
	if (((PortB & LIM_XP_Pin) == 0) || ((PortB & LIM_XN_Pin) == 0))
 8008c64:	f000 0303 	and.w	r3, r0, #3
	uint16_t uActiveLimitsMask = 0;
 8008c68:	3b03      	subs	r3, #3
		uActiveLimitsMask += 0x01;
	if (((PortB & LIM_YP_Pin) == 0) || ((PortB & LIM_YN_Pin) == 0))
 8008c6a:	f000 020c 	and.w	r2, r0, #12
	uint16_t uActiveLimitsMask = 0;
 8008c6e:	bf18      	it	ne
 8008c70:	2301      	movne	r3, #1
	if (((PortB & LIM_YP_Pin) == 0) || ((PortB & LIM_YN_Pin) == 0))
 8008c72:	2a0c      	cmp	r2, #12
		uActiveLimitsMask += 0x02;
	if (((PortB & LIM_ZP_Pin) == 0) || ((PortB & LIM_ZN_Pin) == 0))
 8008c74:	f000 0230 	and.w	r2, r0, #48	; 0x30
		uActiveLimitsMask += 0x02;
 8008c78:	bf18      	it	ne
 8008c7a:	3302      	addne	r3, #2
	if (((PortB & LIM_ZP_Pin) == 0) || ((PortB & LIM_ZN_Pin) == 0))
 8008c7c:	2a30      	cmp	r2, #48	; 0x30
		uActiveLimitsMask += 0x04;
 8008c7e:	bf1c      	itt	ne
 8008c80:	3304      	addne	r3, #4
 8008c82:	b29b      	uxthne	r3, r3
	if (((PortB & LIM_AP_Pin) == 0) || ((PortB & LIM_AN_Pin) == 0))
 8008c84:	0642      	lsls	r2, r0, #25
 8008c86:	d501      	bpl.n	8008c8c <GetLimitsState+0x4c>
 8008c88:	0600      	lsls	r0, r0, #24
 8008c8a:	d401      	bmi.n	8008c90 <GetLimitsState+0x50>
		uActiveLimitsMask += 0x08;
 8008c8c:	3308      	adds	r3, #8
 8008c8e:	b29b      	uxth	r3, r3

	if (((PortA & LIM_BP_Pin) == 0) || ((PortA & LIM_BN_Pin) == 0))
 8008c90:	0621      	lsls	r1, r4, #24
 8008c92:	d501      	bpl.n	8008c98 <GetLimitsState+0x58>
 8008c94:	0662      	lsls	r2, r4, #25
 8008c96:	d401      	bmi.n	8008c9c <GetLimitsState+0x5c>
		uActiveLimitsMask += 0x10;
 8008c98:	3310      	adds	r3, #16
 8008c9a:	b29b      	uxth	r3, r3
	if (((PortA & LIM_CP_Pin) == 0) || ((PortA & LIM_CN_Pin) == 0))
 8008c9c:	f004 0430 	and.w	r4, r4, #48	; 0x30
 8008ca0:	2c30      	cmp	r4, #48	; 0x30
		uActiveLimitsMask += 0x20;
 8008ca2:	bf1c      	itt	ne
 8008ca4:	3320      	addne	r3, #32
 8008ca6:	b29b      	uxthne	r3, r3
	 uart_sendstr(pDbgStr);
	 */

	//EnableLimitsINT();		//-- enable limits interrupt
	return (uActiveLimitsMask);
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	bd10      	pop	{r4, pc}

08008cac <ReadInputByte>:
/*
 * Input byte from Chip1, for M66
 */
uint8_t ReadInputByte()
{
	uint8_t val = SPIRead(IOC1, SPI_GPIOA);
 8008cac:	2112      	movs	r1, #18
 8008cae:	2001      	movs	r0, #1
 8008cb0:	f7ff be94 	b.w	80089dc <SPIRead>

08008cb4 <spi_limits_init>:
#endif //STM32F46

void spi_limits_init()
{
#ifdef STM32F46 //-- board specific hardware, SPI driven limits
	SPIInit(&hspi3);
 8008cb4:	4801      	ldr	r0, [pc, #4]	; (8008cbc <spi_limits_init+0x8>)
 8008cb6:	f7ff bf0b 	b.w	8008ad0 <SPIInit>
 8008cba:	bf00      	nop
 8008cbc:	20003994 	.word	0x20003994

08008cc0 <__errno>:
 8008cc0:	4b01      	ldr	r3, [pc, #4]	; (8008cc8 <__errno+0x8>)
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	2000002c 	.word	0x2000002c

08008ccc <__libc_init_array>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	4e0d      	ldr	r6, [pc, #52]	; (8008d04 <__libc_init_array+0x38>)
 8008cd0:	4c0d      	ldr	r4, [pc, #52]	; (8008d08 <__libc_init_array+0x3c>)
 8008cd2:	1ba4      	subs	r4, r4, r6
 8008cd4:	10a4      	asrs	r4, r4, #2
 8008cd6:	2500      	movs	r5, #0
 8008cd8:	42a5      	cmp	r5, r4
 8008cda:	d109      	bne.n	8008cf0 <__libc_init_array+0x24>
 8008cdc:	4e0b      	ldr	r6, [pc, #44]	; (8008d0c <__libc_init_array+0x40>)
 8008cde:	4c0c      	ldr	r4, [pc, #48]	; (8008d10 <__libc_init_array+0x44>)
 8008ce0:	f001 fee6 	bl	800aab0 <_init>
 8008ce4:	1ba4      	subs	r4, r4, r6
 8008ce6:	10a4      	asrs	r4, r4, #2
 8008ce8:	2500      	movs	r5, #0
 8008cea:	42a5      	cmp	r5, r4
 8008cec:	d105      	bne.n	8008cfa <__libc_init_array+0x2e>
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cf4:	4798      	blx	r3
 8008cf6:	3501      	adds	r5, #1
 8008cf8:	e7ee      	b.n	8008cd8 <__libc_init_array+0xc>
 8008cfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cfe:	4798      	blx	r3
 8008d00:	3501      	adds	r5, #1
 8008d02:	e7f2      	b.n	8008cea <__libc_init_array+0x1e>
 8008d04:	0800b158 	.word	0x0800b158
 8008d08:	0800b158 	.word	0x0800b158
 8008d0c:	0800b158 	.word	0x0800b158
 8008d10:	0800b15c 	.word	0x0800b15c

08008d14 <memcmp>:
 8008d14:	b510      	push	{r4, lr}
 8008d16:	3901      	subs	r1, #1
 8008d18:	4402      	add	r2, r0
 8008d1a:	4290      	cmp	r0, r2
 8008d1c:	d101      	bne.n	8008d22 <memcmp+0xe>
 8008d1e:	2000      	movs	r0, #0
 8008d20:	bd10      	pop	{r4, pc}
 8008d22:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008d26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d2a:	42a3      	cmp	r3, r4
 8008d2c:	d0f5      	beq.n	8008d1a <memcmp+0x6>
 8008d2e:	1b18      	subs	r0, r3, r4
 8008d30:	bd10      	pop	{r4, pc}

08008d32 <memset>:
 8008d32:	4402      	add	r2, r0
 8008d34:	4603      	mov	r3, r0
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d100      	bne.n	8008d3c <memset+0xa>
 8008d3a:	4770      	bx	lr
 8008d3c:	f803 1b01 	strb.w	r1, [r3], #1
 8008d40:	e7f9      	b.n	8008d36 <memset+0x4>
	...

08008d44 <siprintf>:
 8008d44:	b40e      	push	{r1, r2, r3}
 8008d46:	b500      	push	{lr}
 8008d48:	b09c      	sub	sp, #112	; 0x70
 8008d4a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8008d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d50:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008d54:	9002      	str	r0, [sp, #8]
 8008d56:	9006      	str	r0, [sp, #24]
 8008d58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d5c:	480a      	ldr	r0, [pc, #40]	; (8008d88 <siprintf+0x44>)
 8008d5e:	9104      	str	r1, [sp, #16]
 8008d60:	9107      	str	r1, [sp, #28]
 8008d62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d6a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008d6e:	6800      	ldr	r0, [r0, #0]
 8008d70:	9301      	str	r3, [sp, #4]
 8008d72:	a902      	add	r1, sp, #8
 8008d74:	f000 f866 	bl	8008e44 <_svfiprintf_r>
 8008d78:	9b02      	ldr	r3, [sp, #8]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	b01c      	add	sp, #112	; 0x70
 8008d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d84:	b003      	add	sp, #12
 8008d86:	4770      	bx	lr
 8008d88:	2000002c 	.word	0x2000002c

08008d8c <__ssputs_r>:
 8008d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d90:	688e      	ldr	r6, [r1, #8]
 8008d92:	429e      	cmp	r6, r3
 8008d94:	4682      	mov	sl, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	4691      	mov	r9, r2
 8008d9a:	4698      	mov	r8, r3
 8008d9c:	d835      	bhi.n	8008e0a <__ssputs_r+0x7e>
 8008d9e:	898a      	ldrh	r2, [r1, #12]
 8008da0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008da4:	d031      	beq.n	8008e0a <__ssputs_r+0x7e>
 8008da6:	6825      	ldr	r5, [r4, #0]
 8008da8:	6909      	ldr	r1, [r1, #16]
 8008daa:	1a6f      	subs	r7, r5, r1
 8008dac:	6965      	ldr	r5, [r4, #20]
 8008dae:	2302      	movs	r3, #2
 8008db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008db4:	fb95 f5f3 	sdiv	r5, r5, r3
 8008db8:	f108 0301 	add.w	r3, r8, #1
 8008dbc:	443b      	add	r3, r7
 8008dbe:	429d      	cmp	r5, r3
 8008dc0:	bf38      	it	cc
 8008dc2:	461d      	movcc	r5, r3
 8008dc4:	0553      	lsls	r3, r2, #21
 8008dc6:	d531      	bpl.n	8008e2c <__ssputs_r+0xa0>
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f000 fb39 	bl	8009440 <_malloc_r>
 8008dce:	4606      	mov	r6, r0
 8008dd0:	b950      	cbnz	r0, 8008de8 <__ssputs_r+0x5c>
 8008dd2:	230c      	movs	r3, #12
 8008dd4:	f8ca 3000 	str.w	r3, [sl]
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de8:	463a      	mov	r2, r7
 8008dea:	6921      	ldr	r1, [r4, #16]
 8008dec:	f000 fab4 	bl	8009358 <memcpy>
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfa:	81a3      	strh	r3, [r4, #12]
 8008dfc:	6126      	str	r6, [r4, #16]
 8008dfe:	6165      	str	r5, [r4, #20]
 8008e00:	443e      	add	r6, r7
 8008e02:	1bed      	subs	r5, r5, r7
 8008e04:	6026      	str	r6, [r4, #0]
 8008e06:	60a5      	str	r5, [r4, #8]
 8008e08:	4646      	mov	r6, r8
 8008e0a:	4546      	cmp	r6, r8
 8008e0c:	bf28      	it	cs
 8008e0e:	4646      	movcs	r6, r8
 8008e10:	4632      	mov	r2, r6
 8008e12:	4649      	mov	r1, r9
 8008e14:	6820      	ldr	r0, [r4, #0]
 8008e16:	f000 faaa 	bl	800936e <memmove>
 8008e1a:	68a3      	ldr	r3, [r4, #8]
 8008e1c:	1b9b      	subs	r3, r3, r6
 8008e1e:	60a3      	str	r3, [r4, #8]
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	441e      	add	r6, r3
 8008e24:	6026      	str	r6, [r4, #0]
 8008e26:	2000      	movs	r0, #0
 8008e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2c:	462a      	mov	r2, r5
 8008e2e:	f000 fb65 	bl	80094fc <_realloc_r>
 8008e32:	4606      	mov	r6, r0
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d1e1      	bne.n	8008dfc <__ssputs_r+0x70>
 8008e38:	6921      	ldr	r1, [r4, #16]
 8008e3a:	4650      	mov	r0, sl
 8008e3c:	f000 fab2 	bl	80093a4 <_free_r>
 8008e40:	e7c7      	b.n	8008dd2 <__ssputs_r+0x46>
	...

08008e44 <_svfiprintf_r>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	b09d      	sub	sp, #116	; 0x74
 8008e4a:	4680      	mov	r8, r0
 8008e4c:	9303      	str	r3, [sp, #12]
 8008e4e:	898b      	ldrh	r3, [r1, #12]
 8008e50:	061c      	lsls	r4, r3, #24
 8008e52:	460d      	mov	r5, r1
 8008e54:	4616      	mov	r6, r2
 8008e56:	d50f      	bpl.n	8008e78 <_svfiprintf_r+0x34>
 8008e58:	690b      	ldr	r3, [r1, #16]
 8008e5a:	b96b      	cbnz	r3, 8008e78 <_svfiprintf_r+0x34>
 8008e5c:	2140      	movs	r1, #64	; 0x40
 8008e5e:	f000 faef 	bl	8009440 <_malloc_r>
 8008e62:	6028      	str	r0, [r5, #0]
 8008e64:	6128      	str	r0, [r5, #16]
 8008e66:	b928      	cbnz	r0, 8008e74 <_svfiprintf_r+0x30>
 8008e68:	230c      	movs	r3, #12
 8008e6a:	f8c8 3000 	str.w	r3, [r8]
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	e0c5      	b.n	8009000 <_svfiprintf_r+0x1bc>
 8008e74:	2340      	movs	r3, #64	; 0x40
 8008e76:	616b      	str	r3, [r5, #20]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e7c:	2320      	movs	r3, #32
 8008e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e82:	2330      	movs	r3, #48	; 0x30
 8008e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e88:	f04f 0b01 	mov.w	fp, #1
 8008e8c:	4637      	mov	r7, r6
 8008e8e:	463c      	mov	r4, r7
 8008e90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d13c      	bne.n	8008f12 <_svfiprintf_r+0xce>
 8008e98:	ebb7 0a06 	subs.w	sl, r7, r6
 8008e9c:	d00b      	beq.n	8008eb6 <_svfiprintf_r+0x72>
 8008e9e:	4653      	mov	r3, sl
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	f7ff ff71 	bl	8008d8c <__ssputs_r>
 8008eaa:	3001      	adds	r0, #1
 8008eac:	f000 80a3 	beq.w	8008ff6 <_svfiprintf_r+0x1b2>
 8008eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb2:	4453      	add	r3, sl
 8008eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb6:	783b      	ldrb	r3, [r7, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 809c 	beq.w	8008ff6 <_svfiprintf_r+0x1b2>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec4:	9304      	str	r3, [sp, #16]
 8008ec6:	9307      	str	r3, [sp, #28]
 8008ec8:	9205      	str	r2, [sp, #20]
 8008eca:	9306      	str	r3, [sp, #24]
 8008ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ed2:	2205      	movs	r2, #5
 8008ed4:	7821      	ldrb	r1, [r4, #0]
 8008ed6:	4850      	ldr	r0, [pc, #320]	; (8009018 <_svfiprintf_r+0x1d4>)
 8008ed8:	f7f7 f97a 	bl	80001d0 <memchr>
 8008edc:	1c67      	adds	r7, r4, #1
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	b9d8      	cbnz	r0, 8008f1a <_svfiprintf_r+0xd6>
 8008ee2:	06d9      	lsls	r1, r3, #27
 8008ee4:	bf44      	itt	mi
 8008ee6:	2220      	movmi	r2, #32
 8008ee8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008eec:	071a      	lsls	r2, r3, #28
 8008eee:	bf44      	itt	mi
 8008ef0:	222b      	movmi	r2, #43	; 0x2b
 8008ef2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ef6:	7822      	ldrb	r2, [r4, #0]
 8008ef8:	2a2a      	cmp	r2, #42	; 0x2a
 8008efa:	d016      	beq.n	8008f2a <_svfiprintf_r+0xe6>
 8008efc:	9a07      	ldr	r2, [sp, #28]
 8008efe:	2100      	movs	r1, #0
 8008f00:	200a      	movs	r0, #10
 8008f02:	4627      	mov	r7, r4
 8008f04:	3401      	adds	r4, #1
 8008f06:	783b      	ldrb	r3, [r7, #0]
 8008f08:	3b30      	subs	r3, #48	; 0x30
 8008f0a:	2b09      	cmp	r3, #9
 8008f0c:	d951      	bls.n	8008fb2 <_svfiprintf_r+0x16e>
 8008f0e:	b1c9      	cbz	r1, 8008f44 <_svfiprintf_r+0x100>
 8008f10:	e011      	b.n	8008f36 <_svfiprintf_r+0xf2>
 8008f12:	2b25      	cmp	r3, #37	; 0x25
 8008f14:	d0c0      	beq.n	8008e98 <_svfiprintf_r+0x54>
 8008f16:	4627      	mov	r7, r4
 8008f18:	e7b9      	b.n	8008e8e <_svfiprintf_r+0x4a>
 8008f1a:	4a3f      	ldr	r2, [pc, #252]	; (8009018 <_svfiprintf_r+0x1d4>)
 8008f1c:	1a80      	subs	r0, r0, r2
 8008f1e:	fa0b f000 	lsl.w	r0, fp, r0
 8008f22:	4318      	orrs	r0, r3
 8008f24:	9004      	str	r0, [sp, #16]
 8008f26:	463c      	mov	r4, r7
 8008f28:	e7d3      	b.n	8008ed2 <_svfiprintf_r+0x8e>
 8008f2a:	9a03      	ldr	r2, [sp, #12]
 8008f2c:	1d11      	adds	r1, r2, #4
 8008f2e:	6812      	ldr	r2, [r2, #0]
 8008f30:	9103      	str	r1, [sp, #12]
 8008f32:	2a00      	cmp	r2, #0
 8008f34:	db01      	blt.n	8008f3a <_svfiprintf_r+0xf6>
 8008f36:	9207      	str	r2, [sp, #28]
 8008f38:	e004      	b.n	8008f44 <_svfiprintf_r+0x100>
 8008f3a:	4252      	negs	r2, r2
 8008f3c:	f043 0302 	orr.w	r3, r3, #2
 8008f40:	9207      	str	r2, [sp, #28]
 8008f42:	9304      	str	r3, [sp, #16]
 8008f44:	783b      	ldrb	r3, [r7, #0]
 8008f46:	2b2e      	cmp	r3, #46	; 0x2e
 8008f48:	d10e      	bne.n	8008f68 <_svfiprintf_r+0x124>
 8008f4a:	787b      	ldrb	r3, [r7, #1]
 8008f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f4e:	f107 0101 	add.w	r1, r7, #1
 8008f52:	d132      	bne.n	8008fba <_svfiprintf_r+0x176>
 8008f54:	9b03      	ldr	r3, [sp, #12]
 8008f56:	1d1a      	adds	r2, r3, #4
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	9203      	str	r2, [sp, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	bfb8      	it	lt
 8008f60:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f64:	3702      	adds	r7, #2
 8008f66:	9305      	str	r3, [sp, #20]
 8008f68:	4c2c      	ldr	r4, [pc, #176]	; (800901c <_svfiprintf_r+0x1d8>)
 8008f6a:	7839      	ldrb	r1, [r7, #0]
 8008f6c:	2203      	movs	r2, #3
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f7f7 f92e 	bl	80001d0 <memchr>
 8008f74:	b138      	cbz	r0, 8008f86 <_svfiprintf_r+0x142>
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	1b00      	subs	r0, r0, r4
 8008f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	4303      	orrs	r3, r0
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	3701      	adds	r7, #1
 8008f86:	7839      	ldrb	r1, [r7, #0]
 8008f88:	4825      	ldr	r0, [pc, #148]	; (8009020 <_svfiprintf_r+0x1dc>)
 8008f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f8e:	2206      	movs	r2, #6
 8008f90:	1c7e      	adds	r6, r7, #1
 8008f92:	f7f7 f91d 	bl	80001d0 <memchr>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d035      	beq.n	8009006 <_svfiprintf_r+0x1c2>
 8008f9a:	4b22      	ldr	r3, [pc, #136]	; (8009024 <_svfiprintf_r+0x1e0>)
 8008f9c:	b9fb      	cbnz	r3, 8008fde <_svfiprintf_r+0x19a>
 8008f9e:	9b03      	ldr	r3, [sp, #12]
 8008fa0:	3307      	adds	r3, #7
 8008fa2:	f023 0307 	bic.w	r3, r3, #7
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	9303      	str	r3, [sp, #12]
 8008faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fac:	444b      	add	r3, r9
 8008fae:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb0:	e76c      	b.n	8008e8c <_svfiprintf_r+0x48>
 8008fb2:	fb00 3202 	mla	r2, r0, r2, r3
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	e7a3      	b.n	8008f02 <_svfiprintf_r+0xbe>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9305      	str	r3, [sp, #20]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	240a      	movs	r4, #10
 8008fc2:	460f      	mov	r7, r1
 8008fc4:	3101      	adds	r1, #1
 8008fc6:	783a      	ldrb	r2, [r7, #0]
 8008fc8:	3a30      	subs	r2, #48	; 0x30
 8008fca:	2a09      	cmp	r2, #9
 8008fcc:	d903      	bls.n	8008fd6 <_svfiprintf_r+0x192>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0ca      	beq.n	8008f68 <_svfiprintf_r+0x124>
 8008fd2:	9005      	str	r0, [sp, #20]
 8008fd4:	e7c8      	b.n	8008f68 <_svfiprintf_r+0x124>
 8008fd6:	fb04 2000 	mla	r0, r4, r0, r2
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e7f1      	b.n	8008fc2 <_svfiprintf_r+0x17e>
 8008fde:	ab03      	add	r3, sp, #12
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	462a      	mov	r2, r5
 8008fe4:	4b10      	ldr	r3, [pc, #64]	; (8009028 <_svfiprintf_r+0x1e4>)
 8008fe6:	a904      	add	r1, sp, #16
 8008fe8:	4640      	mov	r0, r8
 8008fea:	f3af 8000 	nop.w
 8008fee:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ff2:	4681      	mov	r9, r0
 8008ff4:	d1d9      	bne.n	8008faa <_svfiprintf_r+0x166>
 8008ff6:	89ab      	ldrh	r3, [r5, #12]
 8008ff8:	065b      	lsls	r3, r3, #25
 8008ffa:	f53f af38 	bmi.w	8008e6e <_svfiprintf_r+0x2a>
 8008ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009000:	b01d      	add	sp, #116	; 0x74
 8009002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009006:	ab03      	add	r3, sp, #12
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	462a      	mov	r2, r5
 800900c:	4b06      	ldr	r3, [pc, #24]	; (8009028 <_svfiprintf_r+0x1e4>)
 800900e:	a904      	add	r1, sp, #16
 8009010:	4640      	mov	r0, r8
 8009012:	f000 f881 	bl	8009118 <_printf_i>
 8009016:	e7ea      	b.n	8008fee <_svfiprintf_r+0x1aa>
 8009018:	0800ad1f 	.word	0x0800ad1f
 800901c:	0800ad25 	.word	0x0800ad25
 8009020:	0800ad29 	.word	0x0800ad29
 8009024:	00000000 	.word	0x00000000
 8009028:	08008d8d 	.word	0x08008d8d

0800902c <_printf_common>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	4691      	mov	r9, r2
 8009032:	461f      	mov	r7, r3
 8009034:	688a      	ldr	r2, [r1, #8]
 8009036:	690b      	ldr	r3, [r1, #16]
 8009038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800903c:	4293      	cmp	r3, r2
 800903e:	bfb8      	it	lt
 8009040:	4613      	movlt	r3, r2
 8009042:	f8c9 3000 	str.w	r3, [r9]
 8009046:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800904a:	4606      	mov	r6, r0
 800904c:	460c      	mov	r4, r1
 800904e:	b112      	cbz	r2, 8009056 <_printf_common+0x2a>
 8009050:	3301      	adds	r3, #1
 8009052:	f8c9 3000 	str.w	r3, [r9]
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	0699      	lsls	r1, r3, #26
 800905a:	bf42      	ittt	mi
 800905c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009060:	3302      	addmi	r3, #2
 8009062:	f8c9 3000 	strmi.w	r3, [r9]
 8009066:	6825      	ldr	r5, [r4, #0]
 8009068:	f015 0506 	ands.w	r5, r5, #6
 800906c:	d107      	bne.n	800907e <_printf_common+0x52>
 800906e:	f104 0a19 	add.w	sl, r4, #25
 8009072:	68e3      	ldr	r3, [r4, #12]
 8009074:	f8d9 2000 	ldr.w	r2, [r9]
 8009078:	1a9b      	subs	r3, r3, r2
 800907a:	429d      	cmp	r5, r3
 800907c:	db29      	blt.n	80090d2 <_printf_common+0xa6>
 800907e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009082:	6822      	ldr	r2, [r4, #0]
 8009084:	3300      	adds	r3, #0
 8009086:	bf18      	it	ne
 8009088:	2301      	movne	r3, #1
 800908a:	0692      	lsls	r2, r2, #26
 800908c:	d42e      	bmi.n	80090ec <_printf_common+0xc0>
 800908e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009092:	4639      	mov	r1, r7
 8009094:	4630      	mov	r0, r6
 8009096:	47c0      	blx	r8
 8009098:	3001      	adds	r0, #1
 800909a:	d021      	beq.n	80090e0 <_printf_common+0xb4>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	68e5      	ldr	r5, [r4, #12]
 80090a0:	f8d9 2000 	ldr.w	r2, [r9]
 80090a4:	f003 0306 	and.w	r3, r3, #6
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	bf08      	it	eq
 80090ac:	1aad      	subeq	r5, r5, r2
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	6922      	ldr	r2, [r4, #16]
 80090b2:	bf0c      	ite	eq
 80090b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090b8:	2500      	movne	r5, #0
 80090ba:	4293      	cmp	r3, r2
 80090bc:	bfc4      	itt	gt
 80090be:	1a9b      	subgt	r3, r3, r2
 80090c0:	18ed      	addgt	r5, r5, r3
 80090c2:	f04f 0900 	mov.w	r9, #0
 80090c6:	341a      	adds	r4, #26
 80090c8:	454d      	cmp	r5, r9
 80090ca:	d11b      	bne.n	8009104 <_printf_common+0xd8>
 80090cc:	2000      	movs	r0, #0
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	2301      	movs	r3, #1
 80090d4:	4652      	mov	r2, sl
 80090d6:	4639      	mov	r1, r7
 80090d8:	4630      	mov	r0, r6
 80090da:	47c0      	blx	r8
 80090dc:	3001      	adds	r0, #1
 80090de:	d103      	bne.n	80090e8 <_printf_common+0xbc>
 80090e0:	f04f 30ff 	mov.w	r0, #4294967295
 80090e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e8:	3501      	adds	r5, #1
 80090ea:	e7c2      	b.n	8009072 <_printf_common+0x46>
 80090ec:	18e1      	adds	r1, r4, r3
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	2030      	movs	r0, #48	; 0x30
 80090f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090f6:	4422      	add	r2, r4
 80090f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009100:	3302      	adds	r3, #2
 8009102:	e7c4      	b.n	800908e <_printf_common+0x62>
 8009104:	2301      	movs	r3, #1
 8009106:	4622      	mov	r2, r4
 8009108:	4639      	mov	r1, r7
 800910a:	4630      	mov	r0, r6
 800910c:	47c0      	blx	r8
 800910e:	3001      	adds	r0, #1
 8009110:	d0e6      	beq.n	80090e0 <_printf_common+0xb4>
 8009112:	f109 0901 	add.w	r9, r9, #1
 8009116:	e7d7      	b.n	80090c8 <_printf_common+0x9c>

08009118 <_printf_i>:
 8009118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800911c:	4617      	mov	r7, r2
 800911e:	7e0a      	ldrb	r2, [r1, #24]
 8009120:	b085      	sub	sp, #20
 8009122:	2a6e      	cmp	r2, #110	; 0x6e
 8009124:	4698      	mov	r8, r3
 8009126:	4606      	mov	r6, r0
 8009128:	460c      	mov	r4, r1
 800912a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800912c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8009130:	f000 80bc 	beq.w	80092ac <_printf_i+0x194>
 8009134:	d81a      	bhi.n	800916c <_printf_i+0x54>
 8009136:	2a63      	cmp	r2, #99	; 0x63
 8009138:	d02e      	beq.n	8009198 <_printf_i+0x80>
 800913a:	d80a      	bhi.n	8009152 <_printf_i+0x3a>
 800913c:	2a00      	cmp	r2, #0
 800913e:	f000 80c8 	beq.w	80092d2 <_printf_i+0x1ba>
 8009142:	2a58      	cmp	r2, #88	; 0x58
 8009144:	f000 808a 	beq.w	800925c <_printf_i+0x144>
 8009148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800914c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8009150:	e02a      	b.n	80091a8 <_printf_i+0x90>
 8009152:	2a64      	cmp	r2, #100	; 0x64
 8009154:	d001      	beq.n	800915a <_printf_i+0x42>
 8009156:	2a69      	cmp	r2, #105	; 0x69
 8009158:	d1f6      	bne.n	8009148 <_printf_i+0x30>
 800915a:	6821      	ldr	r1, [r4, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009162:	d023      	beq.n	80091ac <_printf_i+0x94>
 8009164:	1d11      	adds	r1, r2, #4
 8009166:	6019      	str	r1, [r3, #0]
 8009168:	6813      	ldr	r3, [r2, #0]
 800916a:	e027      	b.n	80091bc <_printf_i+0xa4>
 800916c:	2a73      	cmp	r2, #115	; 0x73
 800916e:	f000 80b4 	beq.w	80092da <_printf_i+0x1c2>
 8009172:	d808      	bhi.n	8009186 <_printf_i+0x6e>
 8009174:	2a6f      	cmp	r2, #111	; 0x6f
 8009176:	d02a      	beq.n	80091ce <_printf_i+0xb6>
 8009178:	2a70      	cmp	r2, #112	; 0x70
 800917a:	d1e5      	bne.n	8009148 <_printf_i+0x30>
 800917c:	680a      	ldr	r2, [r1, #0]
 800917e:	f042 0220 	orr.w	r2, r2, #32
 8009182:	600a      	str	r2, [r1, #0]
 8009184:	e003      	b.n	800918e <_printf_i+0x76>
 8009186:	2a75      	cmp	r2, #117	; 0x75
 8009188:	d021      	beq.n	80091ce <_printf_i+0xb6>
 800918a:	2a78      	cmp	r2, #120	; 0x78
 800918c:	d1dc      	bne.n	8009148 <_printf_i+0x30>
 800918e:	2278      	movs	r2, #120	; 0x78
 8009190:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009194:	496e      	ldr	r1, [pc, #440]	; (8009350 <_printf_i+0x238>)
 8009196:	e064      	b.n	8009262 <_printf_i+0x14a>
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800919e:	1d11      	adds	r1, r2, #4
 80091a0:	6019      	str	r1, [r3, #0]
 80091a2:	6813      	ldr	r3, [r2, #0]
 80091a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091a8:	2301      	movs	r3, #1
 80091aa:	e0a3      	b.n	80092f4 <_printf_i+0x1dc>
 80091ac:	f011 0f40 	tst.w	r1, #64	; 0x40
 80091b0:	f102 0104 	add.w	r1, r2, #4
 80091b4:	6019      	str	r1, [r3, #0]
 80091b6:	d0d7      	beq.n	8009168 <_printf_i+0x50>
 80091b8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	da03      	bge.n	80091c8 <_printf_i+0xb0>
 80091c0:	222d      	movs	r2, #45	; 0x2d
 80091c2:	425b      	negs	r3, r3
 80091c4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80091c8:	4962      	ldr	r1, [pc, #392]	; (8009354 <_printf_i+0x23c>)
 80091ca:	220a      	movs	r2, #10
 80091cc:	e017      	b.n	80091fe <_printf_i+0xe6>
 80091ce:	6820      	ldr	r0, [r4, #0]
 80091d0:	6819      	ldr	r1, [r3, #0]
 80091d2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80091d6:	d003      	beq.n	80091e0 <_printf_i+0xc8>
 80091d8:	1d08      	adds	r0, r1, #4
 80091da:	6018      	str	r0, [r3, #0]
 80091dc:	680b      	ldr	r3, [r1, #0]
 80091de:	e006      	b.n	80091ee <_printf_i+0xd6>
 80091e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091e4:	f101 0004 	add.w	r0, r1, #4
 80091e8:	6018      	str	r0, [r3, #0]
 80091ea:	d0f7      	beq.n	80091dc <_printf_i+0xc4>
 80091ec:	880b      	ldrh	r3, [r1, #0]
 80091ee:	4959      	ldr	r1, [pc, #356]	; (8009354 <_printf_i+0x23c>)
 80091f0:	2a6f      	cmp	r2, #111	; 0x6f
 80091f2:	bf14      	ite	ne
 80091f4:	220a      	movne	r2, #10
 80091f6:	2208      	moveq	r2, #8
 80091f8:	2000      	movs	r0, #0
 80091fa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80091fe:	6865      	ldr	r5, [r4, #4]
 8009200:	60a5      	str	r5, [r4, #8]
 8009202:	2d00      	cmp	r5, #0
 8009204:	f2c0 809c 	blt.w	8009340 <_printf_i+0x228>
 8009208:	6820      	ldr	r0, [r4, #0]
 800920a:	f020 0004 	bic.w	r0, r0, #4
 800920e:	6020      	str	r0, [r4, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d13f      	bne.n	8009294 <_printf_i+0x17c>
 8009214:	2d00      	cmp	r5, #0
 8009216:	f040 8095 	bne.w	8009344 <_printf_i+0x22c>
 800921a:	4675      	mov	r5, lr
 800921c:	2a08      	cmp	r2, #8
 800921e:	d10b      	bne.n	8009238 <_printf_i+0x120>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	07da      	lsls	r2, r3, #31
 8009224:	d508      	bpl.n	8009238 <_printf_i+0x120>
 8009226:	6923      	ldr	r3, [r4, #16]
 8009228:	6862      	ldr	r2, [r4, #4]
 800922a:	429a      	cmp	r2, r3
 800922c:	bfde      	ittt	le
 800922e:	2330      	movle	r3, #48	; 0x30
 8009230:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009234:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009238:	ebae 0305 	sub.w	r3, lr, r5
 800923c:	6123      	str	r3, [r4, #16]
 800923e:	f8cd 8000 	str.w	r8, [sp]
 8009242:	463b      	mov	r3, r7
 8009244:	aa03      	add	r2, sp, #12
 8009246:	4621      	mov	r1, r4
 8009248:	4630      	mov	r0, r6
 800924a:	f7ff feef 	bl	800902c <_printf_common>
 800924e:	3001      	adds	r0, #1
 8009250:	d155      	bne.n	80092fe <_printf_i+0x1e6>
 8009252:	f04f 30ff 	mov.w	r0, #4294967295
 8009256:	b005      	add	sp, #20
 8009258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800925c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8009260:	493c      	ldr	r1, [pc, #240]	; (8009354 <_printf_i+0x23c>)
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	6818      	ldr	r0, [r3, #0]
 8009266:	f012 0f80 	tst.w	r2, #128	; 0x80
 800926a:	f100 0504 	add.w	r5, r0, #4
 800926e:	601d      	str	r5, [r3, #0]
 8009270:	d001      	beq.n	8009276 <_printf_i+0x15e>
 8009272:	6803      	ldr	r3, [r0, #0]
 8009274:	e002      	b.n	800927c <_printf_i+0x164>
 8009276:	0655      	lsls	r5, r2, #25
 8009278:	d5fb      	bpl.n	8009272 <_printf_i+0x15a>
 800927a:	8803      	ldrh	r3, [r0, #0]
 800927c:	07d0      	lsls	r0, r2, #31
 800927e:	bf44      	itt	mi
 8009280:	f042 0220 	orrmi.w	r2, r2, #32
 8009284:	6022      	strmi	r2, [r4, #0]
 8009286:	b91b      	cbnz	r3, 8009290 <_printf_i+0x178>
 8009288:	6822      	ldr	r2, [r4, #0]
 800928a:	f022 0220 	bic.w	r2, r2, #32
 800928e:	6022      	str	r2, [r4, #0]
 8009290:	2210      	movs	r2, #16
 8009292:	e7b1      	b.n	80091f8 <_printf_i+0xe0>
 8009294:	4675      	mov	r5, lr
 8009296:	fbb3 f0f2 	udiv	r0, r3, r2
 800929a:	fb02 3310 	mls	r3, r2, r0, r3
 800929e:	5ccb      	ldrb	r3, [r1, r3]
 80092a0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80092a4:	4603      	mov	r3, r0
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d1f5      	bne.n	8009296 <_printf_i+0x17e>
 80092aa:	e7b7      	b.n	800921c <_printf_i+0x104>
 80092ac:	6808      	ldr	r0, [r1, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	6949      	ldr	r1, [r1, #20]
 80092b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80092b6:	d004      	beq.n	80092c2 <_printf_i+0x1aa>
 80092b8:	1d10      	adds	r0, r2, #4
 80092ba:	6018      	str	r0, [r3, #0]
 80092bc:	6813      	ldr	r3, [r2, #0]
 80092be:	6019      	str	r1, [r3, #0]
 80092c0:	e007      	b.n	80092d2 <_printf_i+0x1ba>
 80092c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092c6:	f102 0004 	add.w	r0, r2, #4
 80092ca:	6018      	str	r0, [r3, #0]
 80092cc:	6813      	ldr	r3, [r2, #0]
 80092ce:	d0f6      	beq.n	80092be <_printf_i+0x1a6>
 80092d0:	8019      	strh	r1, [r3, #0]
 80092d2:	2300      	movs	r3, #0
 80092d4:	6123      	str	r3, [r4, #16]
 80092d6:	4675      	mov	r5, lr
 80092d8:	e7b1      	b.n	800923e <_printf_i+0x126>
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	1d11      	adds	r1, r2, #4
 80092de:	6019      	str	r1, [r3, #0]
 80092e0:	6815      	ldr	r5, [r2, #0]
 80092e2:	6862      	ldr	r2, [r4, #4]
 80092e4:	2100      	movs	r1, #0
 80092e6:	4628      	mov	r0, r5
 80092e8:	f7f6 ff72 	bl	80001d0 <memchr>
 80092ec:	b108      	cbz	r0, 80092f2 <_printf_i+0x1da>
 80092ee:	1b40      	subs	r0, r0, r5
 80092f0:	6060      	str	r0, [r4, #4]
 80092f2:	6863      	ldr	r3, [r4, #4]
 80092f4:	6123      	str	r3, [r4, #16]
 80092f6:	2300      	movs	r3, #0
 80092f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092fc:	e79f      	b.n	800923e <_printf_i+0x126>
 80092fe:	6923      	ldr	r3, [r4, #16]
 8009300:	462a      	mov	r2, r5
 8009302:	4639      	mov	r1, r7
 8009304:	4630      	mov	r0, r6
 8009306:	47c0      	blx	r8
 8009308:	3001      	adds	r0, #1
 800930a:	d0a2      	beq.n	8009252 <_printf_i+0x13a>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	079b      	lsls	r3, r3, #30
 8009310:	d507      	bpl.n	8009322 <_printf_i+0x20a>
 8009312:	2500      	movs	r5, #0
 8009314:	f104 0919 	add.w	r9, r4, #25
 8009318:	68e3      	ldr	r3, [r4, #12]
 800931a:	9a03      	ldr	r2, [sp, #12]
 800931c:	1a9b      	subs	r3, r3, r2
 800931e:	429d      	cmp	r5, r3
 8009320:	db05      	blt.n	800932e <_printf_i+0x216>
 8009322:	68e0      	ldr	r0, [r4, #12]
 8009324:	9b03      	ldr	r3, [sp, #12]
 8009326:	4298      	cmp	r0, r3
 8009328:	bfb8      	it	lt
 800932a:	4618      	movlt	r0, r3
 800932c:	e793      	b.n	8009256 <_printf_i+0x13e>
 800932e:	2301      	movs	r3, #1
 8009330:	464a      	mov	r2, r9
 8009332:	4639      	mov	r1, r7
 8009334:	4630      	mov	r0, r6
 8009336:	47c0      	blx	r8
 8009338:	3001      	adds	r0, #1
 800933a:	d08a      	beq.n	8009252 <_printf_i+0x13a>
 800933c:	3501      	adds	r5, #1
 800933e:	e7eb      	b.n	8009318 <_printf_i+0x200>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1a7      	bne.n	8009294 <_printf_i+0x17c>
 8009344:	780b      	ldrb	r3, [r1, #0]
 8009346:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800934a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800934e:	e765      	b.n	800921c <_printf_i+0x104>
 8009350:	0800ad41 	.word	0x0800ad41
 8009354:	0800ad30 	.word	0x0800ad30

08009358 <memcpy>:
 8009358:	b510      	push	{r4, lr}
 800935a:	1e43      	subs	r3, r0, #1
 800935c:	440a      	add	r2, r1
 800935e:	4291      	cmp	r1, r2
 8009360:	d100      	bne.n	8009364 <memcpy+0xc>
 8009362:	bd10      	pop	{r4, pc}
 8009364:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009368:	f803 4f01 	strb.w	r4, [r3, #1]!
 800936c:	e7f7      	b.n	800935e <memcpy+0x6>

0800936e <memmove>:
 800936e:	4288      	cmp	r0, r1
 8009370:	b510      	push	{r4, lr}
 8009372:	eb01 0302 	add.w	r3, r1, r2
 8009376:	d803      	bhi.n	8009380 <memmove+0x12>
 8009378:	1e42      	subs	r2, r0, #1
 800937a:	4299      	cmp	r1, r3
 800937c:	d10c      	bne.n	8009398 <memmove+0x2a>
 800937e:	bd10      	pop	{r4, pc}
 8009380:	4298      	cmp	r0, r3
 8009382:	d2f9      	bcs.n	8009378 <memmove+0xa>
 8009384:	1881      	adds	r1, r0, r2
 8009386:	1ad2      	subs	r2, r2, r3
 8009388:	42d3      	cmn	r3, r2
 800938a:	d100      	bne.n	800938e <memmove+0x20>
 800938c:	bd10      	pop	{r4, pc}
 800938e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009392:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009396:	e7f7      	b.n	8009388 <memmove+0x1a>
 8009398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80093a0:	e7eb      	b.n	800937a <memmove+0xc>
	...

080093a4 <_free_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4605      	mov	r5, r0
 80093a8:	2900      	cmp	r1, #0
 80093aa:	d045      	beq.n	8009438 <_free_r+0x94>
 80093ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093b0:	1f0c      	subs	r4, r1, #4
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	bfb8      	it	lt
 80093b6:	18e4      	addlt	r4, r4, r3
 80093b8:	f000 f8d6 	bl	8009568 <__malloc_lock>
 80093bc:	4a1f      	ldr	r2, [pc, #124]	; (800943c <_free_r+0x98>)
 80093be:	6813      	ldr	r3, [r2, #0]
 80093c0:	4610      	mov	r0, r2
 80093c2:	b933      	cbnz	r3, 80093d2 <_free_r+0x2e>
 80093c4:	6063      	str	r3, [r4, #4]
 80093c6:	6014      	str	r4, [r2, #0]
 80093c8:	4628      	mov	r0, r5
 80093ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ce:	f000 b8cc 	b.w	800956a <__malloc_unlock>
 80093d2:	42a3      	cmp	r3, r4
 80093d4:	d90c      	bls.n	80093f0 <_free_r+0x4c>
 80093d6:	6821      	ldr	r1, [r4, #0]
 80093d8:	1862      	adds	r2, r4, r1
 80093da:	4293      	cmp	r3, r2
 80093dc:	bf04      	itt	eq
 80093de:	681a      	ldreq	r2, [r3, #0]
 80093e0:	685b      	ldreq	r3, [r3, #4]
 80093e2:	6063      	str	r3, [r4, #4]
 80093e4:	bf04      	itt	eq
 80093e6:	1852      	addeq	r2, r2, r1
 80093e8:	6022      	streq	r2, [r4, #0]
 80093ea:	6004      	str	r4, [r0, #0]
 80093ec:	e7ec      	b.n	80093c8 <_free_r+0x24>
 80093ee:	4613      	mov	r3, r2
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	b10a      	cbz	r2, 80093f8 <_free_r+0x54>
 80093f4:	42a2      	cmp	r2, r4
 80093f6:	d9fa      	bls.n	80093ee <_free_r+0x4a>
 80093f8:	6819      	ldr	r1, [r3, #0]
 80093fa:	1858      	adds	r0, r3, r1
 80093fc:	42a0      	cmp	r0, r4
 80093fe:	d10b      	bne.n	8009418 <_free_r+0x74>
 8009400:	6820      	ldr	r0, [r4, #0]
 8009402:	4401      	add	r1, r0
 8009404:	1858      	adds	r0, r3, r1
 8009406:	4282      	cmp	r2, r0
 8009408:	6019      	str	r1, [r3, #0]
 800940a:	d1dd      	bne.n	80093c8 <_free_r+0x24>
 800940c:	6810      	ldr	r0, [r2, #0]
 800940e:	6852      	ldr	r2, [r2, #4]
 8009410:	605a      	str	r2, [r3, #4]
 8009412:	4401      	add	r1, r0
 8009414:	6019      	str	r1, [r3, #0]
 8009416:	e7d7      	b.n	80093c8 <_free_r+0x24>
 8009418:	d902      	bls.n	8009420 <_free_r+0x7c>
 800941a:	230c      	movs	r3, #12
 800941c:	602b      	str	r3, [r5, #0]
 800941e:	e7d3      	b.n	80093c8 <_free_r+0x24>
 8009420:	6820      	ldr	r0, [r4, #0]
 8009422:	1821      	adds	r1, r4, r0
 8009424:	428a      	cmp	r2, r1
 8009426:	bf04      	itt	eq
 8009428:	6811      	ldreq	r1, [r2, #0]
 800942a:	6852      	ldreq	r2, [r2, #4]
 800942c:	6062      	str	r2, [r4, #4]
 800942e:	bf04      	itt	eq
 8009430:	1809      	addeq	r1, r1, r0
 8009432:	6021      	streq	r1, [r4, #0]
 8009434:	605c      	str	r4, [r3, #4]
 8009436:	e7c7      	b.n	80093c8 <_free_r+0x24>
 8009438:	bd38      	pop	{r3, r4, r5, pc}
 800943a:	bf00      	nop
 800943c:	200038c4 	.word	0x200038c4

08009440 <_malloc_r>:
 8009440:	b570      	push	{r4, r5, r6, lr}
 8009442:	1ccd      	adds	r5, r1, #3
 8009444:	f025 0503 	bic.w	r5, r5, #3
 8009448:	3508      	adds	r5, #8
 800944a:	2d0c      	cmp	r5, #12
 800944c:	bf38      	it	cc
 800944e:	250c      	movcc	r5, #12
 8009450:	2d00      	cmp	r5, #0
 8009452:	4606      	mov	r6, r0
 8009454:	db01      	blt.n	800945a <_malloc_r+0x1a>
 8009456:	42a9      	cmp	r1, r5
 8009458:	d903      	bls.n	8009462 <_malloc_r+0x22>
 800945a:	230c      	movs	r3, #12
 800945c:	6033      	str	r3, [r6, #0]
 800945e:	2000      	movs	r0, #0
 8009460:	bd70      	pop	{r4, r5, r6, pc}
 8009462:	f000 f881 	bl	8009568 <__malloc_lock>
 8009466:	4a23      	ldr	r2, [pc, #140]	; (80094f4 <_malloc_r+0xb4>)
 8009468:	6814      	ldr	r4, [r2, #0]
 800946a:	4621      	mov	r1, r4
 800946c:	b991      	cbnz	r1, 8009494 <_malloc_r+0x54>
 800946e:	4c22      	ldr	r4, [pc, #136]	; (80094f8 <_malloc_r+0xb8>)
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	b91b      	cbnz	r3, 800947c <_malloc_r+0x3c>
 8009474:	4630      	mov	r0, r6
 8009476:	f000 f867 	bl	8009548 <_sbrk_r>
 800947a:	6020      	str	r0, [r4, #0]
 800947c:	4629      	mov	r1, r5
 800947e:	4630      	mov	r0, r6
 8009480:	f000 f862 	bl	8009548 <_sbrk_r>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	d126      	bne.n	80094d6 <_malloc_r+0x96>
 8009488:	230c      	movs	r3, #12
 800948a:	6033      	str	r3, [r6, #0]
 800948c:	4630      	mov	r0, r6
 800948e:	f000 f86c 	bl	800956a <__malloc_unlock>
 8009492:	e7e4      	b.n	800945e <_malloc_r+0x1e>
 8009494:	680b      	ldr	r3, [r1, #0]
 8009496:	1b5b      	subs	r3, r3, r5
 8009498:	d41a      	bmi.n	80094d0 <_malloc_r+0x90>
 800949a:	2b0b      	cmp	r3, #11
 800949c:	d90f      	bls.n	80094be <_malloc_r+0x7e>
 800949e:	600b      	str	r3, [r1, #0]
 80094a0:	50cd      	str	r5, [r1, r3]
 80094a2:	18cc      	adds	r4, r1, r3
 80094a4:	4630      	mov	r0, r6
 80094a6:	f000 f860 	bl	800956a <__malloc_unlock>
 80094aa:	f104 000b 	add.w	r0, r4, #11
 80094ae:	1d23      	adds	r3, r4, #4
 80094b0:	f020 0007 	bic.w	r0, r0, #7
 80094b4:	1ac3      	subs	r3, r0, r3
 80094b6:	d01b      	beq.n	80094f0 <_malloc_r+0xb0>
 80094b8:	425a      	negs	r2, r3
 80094ba:	50e2      	str	r2, [r4, r3]
 80094bc:	bd70      	pop	{r4, r5, r6, pc}
 80094be:	428c      	cmp	r4, r1
 80094c0:	bf0d      	iteet	eq
 80094c2:	6863      	ldreq	r3, [r4, #4]
 80094c4:	684b      	ldrne	r3, [r1, #4]
 80094c6:	6063      	strne	r3, [r4, #4]
 80094c8:	6013      	streq	r3, [r2, #0]
 80094ca:	bf18      	it	ne
 80094cc:	460c      	movne	r4, r1
 80094ce:	e7e9      	b.n	80094a4 <_malloc_r+0x64>
 80094d0:	460c      	mov	r4, r1
 80094d2:	6849      	ldr	r1, [r1, #4]
 80094d4:	e7ca      	b.n	800946c <_malloc_r+0x2c>
 80094d6:	1cc4      	adds	r4, r0, #3
 80094d8:	f024 0403 	bic.w	r4, r4, #3
 80094dc:	42a0      	cmp	r0, r4
 80094de:	d005      	beq.n	80094ec <_malloc_r+0xac>
 80094e0:	1a21      	subs	r1, r4, r0
 80094e2:	4630      	mov	r0, r6
 80094e4:	f000 f830 	bl	8009548 <_sbrk_r>
 80094e8:	3001      	adds	r0, #1
 80094ea:	d0cd      	beq.n	8009488 <_malloc_r+0x48>
 80094ec:	6025      	str	r5, [r4, #0]
 80094ee:	e7d9      	b.n	80094a4 <_malloc_r+0x64>
 80094f0:	bd70      	pop	{r4, r5, r6, pc}
 80094f2:	bf00      	nop
 80094f4:	200038c4 	.word	0x200038c4
 80094f8:	200038c8 	.word	0x200038c8

080094fc <_realloc_r>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	4607      	mov	r7, r0
 8009500:	4614      	mov	r4, r2
 8009502:	460e      	mov	r6, r1
 8009504:	b921      	cbnz	r1, 8009510 <_realloc_r+0x14>
 8009506:	4611      	mov	r1, r2
 8009508:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800950c:	f7ff bf98 	b.w	8009440 <_malloc_r>
 8009510:	b922      	cbnz	r2, 800951c <_realloc_r+0x20>
 8009512:	f7ff ff47 	bl	80093a4 <_free_r>
 8009516:	4625      	mov	r5, r4
 8009518:	4628      	mov	r0, r5
 800951a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800951c:	f000 f826 	bl	800956c <_malloc_usable_size_r>
 8009520:	4284      	cmp	r4, r0
 8009522:	d90f      	bls.n	8009544 <_realloc_r+0x48>
 8009524:	4621      	mov	r1, r4
 8009526:	4638      	mov	r0, r7
 8009528:	f7ff ff8a 	bl	8009440 <_malloc_r>
 800952c:	4605      	mov	r5, r0
 800952e:	2800      	cmp	r0, #0
 8009530:	d0f2      	beq.n	8009518 <_realloc_r+0x1c>
 8009532:	4631      	mov	r1, r6
 8009534:	4622      	mov	r2, r4
 8009536:	f7ff ff0f 	bl	8009358 <memcpy>
 800953a:	4631      	mov	r1, r6
 800953c:	4638      	mov	r0, r7
 800953e:	f7ff ff31 	bl	80093a4 <_free_r>
 8009542:	e7e9      	b.n	8009518 <_realloc_r+0x1c>
 8009544:	4635      	mov	r5, r6
 8009546:	e7e7      	b.n	8009518 <_realloc_r+0x1c>

08009548 <_sbrk_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4c06      	ldr	r4, [pc, #24]	; (8009564 <_sbrk_r+0x1c>)
 800954c:	2300      	movs	r3, #0
 800954e:	4605      	mov	r5, r0
 8009550:	4608      	mov	r0, r1
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	f7f9 fd9e 	bl	8003094 <_sbrk>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_sbrk_r+0x1a>
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	b103      	cbz	r3, 8009562 <_sbrk_r+0x1a>
 8009560:	602b      	str	r3, [r5, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	200045bc 	.word	0x200045bc

08009568 <__malloc_lock>:
 8009568:	4770      	bx	lr

0800956a <__malloc_unlock>:
 800956a:	4770      	bx	lr

0800956c <_malloc_usable_size_r>:
 800956c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8009570:	2800      	cmp	r0, #0
 8009572:	f1a0 0004 	sub.w	r0, r0, #4
 8009576:	bfbc      	itt	lt
 8009578:	580b      	ldrlt	r3, [r1, r0]
 800957a:	18c0      	addlt	r0, r0, r3
 800957c:	4770      	bx	lr
	...

08009580 <ceil>:
 8009580:	ec51 0b10 	vmov	r0, r1, d0
 8009584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009588:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800958c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009590:	2e13      	cmp	r6, #19
 8009592:	ee10 8a10 	vmov	r8, s0
 8009596:	460c      	mov	r4, r1
 8009598:	ee10 5a10 	vmov	r5, s0
 800959c:	dc31      	bgt.n	8009602 <ceil+0x82>
 800959e:	2e00      	cmp	r6, #0
 80095a0:	da13      	bge.n	80095ca <ceil+0x4a>
 80095a2:	a335      	add	r3, pc, #212	; (adr r3, 8009678 <ceil+0xf8>)
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f7f6 fe68 	bl	800027c <__adddf3>
 80095ac:	2200      	movs	r2, #0
 80095ae:	2300      	movs	r3, #0
 80095b0:	f7f7 faa6 	bl	8000b00 <__aeabi_dcmpgt>
 80095b4:	b130      	cbz	r0, 80095c4 <ceil+0x44>
 80095b6:	2c00      	cmp	r4, #0
 80095b8:	db56      	blt.n	8009668 <ceil+0xe8>
 80095ba:	ea54 0408 	orrs.w	r4, r4, r8
 80095be:	d057      	beq.n	8009670 <ceil+0xf0>
 80095c0:	4c2f      	ldr	r4, [pc, #188]	; (8009680 <ceil+0x100>)
 80095c2:	2500      	movs	r5, #0
 80095c4:	4621      	mov	r1, r4
 80095c6:	4628      	mov	r0, r5
 80095c8:	e025      	b.n	8009616 <ceil+0x96>
 80095ca:	4f2e      	ldr	r7, [pc, #184]	; (8009684 <ceil+0x104>)
 80095cc:	4137      	asrs	r7, r6
 80095ce:	ea01 0307 	and.w	r3, r1, r7
 80095d2:	4303      	orrs	r3, r0
 80095d4:	d01f      	beq.n	8009616 <ceil+0x96>
 80095d6:	a328      	add	r3, pc, #160	; (adr r3, 8009678 <ceil+0xf8>)
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f7f6 fe4e 	bl	800027c <__adddf3>
 80095e0:	2200      	movs	r2, #0
 80095e2:	2300      	movs	r3, #0
 80095e4:	f7f7 fa8c 	bl	8000b00 <__aeabi_dcmpgt>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d0eb      	beq.n	80095c4 <ceil+0x44>
 80095ec:	2c00      	cmp	r4, #0
 80095ee:	bfc2      	ittt	gt
 80095f0:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80095f4:	fa43 f606 	asrgt.w	r6, r3, r6
 80095f8:	19a4      	addgt	r4, r4, r6
 80095fa:	ea24 0407 	bic.w	r4, r4, r7
 80095fe:	2500      	movs	r5, #0
 8009600:	e7e0      	b.n	80095c4 <ceil+0x44>
 8009602:	2e33      	cmp	r6, #51	; 0x33
 8009604:	dd0b      	ble.n	800961e <ceil+0x9e>
 8009606:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800960a:	d104      	bne.n	8009616 <ceil+0x96>
 800960c:	ee10 2a10 	vmov	r2, s0
 8009610:	460b      	mov	r3, r1
 8009612:	f7f6 fe33 	bl	800027c <__adddf3>
 8009616:	ec41 0b10 	vmov	d0, r0, r1
 800961a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800961e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009622:	f04f 33ff 	mov.w	r3, #4294967295
 8009626:	fa23 f707 	lsr.w	r7, r3, r7
 800962a:	4238      	tst	r0, r7
 800962c:	d0f3      	beq.n	8009616 <ceil+0x96>
 800962e:	a312      	add	r3, pc, #72	; (adr r3, 8009678 <ceil+0xf8>)
 8009630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009634:	f7f6 fe22 	bl	800027c <__adddf3>
 8009638:	2200      	movs	r2, #0
 800963a:	2300      	movs	r3, #0
 800963c:	f7f7 fa60 	bl	8000b00 <__aeabi_dcmpgt>
 8009640:	2800      	cmp	r0, #0
 8009642:	d0bf      	beq.n	80095c4 <ceil+0x44>
 8009644:	2c00      	cmp	r4, #0
 8009646:	dd02      	ble.n	800964e <ceil+0xce>
 8009648:	2e14      	cmp	r6, #20
 800964a:	d103      	bne.n	8009654 <ceil+0xd4>
 800964c:	3401      	adds	r4, #1
 800964e:	ea25 0507 	bic.w	r5, r5, r7
 8009652:	e7b7      	b.n	80095c4 <ceil+0x44>
 8009654:	2301      	movs	r3, #1
 8009656:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800965a:	fa03 f606 	lsl.w	r6, r3, r6
 800965e:	4435      	add	r5, r6
 8009660:	45a8      	cmp	r8, r5
 8009662:	bf88      	it	hi
 8009664:	18e4      	addhi	r4, r4, r3
 8009666:	e7f2      	b.n	800964e <ceil+0xce>
 8009668:	2500      	movs	r5, #0
 800966a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800966e:	e7a9      	b.n	80095c4 <ceil+0x44>
 8009670:	4625      	mov	r5, r4
 8009672:	e7a7      	b.n	80095c4 <ceil+0x44>
 8009674:	f3af 8000 	nop.w
 8009678:	8800759c 	.word	0x8800759c
 800967c:	7e37e43c 	.word	0x7e37e43c
 8009680:	3ff00000 	.word	0x3ff00000
 8009684:	000fffff 	.word	0x000fffff

08009688 <floor>:
 8009688:	ec51 0b10 	vmov	r0, r1, d0
 800968c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009690:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009694:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009698:	2e13      	cmp	r6, #19
 800969a:	ee10 8a10 	vmov	r8, s0
 800969e:	460c      	mov	r4, r1
 80096a0:	ee10 5a10 	vmov	r5, s0
 80096a4:	dc35      	bgt.n	8009712 <floor+0x8a>
 80096a6:	2e00      	cmp	r6, #0
 80096a8:	da17      	bge.n	80096da <floor+0x52>
 80096aa:	a335      	add	r3, pc, #212	; (adr r3, 8009780 <floor+0xf8>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f7f6 fde4 	bl	800027c <__adddf3>
 80096b4:	2200      	movs	r2, #0
 80096b6:	2300      	movs	r3, #0
 80096b8:	f7f7 fa22 	bl	8000b00 <__aeabi_dcmpgt>
 80096bc:	b150      	cbz	r0, 80096d4 <floor+0x4c>
 80096be:	2c00      	cmp	r4, #0
 80096c0:	da5a      	bge.n	8009778 <floor+0xf0>
 80096c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80096c6:	ea53 0308 	orrs.w	r3, r3, r8
 80096ca:	4b2f      	ldr	r3, [pc, #188]	; (8009788 <floor+0x100>)
 80096cc:	f04f 0500 	mov.w	r5, #0
 80096d0:	bf18      	it	ne
 80096d2:	461c      	movne	r4, r3
 80096d4:	4621      	mov	r1, r4
 80096d6:	4628      	mov	r0, r5
 80096d8:	e025      	b.n	8009726 <floor+0x9e>
 80096da:	4f2c      	ldr	r7, [pc, #176]	; (800978c <floor+0x104>)
 80096dc:	4137      	asrs	r7, r6
 80096de:	ea01 0307 	and.w	r3, r1, r7
 80096e2:	4303      	orrs	r3, r0
 80096e4:	d01f      	beq.n	8009726 <floor+0x9e>
 80096e6:	a326      	add	r3, pc, #152	; (adr r3, 8009780 <floor+0xf8>)
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	f7f6 fdc6 	bl	800027c <__adddf3>
 80096f0:	2200      	movs	r2, #0
 80096f2:	2300      	movs	r3, #0
 80096f4:	f7f7 fa04 	bl	8000b00 <__aeabi_dcmpgt>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d0eb      	beq.n	80096d4 <floor+0x4c>
 80096fc:	2c00      	cmp	r4, #0
 80096fe:	bfbe      	ittt	lt
 8009700:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009704:	fa43 f606 	asrlt.w	r6, r3, r6
 8009708:	19a4      	addlt	r4, r4, r6
 800970a:	ea24 0407 	bic.w	r4, r4, r7
 800970e:	2500      	movs	r5, #0
 8009710:	e7e0      	b.n	80096d4 <floor+0x4c>
 8009712:	2e33      	cmp	r6, #51	; 0x33
 8009714:	dd0b      	ble.n	800972e <floor+0xa6>
 8009716:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800971a:	d104      	bne.n	8009726 <floor+0x9e>
 800971c:	ee10 2a10 	vmov	r2, s0
 8009720:	460b      	mov	r3, r1
 8009722:	f7f6 fdab 	bl	800027c <__adddf3>
 8009726:	ec41 0b10 	vmov	d0, r0, r1
 800972a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009732:	f04f 33ff 	mov.w	r3, #4294967295
 8009736:	fa23 f707 	lsr.w	r7, r3, r7
 800973a:	4238      	tst	r0, r7
 800973c:	d0f3      	beq.n	8009726 <floor+0x9e>
 800973e:	a310      	add	r3, pc, #64	; (adr r3, 8009780 <floor+0xf8>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	f7f6 fd9a 	bl	800027c <__adddf3>
 8009748:	2200      	movs	r2, #0
 800974a:	2300      	movs	r3, #0
 800974c:	f7f7 f9d8 	bl	8000b00 <__aeabi_dcmpgt>
 8009750:	2800      	cmp	r0, #0
 8009752:	d0bf      	beq.n	80096d4 <floor+0x4c>
 8009754:	2c00      	cmp	r4, #0
 8009756:	da02      	bge.n	800975e <floor+0xd6>
 8009758:	2e14      	cmp	r6, #20
 800975a:	d103      	bne.n	8009764 <floor+0xdc>
 800975c:	3401      	adds	r4, #1
 800975e:	ea25 0507 	bic.w	r5, r5, r7
 8009762:	e7b7      	b.n	80096d4 <floor+0x4c>
 8009764:	2301      	movs	r3, #1
 8009766:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800976a:	fa03 f606 	lsl.w	r6, r3, r6
 800976e:	4435      	add	r5, r6
 8009770:	45a8      	cmp	r8, r5
 8009772:	bf88      	it	hi
 8009774:	18e4      	addhi	r4, r4, r3
 8009776:	e7f2      	b.n	800975e <floor+0xd6>
 8009778:	2500      	movs	r5, #0
 800977a:	462c      	mov	r4, r5
 800977c:	e7aa      	b.n	80096d4 <floor+0x4c>
 800977e:	bf00      	nop
 8009780:	8800759c 	.word	0x8800759c
 8009784:	7e37e43c 	.word	0x7e37e43c
 8009788:	bff00000 	.word	0xbff00000
 800978c:	000fffff 	.word	0x000fffff

08009790 <lround>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	ec57 6b10 	vmov	r6, r7, d0
 8009796:	1e39      	subs	r1, r7, #0
 8009798:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800979c:	f2a2 34ff 	subw	r4, r2, #1023	; 0x3ff
 80097a0:	bfb4      	ite	lt
 80097a2:	f04f 30ff 	movlt.w	r0, #4294967295
 80097a6:	2001      	movge	r0, #1
 80097a8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80097ac:	2c13      	cmp	r4, #19
 80097ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80097b2:	dc0e      	bgt.n	80097d2 <lround+0x42>
 80097b4:	2c00      	cmp	r4, #0
 80097b6:	da03      	bge.n	80097c0 <lround+0x30>
 80097b8:	3401      	adds	r4, #1
 80097ba:	bf18      	it	ne
 80097bc:	2000      	movne	r0, #0
 80097be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097c4:	4123      	asrs	r3, r4
 80097c6:	440b      	add	r3, r1
 80097c8:	f1c4 0414 	rsb	r4, r4, #20
 80097cc:	40e3      	lsrs	r3, r4
 80097ce:	4358      	muls	r0, r3
 80097d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d2:	2c1e      	cmp	r4, #30
 80097d4:	d81b      	bhi.n	800980e <lround+0x7e>
 80097d6:	2c33      	cmp	r4, #51	; 0x33
 80097d8:	f2a2 4313 	subw	r3, r2, #1043	; 0x413
 80097dc:	dd07      	ble.n	80097ee <lround+0x5e>
 80097de:	f2a2 4233 	subw	r2, r2, #1075	; 0x433
 80097e2:	fa01 f303 	lsl.w	r3, r1, r3
 80097e6:	fa06 f202 	lsl.w	r2, r6, r2
 80097ea:	4313      	orrs	r3, r2
 80097ec:	e7ef      	b.n	80097ce <lround+0x3e>
 80097ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097f2:	40da      	lsrs	r2, r3
 80097f4:	1992      	adds	r2, r2, r6
 80097f6:	bf28      	it	cs
 80097f8:	3101      	addcs	r1, #1
 80097fa:	4099      	lsls	r1, r3
 80097fc:	f1c4 0334 	rsb	r3, r4, #52	; 0x34
 8009800:	2b20      	cmp	r3, #32
 8009802:	bf14      	ite	ne
 8009804:	fa22 f303 	lsrne.w	r3, r2, r3
 8009808:	2300      	moveq	r3, #0
 800980a:	430b      	orrs	r3, r1
 800980c:	e7df      	b.n	80097ce <lround+0x3e>
 800980e:	ee10 0a10 	vmov	r0, s0
 8009812:	4639      	mov	r1, r7
 8009814:	f7f7 f994 	bl	8000b40 <__aeabi_d2iz>
 8009818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800981c <round>:
 800981c:	ec51 0b10 	vmov	r0, r1, d0
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8009826:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800982a:	2c13      	cmp	r4, #19
 800982c:	460b      	mov	r3, r1
 800982e:	460f      	mov	r7, r1
 8009830:	dc17      	bgt.n	8009862 <round+0x46>
 8009832:	2c00      	cmp	r4, #0
 8009834:	da09      	bge.n	800984a <round+0x2e>
 8009836:	3401      	adds	r4, #1
 8009838:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800983c:	d103      	bne.n	8009846 <round+0x2a>
 800983e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009842:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009846:	2100      	movs	r1, #0
 8009848:	e028      	b.n	800989c <round+0x80>
 800984a:	4a16      	ldr	r2, [pc, #88]	; (80098a4 <round+0x88>)
 800984c:	4122      	asrs	r2, r4
 800984e:	4211      	tst	r1, r2
 8009850:	d100      	bne.n	8009854 <round+0x38>
 8009852:	b180      	cbz	r0, 8009876 <round+0x5a>
 8009854:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009858:	4123      	asrs	r3, r4
 800985a:	443b      	add	r3, r7
 800985c:	ea23 0302 	bic.w	r3, r3, r2
 8009860:	e7f1      	b.n	8009846 <round+0x2a>
 8009862:	2c33      	cmp	r4, #51	; 0x33
 8009864:	dd0a      	ble.n	800987c <round+0x60>
 8009866:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800986a:	d104      	bne.n	8009876 <round+0x5a>
 800986c:	ee10 2a10 	vmov	r2, s0
 8009870:	460b      	mov	r3, r1
 8009872:	f7f6 fd03 	bl	800027c <__adddf3>
 8009876:	ec41 0b10 	vmov	d0, r0, r1
 800987a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800987c:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 8009880:	f04f 35ff 	mov.w	r5, #4294967295
 8009884:	40d5      	lsrs	r5, r2
 8009886:	4228      	tst	r0, r5
 8009888:	d0f5      	beq.n	8009876 <round+0x5a>
 800988a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800988e:	2201      	movs	r2, #1
 8009890:	40a2      	lsls	r2, r4
 8009892:	1812      	adds	r2, r2, r0
 8009894:	bf28      	it	cs
 8009896:	3301      	addcs	r3, #1
 8009898:	ea22 0105 	bic.w	r1, r2, r5
 800989c:	4608      	mov	r0, r1
 800989e:	4619      	mov	r1, r3
 80098a0:	e7e9      	b.n	8009876 <round+0x5a>
 80098a2:	bf00      	nop
 80098a4:	000fffff 	.word	0x000fffff

080098a8 <trunc>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	ec53 2b10 	vmov	r2, r3, d0
 80098ae:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80098b2:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80098b6:	2913      	cmp	r1, #19
 80098b8:	ee10 5a10 	vmov	r5, s0
 80098bc:	461c      	mov	r4, r3
 80098be:	dc10      	bgt.n	80098e2 <trunc+0x3a>
 80098c0:	2900      	cmp	r1, #0
 80098c2:	bfa5      	ittet	ge
 80098c4:	4b12      	ldrge	r3, [pc, #72]	; (8009910 <trunc+0x68>)
 80098c6:	fa43 f101 	asrge.w	r1, r3, r1
 80098ca:	2300      	movlt	r3, #0
 80098cc:	2300      	movge	r3, #0
 80098ce:	bfb9      	ittee	lt
 80098d0:	2200      	movlt	r2, #0
 80098d2:	f004 4300 	andlt.w	r3, r4, #2147483648	; 0x80000000
 80098d6:	2200      	movge	r2, #0
 80098d8:	ea24 0301 	bicge.w	r3, r4, r1
 80098dc:	ec43 2b10 	vmov	d0, r2, r3
 80098e0:	bd38      	pop	{r3, r4, r5, pc}
 80098e2:	2933      	cmp	r1, #51	; 0x33
 80098e4:	dd0a      	ble.n	80098fc <trunc+0x54>
 80098e6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80098ea:	d1f7      	bne.n	80098dc <trunc+0x34>
 80098ec:	4619      	mov	r1, r3
 80098ee:	ee10 0a10 	vmov	r0, s0
 80098f2:	f7f6 fcc3 	bl	800027c <__adddf3>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	e7ef      	b.n	80098dc <trunc+0x34>
 80098fc:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8009900:	f04f 31ff 	mov.w	r1, #4294967295
 8009904:	fa21 f000 	lsr.w	r0, r1, r0
 8009908:	4623      	mov	r3, r4
 800990a:	ea25 0200 	bic.w	r2, r5, r0
 800990e:	e7e5      	b.n	80098dc <trunc+0x34>
 8009910:	000fffff 	.word	0x000fffff

08009914 <ceilf>:
 8009914:	ee10 3a10 	vmov	r3, s0
 8009918:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800991c:	0dca      	lsrs	r2, r1, #23
 800991e:	3a7f      	subs	r2, #127	; 0x7f
 8009920:	2a16      	cmp	r2, #22
 8009922:	dc2a      	bgt.n	800997a <ceilf+0x66>
 8009924:	2a00      	cmp	r2, #0
 8009926:	da11      	bge.n	800994c <ceilf+0x38>
 8009928:	eddf 7a18 	vldr	s15, [pc, #96]	; 800998c <ceilf+0x78>
 800992c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009930:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009938:	dd05      	ble.n	8009946 <ceilf+0x32>
 800993a:	2b00      	cmp	r3, #0
 800993c:	db23      	blt.n	8009986 <ceilf+0x72>
 800993e:	2900      	cmp	r1, #0
 8009940:	bf18      	it	ne
 8009942:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8009946:	ee00 3a10 	vmov	s0, r3
 800994a:	4770      	bx	lr
 800994c:	4910      	ldr	r1, [pc, #64]	; (8009990 <ceilf+0x7c>)
 800994e:	4111      	asrs	r1, r2
 8009950:	420b      	tst	r3, r1
 8009952:	d0fa      	beq.n	800994a <ceilf+0x36>
 8009954:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800998c <ceilf+0x78>
 8009958:	ee30 0a27 	vadd.f32	s0, s0, s15
 800995c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009964:	ddef      	ble.n	8009946 <ceilf+0x32>
 8009966:	2b00      	cmp	r3, #0
 8009968:	bfc2      	ittt	gt
 800996a:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800996e:	fa40 f202 	asrgt.w	r2, r0, r2
 8009972:	189b      	addgt	r3, r3, r2
 8009974:	ea23 0301 	bic.w	r3, r3, r1
 8009978:	e7e5      	b.n	8009946 <ceilf+0x32>
 800997a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800997e:	d3e4      	bcc.n	800994a <ceilf+0x36>
 8009980:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009984:	4770      	bx	lr
 8009986:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800998a:	e7dc      	b.n	8009946 <ceilf+0x32>
 800998c:	7149f2ca 	.word	0x7149f2ca
 8009990:	007fffff 	.word	0x007fffff

08009994 <cosf>:
 8009994:	ee10 3a10 	vmov	r3, s0
 8009998:	b507      	push	{r0, r1, r2, lr}
 800999a:	4a1c      	ldr	r2, [pc, #112]	; (8009a0c <cosf+0x78>)
 800999c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099a0:	4293      	cmp	r3, r2
 80099a2:	dc04      	bgt.n	80099ae <cosf+0x1a>
 80099a4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8009a10 <cosf+0x7c>
 80099a8:	f000 fbf4 	bl	800a194 <__kernel_cosf>
 80099ac:	e004      	b.n	80099b8 <cosf+0x24>
 80099ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80099b2:	db04      	blt.n	80099be <cosf+0x2a>
 80099b4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80099b8:	b003      	add	sp, #12
 80099ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80099be:	4668      	mov	r0, sp
 80099c0:	f000 fa74 	bl	8009eac <__ieee754_rem_pio2f>
 80099c4:	f000 0003 	and.w	r0, r0, #3
 80099c8:	2801      	cmp	r0, #1
 80099ca:	d007      	beq.n	80099dc <cosf+0x48>
 80099cc:	2802      	cmp	r0, #2
 80099ce:	d00e      	beq.n	80099ee <cosf+0x5a>
 80099d0:	b9a0      	cbnz	r0, 80099fc <cosf+0x68>
 80099d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80099d6:	ed9d 0a00 	vldr	s0, [sp]
 80099da:	e7e5      	b.n	80099a8 <cosf+0x14>
 80099dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80099e0:	ed9d 0a00 	vldr	s0, [sp]
 80099e4:	f000 fe92 	bl	800a70c <__kernel_sinf>
 80099e8:	eeb1 0a40 	vneg.f32	s0, s0
 80099ec:	e7e4      	b.n	80099b8 <cosf+0x24>
 80099ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80099f2:	ed9d 0a00 	vldr	s0, [sp]
 80099f6:	f000 fbcd 	bl	800a194 <__kernel_cosf>
 80099fa:	e7f5      	b.n	80099e8 <cosf+0x54>
 80099fc:	2001      	movs	r0, #1
 80099fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a02:	ed9d 0a00 	vldr	s0, [sp]
 8009a06:	f000 fe81 	bl	800a70c <__kernel_sinf>
 8009a0a:	e7d5      	b.n	80099b8 <cosf+0x24>
 8009a0c:	3f490fd8 	.word	0x3f490fd8
 8009a10:	00000000 	.word	0x00000000

08009a14 <sinf>:
 8009a14:	ee10 3a10 	vmov	r3, s0
 8009a18:	b507      	push	{r0, r1, r2, lr}
 8009a1a:	4a1d      	ldr	r2, [pc, #116]	; (8009a90 <sinf+0x7c>)
 8009a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a20:	4293      	cmp	r3, r2
 8009a22:	dc05      	bgt.n	8009a30 <sinf+0x1c>
 8009a24:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8009a94 <sinf+0x80>
 8009a28:	2000      	movs	r0, #0
 8009a2a:	f000 fe6f 	bl	800a70c <__kernel_sinf>
 8009a2e:	e004      	b.n	8009a3a <sinf+0x26>
 8009a30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009a34:	db04      	blt.n	8009a40 <sinf+0x2c>
 8009a36:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009a3a:	b003      	add	sp, #12
 8009a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a40:	4668      	mov	r0, sp
 8009a42:	f000 fa33 	bl	8009eac <__ieee754_rem_pio2f>
 8009a46:	f000 0003 	and.w	r0, r0, #3
 8009a4a:	2801      	cmp	r0, #1
 8009a4c:	d008      	beq.n	8009a60 <sinf+0x4c>
 8009a4e:	2802      	cmp	r0, #2
 8009a50:	d00d      	beq.n	8009a6e <sinf+0x5a>
 8009a52:	b9b0      	cbnz	r0, 8009a82 <sinf+0x6e>
 8009a54:	2001      	movs	r0, #1
 8009a56:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a5a:	ed9d 0a00 	vldr	s0, [sp]
 8009a5e:	e7e4      	b.n	8009a2a <sinf+0x16>
 8009a60:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a64:	ed9d 0a00 	vldr	s0, [sp]
 8009a68:	f000 fb94 	bl	800a194 <__kernel_cosf>
 8009a6c:	e7e5      	b.n	8009a3a <sinf+0x26>
 8009a6e:	2001      	movs	r0, #1
 8009a70:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a74:	ed9d 0a00 	vldr	s0, [sp]
 8009a78:	f000 fe48 	bl	800a70c <__kernel_sinf>
 8009a7c:	eeb1 0a40 	vneg.f32	s0, s0
 8009a80:	e7db      	b.n	8009a3a <sinf+0x26>
 8009a82:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a86:	ed9d 0a00 	vldr	s0, [sp]
 8009a8a:	f000 fb83 	bl	800a194 <__kernel_cosf>
 8009a8e:	e7f5      	b.n	8009a7c <sinf+0x68>
 8009a90:	3f490fd8 	.word	0x3f490fd8
 8009a94:	00000000 	.word	0x00000000

08009a98 <sqrt>:
 8009a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a9c:	ed2d 8b02 	vpush	{d8}
 8009aa0:	b08b      	sub	sp, #44	; 0x2c
 8009aa2:	ec55 4b10 	vmov	r4, r5, d0
 8009aa6:	f000 f8a3 	bl	8009bf0 <__ieee754_sqrt>
 8009aaa:	4b26      	ldr	r3, [pc, #152]	; (8009b44 <sqrt+0xac>)
 8009aac:	eeb0 8a40 	vmov.f32	s16, s0
 8009ab0:	eef0 8a60 	vmov.f32	s17, s1
 8009ab4:	f993 6000 	ldrsb.w	r6, [r3]
 8009ab8:	1c73      	adds	r3, r6, #1
 8009aba:	d02a      	beq.n	8009b12 <sqrt+0x7a>
 8009abc:	4622      	mov	r2, r4
 8009abe:	462b      	mov	r3, r5
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	f7f7 f826 	bl	8000b14 <__aeabi_dcmpun>
 8009ac8:	4607      	mov	r7, r0
 8009aca:	bb10      	cbnz	r0, 8009b12 <sqrt+0x7a>
 8009acc:	f04f 0800 	mov.w	r8, #0
 8009ad0:	f04f 0900 	mov.w	r9, #0
 8009ad4:	4642      	mov	r2, r8
 8009ad6:	464b      	mov	r3, r9
 8009ad8:	4620      	mov	r0, r4
 8009ada:	4629      	mov	r1, r5
 8009adc:	f7f6 fff2 	bl	8000ac4 <__aeabi_dcmplt>
 8009ae0:	b1b8      	cbz	r0, 8009b12 <sqrt+0x7a>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	4b18      	ldr	r3, [pc, #96]	; (8009b48 <sqrt+0xb0>)
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	9708      	str	r7, [sp, #32]
 8009aec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009af0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009af4:	b9b6      	cbnz	r6, 8009b24 <sqrt+0x8c>
 8009af6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009afa:	4668      	mov	r0, sp
 8009afc:	f000 fe4e 	bl	800a79c <matherr>
 8009b00:	b1d0      	cbz	r0, 8009b38 <sqrt+0xa0>
 8009b02:	9b08      	ldr	r3, [sp, #32]
 8009b04:	b11b      	cbz	r3, 8009b0e <sqrt+0x76>
 8009b06:	f7ff f8db 	bl	8008cc0 <__errno>
 8009b0a:	9b08      	ldr	r3, [sp, #32]
 8009b0c:	6003      	str	r3, [r0, #0]
 8009b0e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009b12:	eeb0 0a48 	vmov.f32	s0, s16
 8009b16:	eef0 0a68 	vmov.f32	s1, s17
 8009b1a:	b00b      	add	sp, #44	; 0x2c
 8009b1c:	ecbd 8b02 	vpop	{d8}
 8009b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b24:	4642      	mov	r2, r8
 8009b26:	464b      	mov	r3, r9
 8009b28:	4640      	mov	r0, r8
 8009b2a:	4649      	mov	r1, r9
 8009b2c:	f7f6 fe82 	bl	8000834 <__aeabi_ddiv>
 8009b30:	2e02      	cmp	r6, #2
 8009b32:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b36:	d1e0      	bne.n	8009afa <sqrt+0x62>
 8009b38:	f7ff f8c2 	bl	8008cc0 <__errno>
 8009b3c:	2321      	movs	r3, #33	; 0x21
 8009b3e:	6003      	str	r3, [r0, #0]
 8009b40:	e7df      	b.n	8009b02 <sqrt+0x6a>
 8009b42:	bf00      	nop
 8009b44:	20000090 	.word	0x20000090
 8009b48:	0800ad52 	.word	0x0800ad52

08009b4c <atan2f>:
 8009b4c:	f000 b900 	b.w	8009d50 <__ieee754_atan2f>

08009b50 <sqrtf>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	ed2d 8b02 	vpush	{d8}
 8009b56:	b08a      	sub	sp, #40	; 0x28
 8009b58:	eeb0 8a40 	vmov.f32	s16, s0
 8009b5c:	f000 fad2 	bl	800a104 <__ieee754_sqrtf>
 8009b60:	4b21      	ldr	r3, [pc, #132]	; (8009be8 <sqrtf+0x98>)
 8009b62:	f993 4000 	ldrsb.w	r4, [r3]
 8009b66:	1c63      	adds	r3, r4, #1
 8009b68:	d02c      	beq.n	8009bc4 <sqrtf+0x74>
 8009b6a:	eeb4 8a48 	vcmp.f32	s16, s16
 8009b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b72:	d627      	bvs.n	8009bc4 <sqrtf+0x74>
 8009b74:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7c:	d522      	bpl.n	8009bc4 <sqrtf+0x74>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	4b1a      	ldr	r3, [pc, #104]	; (8009bec <sqrtf+0x9c>)
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	ee18 0a10 	vmov	r0, s16
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9308      	str	r3, [sp, #32]
 8009b8e:	f7f6 fcd3 	bl	8000538 <__aeabi_f2d>
 8009b92:	2200      	movs	r2, #0
 8009b94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	b9ac      	cbnz	r4, 8009bcc <sqrtf+0x7c>
 8009ba0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ba4:	4668      	mov	r0, sp
 8009ba6:	f000 fdf9 	bl	800a79c <matherr>
 8009baa:	b1b8      	cbz	r0, 8009bdc <sqrtf+0x8c>
 8009bac:	9b08      	ldr	r3, [sp, #32]
 8009bae:	b11b      	cbz	r3, 8009bb8 <sqrtf+0x68>
 8009bb0:	f7ff f886 	bl	8008cc0 <__errno>
 8009bb4:	9b08      	ldr	r3, [sp, #32]
 8009bb6:	6003      	str	r3, [r0, #0]
 8009bb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bbc:	f7f7 f808 	bl	8000bd0 <__aeabi_d2f>
 8009bc0:	ee00 0a10 	vmov	s0, r0
 8009bc4:	b00a      	add	sp, #40	; 0x28
 8009bc6:	ecbd 8b02 	vpop	{d8}
 8009bca:	bd10      	pop	{r4, pc}
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4619      	mov	r1, r3
 8009bd0:	f7f6 fe30 	bl	8000834 <__aeabi_ddiv>
 8009bd4:	2c02      	cmp	r4, #2
 8009bd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bda:	d1e3      	bne.n	8009ba4 <sqrtf+0x54>
 8009bdc:	f7ff f870 	bl	8008cc0 <__errno>
 8009be0:	2321      	movs	r3, #33	; 0x21
 8009be2:	6003      	str	r3, [r0, #0]
 8009be4:	e7e2      	b.n	8009bac <sqrtf+0x5c>
 8009be6:	bf00      	nop
 8009be8:	20000090 	.word	0x20000090
 8009bec:	0800ad57 	.word	0x0800ad57

08009bf0 <__ieee754_sqrt>:
 8009bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf4:	ec55 4b10 	vmov	r4, r5, d0
 8009bf8:	4e54      	ldr	r6, [pc, #336]	; (8009d4c <__ieee754_sqrt+0x15c>)
 8009bfa:	43ae      	bics	r6, r5
 8009bfc:	ee10 0a10 	vmov	r0, s0
 8009c00:	462b      	mov	r3, r5
 8009c02:	462a      	mov	r2, r5
 8009c04:	4621      	mov	r1, r4
 8009c06:	d113      	bne.n	8009c30 <__ieee754_sqrt+0x40>
 8009c08:	ee10 2a10 	vmov	r2, s0
 8009c0c:	462b      	mov	r3, r5
 8009c0e:	ee10 0a10 	vmov	r0, s0
 8009c12:	4629      	mov	r1, r5
 8009c14:	f7f6 fce4 	bl	80005e0 <__aeabi_dmul>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	4629      	mov	r1, r5
 8009c20:	f7f6 fb2c 	bl	800027c <__adddf3>
 8009c24:	4604      	mov	r4, r0
 8009c26:	460d      	mov	r5, r1
 8009c28:	ec45 4b10 	vmov	d0, r4, r5
 8009c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c30:	2d00      	cmp	r5, #0
 8009c32:	dc10      	bgt.n	8009c56 <__ieee754_sqrt+0x66>
 8009c34:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009c38:	4330      	orrs	r0, r6
 8009c3a:	d0f5      	beq.n	8009c28 <__ieee754_sqrt+0x38>
 8009c3c:	b15d      	cbz	r5, 8009c56 <__ieee754_sqrt+0x66>
 8009c3e:	ee10 2a10 	vmov	r2, s0
 8009c42:	462b      	mov	r3, r5
 8009c44:	4620      	mov	r0, r4
 8009c46:	4629      	mov	r1, r5
 8009c48:	f7f6 fb16 	bl	8000278 <__aeabi_dsub>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	f7f6 fdf0 	bl	8000834 <__aeabi_ddiv>
 8009c54:	e7e6      	b.n	8009c24 <__ieee754_sqrt+0x34>
 8009c56:	151b      	asrs	r3, r3, #20
 8009c58:	d10c      	bne.n	8009c74 <__ieee754_sqrt+0x84>
 8009c5a:	2a00      	cmp	r2, #0
 8009c5c:	d06d      	beq.n	8009d3a <__ieee754_sqrt+0x14a>
 8009c5e:	2000      	movs	r0, #0
 8009c60:	02d6      	lsls	r6, r2, #11
 8009c62:	d56e      	bpl.n	8009d42 <__ieee754_sqrt+0x152>
 8009c64:	1e44      	subs	r4, r0, #1
 8009c66:	1b1b      	subs	r3, r3, r4
 8009c68:	f1c0 0420 	rsb	r4, r0, #32
 8009c6c:	fa21 f404 	lsr.w	r4, r1, r4
 8009c70:	4322      	orrs	r2, r4
 8009c72:	4081      	lsls	r1, r0
 8009c74:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c78:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009c7c:	07dd      	lsls	r5, r3, #31
 8009c7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009c82:	bf42      	ittt	mi
 8009c84:	0052      	lslmi	r2, r2, #1
 8009c86:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8009c8a:	0049      	lslmi	r1, r1, #1
 8009c8c:	1058      	asrs	r0, r3, #1
 8009c8e:	2500      	movs	r5, #0
 8009c90:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8009c94:	441a      	add	r2, r3
 8009c96:	0049      	lsls	r1, r1, #1
 8009c98:	2316      	movs	r3, #22
 8009c9a:	462c      	mov	r4, r5
 8009c9c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009ca0:	19a7      	adds	r7, r4, r6
 8009ca2:	4297      	cmp	r7, r2
 8009ca4:	bfde      	ittt	le
 8009ca6:	1bd2      	suble	r2, r2, r7
 8009ca8:	19bc      	addle	r4, r7, r6
 8009caa:	19ad      	addle	r5, r5, r6
 8009cac:	0052      	lsls	r2, r2, #1
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009cb4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009cb8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009cbc:	d1f0      	bne.n	8009ca0 <__ieee754_sqrt+0xb0>
 8009cbe:	f04f 0e20 	mov.w	lr, #32
 8009cc2:	469c      	mov	ip, r3
 8009cc4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009cc8:	42a2      	cmp	r2, r4
 8009cca:	eb06 070c 	add.w	r7, r6, ip
 8009cce:	dc02      	bgt.n	8009cd6 <__ieee754_sqrt+0xe6>
 8009cd0:	d112      	bne.n	8009cf8 <__ieee754_sqrt+0x108>
 8009cd2:	428f      	cmp	r7, r1
 8009cd4:	d810      	bhi.n	8009cf8 <__ieee754_sqrt+0x108>
 8009cd6:	2f00      	cmp	r7, #0
 8009cd8:	eb07 0c06 	add.w	ip, r7, r6
 8009cdc:	da34      	bge.n	8009d48 <__ieee754_sqrt+0x158>
 8009cde:	f1bc 0f00 	cmp.w	ip, #0
 8009ce2:	db31      	blt.n	8009d48 <__ieee754_sqrt+0x158>
 8009ce4:	f104 0801 	add.w	r8, r4, #1
 8009ce8:	1b12      	subs	r2, r2, r4
 8009cea:	428f      	cmp	r7, r1
 8009cec:	bf88      	it	hi
 8009cee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009cf2:	1bc9      	subs	r1, r1, r7
 8009cf4:	4433      	add	r3, r6
 8009cf6:	4644      	mov	r4, r8
 8009cf8:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8009cfc:	f1be 0e01 	subs.w	lr, lr, #1
 8009d00:	443a      	add	r2, r7
 8009d02:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009d06:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009d0a:	d1dd      	bne.n	8009cc8 <__ieee754_sqrt+0xd8>
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	d006      	beq.n	8009d1e <__ieee754_sqrt+0x12e>
 8009d10:	1c5c      	adds	r4, r3, #1
 8009d12:	bf13      	iteet	ne
 8009d14:	3301      	addne	r3, #1
 8009d16:	3501      	addeq	r5, #1
 8009d18:	4673      	moveq	r3, lr
 8009d1a:	f023 0301 	bicne.w	r3, r3, #1
 8009d1e:	106a      	asrs	r2, r5, #1
 8009d20:	085b      	lsrs	r3, r3, #1
 8009d22:	07e9      	lsls	r1, r5, #31
 8009d24:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009d28:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009d2c:	bf48      	it	mi
 8009d2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009d32:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009d36:	461c      	mov	r4, r3
 8009d38:	e776      	b.n	8009c28 <__ieee754_sqrt+0x38>
 8009d3a:	0aca      	lsrs	r2, r1, #11
 8009d3c:	3b15      	subs	r3, #21
 8009d3e:	0549      	lsls	r1, r1, #21
 8009d40:	e78b      	b.n	8009c5a <__ieee754_sqrt+0x6a>
 8009d42:	0052      	lsls	r2, r2, #1
 8009d44:	3001      	adds	r0, #1
 8009d46:	e78b      	b.n	8009c60 <__ieee754_sqrt+0x70>
 8009d48:	46a0      	mov	r8, r4
 8009d4a:	e7cd      	b.n	8009ce8 <__ieee754_sqrt+0xf8>
 8009d4c:	7ff00000 	.word	0x7ff00000

08009d50 <__ieee754_atan2f>:
 8009d50:	ee10 2a90 	vmov	r2, s1
 8009d54:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009d58:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	eef0 7a40 	vmov.f32	s15, s0
 8009d62:	dc06      	bgt.n	8009d72 <__ieee754_atan2f+0x22>
 8009d64:	ee10 0a10 	vmov	r0, s0
 8009d68:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009d6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009d70:	dd04      	ble.n	8009d7c <__ieee754_atan2f+0x2c>
 8009d72:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009d76:	eeb0 0a67 	vmov.f32	s0, s15
 8009d7a:	bd10      	pop	{r4, pc}
 8009d7c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009d80:	d103      	bne.n	8009d8a <__ieee754_atan2f+0x3a>
 8009d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d86:	f000 bd0b 	b.w	800a7a0 <atanf>
 8009d8a:	1794      	asrs	r4, r2, #30
 8009d8c:	f004 0402 	and.w	r4, r4, #2
 8009d90:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009d94:	b943      	cbnz	r3, 8009da8 <__ieee754_atan2f+0x58>
 8009d96:	2c02      	cmp	r4, #2
 8009d98:	d033      	beq.n	8009e02 <__ieee754_atan2f+0xb2>
 8009d9a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8009e80 <__ieee754_atan2f+0x130>
 8009d9e:	2c03      	cmp	r4, #3
 8009da0:	bf08      	it	eq
 8009da2:	eef0 7a47 	vmoveq.f32	s15, s14
 8009da6:	e7e6      	b.n	8009d76 <__ieee754_atan2f+0x26>
 8009da8:	b941      	cbnz	r1, 8009dbc <__ieee754_atan2f+0x6c>
 8009daa:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009e84 <__ieee754_atan2f+0x134>
 8009dae:	eddf 7a36 	vldr	s15, [pc, #216]	; 8009e88 <__ieee754_atan2f+0x138>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	bfb8      	it	lt
 8009db6:	eef0 7a47 	vmovlt.f32	s15, s14
 8009dba:	e7dc      	b.n	8009d76 <__ieee754_atan2f+0x26>
 8009dbc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009dc0:	d125      	bne.n	8009e0e <__ieee754_atan2f+0xbe>
 8009dc2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009dc6:	d112      	bne.n	8009dee <__ieee754_atan2f+0x9e>
 8009dc8:	2c02      	cmp	r4, #2
 8009dca:	d00a      	beq.n	8009de2 <__ieee754_atan2f+0x92>
 8009dcc:	2c03      	cmp	r4, #3
 8009dce:	d00b      	beq.n	8009de8 <__ieee754_atan2f+0x98>
 8009dd0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8009e8c <__ieee754_atan2f+0x13c>
 8009dd4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8009e90 <__ieee754_atan2f+0x140>
 8009dd8:	2c01      	cmp	r4, #1
 8009dda:	bf18      	it	ne
 8009ddc:	eef0 7a47 	vmovne.f32	s15, s14
 8009de0:	e7c9      	b.n	8009d76 <__ieee754_atan2f+0x26>
 8009de2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8009e94 <__ieee754_atan2f+0x144>
 8009de6:	e7c6      	b.n	8009d76 <__ieee754_atan2f+0x26>
 8009de8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009e98 <__ieee754_atan2f+0x148>
 8009dec:	e7c3      	b.n	8009d76 <__ieee754_atan2f+0x26>
 8009dee:	2c02      	cmp	r4, #2
 8009df0:	d007      	beq.n	8009e02 <__ieee754_atan2f+0xb2>
 8009df2:	2c03      	cmp	r4, #3
 8009df4:	d008      	beq.n	8009e08 <__ieee754_atan2f+0xb8>
 8009df6:	2c01      	cmp	r4, #1
 8009df8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009e9c <__ieee754_atan2f+0x14c>
 8009dfc:	eddf 7a28 	vldr	s15, [pc, #160]	; 8009ea0 <__ieee754_atan2f+0x150>
 8009e00:	e7eb      	b.n	8009dda <__ieee754_atan2f+0x8a>
 8009e02:	eddf 7a28 	vldr	s15, [pc, #160]	; 8009ea4 <__ieee754_atan2f+0x154>
 8009e06:	e7b6      	b.n	8009d76 <__ieee754_atan2f+0x26>
 8009e08:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8009e80 <__ieee754_atan2f+0x130>
 8009e0c:	e7b3      	b.n	8009d76 <__ieee754_atan2f+0x26>
 8009e0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009e12:	d0ca      	beq.n	8009daa <__ieee754_atan2f+0x5a>
 8009e14:	1a5b      	subs	r3, r3, r1
 8009e16:	15db      	asrs	r3, r3, #23
 8009e18:	2b3c      	cmp	r3, #60	; 0x3c
 8009e1a:	dc1a      	bgt.n	8009e52 <__ieee754_atan2f+0x102>
 8009e1c:	2a00      	cmp	r2, #0
 8009e1e:	da01      	bge.n	8009e24 <__ieee754_atan2f+0xd4>
 8009e20:	333c      	adds	r3, #60	; 0x3c
 8009e22:	db19      	blt.n	8009e58 <__ieee754_atan2f+0x108>
 8009e24:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009e28:	f000 fd8c 	bl	800a944 <fabsf>
 8009e2c:	f000 fcb8 	bl	800a7a0 <atanf>
 8009e30:	eef0 7a40 	vmov.f32	s15, s0
 8009e34:	2c01      	cmp	r4, #1
 8009e36:	d012      	beq.n	8009e5e <__ieee754_atan2f+0x10e>
 8009e38:	2c02      	cmp	r4, #2
 8009e3a:	d017      	beq.n	8009e6c <__ieee754_atan2f+0x11c>
 8009e3c:	2c00      	cmp	r4, #0
 8009e3e:	d09a      	beq.n	8009d76 <__ieee754_atan2f+0x26>
 8009e40:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009ea8 <__ieee754_atan2f+0x158>
 8009e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e48:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8009ea4 <__ieee754_atan2f+0x154>
 8009e4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e50:	e791      	b.n	8009d76 <__ieee754_atan2f+0x26>
 8009e52:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009e88 <__ieee754_atan2f+0x138>
 8009e56:	e7ed      	b.n	8009e34 <__ieee754_atan2f+0xe4>
 8009e58:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009e9c <__ieee754_atan2f+0x14c>
 8009e5c:	e7ea      	b.n	8009e34 <__ieee754_atan2f+0xe4>
 8009e5e:	ee17 3a90 	vmov	r3, s15
 8009e62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	e784      	b.n	8009d76 <__ieee754_atan2f+0x26>
 8009e6c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009ea8 <__ieee754_atan2f+0x158>
 8009e70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e74:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8009ea4 <__ieee754_atan2f+0x154>
 8009e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e7c:	e77b      	b.n	8009d76 <__ieee754_atan2f+0x26>
 8009e7e:	bf00      	nop
 8009e80:	c0490fdb 	.word	0xc0490fdb
 8009e84:	bfc90fdb 	.word	0xbfc90fdb
 8009e88:	3fc90fdb 	.word	0x3fc90fdb
 8009e8c:	3f490fdb 	.word	0x3f490fdb
 8009e90:	bf490fdb 	.word	0xbf490fdb
 8009e94:	4016cbe4 	.word	0x4016cbe4
 8009e98:	c016cbe4 	.word	0xc016cbe4
 8009e9c:	00000000 	.word	0x00000000
 8009ea0:	80000000 	.word	0x80000000
 8009ea4:	40490fdb 	.word	0x40490fdb
 8009ea8:	33bbbd2e 	.word	0x33bbbd2e

08009eac <__ieee754_rem_pio2f>:
 8009eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eae:	ee10 6a10 	vmov	r6, s0
 8009eb2:	4b86      	ldr	r3, [pc, #536]	; (800a0cc <__ieee754_rem_pio2f+0x220>)
 8009eb4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8009eb8:	429c      	cmp	r4, r3
 8009eba:	b087      	sub	sp, #28
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	dc05      	bgt.n	8009ecc <__ieee754_rem_pio2f+0x20>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	ed85 0a00 	vstr	s0, [r5]
 8009ec6:	6043      	str	r3, [r0, #4]
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e020      	b.n	8009f0e <__ieee754_rem_pio2f+0x62>
 8009ecc:	4b80      	ldr	r3, [pc, #512]	; (800a0d0 <__ieee754_rem_pio2f+0x224>)
 8009ece:	429c      	cmp	r4, r3
 8009ed0:	dc38      	bgt.n	8009f44 <__ieee754_rem_pio2f+0x98>
 8009ed2:	2e00      	cmp	r6, #0
 8009ed4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800a0d4 <__ieee754_rem_pio2f+0x228>
 8009ed8:	4b7f      	ldr	r3, [pc, #508]	; (800a0d8 <__ieee754_rem_pio2f+0x22c>)
 8009eda:	f024 040f 	bic.w	r4, r4, #15
 8009ede:	dd18      	ble.n	8009f12 <__ieee754_rem_pio2f+0x66>
 8009ee0:	429c      	cmp	r4, r3
 8009ee2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009ee6:	bf09      	itett	eq
 8009ee8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800a0dc <__ieee754_rem_pio2f+0x230>
 8009eec:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800a0e0 <__ieee754_rem_pio2f+0x234>
 8009ef0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009ef4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800a0e4 <__ieee754_rem_pio2f+0x238>
 8009ef8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009efc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f00:	edc0 6a00 	vstr	s13, [r0]
 8009f04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f08:	edc0 7a01 	vstr	s15, [r0, #4]
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	b007      	add	sp, #28
 8009f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f12:	429c      	cmp	r4, r3
 8009f14:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009f18:	bf09      	itett	eq
 8009f1a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800a0dc <__ieee754_rem_pio2f+0x230>
 8009f1e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800a0e0 <__ieee754_rem_pio2f+0x234>
 8009f22:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009f26:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800a0e4 <__ieee754_rem_pio2f+0x238>
 8009f2a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009f2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f32:	edc0 6a00 	vstr	s13, [r0]
 8009f36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f3a:	edc0 7a01 	vstr	s15, [r0, #4]
 8009f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f42:	e7e4      	b.n	8009f0e <__ieee754_rem_pio2f+0x62>
 8009f44:	4b68      	ldr	r3, [pc, #416]	; (800a0e8 <__ieee754_rem_pio2f+0x23c>)
 8009f46:	429c      	cmp	r4, r3
 8009f48:	dc71      	bgt.n	800a02e <__ieee754_rem_pio2f+0x182>
 8009f4a:	f000 fcfb 	bl	800a944 <fabsf>
 8009f4e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a0ec <__ieee754_rem_pio2f+0x240>
 8009f52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009f56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f5e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009f62:	ee17 0a90 	vmov	r0, s15
 8009f66:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a0d4 <__ieee754_rem_pio2f+0x228>
 8009f6a:	eeb1 7a46 	vneg.f32	s14, s12
 8009f6e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009f72:	281f      	cmp	r0, #31
 8009f74:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a0e0 <__ieee754_rem_pio2f+0x234>
 8009f78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009f7c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009f80:	ee16 3a90 	vmov	r3, s13
 8009f84:	dc1c      	bgt.n	8009fc0 <__ieee754_rem_pio2f+0x114>
 8009f86:	1e47      	subs	r7, r0, #1
 8009f88:	4959      	ldr	r1, [pc, #356]	; (800a0f0 <__ieee754_rem_pio2f+0x244>)
 8009f8a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8009f8e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8009f92:	428a      	cmp	r2, r1
 8009f94:	d014      	beq.n	8009fc0 <__ieee754_rem_pio2f+0x114>
 8009f96:	602b      	str	r3, [r5, #0]
 8009f98:	ed95 7a00 	vldr	s14, [r5]
 8009f9c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009fa0:	2e00      	cmp	r6, #0
 8009fa2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009fa6:	ed85 0a01 	vstr	s0, [r5, #4]
 8009faa:	dab0      	bge.n	8009f0e <__ieee754_rem_pio2f+0x62>
 8009fac:	eeb1 7a47 	vneg.f32	s14, s14
 8009fb0:	eeb1 0a40 	vneg.f32	s0, s0
 8009fb4:	ed85 7a00 	vstr	s14, [r5]
 8009fb8:	ed85 0a01 	vstr	s0, [r5, #4]
 8009fbc:	4240      	negs	r0, r0
 8009fbe:	e7a6      	b.n	8009f0e <__ieee754_rem_pio2f+0x62>
 8009fc0:	15e4      	asrs	r4, r4, #23
 8009fc2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009fc6:	1aa2      	subs	r2, r4, r2
 8009fc8:	2a08      	cmp	r2, #8
 8009fca:	dde4      	ble.n	8009f96 <__ieee754_rem_pio2f+0xea>
 8009fcc:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a0dc <__ieee754_rem_pio2f+0x230>
 8009fd0:	eef0 6a40 	vmov.f32	s13, s0
 8009fd4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009fd8:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009fdc:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009fe0:	eddf 7a40 	vldr	s15, [pc, #256]	; 800a0e4 <__ieee754_rem_pio2f+0x238>
 8009fe4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8009fe8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8009fec:	eef0 7a40 	vmov.f32	s15, s0
 8009ff0:	ee15 3a90 	vmov	r3, s11
 8009ff4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009ff8:	1aa4      	subs	r4, r4, r2
 8009ffa:	2c19      	cmp	r4, #25
 8009ffc:	dc04      	bgt.n	800a008 <__ieee754_rem_pio2f+0x15c>
 8009ffe:	edc5 5a00 	vstr	s11, [r5]
 800a002:	eeb0 0a66 	vmov.f32	s0, s13
 800a006:	e7c7      	b.n	8009f98 <__ieee754_rem_pio2f+0xec>
 800a008:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a0f4 <__ieee754_rem_pio2f+0x248>
 800a00c:	eeb0 0a66 	vmov.f32	s0, s13
 800a010:	eea7 0a25 	vfma.f32	s0, s14, s11
 800a014:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a018:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a01c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a0f8 <__ieee754_rem_pio2f+0x24c>
 800a020:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800a024:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a028:	ed85 7a00 	vstr	s14, [r5]
 800a02c:	e7b4      	b.n	8009f98 <__ieee754_rem_pio2f+0xec>
 800a02e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a032:	db06      	blt.n	800a042 <__ieee754_rem_pio2f+0x196>
 800a034:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a038:	edc0 7a01 	vstr	s15, [r0, #4]
 800a03c:	edc0 7a00 	vstr	s15, [r0]
 800a040:	e742      	b.n	8009ec8 <__ieee754_rem_pio2f+0x1c>
 800a042:	15e2      	asrs	r2, r4, #23
 800a044:	3a86      	subs	r2, #134	; 0x86
 800a046:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800a04a:	ee07 3a90 	vmov	s15, r3
 800a04e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a052:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800a0fc <__ieee754_rem_pio2f+0x250>
 800a056:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a05a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a05e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a062:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a066:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a06a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a06e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a072:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a076:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a07a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a082:	edcd 7a05 	vstr	s15, [sp, #20]
 800a086:	d11e      	bne.n	800a0c6 <__ieee754_rem_pio2f+0x21a>
 800a088:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a090:	bf14      	ite	ne
 800a092:	2302      	movne	r3, #2
 800a094:	2301      	moveq	r3, #1
 800a096:	491a      	ldr	r1, [pc, #104]	; (800a100 <__ieee754_rem_pio2f+0x254>)
 800a098:	9101      	str	r1, [sp, #4]
 800a09a:	2102      	movs	r1, #2
 800a09c:	9100      	str	r1, [sp, #0]
 800a09e:	a803      	add	r0, sp, #12
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f000 f8d5 	bl	800a250 <__kernel_rem_pio2f>
 800a0a6:	2e00      	cmp	r6, #0
 800a0a8:	f6bf af31 	bge.w	8009f0e <__ieee754_rem_pio2f+0x62>
 800a0ac:	edd5 7a00 	vldr	s15, [r5]
 800a0b0:	eef1 7a67 	vneg.f32	s15, s15
 800a0b4:	edc5 7a00 	vstr	s15, [r5]
 800a0b8:	edd5 7a01 	vldr	s15, [r5, #4]
 800a0bc:	eef1 7a67 	vneg.f32	s15, s15
 800a0c0:	edc5 7a01 	vstr	s15, [r5, #4]
 800a0c4:	e77a      	b.n	8009fbc <__ieee754_rem_pio2f+0x110>
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e7e5      	b.n	800a096 <__ieee754_rem_pio2f+0x1ea>
 800a0ca:	bf00      	nop
 800a0cc:	3f490fd8 	.word	0x3f490fd8
 800a0d0:	4016cbe3 	.word	0x4016cbe3
 800a0d4:	3fc90f80 	.word	0x3fc90f80
 800a0d8:	3fc90fd0 	.word	0x3fc90fd0
 800a0dc:	37354400 	.word	0x37354400
 800a0e0:	37354443 	.word	0x37354443
 800a0e4:	2e85a308 	.word	0x2e85a308
 800a0e8:	43490f80 	.word	0x43490f80
 800a0ec:	3f22f984 	.word	0x3f22f984
 800a0f0:	0800ad60 	.word	0x0800ad60
 800a0f4:	2e85a300 	.word	0x2e85a300
 800a0f8:	248d3132 	.word	0x248d3132
 800a0fc:	43800000 	.word	0x43800000
 800a100:	0800ade0 	.word	0x0800ade0

0800a104 <__ieee754_sqrtf>:
 800a104:	ee10 2a10 	vmov	r2, s0
 800a108:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a10c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	d302      	bcc.n	800a11a <__ieee754_sqrtf+0x16>
 800a114:	eea0 0a00 	vfma.f32	s0, s0, s0
 800a118:	bd70      	pop	{r4, r5, r6, pc}
 800a11a:	b3b1      	cbz	r1, 800a18a <__ieee754_sqrtf+0x86>
 800a11c:	2a00      	cmp	r2, #0
 800a11e:	da04      	bge.n	800a12a <__ieee754_sqrtf+0x26>
 800a120:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a124:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a128:	bd70      	pop	{r4, r5, r6, pc}
 800a12a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a12e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a132:	d204      	bcs.n	800a13e <__ieee754_sqrtf+0x3a>
 800a134:	2100      	movs	r1, #0
 800a136:	0210      	lsls	r0, r2, #8
 800a138:	d528      	bpl.n	800a18c <__ieee754_sqrtf+0x88>
 800a13a:	3901      	subs	r1, #1
 800a13c:	1a5b      	subs	r3, r3, r1
 800a13e:	3b7f      	subs	r3, #127	; 0x7f
 800a140:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a144:	07d9      	lsls	r1, r3, #31
 800a146:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a14a:	bf48      	it	mi
 800a14c:	0052      	lslmi	r2, r2, #1
 800a14e:	1059      	asrs	r1, r3, #1
 800a150:	2300      	movs	r3, #0
 800a152:	0052      	lsls	r2, r2, #1
 800a154:	2419      	movs	r4, #25
 800a156:	461e      	mov	r6, r3
 800a158:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a15c:	1835      	adds	r5, r6, r0
 800a15e:	4295      	cmp	r5, r2
 800a160:	bfde      	ittt	le
 800a162:	182e      	addle	r6, r5, r0
 800a164:	1b52      	suble	r2, r2, r5
 800a166:	181b      	addle	r3, r3, r0
 800a168:	3c01      	subs	r4, #1
 800a16a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a16e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a172:	d1f3      	bne.n	800a15c <__ieee754_sqrtf+0x58>
 800a174:	b112      	cbz	r2, 800a17c <__ieee754_sqrtf+0x78>
 800a176:	3301      	adds	r3, #1
 800a178:	f023 0301 	bic.w	r3, r3, #1
 800a17c:	105b      	asrs	r3, r3, #1
 800a17e:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800a182:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 800a186:	ee00 3a10 	vmov	s0, r3
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	0052      	lsls	r2, r2, #1
 800a18e:	3101      	adds	r1, #1
 800a190:	e7d1      	b.n	800a136 <__ieee754_sqrtf+0x32>
	...

0800a194 <__kernel_cosf>:
 800a194:	ee10 3a10 	vmov	r3, s0
 800a198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a19c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a1a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1a4:	da05      	bge.n	800a1b2 <__kernel_cosf+0x1e>
 800a1a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a1aa:	ee17 2a90 	vmov	r2, s15
 800a1ae:	2a00      	cmp	r2, #0
 800a1b0:	d03b      	beq.n	800a22a <__kernel_cosf+0x96>
 800a1b2:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a1b6:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800a230 <__kernel_cosf+0x9c>
 800a1ba:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a234 <__kernel_cosf+0xa0>
 800a1be:	eddf 5a1e 	vldr	s11, [pc, #120]	; 800a238 <__kernel_cosf+0xa4>
 800a1c2:	4a1e      	ldr	r2, [pc, #120]	; (800a23c <__kernel_cosf+0xa8>)
 800a1c4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a1ce:	eee7 5a06 	vfma.f32	s11, s14, s12
 800a1d2:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800a240 <__kernel_cosf+0xac>
 800a1d6:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a1da:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800a244 <__kernel_cosf+0xb0>
 800a1de:	eee7 5a06 	vfma.f32	s11, s14, s12
 800a1e2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 800a248 <__kernel_cosf+0xb4>
 800a1e6:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a1ea:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a1ee:	ee26 6a07 	vmul.f32	s12, s12, s14
 800a1f2:	dc06      	bgt.n	800a202 <__kernel_cosf+0x6e>
 800a1f4:	eed7 0a06 	vfnms.f32	s1, s14, s12
 800a1f8:	eed7 0a25 	vfnms.f32	s1, s14, s11
 800a1fc:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800a200:	4770      	bx	lr
 800a202:	4a12      	ldr	r2, [pc, #72]	; (800a24c <__kernel_cosf+0xb8>)
 800a204:	4293      	cmp	r3, r2
 800a206:	bfda      	itte	le
 800a208:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a20c:	ee07 3a90 	vmovle	s15, r3
 800a210:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 800a214:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a218:	eed7 0a06 	vfnms.f32	s1, s14, s12
 800a21c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a220:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a224:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800a228:	4770      	bx	lr
 800a22a:	eeb0 0a66 	vmov.f32	s0, s13
 800a22e:	4770      	bx	lr
 800a230:	310f74f6 	.word	0x310f74f6
 800a234:	ad47d74e 	.word	0xad47d74e
 800a238:	b493f27c 	.word	0xb493f27c
 800a23c:	3e999999 	.word	0x3e999999
 800a240:	37d00d01 	.word	0x37d00d01
 800a244:	bab60b61 	.word	0xbab60b61
 800a248:	3d2aaaab 	.word	0x3d2aaaab
 800a24c:	3f480000 	.word	0x3f480000

0800a250 <__kernel_rem_pio2f>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	ed2d 8b04 	vpush	{d8-d9}
 800a258:	b0d7      	sub	sp, #348	; 0x15c
 800a25a:	468b      	mov	fp, r1
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	9964      	ldr	r1, [sp, #400]	; 0x190
 800a260:	4bcb      	ldr	r3, [pc, #812]	; (800a590 <__kernel_rem_pio2f+0x340>)
 800a262:	9002      	str	r0, [sp, #8]
 800a264:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 800a268:	9b01      	ldr	r3, [sp, #4]
 800a26a:	9e65      	ldr	r6, [sp, #404]	; 0x194
 800a26c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 800a5a0 <__kernel_rem_pio2f+0x350>
 800a270:	3b01      	subs	r3, #1
 800a272:	1ed0      	subs	r0, r2, #3
 800a274:	2408      	movs	r4, #8
 800a276:	fb90 f0f4 	sdiv	r0, r0, r4
 800a27a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a27e:	1c45      	adds	r5, r0, #1
 800a280:	1ac7      	subs	r7, r0, r3
 800a282:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a286:	eb0a 0e03 	add.w	lr, sl, r3
 800a28a:	ac1a      	add	r4, sp, #104	; 0x68
 800a28c:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 800a290:	2200      	movs	r2, #0
 800a292:	4572      	cmp	r2, lr
 800a294:	dd0f      	ble.n	800a2b6 <__kernel_rem_pio2f+0x66>
 800a296:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 800a29a:	2400      	movs	r4, #0
 800a29c:	4554      	cmp	r4, sl
 800a29e:	dc26      	bgt.n	800a2ee <__kernel_rem_pio2f+0x9e>
 800a2a0:	9a01      	ldr	r2, [sp, #4]
 800a2a2:	9f02      	ldr	r7, [sp, #8]
 800a2a4:	eddf 7abe 	vldr	s15, [pc, #760]	; 800a5a0 <__kernel_rem_pio2f+0x350>
 800a2a8:	4422      	add	r2, r4
 800a2aa:	a91a      	add	r1, sp, #104	; 0x68
 800a2ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a2b0:	f04f 0c00 	mov.w	ip, #0
 800a2b4:	e015      	b.n	800a2e2 <__kernel_rem_pio2f+0x92>
 800a2b6:	42d7      	cmn	r7, r2
 800a2b8:	bf5d      	ittte	pl
 800a2ba:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 800a2be:	ee07 1a90 	vmovpl	s15, r1
 800a2c2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a2c6:	eef0 7a47 	vmovmi.f32	s15, s14
 800a2ca:	ece4 7a01 	vstmia	r4!, {s15}
 800a2ce:	3201      	adds	r2, #1
 800a2d0:	e7df      	b.n	800a292 <__kernel_rem_pio2f+0x42>
 800a2d2:	ecf7 6a01 	vldmia	r7!, {s13}
 800a2d6:	ed32 7a01 	vldmdb	r2!, {s14}
 800a2da:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a2de:	f10c 0c01 	add.w	ip, ip, #1
 800a2e2:	459c      	cmp	ip, r3
 800a2e4:	ddf5      	ble.n	800a2d2 <__kernel_rem_pio2f+0x82>
 800a2e6:	ecee 7a01 	vstmia	lr!, {s15}
 800a2ea:	3401      	adds	r4, #1
 800a2ec:	e7d6      	b.n	800a29c <__kernel_rem_pio2f+0x4c>
 800a2ee:	aa06      	add	r2, sp, #24
 800a2f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a2f4:	9204      	str	r2, [sp, #16]
 800a2f6:	eddf 8aa7 	vldr	s17, [pc, #668]	; 800a594 <__kernel_rem_pio2f+0x344>
 800a2fa:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 800a598 <__kernel_rem_pio2f+0x348>
 800a2fe:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 800a302:	9203      	str	r2, [sp, #12]
 800a304:	4657      	mov	r7, sl
 800a306:	aa56      	add	r2, sp, #344	; 0x158
 800a308:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 800a30c:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800a310:	f108 38ff 	add.w	r8, r8, #4294967295
 800a314:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 800a318:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800a31c:	aa56      	add	r2, sp, #344	; 0x158
 800a31e:	eb02 0008 	add.w	r0, r2, r8
 800a322:	384c      	subs	r0, #76	; 0x4c
 800a324:	2200      	movs	r2, #0
 800a326:	1abc      	subs	r4, r7, r2
 800a328:	2c00      	cmp	r4, #0
 800a32a:	dc4a      	bgt.n	800a3c2 <__kernel_rem_pio2f+0x172>
 800a32c:	4628      	mov	r0, r5
 800a32e:	9305      	str	r3, [sp, #20]
 800a330:	f000 fb52 	bl	800a9d8 <scalbnf>
 800a334:	eeb0 8a40 	vmov.f32	s16, s0
 800a338:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a33c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a340:	f000 fb08 	bl	800a954 <floorf>
 800a344:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a348:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a34c:	2d00      	cmp	r5, #0
 800a34e:	9b05      	ldr	r3, [sp, #20]
 800a350:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a354:	ee17 9a90 	vmov	r9, s15
 800a358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a35c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a360:	dd44      	ble.n	800a3ec <__kernel_rem_pio2f+0x19c>
 800a362:	1e78      	subs	r0, r7, #1
 800a364:	aa06      	add	r2, sp, #24
 800a366:	f1c5 0408 	rsb	r4, r5, #8
 800a36a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800a36e:	fa46 f204 	asr.w	r2, r6, r4
 800a372:	4491      	add	r9, r2
 800a374:	40a2      	lsls	r2, r4
 800a376:	1ab6      	subs	r6, r6, r2
 800a378:	aa06      	add	r2, sp, #24
 800a37a:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800a37e:	f1c5 0207 	rsb	r2, r5, #7
 800a382:	4116      	asrs	r6, r2
 800a384:	2e00      	cmp	r6, #0
 800a386:	dd40      	ble.n	800a40a <__kernel_rem_pio2f+0x1ba>
 800a388:	2400      	movs	r4, #0
 800a38a:	f109 0901 	add.w	r9, r9, #1
 800a38e:	4620      	mov	r0, r4
 800a390:	42a7      	cmp	r7, r4
 800a392:	dc75      	bgt.n	800a480 <__kernel_rem_pio2f+0x230>
 800a394:	2d00      	cmp	r5, #0
 800a396:	dd05      	ble.n	800a3a4 <__kernel_rem_pio2f+0x154>
 800a398:	2d01      	cmp	r5, #1
 800a39a:	f000 8086 	beq.w	800a4aa <__kernel_rem_pio2f+0x25a>
 800a39e:	2d02      	cmp	r5, #2
 800a3a0:	f000 808d 	beq.w	800a4be <__kernel_rem_pio2f+0x26e>
 800a3a4:	2e02      	cmp	r6, #2
 800a3a6:	d130      	bne.n	800a40a <__kernel_rem_pio2f+0x1ba>
 800a3a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a3ac:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a3b0:	b358      	cbz	r0, 800a40a <__kernel_rem_pio2f+0x1ba>
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	9305      	str	r3, [sp, #20]
 800a3b6:	f000 fb0f 	bl	800a9d8 <scalbnf>
 800a3ba:	9b05      	ldr	r3, [sp, #20]
 800a3bc:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a3c0:	e023      	b.n	800a40a <__kernel_rem_pio2f+0x1ba>
 800a3c2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a3c6:	ac06      	add	r4, sp, #24
 800a3c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3d0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a3d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a3d8:	ee10 1a10 	vmov	r1, s0
 800a3dc:	ed30 0a01 	vldmdb	r0!, {s0}
 800a3e0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800a3e4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a3e8:	3201      	adds	r2, #1
 800a3ea:	e79c      	b.n	800a326 <__kernel_rem_pio2f+0xd6>
 800a3ec:	d105      	bne.n	800a3fa <__kernel_rem_pio2f+0x1aa>
 800a3ee:	1e7a      	subs	r2, r7, #1
 800a3f0:	a906      	add	r1, sp, #24
 800a3f2:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800a3f6:	1236      	asrs	r6, r6, #8
 800a3f8:	e7c4      	b.n	800a384 <__kernel_rem_pio2f+0x134>
 800a3fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a3fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a406:	da39      	bge.n	800a47c <__kernel_rem_pio2f+0x22c>
 800a408:	2600      	movs	r6, #0
 800a40a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a412:	f040 808d 	bne.w	800a530 <__kernel_rem_pio2f+0x2e0>
 800a416:	1e7c      	subs	r4, r7, #1
 800a418:	4620      	mov	r0, r4
 800a41a:	2200      	movs	r2, #0
 800a41c:	4550      	cmp	r0, sl
 800a41e:	da55      	bge.n	800a4cc <__kernel_rem_pio2f+0x27c>
 800a420:	2a00      	cmp	r2, #0
 800a422:	d164      	bne.n	800a4ee <__kernel_rem_pio2f+0x29e>
 800a424:	2401      	movs	r4, #1
 800a426:	f06f 0003 	mvn.w	r0, #3
 800a42a:	fb00 f204 	mul.w	r2, r0, r4
 800a42e:	9904      	ldr	r1, [sp, #16]
 800a430:	588a      	ldr	r2, [r1, r2]
 800a432:	2a00      	cmp	r2, #0
 800a434:	d050      	beq.n	800a4d8 <__kernel_rem_pio2f+0x288>
 800a436:	aa56      	add	r2, sp, #344	; 0x158
 800a438:	4490      	add	r8, r2
 800a43a:	9a01      	ldr	r2, [sp, #4]
 800a43c:	a91a      	add	r1, sp, #104	; 0x68
 800a43e:	443a      	add	r2, r7
 800a440:	1c78      	adds	r0, r7, #1
 800a442:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 800a446:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a44a:	4427      	add	r7, r4
 800a44c:	42b8      	cmp	r0, r7
 800a44e:	f73f af5a 	bgt.w	800a306 <__kernel_rem_pio2f+0xb6>
 800a452:	9903      	ldr	r1, [sp, #12]
 800a454:	9e02      	ldr	r6, [sp, #8]
 800a456:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a45a:	9105      	str	r1, [sp, #20]
 800a45c:	ee07 1a90 	vmov	s15, r1
 800a460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a464:	2400      	movs	r4, #0
 800a466:	ece2 7a01 	vstmia	r2!, {s15}
 800a46a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a5a0 <__kernel_rem_pio2f+0x350>
 800a46e:	4696      	mov	lr, r2
 800a470:	429c      	cmp	r4, r3
 800a472:	dd33      	ble.n	800a4dc <__kernel_rem_pio2f+0x28c>
 800a474:	ece8 7a01 	vstmia	r8!, {s15}
 800a478:	3001      	adds	r0, #1
 800a47a:	e7e7      	b.n	800a44c <__kernel_rem_pio2f+0x1fc>
 800a47c:	2602      	movs	r6, #2
 800a47e:	e783      	b.n	800a388 <__kernel_rem_pio2f+0x138>
 800a480:	aa06      	add	r2, sp, #24
 800a482:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800a486:	b948      	cbnz	r0, 800a49c <__kernel_rem_pio2f+0x24c>
 800a488:	b12a      	cbz	r2, 800a496 <__kernel_rem_pio2f+0x246>
 800a48a:	a906      	add	r1, sp, #24
 800a48c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800a490:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800a494:	2201      	movs	r2, #1
 800a496:	3401      	adds	r4, #1
 800a498:	4610      	mov	r0, r2
 800a49a:	e779      	b.n	800a390 <__kernel_rem_pio2f+0x140>
 800a49c:	a906      	add	r1, sp, #24
 800a49e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800a4a2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	e7f5      	b.n	800a496 <__kernel_rem_pio2f+0x246>
 800a4aa:	1e7c      	subs	r4, r7, #1
 800a4ac:	aa06      	add	r2, sp, #24
 800a4ae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800a4b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4b6:	a906      	add	r1, sp, #24
 800a4b8:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800a4bc:	e772      	b.n	800a3a4 <__kernel_rem_pio2f+0x154>
 800a4be:	1e7c      	subs	r4, r7, #1
 800a4c0:	aa06      	add	r2, sp, #24
 800a4c2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800a4c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800a4ca:	e7f4      	b.n	800a4b6 <__kernel_rem_pio2f+0x266>
 800a4cc:	a906      	add	r1, sp, #24
 800a4ce:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a4d2:	3801      	subs	r0, #1
 800a4d4:	430a      	orrs	r2, r1
 800a4d6:	e7a1      	b.n	800a41c <__kernel_rem_pio2f+0x1cc>
 800a4d8:	3401      	adds	r4, #1
 800a4da:	e7a6      	b.n	800a42a <__kernel_rem_pio2f+0x1da>
 800a4dc:	ecf6 6a01 	vldmia	r6!, {s13}
 800a4e0:	ed3e 7a01 	vldmdb	lr!, {s14}
 800a4e4:	3401      	adds	r4, #1
 800a4e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a4ea:	e7c1      	b.n	800a470 <__kernel_rem_pio2f+0x220>
 800a4ec:	3c01      	subs	r4, #1
 800a4ee:	ab06      	add	r3, sp, #24
 800a4f0:	3d08      	subs	r5, #8
 800a4f2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0f8      	beq.n	800a4ec <__kernel_rem_pio2f+0x29c>
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a500:	f000 fa6a 	bl	800a9d8 <scalbnf>
 800a504:	00a3      	lsls	r3, r4, #2
 800a506:	aa42      	add	r2, sp, #264	; 0x108
 800a508:	3304      	adds	r3, #4
 800a50a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a594 <__kernel_rem_pio2f+0x344>
 800a50e:	18d0      	adds	r0, r2, r3
 800a510:	4622      	mov	r2, r4
 800a512:	2a00      	cmp	r2, #0
 800a514:	da46      	bge.n	800a5a4 <__kernel_rem_pio2f+0x354>
 800a516:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 800a51a:	2200      	movs	r2, #0
 800a51c:	1aa5      	subs	r5, r4, r2
 800a51e:	d460      	bmi.n	800a5e2 <__kernel_rem_pio2f+0x392>
 800a520:	a942      	add	r1, sp, #264	; 0x108
 800a522:	4f1e      	ldr	r7, [pc, #120]	; (800a59c <__kernel_rem_pio2f+0x34c>)
 800a524:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a5a0 <__kernel_rem_pio2f+0x350>
 800a528:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800a52c:	2000      	movs	r0, #0
 800a52e:	e050      	b.n	800a5d2 <__kernel_rem_pio2f+0x382>
 800a530:	4268      	negs	r0, r5
 800a532:	eeb0 0a48 	vmov.f32	s0, s16
 800a536:	f000 fa4f 	bl	800a9d8 <scalbnf>
 800a53a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800a598 <__kernel_rem_pio2f+0x348>
 800a53e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a546:	db19      	blt.n	800a57c <__kernel_rem_pio2f+0x32c>
 800a548:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a594 <__kernel_rem_pio2f+0x344>
 800a54c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a550:	aa06      	add	r2, sp, #24
 800a552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a556:	1c7c      	adds	r4, r7, #1
 800a558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a55c:	3508      	adds	r5, #8
 800a55e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a566:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a56a:	ee10 3a10 	vmov	r3, s0
 800a56e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800a572:	ee17 3a90 	vmov	r3, s15
 800a576:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a57a:	e7be      	b.n	800a4fa <__kernel_rem_pio2f+0x2aa>
 800a57c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a580:	aa06      	add	r2, sp, #24
 800a582:	ee10 3a10 	vmov	r3, s0
 800a586:	463c      	mov	r4, r7
 800a588:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800a58c:	e7b5      	b.n	800a4fa <__kernel_rem_pio2f+0x2aa>
 800a58e:	bf00      	nop
 800a590:	0800b124 	.word	0x0800b124
 800a594:	3b800000 	.word	0x3b800000
 800a598:	43800000 	.word	0x43800000
 800a59c:	0800b0f8 	.word	0x0800b0f8
 800a5a0:	00000000 	.word	0x00000000
 800a5a4:	a906      	add	r1, sp, #24
 800a5a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800a5aa:	9101      	str	r1, [sp, #4]
 800a5ac:	ee07 1a90 	vmov	s15, r1
 800a5b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5b4:	3a01      	subs	r2, #1
 800a5b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a5ba:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a5be:	ed60 7a01 	vstmdb	r0!, {s15}
 800a5c2:	e7a6      	b.n	800a512 <__kernel_rem_pio2f+0x2c2>
 800a5c4:	ecf7 6a01 	vldmia	r7!, {s13}
 800a5c8:	ecb5 7a01 	vldmia	r5!, {s14}
 800a5cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	4550      	cmp	r0, sl
 800a5d4:	dc01      	bgt.n	800a5da <__kernel_rem_pio2f+0x38a>
 800a5d6:	4290      	cmp	r0, r2
 800a5d8:	ddf4      	ble.n	800a5c4 <__kernel_rem_pio2f+0x374>
 800a5da:	ecee 7a01 	vstmia	lr!, {s15}
 800a5de:	3201      	adds	r2, #1
 800a5e0:	e79c      	b.n	800a51c <__kernel_rem_pio2f+0x2cc>
 800a5e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a5e4:	2a03      	cmp	r2, #3
 800a5e6:	d843      	bhi.n	800a670 <__kernel_rem_pio2f+0x420>
 800a5e8:	e8df f002 	tbb	[pc, r2]
 800a5ec:	021d1d37 	.word	0x021d1d37
 800a5f0:	aa2e      	add	r2, sp, #184	; 0xb8
 800a5f2:	4413      	add	r3, r2
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	dc55      	bgt.n	800a6a8 <__kernel_rem_pio2f+0x458>
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	4620      	mov	r0, r4
 800a600:	2801      	cmp	r0, #1
 800a602:	dc61      	bgt.n	800a6c8 <__kernel_rem_pio2f+0x478>
 800a604:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 800a5a0 <__kernel_rem_pio2f+0x350>
 800a608:	2c01      	cmp	r4, #1
 800a60a:	dc6d      	bgt.n	800a6e8 <__kernel_rem_pio2f+0x498>
 800a60c:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800a610:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800a614:	2e00      	cmp	r6, #0
 800a616:	d16d      	bne.n	800a6f4 <__kernel_rem_pio2f+0x4a4>
 800a618:	edcb 6a00 	vstr	s13, [fp]
 800a61c:	ed8b 7a01 	vstr	s14, [fp, #4]
 800a620:	edcb 7a02 	vstr	s15, [fp, #8]
 800a624:	e024      	b.n	800a670 <__kernel_rem_pio2f+0x420>
 800a626:	aa2e      	add	r2, sp, #184	; 0xb8
 800a628:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800a5a0 <__kernel_rem_pio2f+0x350>
 800a62c:	4413      	add	r3, r2
 800a62e:	4622      	mov	r2, r4
 800a630:	2a00      	cmp	r2, #0
 800a632:	da2a      	bge.n	800a68a <__kernel_rem_pio2f+0x43a>
 800a634:	b37e      	cbz	r6, 800a696 <__kernel_rem_pio2f+0x446>
 800a636:	eef1 7a47 	vneg.f32	s15, s14
 800a63a:	edcb 7a00 	vstr	s15, [fp]
 800a63e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800a642:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a646:	aa2f      	add	r2, sp, #188	; 0xbc
 800a648:	2301      	movs	r3, #1
 800a64a:	429c      	cmp	r4, r3
 800a64c:	da26      	bge.n	800a69c <__kernel_rem_pio2f+0x44c>
 800a64e:	b10e      	cbz	r6, 800a654 <__kernel_rem_pio2f+0x404>
 800a650:	eef1 7a67 	vneg.f32	s15, s15
 800a654:	edcb 7a01 	vstr	s15, [fp, #4]
 800a658:	e00a      	b.n	800a670 <__kernel_rem_pio2f+0x420>
 800a65a:	aa2e      	add	r2, sp, #184	; 0xb8
 800a65c:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 800a5a0 <__kernel_rem_pio2f+0x350>
 800a660:	4413      	add	r3, r2
 800a662:	2c00      	cmp	r4, #0
 800a664:	da0b      	bge.n	800a67e <__kernel_rem_pio2f+0x42e>
 800a666:	b10e      	cbz	r6, 800a66c <__kernel_rem_pio2f+0x41c>
 800a668:	eef1 7a67 	vneg.f32	s15, s15
 800a66c:	edcb 7a00 	vstr	s15, [fp]
 800a670:	f009 0007 	and.w	r0, r9, #7
 800a674:	b057      	add	sp, #348	; 0x15c
 800a676:	ecbd 8b04 	vpop	{d8-d9}
 800a67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67e:	ed33 7a01 	vldmdb	r3!, {s14}
 800a682:	3c01      	subs	r4, #1
 800a684:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a688:	e7eb      	b.n	800a662 <__kernel_rem_pio2f+0x412>
 800a68a:	ed73 7a01 	vldmdb	r3!, {s15}
 800a68e:	3a01      	subs	r2, #1
 800a690:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a694:	e7cc      	b.n	800a630 <__kernel_rem_pio2f+0x3e0>
 800a696:	eef0 7a47 	vmov.f32	s15, s14
 800a69a:	e7ce      	b.n	800a63a <__kernel_rem_pio2f+0x3ea>
 800a69c:	ecb2 7a01 	vldmia	r2!, {s14}
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6a6:	e7d0      	b.n	800a64a <__kernel_rem_pio2f+0x3fa>
 800a6a8:	ed52 6a01 	vldr	s13, [r2, #-4]
 800a6ac:	ed52 7a02 	vldr	s15, [r2, #-8]
 800a6b0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a6b4:	3801      	subs	r0, #1
 800a6b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6be:	ed62 7a01 	vstmdb	r2!, {s15}
 800a6c2:	ed02 7a01 	vstr	s14, [r2, #-4]
 800a6c6:	e797      	b.n	800a5f8 <__kernel_rem_pio2f+0x3a8>
 800a6c8:	ed52 6a01 	vldr	s13, [r2, #-4]
 800a6cc:	ed52 7a02 	vldr	s15, [r2, #-8]
 800a6d0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a6d4:	3801      	subs	r0, #1
 800a6d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6de:	ed62 7a01 	vstmdb	r2!, {s15}
 800a6e2:	ed02 7a01 	vstr	s14, [r2, #-4]
 800a6e6:	e78b      	b.n	800a600 <__kernel_rem_pio2f+0x3b0>
 800a6e8:	ed33 7a01 	vldmdb	r3!, {s14}
 800a6ec:	3c01      	subs	r4, #1
 800a6ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6f2:	e789      	b.n	800a608 <__kernel_rem_pio2f+0x3b8>
 800a6f4:	eef1 6a66 	vneg.f32	s13, s13
 800a6f8:	eeb1 7a47 	vneg.f32	s14, s14
 800a6fc:	edcb 6a00 	vstr	s13, [fp]
 800a700:	ed8b 7a01 	vstr	s14, [fp, #4]
 800a704:	eef1 7a67 	vneg.f32	s15, s15
 800a708:	e78a      	b.n	800a620 <__kernel_rem_pio2f+0x3d0>
 800a70a:	bf00      	nop

0800a70c <__kernel_sinf>:
 800a70c:	ee10 3a10 	vmov	r3, s0
 800a710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a714:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a718:	da04      	bge.n	800a724 <__kernel_sinf+0x18>
 800a71a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a71e:	ee17 3a90 	vmov	r3, s15
 800a722:	b35b      	cbz	r3, 800a77c <__kernel_sinf+0x70>
 800a724:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a728:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a780 <__kernel_sinf+0x74>
 800a72c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a784 <__kernel_sinf+0x78>
 800a730:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a734:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a788 <__kernel_sinf+0x7c>
 800a738:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a73c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a78c <__kernel_sinf+0x80>
 800a740:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a744:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a790 <__kernel_sinf+0x84>
 800a748:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a74c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a750:	b930      	cbnz	r0, 800a760 <__kernel_sinf+0x54>
 800a752:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a794 <__kernel_sinf+0x88>
 800a756:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a75a:	eea6 0a86 	vfma.f32	s0, s13, s12
 800a75e:	4770      	bx	lr
 800a760:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a764:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a768:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a76c:	eed7 0a27 	vfnms.f32	s1, s14, s15
 800a770:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a798 <__kernel_sinf+0x8c>
 800a774:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a778:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	2f2ec9d3 	.word	0x2f2ec9d3
 800a784:	b2d72f34 	.word	0xb2d72f34
 800a788:	3638ef1b 	.word	0x3638ef1b
 800a78c:	b9500d01 	.word	0xb9500d01
 800a790:	3c088889 	.word	0x3c088889
 800a794:	be2aaaab 	.word	0xbe2aaaab
 800a798:	3e2aaaab 	.word	0x3e2aaaab

0800a79c <matherr>:
 800a79c:	2000      	movs	r0, #0
 800a79e:	4770      	bx	lr

0800a7a0 <atanf>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	ee10 5a10 	vmov	r5, s0
 800a7a6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a7aa:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a7ae:	eef0 7a40 	vmov.f32	s15, s0
 800a7b2:	db10      	blt.n	800a7d6 <atanf+0x36>
 800a7b4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a7b8:	dd04      	ble.n	800a7c4 <atanf+0x24>
 800a7ba:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a7be:	eeb0 0a67 	vmov.f32	s0, s15
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
 800a7c4:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800a8f8 <atanf+0x158>
 800a7c8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800a8fc <atanf+0x15c>
 800a7cc:	2d00      	cmp	r5, #0
 800a7ce:	bfc8      	it	gt
 800a7d0:	eef0 7a47 	vmovgt.f32	s15, s14
 800a7d4:	e7f3      	b.n	800a7be <atanf+0x1e>
 800a7d6:	4b4a      	ldr	r3, [pc, #296]	; (800a900 <atanf+0x160>)
 800a7d8:	429c      	cmp	r4, r3
 800a7da:	dc10      	bgt.n	800a7fe <atanf+0x5e>
 800a7dc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a7e0:	da0a      	bge.n	800a7f8 <atanf+0x58>
 800a7e2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a904 <atanf+0x164>
 800a7e6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a7ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ee:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f6:	dce2      	bgt.n	800a7be <atanf+0x1e>
 800a7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fc:	e013      	b.n	800a826 <atanf+0x86>
 800a7fe:	f000 f8a1 	bl	800a944 <fabsf>
 800a802:	4b41      	ldr	r3, [pc, #260]	; (800a908 <atanf+0x168>)
 800a804:	429c      	cmp	r4, r3
 800a806:	dc4d      	bgt.n	800a8a4 <atanf+0x104>
 800a808:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a80c:	429c      	cmp	r4, r3
 800a80e:	dc3f      	bgt.n	800a890 <atanf+0xf0>
 800a810:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a814:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a818:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a81c:	2300      	movs	r3, #0
 800a81e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a822:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a826:	1c5a      	adds	r2, r3, #1
 800a828:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a82c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a90c <atanf+0x16c>
 800a830:	eddf 5a37 	vldr	s11, [pc, #220]	; 800a910 <atanf+0x170>
 800a834:	ed9f 5a37 	vldr	s10, [pc, #220]	; 800a914 <atanf+0x174>
 800a838:	ee26 7a06 	vmul.f32	s14, s12, s12
 800a83c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a840:	eddf 6a35 	vldr	s13, [pc, #212]	; 800a918 <atanf+0x178>
 800a844:	eee7 6a25 	vfma.f32	s13, s14, s11
 800a848:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a91c <atanf+0x17c>
 800a84c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a850:	eddf 6a33 	vldr	s13, [pc, #204]	; 800a920 <atanf+0x180>
 800a854:	eee7 6a25 	vfma.f32	s13, s14, s11
 800a858:	eddf 5a32 	vldr	s11, [pc, #200]	; 800a924 <atanf+0x184>
 800a85c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a860:	eddf 6a31 	vldr	s13, [pc, #196]	; 800a928 <atanf+0x188>
 800a864:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a868:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a92c <atanf+0x18c>
 800a86c:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a870:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 800a930 <atanf+0x190>
 800a874:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a878:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800a934 <atanf+0x194>
 800a87c:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a880:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a884:	ee05 7a86 	vmla.f32	s14, s11, s12
 800a888:	d121      	bne.n	800a8ce <atanf+0x12e>
 800a88a:	eee7 7ac7 	vfms.f32	s15, s15, s14
 800a88e:	e796      	b.n	800a7be <atanf+0x1e>
 800a890:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a894:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a898:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a89c:	2301      	movs	r3, #1
 800a89e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a8a2:	e7c0      	b.n	800a826 <atanf+0x86>
 800a8a4:	4b24      	ldr	r3, [pc, #144]	; (800a938 <atanf+0x198>)
 800a8a6:	429c      	cmp	r4, r3
 800a8a8:	dc0b      	bgt.n	800a8c2 <atanf+0x122>
 800a8aa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a8ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8b2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a8bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8c0:	e7b1      	b.n	800a826 <atanf+0x86>
 800a8c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a8c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e7ab      	b.n	800a826 <atanf+0x86>
 800a8ce:	4a1b      	ldr	r2, [pc, #108]	; (800a93c <atanf+0x19c>)
 800a8d0:	491b      	ldr	r1, [pc, #108]	; (800a940 <atanf+0x1a0>)
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	441a      	add	r2, r3
 800a8d6:	440b      	add	r3, r1
 800a8d8:	edd3 6a00 	vldr	s13, [r3]
 800a8dc:	eed7 6a87 	vfnms.f32	s13, s15, s14
 800a8e0:	2d00      	cmp	r5, #0
 800a8e2:	ed92 7a00 	vldr	s14, [r2]
 800a8e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a8ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8ee:	bfb8      	it	lt
 800a8f0:	eef1 7a67 	vneglt.f32	s15, s15
 800a8f4:	e763      	b.n	800a7be <atanf+0x1e>
 800a8f6:	bf00      	nop
 800a8f8:	bfc90fdb 	.word	0xbfc90fdb
 800a8fc:	3fc90fdb 	.word	0x3fc90fdb
 800a900:	3edfffff 	.word	0x3edfffff
 800a904:	7149f2ca 	.word	0x7149f2ca
 800a908:	3f97ffff 	.word	0x3f97ffff
 800a90c:	3c8569d7 	.word	0x3c8569d7
 800a910:	3d4bda59 	.word	0x3d4bda59
 800a914:	bd6ef16b 	.word	0xbd6ef16b
 800a918:	3d886b35 	.word	0x3d886b35
 800a91c:	3dba2e6e 	.word	0x3dba2e6e
 800a920:	3e124925 	.word	0x3e124925
 800a924:	3eaaaaab 	.word	0x3eaaaaab
 800a928:	bd15a221 	.word	0xbd15a221
 800a92c:	bd9d8795 	.word	0xbd9d8795
 800a930:	bde38e38 	.word	0xbde38e38
 800a934:	be4ccccd 	.word	0xbe4ccccd
 800a938:	401bffff 	.word	0x401bffff
 800a93c:	0800b130 	.word	0x0800b130
 800a940:	0800b140 	.word	0x0800b140

0800a944 <fabsf>:
 800a944:	ee10 3a10 	vmov	r3, s0
 800a948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a94c:	ee00 3a10 	vmov	s0, r3
 800a950:	4770      	bx	lr
	...

0800a954 <floorf>:
 800a954:	ee10 3a10 	vmov	r3, s0
 800a958:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a95c:	0dca      	lsrs	r2, r1, #23
 800a95e:	3a7f      	subs	r2, #127	; 0x7f
 800a960:	2a16      	cmp	r2, #22
 800a962:	dc2a      	bgt.n	800a9ba <floorf+0x66>
 800a964:	2a00      	cmp	r2, #0
 800a966:	da11      	bge.n	800a98c <floorf+0x38>
 800a968:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a9cc <floorf+0x78>
 800a96c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a970:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a978:	dd05      	ble.n	800a986 <floorf+0x32>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	da23      	bge.n	800a9c6 <floorf+0x72>
 800a97e:	4a14      	ldr	r2, [pc, #80]	; (800a9d0 <floorf+0x7c>)
 800a980:	2900      	cmp	r1, #0
 800a982:	bf18      	it	ne
 800a984:	4613      	movne	r3, r2
 800a986:	ee00 3a10 	vmov	s0, r3
 800a98a:	4770      	bx	lr
 800a98c:	4911      	ldr	r1, [pc, #68]	; (800a9d4 <floorf+0x80>)
 800a98e:	4111      	asrs	r1, r2
 800a990:	420b      	tst	r3, r1
 800a992:	d0fa      	beq.n	800a98a <floorf+0x36>
 800a994:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a9cc <floorf+0x78>
 800a998:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a99c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a4:	ddef      	ble.n	800a986 <floorf+0x32>
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	bfbe      	ittt	lt
 800a9aa:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a9ae:	fa40 f202 	asrlt.w	r2, r0, r2
 800a9b2:	189b      	addlt	r3, r3, r2
 800a9b4:	ea23 0301 	bic.w	r3, r3, r1
 800a9b8:	e7e5      	b.n	800a986 <floorf+0x32>
 800a9ba:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a9be:	d3e4      	bcc.n	800a98a <floorf+0x36>
 800a9c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a9c4:	4770      	bx	lr
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e7dd      	b.n	800a986 <floorf+0x32>
 800a9ca:	bf00      	nop
 800a9cc:	7149f2ca 	.word	0x7149f2ca
 800a9d0:	bf800000 	.word	0xbf800000
 800a9d4:	007fffff 	.word	0x007fffff

0800a9d8 <scalbnf>:
 800a9d8:	b508      	push	{r3, lr}
 800a9da:	ee10 2a10 	vmov	r2, s0
 800a9de:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a9e2:	ed2d 8b02 	vpush	{d8}
 800a9e6:	eef0 0a40 	vmov.f32	s1, s0
 800a9ea:	d004      	beq.n	800a9f6 <scalbnf+0x1e>
 800a9ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a9f0:	d306      	bcc.n	800aa00 <scalbnf+0x28>
 800a9f2:	ee70 0a00 	vadd.f32	s1, s0, s0
 800a9f6:	ecbd 8b02 	vpop	{d8}
 800a9fa:	eeb0 0a60 	vmov.f32	s0, s1
 800a9fe:	bd08      	pop	{r3, pc}
 800aa00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa04:	d21c      	bcs.n	800aa40 <scalbnf+0x68>
 800aa06:	4b1f      	ldr	r3, [pc, #124]	; (800aa84 <scalbnf+0xac>)
 800aa08:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800aa88 <scalbnf+0xb0>
 800aa0c:	4298      	cmp	r0, r3
 800aa0e:	ee60 0a27 	vmul.f32	s1, s0, s15
 800aa12:	db10      	blt.n	800aa36 <scalbnf+0x5e>
 800aa14:	ee10 2a90 	vmov	r2, s1
 800aa18:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800aa1c:	3b19      	subs	r3, #25
 800aa1e:	4403      	add	r3, r0
 800aa20:	2bfe      	cmp	r3, #254	; 0xfe
 800aa22:	dd0f      	ble.n	800aa44 <scalbnf+0x6c>
 800aa24:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800aa8c <scalbnf+0xb4>
 800aa28:	eeb0 0a48 	vmov.f32	s0, s16
 800aa2c:	f000 f834 	bl	800aa98 <copysignf>
 800aa30:	ee60 0a08 	vmul.f32	s1, s0, s16
 800aa34:	e7df      	b.n	800a9f6 <scalbnf+0x1e>
 800aa36:	eddf 7a16 	vldr	s15, [pc, #88]	; 800aa90 <scalbnf+0xb8>
 800aa3a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800aa3e:	e7da      	b.n	800a9f6 <scalbnf+0x1e>
 800aa40:	0ddb      	lsrs	r3, r3, #23
 800aa42:	e7ec      	b.n	800aa1e <scalbnf+0x46>
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	dd06      	ble.n	800aa56 <scalbnf+0x7e>
 800aa48:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800aa4c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800aa50:	ee00 3a90 	vmov	s1, r3
 800aa54:	e7cf      	b.n	800a9f6 <scalbnf+0x1e>
 800aa56:	f113 0f16 	cmn.w	r3, #22
 800aa5a:	da06      	bge.n	800aa6a <scalbnf+0x92>
 800aa5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa60:	4298      	cmp	r0, r3
 800aa62:	dcdf      	bgt.n	800aa24 <scalbnf+0x4c>
 800aa64:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800aa90 <scalbnf+0xb8>
 800aa68:	e7de      	b.n	800aa28 <scalbnf+0x50>
 800aa6a:	3319      	adds	r3, #25
 800aa6c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800aa70:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800aa74:	eddf 7a07 	vldr	s15, [pc, #28]	; 800aa94 <scalbnf+0xbc>
 800aa78:	ee07 3a10 	vmov	s14, r3
 800aa7c:	ee67 0a27 	vmul.f32	s1, s14, s15
 800aa80:	e7b9      	b.n	800a9f6 <scalbnf+0x1e>
 800aa82:	bf00      	nop
 800aa84:	ffff3cb0 	.word	0xffff3cb0
 800aa88:	4c000000 	.word	0x4c000000
 800aa8c:	7149f2ca 	.word	0x7149f2ca
 800aa90:	0da24260 	.word	0x0da24260
 800aa94:	33000000 	.word	0x33000000

0800aa98 <copysignf>:
 800aa98:	ee10 3a10 	vmov	r3, s0
 800aa9c:	ee10 2a90 	vmov	r2, s1
 800aaa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaa4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	ee00 3a10 	vmov	s0, r3
 800aaae:	4770      	bx	lr

0800aab0 <_init>:
 800aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab2:	bf00      	nop
 800aab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab6:	bc08      	pop	{r3}
 800aab8:	469e      	mov	lr, r3
 800aaba:	4770      	bx	lr

0800aabc <_fini>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	bf00      	nop
 800aac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac2:	bc08      	pop	{r3}
 800aac4:	469e      	mov	lr, r3
 800aac6:	4770      	bx	lr
